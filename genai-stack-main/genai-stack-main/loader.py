import os
import requests
from dotenv import load_dotenv
from langchain.graphs import Neo4jGraph
import streamlit as st
from streamlit.logger import get_logger
from chains import load_embedding_model
from utils import create_constraints, create_vector_index
from PIL import Image
import json

load_dotenv(".env")
url = os.getenv("NEO4J_URI")
username = os.getenv("NEO4J_USERNAME")
password = os.getenv("NEO4J_PASSWORD")
ollama_base_url = os.getenv("OLLAMA_BASE_URL")
embedding_model_name = os.getenv("EMBEDDING_MODEL")
# Remapping for Langchain Neo4j integration
os.environ["NEO4J_URL"] = url

logger = get_logger(__name__)

embeddings, dimension = load_embedding_model(
    embedding_model_name, config={"ollama_base_url": ollama_base_url}, logger=logger
)

# if Neo4j is local, you can go to http://localhost:7474/ to browse the database
neo4j_graph = Neo4jGraph(url=url, username=username, password=password)

create_constraints(neo4j_graph)
create_vector_index(neo4j_graph, dimension)

def insert_data(data_list: list) -> None:
    for data in data_list:
        file_name = data["file"]
        file_path = data["path"]
        code_dict = data["code"]
        depth_rank = data["depth_rank"]
        #embeddings
        for code_key, code_value in code_dict.items():
            code_text = code_key + "\n" + code_value
            code_dict[code_key] = embeddings.embed_query(code_text)

        # Create a File node with properties and embeddings
        neo4j_graph.query(
            """
            MERGE (f:File {name: $file_name, path: $file_path, depth_rank: $depth_rank})
            """,
            {
                "file_name": file_name,
                "file_path": file_path,
                "depth_rank": depth_rank
            }
        )

        # Create Code nodes and relationships for each key-value pair in code_dict
        for code_key, code_value in code_dict.items():
            # Create a Code node with properties
            neo4j_graph.query(
                """
                MERGE (c:Code {name: $code_key, content: $code_value})
                """,
                {
                    "code_key": code_key,
                    "code_value": code_value
                }
            )

            # Create a CONTAINS relationship between File and Code
            neo4j_graph.query(
                """
                MATCH (f:File {name: $file_name})
                MATCH (c:Code {name: $code_key})
                MERGE (f)-[:CONTAINS]->(c)
                """,
                {
                    "file_name": file_name,
                    "code_key": code_key
                }
            )

code=[
    {
        "file": "ClientStream.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/src/ClientStream.ts",
        "code": {
            "payload": "\t\tconst payload = this.ddp.call(method, params);\n\t\tconst payload = this.ddp.call(method, params);\n\t\treturn Object.assign(\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis.apply({\n\t\t\t\t\tpayload,\n\t\t\t\t\toptions,\n\t\t\t\t\tcallback: (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {"
        },
        "depth_rank": 5
    },
    {
        "file": "RocketchatSDKLegacy.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/src/legacy/RocketchatSDKLegacy.ts",
        "code": {
            "self": "\t\tconst self = this;\n\t\tconst self = this;\n\t\treturn {\n\t\t\tcreate(username: string): Promise<Serialized<OperationResult<'POST', '/v1/im.create'>>> {\n\t\t\t\treturn self.rest.post('/v1/im.create', { username });"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatClientImpl.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/src/livechat/LivechatClientImpl.ts",
        "code": {
            "result": "\t\tconst result = await this.rest.get('/v1/livechat/room', { ...params, token: this.token });\n\t\tconst result = await this.rest.get('/v1/livechat/room', { ...params, token: this.token });",
            "isRoomObject": "\t\tfunction isRoomObject(\n\t\tfunction isRoomObject(\n\t\t\troom: Serialized<IOmnichannelRoom> | { room: Serialized<IOmnichannelRoom> },",
            "rest": "\t\tconst subscriptions = Array.from(this.client.subscriptions.keys());\n\t\tconst subscriptions = Array.from(this.client.subscriptions.keys());\n\t\treturn Promise.all(subscriptions.map((subscription) => this.client.unsubscribe(subscription)));\n\t}\n\n\tstatic create(url: string, retryOptions = { retryCount: 3, retryTime: 10000 }): LivechatClientImpl {\n\t\t// TODO: Decide what to do with the EJSON objects\n\t\tconst ddp = new DDPDispatcher();\n\t\tconst ddp = new DDPDispatcher();\n\n\t\tconst connection = ConnectionImpl.create(url, WebSocket, ddp, retryOptions);\n\t\tconst connection = ConnectionImpl.create(url, WebSocket, ddp, retryOptions);\n\n\t\tconst stream = new ClientStreamImpl(ddp, ddp);\n\t\tconst stream = new ClientStreamImpl(ddp, ddp);\n\n\t\tconst account = new AccountImpl(stream);\n\t\tconst account = new AccountImpl(stream);\n\n\t\tconst timeoutControl = TimeoutControl.create(ddp, connection);\n\t\tconst timeoutControl = TimeoutControl.create(ddp, connection);\n\n\t\tconst rest = new RestClient({ baseUrl: url.replace(/^ws/, 'http') });\n\t\tconst rest = new RestClient({ baseUrl: url.replace(/^ws/, 'http') });"
        },
        "depth_rank": 6
    },
    {
        "file": "MinimalDDPClient.spec.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/MinimalDDPClient.spec.ts",
        "code": {
            "client": "\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.once('message', handlerCallback);\n\t\tclient.once('send', senderCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ping',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ping',\n\t\t});\n\n\t\texpect(senderCallback).toBeCalledTimes(1);\n\t\texpect(senderCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t});\n\t});\n\n\tit('should reply with pong if id is provided', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.on('message', handlerCallback);\n\t\tclient.on('send', senderCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ping',\n\t\t\t\tid: '123',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ping',\n\t\t\tid: '123',\n\t\t});\n\n\t\texpect(senderCallback).toBeCalledTimes(1);\n\t\texpect(senderCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t\tid: '123',\n\t\t});\n\t});\n\n\tit('should emit \"pong\" event if pong is received', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.once('pong', handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'pong',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t});\n\t});\n});\n\ndescribe('subscription mechanism', () => {\n\tit('should emit \"ready\" event after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\t});\n\n\tit('should emit \"nosub\" event if something goes wrong', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'nosub',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'nosub',\n\t\t\tid,\n\t\t});\n\t});\n\n\tit('should emit \"nosub\" event after unsubscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst nosubCallback = jest.fn();\n\t\tconst nosubCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient();\n\t\tconst client = new MinimalDDPClient();\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\t\tclient.onNoSub(id, nosubCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.unsubscribe(id);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'nosub',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(nosubCallback).toBeCalledTimes(1);\n\t\texpect(nosubCallback).toBeCalledWith({\n\t\t\tmsg: 'nosub',\n\t\t\tid,\n\t\t});\n\t});\n});\n\ndescribe('subscription added/changed/removed mechanism', () => {\n\tit('should receive \"added\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'added',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t\tfields: {\n\t\t\t\t\ttest: 'test',\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'added',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t\tfields: {\n\t\t\t\ttest: 'test',\n\t\t\t},\n\t\t});\n\t});\n\n\tit('should receive \"changed\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'changed',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t\tfields: {\n\t\t\t\t\ttest: 'test',\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'changed',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t\tfields: {\n\t\t\t\ttest: 'test',\n\t\t\t},\n\t\t});\n\t});\n\n\tit('should receive \"removed\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'removed',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'removed',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t});\n\t});\n});\n\ndescribe('subscription updated mechanism', () => {\n\tit('should receive \"updated\" events after subscribe and before ready', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst updatedCallback = jest.fn();\n\t\tconst updatedCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection(id, handlerCallback);\n\t\tclient.onPublish(id, readyCallback);\n\t\tclient.onUpdate(id, updatedCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'updated',\n\t\t\t\tmethods: [id],\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledTimes(0);\n\t\texpect(updatedCallback).toBeCalledTimes(1);\n\t\texpect(updatedCallback).toBeCalledWith({\n\t\t\tmsg: 'updated',\n\t\t\tmethods: [id],\n\t\t});\n\t});\n});\n\ndescribe('method mechanism', () => {\n\tit('should emit \"result\" event after method call', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst { id } = client.call('test');\n\t\tconst { id } = client.call('test');"
        },
        "depth_rank": 5
    },
    {
        "file": "DDPDispatcher.spec.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/DDPDispatcher.spec.ts",
        "code": {
            "test2": "const ddp = new MinimalDDPClient();\nconst ddp = new MinimalDDPClient();\n\nit('should create a block properly', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst test = ddp.call('test');\n\tconst test = ddp.call('test');\n\n\tddpDispatcher.wait(test);\n\texpect(ddpDispatcher.queue).toEqual([\n\t\t{\n\t\t\twait: true,\n\t\t\titems: [test],\n\t\t},\n\t]);\n});\n\nit('should push an item to the block properly', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst test1 = ddp.call('test1');\n\tconst test1 = ddp.call('test1');\n\tconst test2 = ddp.call('test2');\n\tconst test2 = ddp.call('test2');\n\tddpDispatcher.wait(test1);\n\tddpDispatcher.dispatch(test2);\n\texpect(ddpDispatcher.queue).toEqual([\n\t\t{\n\t\t\twait: true,\n\t\t\titems: [test1],\n\t\t},\n\t\t{\n\t\t\twait: false,\n\t\t\titems: [test2],\n\t\t},\n\t]);\n});\n\nit('should not keep in the queue if the method doesnt wait', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst blockToRemove = ddp.call('test1');\n\tconst blockToRemove = ddp.call('test1');\n\tconst test2 = ddp.call('test2');\n\tconst test2 = ddp.call('test2');\n\n\tddpDispatcher.dispatch(blockToRemove, { wait: true });",
            "block3": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\tddpDispatcher.on('send', fn);\n\n\tddpDispatcher.dispatch(ddp.call('test1'));\n\n\texpect(fn).toBeCalledTimes(1);\n});\n\nit('should send the next blocks if the outstanding block was completed', () => {\n\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\tddpDispatcher.on('send', fn);\n\n\tconst block1 = ddp.call('block1');\n\tconst block1 = ddp.call('block1');\n\n\tconst block2 = ddp.call('block2');\n\tconst block2 = ddp.call('block2');\n\n\tconst block3 = ddp.call('test2');\n\tconst block3 = ddp.call('test2');\n\n\tddpDispatcher.dispatch(block1, { wait: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "ClientStream.spec.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/ClientStream.spec.ts",
        "code": {
            "call": "\t\tconst callback = jest.fn();\n\t\tconst callback = jest.fn();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\n\t\tconst id = client.call('test', callback);\n\t\tconst id = client.call('test', callback);\n\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\tresult: ['arg1', 'arg2'],\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\t\texpect(callback).toBeCalledTimes(1);\n\t\texpect(callback).toBeCalledWith(null, ['arg1', 'arg2']);\n\t});\n\n\tit('should be able to handle errors thrown by the method call', async () => {\n\t\tconst callback = jest.fn();\n\t\tconst callback = jest.fn();\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst id = client.call('test', callback);\n\t\tconst id = client.call('test', callback);\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\terror: {\n\t\t\t\t\terror: 400,\n\t\t\t\t\treason: 'Bad Request',\n\t\t\t\t\tmessage: 'Bad Request [400]',\n\t\t\t\t\terrorType: 'Meteor.Error',\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\t\texpect(callback).toBeCalledTimes(1);\n\t\texpect(callback).toBeCalledWith({\n\t\t\terror: 400,\n\t\t\treason: 'Bad Request',\n\t\t\tmessage: 'Bad Request [400]',\n\t\t\terrorType: 'Meteor.Error',\n\t\t});\n\t});\n\n\tit('should be able to callAsync a method and receive a result', async () => {\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst promise = client.callAsync('test');\n\t\tconst promise = client.callAsync('test');\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\tresult: ['arg1', 'arg2'],\n\t\t\t\tid: promise.id,\n\t\t\t}),\n\t\t);\n\n\t\tconst result = await promise;\n\t\tconst result = await promise;\n\t\texpect(result).toEqual(['arg1', 'arg2']);\n\t});\n\n\tit('should be able to callAsync a method and receive an error', async () => {\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst promise = client.callAsync('test');\n\t\tconst promise = client.callAsync('test');\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\terror: {\n\t\t\t\t\terror: 400,\n\t\t\t\t\treason: 'Bad Request',\n\t\t\t\t\tmessage: 'Bad Request [400]',\n\t\t\t\t\terrorType: 'Meteor.Error',\n\t\t\t\t},\n\t\t\t\tid: promise.id,\n\t\t\t}),\n\t\t);\n\n\t\tawait expect(promise).rejects.toEqual({\n\t\t\terror: 400,\n\t\t\treason: 'Bad Request',\n\t\t\tmessage: 'Bad Request [400]',\n\t\t\terrorType: 'Meteor.Error',\n\t\t});\n\t});\n\n\tit('should only call the further methods after the previous one has been resolved respecting the wait option', async () => {\n\t\tconst fn = jest.fn();\n\t\tconst fn = jest.fn();\n\t\tconst dispatch = jest.fn();\n\t\tconst dispatch = jest.fn();\n\n\t\tconst ws = new DDPDispatcher();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\n\t\tclient.dispatcher.on('send', dispatch);\n\n\t\tconst call = client.callWithOptions('wait 1', { wait: true }, fn);\n\t\tconst call = client.callWithOptions('wait 1', { wait: true }, fn);",
            "call2": "\t\tconst callNoWait = client.call('no wait', fn);\n\t\tconst callNoWait = client.call('no wait', fn);\n\n\t\texpect(client.dispatcher.queue.length).toBe(2);\n\n\t\tconst call2 = client.callWithOptions('wait 2', { wait: true }, fn);\n\t\tconst call2 = client.callWithOptions('wait 2', { wait: true }, fn);"
        },
        "depth_rank": 5
    },
    {
        "file": "wrapOnceEventIntoPromise.spec.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/wrapOnceEventIntoPromise.spec.ts",
        "code": {
            "promise": "\tconst emitter = new Emitter();\n\tconst emitter = new Emitter();\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\n\temitter.emit('test', 'test');\n\n\tconst result = await promise;\n\tconst result = await promise;\n\n\texpect(result).toBe('test');\n});\n\nit('should reject', async () => {\n\tconst emitter = new Emitter();\n\tconst emitter = new Emitter();\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\n\temitter.emit('test', { error: 'test' });"
        },
        "depth_rank": 5
    },
    {
        "file": "Connection.spec.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/Connection.spec.ts",
        "code": {
            "connection": "\tconst client = new MinimalDDPClient();\n\tconst client = new MinimalDDPClient();\n\tconst connection = ConnectionImpl.create('ws://localhost:1234', globalThis.WebSocket, client, { retryCount: 0, retryTime: 0 });\n\tconst connection = ConnectionImpl.create('ws://localhost:1234', globalThis.WebSocket, client, { retryCount: 0, retryTime: 0 });"
        },
        "depth_rank": 5
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/ee/packages/ddp-client/__tests__/helpers/index.ts",
        "code": {
            "acceptConnection": "const acceptConnection = async (server: WS) => {\nconst acceptConnection = async (server: WS) => {\n\tawait server.nextMessage.then(async (message) => {\n\t\tawait expect(message).toBe('{\"msg\":\"connect\",\"version\":\"1\",\"support\":[\"1\",\"pre2\",\"pre1\"]}');",
            "suggestedVersion": "\tconst suggestedVersion = '1';\n\tconst suggestedVersion = '1';\n\n\treturn Promise.all([\n\t\tserver.nextMessage.then((message) => {\n\t\t\texpect(message).toBe('{\"msg\":\"connect\",\"version\":\"1\",\"support\":[\"1\",\"pre2\",\"pre1\"]}');"
        },
        "depth_rank": 6
    },
    {
        "file": "ChatTranscript.stories.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/ChatTranscript.stories.js",
        "code": {
            "ChatTranscriptPDFTemplate": "const data = new ChatTranscript_1.ChatTranscript().parseTemplateData(ChatTranscript_fixtures_1.exampleData);\nconst data = new ChatTranscript_1.ChatTranscript().parseTemplateData(ChatTranscript_fixtures_1.exampleData);\nconst ChatTranscriptPDFTemplate = () => ((0, jsx_runtime_1.jsx)(renderer_1.PDFViewer, { width: '100%', height: '800', children: (0, jsx_runtime_1.jsx)(_1.ChatTranscriptPDF, { ...data }) }));\nconst ChatTranscriptPDFTemplate = () => ((0, jsx_runtime_1.jsx)(renderer_1.PDFViewer, { width: '100%', height: '800', children: (0, jsx_runtime_1.jsx)(_1.ChatTranscriptPDF, { ...data }) }));"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/index.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatTranscript.stories.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/ChatTranscript.stories.d.ts",
        "code": {
            "const": "declare const _default: ComponentMeta<({ header, messages, t }: ChatTranscriptData) => JSX.Element>;\ndeclare const _default: ComponentMeta<({ header, messages, t }: ChatTranscriptData) => JSX.Element>;"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/index.js",
        "code": {
            "Markup": "const Markup = ({ tokens }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: tokens.map((child, index) => {\nconst Markup = ({ tokens }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: tokens.map((child, index) => {\n        switch (child.type) {\n            case 'PARAGRAPH':\n                return (0, jsx_runtime_1.jsx)(ParagraphBlock_1.default, { items: child.value }, index);"
        },
        "depth_rank": 8
    },
    {
        "file": "BoldSpan.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/BoldSpan.js",
        "code": {
            "BoldSpan": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    bold: {\n        fontWeight: 700,\n    },\n});\nconst BoldSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst BoldSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'ITALIC' || child.type === 'STRIKE') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.bold, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 9
    },
    {
        "file": "ItalicSpan.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/ItalicSpan.js",
        "code": {
            "ItalicSpan": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    italic: {\n        fontStyle: 'italic',\n    },\n});\nconst ItalicSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst ItalicSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'STRIKE' || child.type === 'BOLD') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.italic, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 9
    },
    {
        "file": "StrikeSpan.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/StrikeSpan.js",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst StrikeSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'ITALIC' || child.type === 'BOLD') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.strike, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 9
    },
    {
        "file": "LinkSpan.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/LinkSpan.d.ts",
        "code": {
            "const": "declare const LinkSpan: ({ label }: LinkSpanProps) => ReactElement;\ndeclare const LinkSpan: ({ label }: LinkSpanProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "CodeSpan.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/CodeSpan.d.ts",
        "code": {
            "const": "declare const CodeSpan: ({ code }: CodeSpanProps) => JSX.Element;\ndeclare const CodeSpan: ({ code }: CodeSpanProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "ItalicSpan.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/ItalicSpan.d.ts",
        "code": {
            "const": "declare const ItalicSpan: ({ children }: ItalicSpanProps) => JSX.Element;\ndeclare const ItalicSpan: ({ children }: ItalicSpanProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "BoldSpan.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/BoldSpan.d.ts",
        "code": {
            "const": "declare const BoldSpan: ({ children }: BoldSpanProps) => JSX.Element;\ndeclare const BoldSpan: ({ children }: BoldSpanProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "StrikeSpan.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/StrikeSpan.d.ts",
        "code": {
            "const": "declare const StrikeSpan: ({ children }: StrikeSpanProps) => JSX.Element;\ndeclare const StrikeSpan: ({ children }: StrikeSpanProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "InlineElements.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/InlineElements.js",
        "code": {
            "InlineElements": "const InlineElements = ({ children }) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { children: children.map((child, index) => {\nconst InlineElements = ({ children }) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return (0, jsx_runtime_1.jsx)(BoldSpan_1.default, { children: child.value }, index);"
        },
        "depth_rank": 9
    },
    {
        "file": "InlineElements.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/InlineElements.d.ts",
        "code": {
            "const": "declare const InlineElements: ({ children }: InlineElementsProps) => JSX.Element;\ndeclare const InlineElements: ({ children }: InlineElementsProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "UnorderedListBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/UnorderedListBlock.d.ts",
        "code": {
            "const": "declare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => JSX.Element;\ndeclare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "CodeBlock.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/CodeBlock.js",
        "code": {
            "CodeBlock": "const CodeBlock = ({ lines }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: { ...CodeSpan_1.codeStyles.wrapper, padding: 8 }, children: lines.map((line, index) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { style: CodeSpan_1.codeStyles.code, children: line.value?.value || ' ' }, index))) }));\nconst CodeBlock = ({ lines }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: { ...CodeSpan_1.codeStyles.wrapper, padding: 8 }, children: lines.map((line, index) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { style: CodeSpan_1.codeStyles.code, children: line.value?.value || ' ' }, index))) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "CodeBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/CodeBlock.d.ts",
        "code": {
            "const": "declare const CodeBlock: ({ lines }: CodeBlockProps) => ReactElement;\ndeclare const CodeBlock: ({ lines }: CodeBlockProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "UnorderedListBlock.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/UnorderedListBlock.js",
        "code": {
            "UnorderedListBlock": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginTop: 4,\n    },\n    list: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    bullet: {\n        marginHorizontal: 4,\n    },\n});\nconst UnorderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.list, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.bullet, children: \"\\u2022\" }), (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));\nconst UnorderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.list, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.bullet, children: \"\\u2022\" }), (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeadingBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/HeadingBlock.d.ts",
        "code": {
            "const": "declare const Header: ({ items, level }: HeadingBlockProps) => JSX.Element;\ndeclare const Header: ({ items, level }: HeadingBlockProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "OrderedListBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/OrderedListBlock.d.ts",
        "code": {
            "const": "declare const OrderedListBlock: ({ items }: OrderedListBlockProps) => JSX.Element;\ndeclare const OrderedListBlock: ({ items }: OrderedListBlockProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "BigEmojiBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/BigEmojiBlock.d.ts",
        "code": {
            "const": "declare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;\ndeclare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ParagraphBlock.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/ParagraphBlock.js",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: items }) }));\nconst ParagraphBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: items }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "OrderedListBlock.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/OrderedListBlock.js",
        "code": {
            "OrderedListBlock": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginTop: 4,\n    },\n    list: {\n        flexDirection: 'row',\n    },\n    number: {\n        fontWeight: 700,\n        marginHorizontal: 4,\n    },\n});\nconst OrderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value, number }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.list, children: [(0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.number, children: [number, \".\"] }), \" \", (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));\nconst OrderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value, number }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.list, children: [(0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.number, children: [number, \".\"] }), \" \", (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ParagraphBlock.d.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/ParagraphBlock.d.ts",
        "code": {
            "const": "declare const ParagraphBlock: ({ items }: ParagraphBlockProps) => JSX.Element;\ndeclare const ParagraphBlock: ({ items }: ParagraphBlockProps) => JSX.Element;"
        },
        "depth_rank": 9
    },
    {
        "file": "Divider.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/Divider.js",
        "code": {
            "Divider": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingVertical: 12,\n        fontSize: 12,\n        fontWeight: 700,\n    },\n    line: {\n        flex: 1,\n        height: 2,\n        backgroundColor: colors_json_1.default.n200,\n    },\n    text: {\n        paddingHorizontal: 8,\n    },\n});\nconst Divider = ({ divider }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.text, children: divider }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line })] }));\nconst Divider = ({ divider }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.text, children: divider }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line })] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageList.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/MessageList.js",
        "code": {
            "MessageList": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginBottom: 16,\n        paddingHorizontal: 32,\n    },\n    message: {\n        marginTop: 1,\n        fontSize: typography_json_1.fontScales.p2.fontSize,\n    },\n});\nconst MessageList = ({ messages, invalidFileMessage }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: messages.map((message, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [message.divider && (0, jsx_runtime_1.jsx)(Divider_1.Divider, { divider: message.divider }), (0, jsx_runtime_1.jsx)(MessageHeader_1.MessageHeader, { name: message.u.name || message.u.username, time: message.ts }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.message, children: message.md ? (0, jsx_runtime_1.jsx)(markup_1.Markup, { tokens: message.md }) : (0, jsx_runtime_1.jsx)(renderer_1.Text, { children: message.msg }) }), message.quotes && (0, jsx_runtime_1.jsx)(Quotes_1.Quotes, { quotes: message.quotes }), message.files && (0, jsx_runtime_1.jsx)(Files_1.Files, { files: message.files, invalidMessage: invalidFileMessage })] }, index))) }));\nconst MessageList = ({ messages, invalidFileMessage }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: messages.map((message, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [message.divider && (0, jsx_runtime_1.jsx)(Divider_1.Divider, { divider: message.divider }), (0, jsx_runtime_1.jsx)(MessageHeader_1.MessageHeader, { name: message.u.name || message.u.username, time: message.ts }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.message, children: message.md ? (0, jsx_runtime_1.jsx)(markup_1.Markup, { tokens: message.md }) : (0, jsx_runtime_1.jsx)(renderer_1.Text, { children: message.msg }) }), message.quotes && (0, jsx_runtime_1.jsx)(Quotes_1.Quotes, { quotes: message.quotes }), message.files && (0, jsx_runtime_1.jsx)(Files_1.Files, { files: message.files, invalidMessage: invalidFileMessage })] }, index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "Quotes.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/Quotes.js",
        "code": {
            "Quotes": "const Quotes = ({ quotes }) => quotes.reduceRight((lastQuote, quote, index) => ((0, jsx_runtime_1.jsx)(Quote, { quote: quote, index: index, children: lastQuote })), null);\nconst Quotes = ({ quotes }) => quotes.reduceRight((lastQuote, quote, index) => ((0, jsx_runtime_1.jsx)(Quote, { quote: quote, index: index, children: lastQuote })), null);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageHeader.js",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/MessageHeader.js",
        "code": {
            "MessageHeader": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    header: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    name: {\n        fontSize: typography_json_1.fontScales.p2b.fontSize,\n        fontWeight: typography_json_1.fontScales.p2b.fontWeight,\n        color: colors_json_1.default.n900,\n    },\n    time: {\n        fontSize: typography_json_1.fontScales.c1.fontSize,\n        marginLeft: 4,\n    },\n});\nconst MessageHeader = ({ name, time, light }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.header, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.name, children: name }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: { ...styles.time, color: light ? colors_json_1.default.n600 : colors_json_1.default.n700 }, children: time })] }));\nconst MessageHeader = ({ name, time, light }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.header, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.name, children: name }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: { ...styles.time, color: light ? colors_json_1.default.n600 : colors_json_1.default.n700 }, children: time })] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatTranscript.spec.ts",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/strategies/ChatTranscript.spec.ts",
        "code": {
            "data": "\t\tconst result = chatTranscript.parseTemplateData(data);\n\t\tconst result = chatTranscript.parseTemplateData(data);\n\t\texpect(result.t('transcript')).toEqual('Transcript');\n\t\texpect(result.t('visitor')).toEqual('Visitor');\n\t\texpect(result.t('agent')).toEqual('Agent');\n\t\texpect(result.t('date')).toEqual('Date');\n\t\texpect(result.t('time')).toEqual('Time');\n\t});\n\n\tit('should throws an error if translation not found', () => {\n\t\tconst data = { ...validData, translations: translationsData.translations };\n\t\tconst data = { ...validData, translations: translationsData.translations };"
        },
        "depth_rank": 6
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/index.tsx",
        "code": {
            "timeValue": "\tconst agentValue = header.agent?.name || header.agent?.username || t('Not_assigned');\n\tconst agentValue = header.agent?.name || header.agent?.username || t('Not_assigned');\n\tconst customerValue = header.visitor?.name || header.visitor?.username;\n\tconst customerValue = header.visitor?.name || header.visitor?.username;\n\tconst dateValue = header.date;\n\tconst dateValue = header.date;\n\tconst timeValue = header.time;\n\tconst timeValue = header.time;\n\n\treturn (\n\t\t<Document>\n\t\t\t<Page size='A4' style={styles.page}>"
        },
        "depth_rank": 7
    },
    {
        "file": "InlineElements.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/InlineElements.tsx",
        "code": {
            "InlineElements": "const InlineElements = ({ children }: InlineElementsProps) => (\nconst InlineElements = ({ children }: InlineElementsProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "ItalicSpan.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/ItalicSpan.tsx",
        "code": {
            "ItalicSpan": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\titalic: {\n\t\tfontStyle: 'italic',\n\t},\n});\n\ntype MessageBlock =\n\t| MessageParser.Emoji\n\t| MessageParser.ChannelMention\n\t| MessageParser.UserMention\n\t| MessageParser.Link\n\t| MessageParser.MarkupExcluding<MessageParser.Italic>;\n\ntype ItalicSpanProps = {\n\tchildren: MessageBlock[];\n};\n\nconst ItalicSpan = ({ children }: ItalicSpanProps) => (\nconst ItalicSpan = ({ children }: ItalicSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "LinkSpan.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/LinkSpan.tsx",
        "code": {
            "labelElements": "const LinkSpan = ({ label }: LinkSpanProps): ReactElement => {\nconst LinkSpan = ({ label }: LinkSpanProps): ReactElement => {\n\tconst children = useMemo(() => {\n\tconst children = useMemo(() => {\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\t\tswitch (child.type) {\n\t\t\t\tcase 'PLAIN_TEXT':\n\t\t\t\t\treturn <Text key={index}>{child.value.trim()}</Text>;"
        },
        "depth_rank": 9
    },
    {
        "file": "CodeSpan.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/CodeSpan.tsx",
        "code": {
            "CodeSpan": "const CodeSpan = ({ code }: CodeSpanProps) => (\nconst CodeSpan = ({ code }: CodeSpanProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "StrikeSpan.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/StrikeSpan.tsx",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }: StrikeSpanProps) => (\nconst StrikeSpan = ({ children }: StrikeSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "BoldSpan.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/BoldSpan.tsx",
        "code": {
            "BoldSpan": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\tbold: {\n\t\tfontWeight: 700,\n\t},\n});\n\ntype MessageBlock =\n\t| MessageParser.Emoji\n\t| MessageParser.ChannelMention\n\t| MessageParser.UserMention\n\t| MessageParser.Link\n\t| MessageParser.MarkupExcluding<MessageParser.Bold>;\n\ntype BoldSpanProps = {\n\tchildren: MessageBlock[];\n};\n\nconst BoldSpan = ({ children }: BoldSpanProps) => (\nconst BoldSpan = ({ children }: BoldSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "OrderedListBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/OrderedListBlock.tsx",
        "code": {
            "OrderedListBlock": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tmarginTop: 4,\n\t},\n\tlist: {\n\t\tflexDirection: 'row',\n\t},\n\tnumber: {\n\t\tfontWeight: 700,\n\t\tmarginHorizontal: 4,\n\t},\n});\n\ntype OrderedListBlockProps = {\n\titems: MessageParser.ListItem[];\n};\n\nconst OrderedListBlock = ({ items }: OrderedListBlockProps) => (\nconst OrderedListBlock = ({ items }: OrderedListBlockProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "CodeBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/CodeBlock.tsx",
        "code": {
            "CodeBlock": "const CodeBlock = ({ lines }: CodeBlockProps): ReactElement => (\nconst CodeBlock = ({ lines }: CodeBlockProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "ParagraphBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/ParagraphBlock.tsx",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ items }: ParagraphBlockProps) => (\nconst ParagraphBlock = ({ items }: ParagraphBlockProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "BigEmojiBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/BigEmojiBlock.tsx",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => (\nconst BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "HeadingBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/HeadingBlock.tsx",
        "code": {
            "Header": "const Header = ({ items = [], level = 1 }: HeadingBlockProps) => (\nconst Header = ({ items = [], level = 1 }: HeadingBlockProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UnorderedListBlock.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/UnorderedListBlock.tsx",
        "code": {
            "UnorderedListBlock": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tmarginTop: 4,\n\t},\n\tlist: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t},\n\tbullet: {\n\t\tmarginHorizontal: 4,\n\t},\n});\n\ntype UnorderedListBlockProps = {\n\titems: MessageParser.ListItem[];\n};\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps) => (\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Files.spec.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/components/Files.spec.tsx",
        "code": {
            "fileName": "\t\tconst invalidText = getByText('invalid');\n\t\tconst invalidText = getByText('invalid');\n\t\tconst fileName = getByText(invalidFile.name);\n\t\tconst fileName = getByText(invalidFile.name);\n\n\t\texpect(invalidText).toBeInTheDocument();\n\t\texpect(fileName).toBeInTheDocument();\n\t});\n\n\tit('should renders file name and image when buffer is not null', () => {\n\t\tconst { getByRole, getByText } = render(<Files files={[validFile]} invalidMessage='' />);\n\t\tconst { getByRole, getByText } = render(<Files files={[validFile]} invalidMessage='' />);"
        },
        "depth_rank": 8
    },
    {
        "file": "Quotes.tsx",
        "path": "../Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/components/Quotes.tsx",
        "code": {
            "Quote": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tbackgroundColor: colors.n100,\n\t\tborderWidth: 1,\n\t\tborderColor: colors.n250,\n\t\tborderLeftColor: colors.n600,\n\t\tpadding: 16,\n\t\tborderTopWidth: 1,\n\t\tborderBottomWidth: 1,\n\t},\n\tquoteMessage: {\n\t\tmarginTop: 6,\n\t\tfontSize: fontScales.p2.fontSize,\n\t},\n});\n\nconst Quote = ({ quote, children, index }: { quote: QuoteType; children: JSX.Element | null; index: number }) => (\nconst Quote = ({ quote, children, index }: { quote: QuoteType; children: JSX.Element | null; index: number }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "SidebarPaletteStyleTag.tsx",
        "path": "../Rocket.Chat/ee/packages/ui-theming/src/SidebarPaletteStyleTag.tsx",
        "code": {
            "const": "\t// const [, , theme] = useThemeMode();\n\t// const [, , theme] = useThemeMode();\n\t// const palette = convertToCss(\n\t// const palette = convertToCss(\n\t// \ttheme === 'dark' ? filterOnlyChangedColors(darkPalette, sidebarPaletteDark) : { ...darkPalette, ...defaultSidebarPalette },"
        },
        "depth_rank": 5
    },
    {
        "file": "useLayoutVariables.ts",
        "path": "../Rocket.Chat/ee/packages/ui-theming/src/hooks/useLayoutVariables.ts",
        "code": {
            "setting": "\tconst setting = String(useSetting('Layout_Fuselage_Palette') || '{}');\n\tconst setting = String(useSetting('Layout_Fuselage_Palette') || '{}');"
        },
        "depth_rank": 6
    },
    {
        "file": "useThemeMode.ts",
        "path": "../Rocket.Chat/ee/packages/ui-theming/src/hooks/useThemeMode.ts",
        "code": {
            "saveUserPreferences": "\tconst theme = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\tconst theme = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst [updaters] = useState(\n\tconst [updaters] = useState(\n\t\t(): Record<ThemeMode, () => void> => ({\n\t\t\tlight: () => saveUserPreferences({ data: { themeAppearence: 'light' } }),"
        },
        "depth_rank": 6
    },
    {
        "file": "getPino.js",
        "path": "../Rocket.Chat/ee/packages/omnichannel-services/dist/apps/meteor/server/lib/logger/getPino.js",
        "code": {
            "mainPino": "const mainPino = (0, pino_1.pino)({\nconst mainPino = (0, pino_1.pino)({\n    hooks: { logMethod },",
            "getPino": "function getPino(name, level = 'warn') {\nfunction getPino(name, level = 'warn') {\n    return mainPino.child({ name }, { level });"
        },
        "depth_rank": 10
    },
    {
        "file": "OmnichannelTranscript.ts",
        "path": "../Rocket.Chat/ee/packages/omnichannel-services/src/OmnichannelTranscript.ts",
        "code": {
            "isPromiseRejectedResult": "const isPromiseRejectedResult = (result: any): result is PromiseRejectedResult => result.status === 'rejected';\nconst isPromiseRejectedResult = (result: any): result is PromiseRejectedResult => result.status === 'rejected';\n\ntype WorkDetails = {\n\trid: IRoom['_id'];\n\tuserId: IUser['_id'];\n};\n\ntype WorkDetailsWithSource = WorkDetails & {\n\tfrom: string;\n};\n\ntype Quote = { name: string; ts?: Date; md: Root };",
            "reportingTimezone": "\t\tconst reportingTimezone = await settingsService.get('Default_Timezone_For_Reporting');\n\t\tconst reportingTimezone = await settingsService.get('Default_Timezone_For_Reporting');\n\n\t\tswitch (reportingTimezone) {\n\t\t\tcase 'custom':\n\t\t\t\treturn settingsService.get<string>('Default_Custom_Timezone');\n\t\t\tcase 'user':\n\t\t\t\tif (user?.utcOffset) {\n\t\t\t\t\treturn guessTimezoneFromOffset(user.utcOffset);\n\t\t\t\t}\n\t\t\t\treturn guessTimezone();\n\t\t\tdefault:\n\t\t\t\treturn guessTimezone();\n\t\t}\n\t}\n\n\tprivate getMessagesFromRoom({ rid }: { rid: string }): Promise<IMessage[]> {\n\t\t// Closing message should not appear :)\n\t\treturn Messages.findLivechatMessagesWithoutClosing(rid, {\n\t\t\tsort: { ts: 1 },",
            "This": "\t\t// This will prevent the usage of timeouts on the tests of this functionality :)\n\t\t// This will prevent the usage of timeouts on the tests of this functionality :)\n\t\tif (process.env.TEST_MODE) {\n\t\t\tawait this.workOnPdf({ details: { ...details, from: this.name } });",
            "fileBuffer": "\t\t\t\tconst fileBuffer = await uploadService.getFileBuffer({ userId, file: uploadedFile });\n\t\t\t\tconst fileBuffer = await uploadService.getFileBuffer({ userId, file: uploadedFile });",
            "messages": "\t\t\tconst messages = await this.getMessagesFromRoom({ rid: room._id });\n\t\t\tconst messages = await this.getMessagesFromRoom({ rid: room._id });",
            "visitor": "\t\t\tconst visitor =\n\t\t\tconst visitor =\n\t\t\t\troom.v && (await LivechatVisitors.findOneById(room.v._id, { projection: { _id: 1, name: 1, username: 1, visitorEmails: 1 } }));",
            "agent": "\t\t\tconst agent =\n\t\t\tconst agent =\n\t\t\t\troom.servedBy && (await Users.findOneAgentById(room.servedBy._id, { projection: { _id: 1, name: 1, username: 1, utcOffset: 1 } }));",
            "data": "\t\t\tconst messagesData = await this.getMessagesData(details.userId, messages);\n\t\t\tconst messagesData = await this.getMessagesData(details.userId, messages);\n\n\t\t\tconst [siteName, dateFormat, timeAndDateFormat, timezone, translations] = await Promise.all([\n\t\t\tconst [siteName, dateFormat, timeAndDateFormat, timezone, translations] = await Promise.all([\n\t\t\t\tsettingsService.get<string>('Site_Name'),\n\t\t\t\tsettingsService.get<string>('Message_DateFormat'),\n\t\t\t\tsettingsService.get<string>('Message_TimeAndDateFormat'),\n\t\t\t\tthis.getTimezone(agent),\n\t\t\t\tthis.getTranslations(),\n\t\t\t]);\n\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\tvisitor,\n\t\t\t\tagent,\n\t\t\t\tclosedAt: room.closedAt,\n\t\t\t\tsiteName,\n\t\t\t\tmessages: messagesData,\n\t\t\t\tdateFormat,\n\t\t\t\ttimeAndDateFormat,\n\t\t\t\ttimezone,\n\t\t\t\ttranslations,\n\t\t\t};\n\n\t\t\tawait this.doRender({ data, details });",
            "stream": "\t\tconst transcriptText = await translationService.translateToServerLanguage('Transcript');\n\t\tconst transcriptText = await translationService.translateToServerLanguage('Transcript');\n\n\t\tconst stream = await this.worker.renderToStream({ data });\n\t\tconst stream = await this.worker.renderToStream({ data });",
            "e": "\t\t\tconst result = await Promise.allSettled([\n\t\t\tconst result = await Promise.allSettled([\n\t\t\t\tuploadService.sendFileMessage({\n\t\t\t\t\troomId: details.rid,\n\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\tfile,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t// Translate from service\n\t\t\t\t\t\tmsg: await translationService.translateToServerLanguage('pdf_success_message'),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\t// Send the file to the user who requested it, so they can download it\n\t\t\t\tuploadService.sendFileMessage({\n\t\t\t\t\troomId: rid,\n\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\tfile,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t// Translate from service\n\t\t\t\t\t\tmsg: await translationService.translate('pdf_success_message', user),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t]);\n\t\t\tconst e = result.find((r) => isPromiseRejectedResult(r));\n\t\t\tconst e = result.find((r) => isPromiseRejectedResult(r));\n\t\t\tif (e && isPromiseRejectedResult(e)) {\n\t\t\t\tthrow e.reason;\n\t\t\t}\n\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "Presence.ts",
        "path": "../Rocket.Chat/ee/packages/presence/src/Presence.ts",
        "code": {
            "affectedUsers": "\t\tconst affectedUsers = await UsersSessions.findByOtherInstanceIds(ids, { projection: { _id: 1 } }).toArray();\n\t\tconst affectedUsers = await UsersSessions.findByOtherInstanceIds(ids, { projection: { _id: 1 } }).toArray();",
            "ids": "\t\tconst nodes = (await this.api?.nodeList()) || [];\n\t\tconst nodes = (await this.api?.nodeList()) || [];\n\n\t\tconst ids = nodes.filter((node) => node.available).map(({ id }) => id);\n\t\tconst ids = nodes.filter((node) => node.available).map(({ id }) => id);",
            "userSessions": "\t\tconst userSessions = (await UsersSessions.findOneById(uid)) || { connections: [] };\n\t\tconst userSessions = (await UsersSessions.findOneById(uid)) || { connections: [] };",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | 'roles' | 'status'>>(uid, {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | 'roles' | 'status'>>(uid, {\n\t\t\tprojection: { username: 1, roles: 1, status: 1 },",
            "result": "\t\tconst result = await Users.updateStatusById(uid, {\n\t\tconst result = await Users.updateStatusById(uid, {\n\t\t\tstatus,\n\t\t\tstatusConnection,\n\t\t});\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tthis.broadcast({ _id: uid, username: user.username, status, statusText: user.statusText, roles: user.roles }, user.status);"
        },
        "depth_rank": 5
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/ee/packages/api-client/dist/index.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/ee/packages/api-client/src/index.ts",
        "code": {
            "response": "\t\tconst response = await this.send(endpoint, 'DELETE', options ?? {});\n\t\tconst response = await this.send(endpoint, 'DELETE', options ?? {});"
        },
        "depth_rank": 5
    },
    {
        "file": "2fahandling.spec.ts",
        "path": "../Rocket.Chat/ee/packages/api-client/__tests__/2fahandling.spec.ts",
        "code": {
            "client": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst client = new RestClient({\n\tconst client = new RestClient({\n\t\tbaseUrl: 'https://example.com',\n\t});\n\n\tclient.handleTwoFactorChallenge((e) => {\n\t\tfn(e);\n\n\t\tthrow new Error('foo');\n\t});\n\n\tawait expect(client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' })).rejects.toThrow(",
            "result": "\tconst result = await client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' });\n\tconst result = await client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' });"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/queue-worker/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "configureServer.ts",
        "path": "../Rocket.Chat/ee/apps/ddp-streamer/src/configureServer.ts",
        "code": {
            "fn": "const loginServiceConfigurationCollection = 'meteor_accounts_loginServiceConfiguration';\nconst loginServiceConfigurationCollection = 'meteor_accounts_loginServiceConfiguration';\nconst loginServiceConfigurationPublication = 'meteor.loginServiceConfiguration';\nconst loginServiceConfigurationPublication = 'meteor.loginServiceConfiguration';\nconst loginServices = new Map<string, any>();\nconst loginServices = new Map<string, any>();\n\nMeteorService.getLoginServiceConfiguration().then((records = []) => records.forEach((record) => loginServices.set(record._id, record)));\n\nserver.publish(loginServiceConfigurationPublication, async function () {\nserver.publish(loginServiceConfigurationPublication, async function () {\n\tloginServices.forEach((record) => this.added(loginServiceConfigurationCollection, record._id, record));\n\n\tconst fn = (action: string, record: any): void => {\n\tconst fn = (action: string, record: any): void => {\n\t\tswitch (action) {\n\t\t\tcase 'added':\n\t\t\tcase 'changed':\n\t\t\t\tloginServices.set(record._id, record);\n\t\t\t\tthis[action](loginServiceConfigurationCollection, record._id, record);\n\t\t\t\tbreak;\n\t\t\tcase 'removed':\n\t\t\t\tloginServices.delete(record._id);\n\t\t\t\tthis[action](loginServiceConfigurationCollection, record._id);\n\t\t}\n\t};\n\n\tevents.on(loginServiceConfigurationPublication, fn);\n\n\tthis.onStop(() => {\n\t\tevents.removeListener(loginServiceConfigurationPublication, fn);\n\t});\n\n\tthis.ready();\n});\n\nconst autoUpdateCollection = 'meteor_autoupdate_clientVersions';\nconst autoUpdateCollection = 'meteor_autoupdate_clientVersions';\nserver.publish(autoUpdateCollection, function () {\nserver.publish(autoUpdateCollection, function () {\n\tAutoupdate.getVersions().forEach((version, arch) => {\n\t\tthis.added(autoUpdateCollection, arch, version);\n\t});\n\n\tconst fn = (record: any): void => {\n\tconst fn = (record: any): void => {\n\t\tconst { _id, ...version } = record;\n\t\tconst { _id, ...version } = record;",
            "result": "\t\t\tconst result = await Account.login({ resume, user, password });\n\t\t\tconst result = await Account.login({ resume, user, password });"
        },
        "depth_rank": 5
    },
    {
        "file": "Server.ts",
        "path": "../Rocket.Chat/ee/apps/ddp-streamer/src/Server.ts",
        "code": {
            "handleInternalException": "const handleInternalException = (err: unknown, msg: string): MeteorError => {\nconst handleInternalException = (err: unknown, msg: string): MeteorError => {\n\tif (err instanceof MeteorError) {\n\t\treturn err;\n\t}\n\n\t// default errors are logged to the console and redacted from the client\n\t// TODO switch to using the logger (ideally broker.logger)\n\tlogger.error({ msg, err });",
            "result": "\t\t\tconst result = await fn.apply(client, packet.params);\n\t\t\tconst result = await fn.apply(client, packet.params);\n\t\t\treturn this.result(client, packet, result);\n\t\t} catch (err: unknown) {",
            "publication": "\t\t\tconst publication = new Publication(client, packet, this);\n\t\t\tconst publication = new Publication(client, packet, this);\n\t\t\tconst [eventName, options] = packet.params;\n\t\t\tconst [eventName, options] = packet.params;\n\t\t\tawait fn.call(publication, eventName, options);\n\t\t} catch (err: unknown) {"
        },
        "depth_rank": 5
    },
    {
        "file": "DDPStreamer.ts",
        "path": "../Rocket.Chat/ee/apps/ddp-streamer/src/DDPStreamer.ts",
        "code": {
            "versions": "\t\tconst versions = await MeteorService.getAutoUpdateClientVersions();\n\t\tconst versions = await MeteorService.getAutoUpdateClientVersions();\n\n\t\tObject.keys(versions).forEach((key) => {\n\t\t\tAutoupdate.updateVersion(versions[key]);\n\t\t});\n\n\t\tthis.app = polka()\n\t\t\t.use(proxy())\n\t\t\t.get('/health', async (_req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.api?.nodeList();\n\t\t\t\t\tres.end('ok');\n\t\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "Streamer.ts",
        "path": "../Rocket.Chat/ee/apps/ddp-streamer/src/Streamer.ts",
        "code": {
            "frame": "\t\t\t\t\tconst frame = data[subscription.client.meteorClient ? 'meteor' : 'normal'];\n\t\t\t\t\tconst frame = data[subscription.client.meteorClient ? 'meteor' : 'normal'];\n\n\t\t\t\t\tsubscription.client.ws._sender.sendFrame(frame, (err: unknown) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} catch (error: any) {"
        },
        "depth_rank": 5
    },
    {
        "file": "Client.ts",
        "path": "../Rocket.Chat/ee/apps/ddp-streamer/src/Client.ts",
        "code": {
            "packet": "\t\t\tconst packet = server.parse(payload, isBinary);\n\t\t\tconst packet = server.parse(payload, isBinary);\n\t\t\tthis.emit('message', packet);\n\t\t\tif (this.wait) {\n\t\t\t\treturn new Promise((resolve) => this.once(DDP_EVENTS.LOGGED, () => resolve(this.process(packet.msg, packet))));\n\t\t\t}\n\t\t\tthis.process(packet.msg, packet);\n\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/omnichannel-transcript/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/presence-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/stream-hub-service/src/service.ts",
        "code": {
            "watcher": "\tconst watcher = new DatabaseWatcher({ db, logger: Logger });\n\tconst watcher = new DatabaseWatcher({ db, logger: Logger });",
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\n\t\t\t\tif (watcher.isLastDocDelayed()) {\n\t\t\t\t\tthrow new Error('not healthy');\n\t\t\t\t}\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/authorization-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "Account.ts",
        "path": "../Rocket.Chat/ee/apps/account-service/src/Account.ts",
        "code": {
            "expiry": "\t\tconst expiry = await Settings.findOne({ _id: 'Accounts_LoginExpiration' }, { projection: { value: 1 } });\n\t\tconst expiry = await Settings.findOne({ _id: 'Accounts_LoginExpiration' }, { projection: { value: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/ee/apps/account-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 5
    },
    {
        "file": "utils.ts",
        "path": "../Rocket.Chat/ee/apps/account-service/src/lib/utils.ts",
        "code": {
            "hashedStampedToken": "\tconst hashedStampedToken = Object.keys(stampedToken).reduce(\n\tconst hashedStampedToken = Object.keys(stampedToken).reduce(\n\t\t(prev, key) => (key === 'token' ? prev : { ...prev, [key]: stampedToken[key] }),"
        },
        "depth_rank": 6
    },
    {
        "file": "loginViaResume.ts",
        "path": "../Rocket.Chat/ee/apps/account-service/src/lib/loginViaResume.ts",
        "code": {
            "tokenExpires": "\tconst token = user.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\tconst token = user.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\n\tconst tokenExpires = token && 'when' in token && _tokenExpiration(token.when, loginExpiration);\n\tconst tokenExpires = token && 'when' in token && _tokenExpiration(token.when, loginExpiration);\n\tif (tokenExpires && new Date() >= tokenExpires) {\n\t\tthrow new MeteorError(403, 'Your session has expired. Please log in again.');\n\t}\n\n\treturn {\n\t\tuid: user._id,\n\t\ttoken: resume,\n\t\thashedToken,\n\t\ttype: 'resume',\n\t\t...(tokenExpires && { tokenExpires }),"
        },
        "depth_rank": 6
    },
    {
        "file": "loginViaUsername.ts",
        "path": "../Rocket.Chat/ee/apps/account-service/src/lib/loginViaUsername.ts",
        "code": {
            "user": "\tconst user = await Users.findOne<IUser>({ username }, { projection: { 'services.password.bcrypt': 1 } });\n\tconst user = await Users.findOne<IUser>({ username }, { projection: { 'services.password.bcrypt': 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "publishRelease.ts",
        "path": "../Rocket.Chat/packages/release-action/src/publishRelease.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\t// TODO do this only if publishing to npm\n\tawait createNpmFile();\n\n\tif (baseRef) {\n\t\tawait checkoutBranch(baseRef);\n\t}\n\n\tconst { version: currentVersion } = await readPackageJson(cwd);\n\tconst { version: currentVersion } = await readPackageJson(cwd);"
        },
        "depth_rank": 4
    },
    {
        "file": "fixWorkspaceVersionsBeforePublish.ts",
        "path": "../Rocket.Chat/packages/release-action/src/fixWorkspaceVersionsBeforePublish.ts",
        "code": {
            "dependencies": "\tconst workspaceVersions = new Map();\n\tconst workspaceVersions = new Map();\n\tfor await (const workspace of workspaces) {\n\tfor await (const workspace of workspaces) {\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tworkspaceVersions.set(workspace.name, packageJson.version);\n\t}\n\n\t// Replace any `workspace:^` version ranges with the actual version.\n\tfor await (const workspace of workspaces) {\n\tfor await (const workspace of workspaces) {\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\n\t\tfor (const dependencyType of DEPENDENCY_TYPES) {\n\t\tfor (const dependencyType of DEPENDENCY_TYPES) {\n\t\t\tconst dependencies = Object.keys(packageJson[dependencyType] ?? {});\n\t\t\tconst dependencies = Object.keys(packageJson[dependencyType] ?? {});"
        },
        "depth_rank": 4
    },
    {
        "file": "startPatchRelease.ts",
        "path": "../Rocket.Chat/packages/release-action/src/startPatchRelease.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\tawait exec('git', ['checkout', baseRef]);\n\n\t// get version from main package\n\tconst { version } = await readPackageJson(mainPackagePath);\n\tconst { version } = await readPackageJson(mainPackagePath);"
        },
        "depth_rank": 4
    },
    {
        "file": "bumpNextVersion.ts",
        "path": "../Rocket.Chat/packages/release-action/src/bumpNextVersion.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\t// TODO do this only if publishing to npm\n\tawait createNpmFile();\n\n\t// TODO need to check if there is any change to 'main package', if not, there is no need to enter rc\n\t// and instead a normal release of the other packages should be done\n\n\tconst { version: currentVersion } = await readPackageJson(cwd);\n\tconst { version: currentVersion } = await readPackageJson(cwd);"
        },
        "depth_rank": 4
    },
    {
        "file": "useUiKitState.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/hooks/useUiKitState.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "UiKitComponent.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/utils/UiKitComponent.js",
        "code": {
            "UiKitComponent": "const UiKitComponent = ({ render, blocks, }) => render(blocks);\nconst UiKitComponent = ({ render, blocks, }) => render(blocks);"
        },
        "depth_rank": 6
    },
    {
        "file": "fromTextObjectToString.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/utils/fromTextObjectToString.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "Banner.stories.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/stories/Banner.stories.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "Message.stories.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/stories/Message.stories.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "Modal.stories.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/stories/Modal.stories.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "BannerSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/BannerSurface.d.ts",
        "code": {
            "const": "declare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;\ndeclare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "BannerSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/BannerSurface.js",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'banner', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { block: 'x8', children: children }) }));\nconst BannerSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'banner', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { block: 'x8', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextualBarSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ContextualBarSurface.d.ts",
        "code": {
            "const": "declare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;\ndeclare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/MessageSurface.d.ts",
        "code": {
            "const": "declare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;\ndeclare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/MessageSurface.js",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'message', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));\nconst MessageSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'message', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageSurfaceRenderer.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/MessageSurfaceRenderer.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "Surface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/Surface.js",
        "code": {
            "Surface": "const Surface = ({ children, type }) => ((0, jsx_runtime_1.jsx)(SurfaceContext_1.SurfaceContext.Provider, { value: type, children: children }));\nconst Surface = ({ children, type }) => ((0, jsx_runtime_1.jsx)(SurfaceContext_1.SurfaceContext.Provider, { value: type, children: children }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ModalSurface.d.ts",
        "code": {
            "const": "declare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;\ndeclare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "FuselageSurfaceRenderer.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/FuselageSurfaceRenderer.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ModalSurface.js",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'modal', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));\nconst ModalSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'modal', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextualBarSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ContextualBarSurface.js",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ children, }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'contextualBar', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));\nconst ContextualBarSurface = ({ children, }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'contextualBar', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ButtonElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ButtonElement.d.ts",
        "code": {
            "const": "declare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;\ndeclare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "CheckboxElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/CheckboxElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "RadioButtonElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/RadioButtonElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "RadioButtonElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/RadioButtonElement.d.ts",
        "code": {
            "const": "declare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;\ndeclare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageElement.styles.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterElementProps": "const filterElementProps = (_a) => {\nconst filterElementProps = (_a) => {\n    var { imageUrl: _imageUrl, size: _size } = _a, props = __rest(_a, [\"imageUrl\", \"size\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "OverflowElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/OverflowElement.d.ts",
        "code": {
            "const": "declare const OverflowElement: ({ block, context, surfaceRenderer, }: OverflowElementProps) => ReactElement;\ndeclare const OverflowElement: ({ block, context, surfaceRenderer, }: OverflowElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "DatePickerElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/DatePickerElement.d.ts",
        "code": {
            "const": "declare const DatePickerElement: ({ block, context, surfaceRenderer, }: DatePickerElementProps) => ReactElement;\ndeclare const DatePickerElement: ({ block, context, surfaceRenderer, }: DatePickerElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;\ndeclare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "ButtonElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ButtonElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "CheckboxElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/CheckboxElement.d.ts",
        "code": {
            "const": "declare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;\ndeclare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ToggleSwitchElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ToggleSwitchElement.d.ts",
        "code": {
            "const": "declare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;\ndeclare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "TimePickerElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/TimePickerElement.d.ts",
        "code": {
            "const": "declare const TimePickerElement: ({ block, context, surfaceRenderer, }: TimePickerElementProps) => ReactElement;\ndeclare const TimePickerElement: ({ block, context, surfaceRenderer, }: TimePickerElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ToggleSwitchElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ToggleSwitchElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "LinearScaleElement.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/LinearScaleElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "DividerBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/DividerBlock.js",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Divider, { className: className, marginBlock: 'x24' }));\nconst DividerBlock = ({ className }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Divider, { className: className, marginBlock: 'x24' }));"
        },
        "depth_rank": 6
    },
    {
        "file": "InputBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/InputBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "CalloutBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/CalloutBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "CalloutBlock": "const CalloutBlock = ({ block, surfaceRenderer, }) => {\nconst CalloutBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return ((0, jsx_runtime_1.jsx)(fuselage_1.Callout, { type: block.variant, icon: block.icon, title: (_a = block.title) === null || _a === void 0 ? void 0 : _a.text, children: surfaceRenderer.renderTextObject(block.text, 0, UiKit.BlockContext.NONE) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ActionsBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageBlock.styles.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ImageBlock.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterImageProps": "const filterImageProps = (_a) => {\nconst filterImageProps = (_a) => {\n    var { imageUrl: _imageUrl, width: _width, height: _height } = _a, props = __rest(_a, [\"imageUrl\", \"width\", \"height\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextBlock.Item.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ContextBlock.Item.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "ActionsBlock.Action.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.Action.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "ActionsBlock.Action.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.Action.d.ts",
        "code": {
            "const": "declare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;\ndeclare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ImageBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 6
    },
    {
        "file": "PreviewBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/PreviewBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "PreviewBlock": "const PreviewBlock = ({ block, surfaceRenderer, }) => {\nconst PreviewBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return ((0, jsx_runtime_1.jsx)(fuselage_1.Box, { children: (0, jsx_runtime_1.jsxs)(fuselage_1.MessageGenericPreview, { children: [(0, ui_kit_1.isPreviewBlockWithPreview)(block) && ((_a = block.preview) === null || _a === void 0 ? void 0 : _a.dimensions) && ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewCoverImage, { width: block.preview.dimensions.width, height: block.preview.dimensions.height, url: block.preview.url })), (0, jsx_runtime_1.jsxs)(fuselage_1.MessageGenericPreviewContent, { thumb: (0, ui_kit_1.isPreviewBlockWithThumb)(block) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewThumb, { children: (0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewCoverImage, { height: 192, width: 368, url: block.thumb.url }) })) : undefined, children: [Array.isArray(block.title) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewTitle, { externalUrl: (0, ui_kit_1.isPreviewBlockWithPreview)(block) ? block.externalUrl : undefined, children: block.title.map((title) => surfaceRenderer.renderTextObject(title, 0, UiKit.BlockContext.NONE)) })) : null, Array.isArray(block.description) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewDescription, { clamp: true, children: block.description.map((description) => surfaceRenderer.renderTextObject(description, 0, UiKit.BlockContext.NONE)) })) : null, block.footer && ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewFooter, { children: (0, jsx_runtime_1.jsx)(ContextBlock_1.default, { block: block.footer, surfaceRenderer: surfaceRenderer, context: UiKit.BlockContext.BLOCK, index: 0 }) }))] })] }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextBlock.Item.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ContextBlock.Item.d.ts",
        "code": {
            "const": "declare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;\ndeclare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "SectionBlock.Fields.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/SectionBlock.Fields.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "Fields": "const breakpoints = {\nconst breakpoints = {\n    xs: 4,\n    sm: 4,\n    md: 4,\n    lg: 6,\n    xl: 6,\n};\nconst Fields = ({ fields, surfaceRenderer }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Grid, { children: fields.map((field, i) => ((0, react_1.createElement)(fuselage_1.Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));\nconst Fields = ({ fields, surfaceRenderer }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Grid, { children: fields.map((field, i) => ((0, react_1.createElement)(fuselage_1.Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "SectionBlock.Fields.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/SectionBlock.Fields.d.ts",
        "code": {
            "const": "declare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;\ndeclare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "CalloutBlock.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/CalloutBlock.d.ts",
        "code": {
            "const": "declare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;\ndeclare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "BannerSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/BannerSurface.d.ts",
        "code": {
            "const": "declare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;\ndeclare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "BannerSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/BannerSurface.js",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }) => (_jsx(Surface, { type: 'banner', children: _jsx(Margins, { block: 'x8', children: children }) }));\nconst BannerSurface = ({ children }) => (_jsx(Surface, { type: 'banner', children: _jsx(Margins, { block: 'x8', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextualBarSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ContextualBarSurface.d.ts",
        "code": {
            "const": "declare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;\ndeclare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/MessageSurface.d.ts",
        "code": {
            "const": "declare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;\ndeclare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/MessageSurface.js",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }) => (_jsx(Surface, { type: 'message', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));\nconst MessageSurface = ({ children }) => (_jsx(Surface, { type: 'message', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalSurface.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ModalSurface.d.ts",
        "code": {
            "const": "declare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;\ndeclare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ModalSurface.js",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }) => (_jsx(Surface, { type: 'modal', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));\nconst ModalSurface = ({ children }) => (_jsx(Surface, { type: 'modal', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextualBarSurface.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ContextualBarSurface.js",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ children, }) => (_jsx(Surface, { type: 'contextualBar', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));\nconst ContextualBarSurface = ({ children, }) => (_jsx(Surface, { type: 'contextualBar', children: _jsx(Margins, { blockEnd: 'x16', children: children }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ButtonElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ButtonElement.d.ts",
        "code": {
            "const": "declare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;\ndeclare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "RadioButtonElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/RadioButtonElement.d.ts",
        "code": {
            "const": "declare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;\ndeclare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageElement.styles.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ImageElement.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterElementProps": "const filterElementProps = (_a) => {\nconst filterElementProps = (_a) => {\n    var { imageUrl: _imageUrl, size: _size } = _a, props = __rest(_a, [\"imageUrl\", \"size\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "OverflowElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/OverflowElement.d.ts",
        "code": {
            "const": "declare const OverflowElement: ({ block, context, surfaceRenderer, }: OverflowElementProps) => ReactElement;\ndeclare const OverflowElement: ({ block, context, surfaceRenderer, }: OverflowElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "DatePickerElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/DatePickerElement.d.ts",
        "code": {
            "const": "declare const DatePickerElement: ({ block, context, surfaceRenderer, }: DatePickerElementProps) => ReactElement;\ndeclare const DatePickerElement: ({ block, context, surfaceRenderer, }: DatePickerElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;\ndeclare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "CheckboxElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/CheckboxElement.d.ts",
        "code": {
            "const": "declare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;\ndeclare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "ToggleSwitchElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ToggleSwitchElement.d.ts",
        "code": {
            "const": "declare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;\ndeclare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "TimePickerElement.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/TimePickerElement.d.ts",
        "code": {
            "const": "declare const TimePickerElement: ({ block, context, surfaceRenderer, }: TimePickerElementProps) => ReactElement;\ndeclare const TimePickerElement: ({ block, context, surfaceRenderer, }: TimePickerElementProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "DividerBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/DividerBlock.js",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }) => (_jsx(Divider, { className: className, marginBlock: 'x24' }));\nconst DividerBlock = ({ className }) => (_jsx(Divider, { className: className, marginBlock: 'x24' }));"
        },
        "depth_rank": 6
    },
    {
        "file": "CalloutBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/CalloutBlock.js",
        "code": {
            "CalloutBlock": "const CalloutBlock = ({ block, surfaceRenderer, }) => {\nconst CalloutBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return (_jsx(Callout, { type: block.variant, icon: block.icon, title: (_a = block.title) === null || _a === void 0 ? void 0 : _a.text, children: surfaceRenderer.renderTextObject(block.text, 0, UiKit.BlockContext.NONE) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ImageBlock.styles.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ImageBlock.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterImageProps": "const filterImageProps = (_a) => {\nconst filterImageProps = (_a) => {\n    var { imageUrl: _imageUrl, width: _width, height: _height } = _a, props = __rest(_a, [\"imageUrl\", \"width\", \"height\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "ActionsBlock.Action.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ActionsBlock.Action.d.ts",
        "code": {
            "const": "declare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;\ndeclare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "PreviewBlock.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/PreviewBlock.js",
        "code": {
            "PreviewBlock": "const PreviewBlock = ({ block, surfaceRenderer, }) => {\nconst PreviewBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return (_jsx(Box, { children: _jsxs(MessageGenericPreview, { children: [isPreviewBlockWithPreview(block) && ((_a = block.preview) === null || _a === void 0 ? void 0 : _a.dimensions) && (_jsx(MessageGenericPreviewCoverImage, { width: block.preview.dimensions.width, height: block.preview.dimensions.height, url: block.preview.url })), _jsxs(MessageGenericPreviewContent, { thumb: isPreviewBlockWithThumb(block) ? (_jsx(MessageGenericPreviewThumb, { children: _jsx(MessageGenericPreviewCoverImage, { height: 192, width: 368, url: block.thumb.url }) })) : undefined, children: [Array.isArray(block.title) ? (_jsx(MessageGenericPreviewTitle, { externalUrl: isPreviewBlockWithPreview(block) ? block.externalUrl : undefined, children: block.title.map((title) => surfaceRenderer.renderTextObject(title, 0, UiKit.BlockContext.NONE)) })) : null, Array.isArray(block.description) ? (_jsx(MessageGenericPreviewDescription, { clamp: true, children: block.description.map((description) => surfaceRenderer.renderTextObject(description, 0, UiKit.BlockContext.NONE)) })) : null, block.footer && (_jsx(MessageGenericPreviewFooter, { children: _jsx(ContextBlock, { block: block.footer, surfaceRenderer: surfaceRenderer, context: UiKit.BlockContext.BLOCK, index: 0 }) }))] })] }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextBlock.Item.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ContextBlock.Item.d.ts",
        "code": {
            "const": "declare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;\ndeclare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;"
        },
        "depth_rank": 6
    },
    {
        "file": "SectionBlock.Fields.js",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/SectionBlock.Fields.js",
        "code": {
            "Fields": "const breakpoints = {\nconst breakpoints = {\n    xs: 4,\n    sm: 4,\n    md: 4,\n    lg: 6,\n    xl: 6,\n};\nconst Fields = ({ fields, surfaceRenderer }) => (_jsx(Grid, { children: fields.map((field, i) => (_createElement(Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));\nconst Fields = ({ fields, surfaceRenderer }) => (_jsx(Grid, { children: fields.map((field, i) => (_createElement(Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "SectionBlock.Fields.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/SectionBlock.Fields.d.ts",
        "code": {
            "const": "declare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;\ndeclare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "CalloutBlock.d.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/CalloutBlock.d.ts",
        "code": {
            "const": "declare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;\ndeclare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "useUiKitState.ts",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/hooks/useUiKitState.ts",
        "code": {
            "hasInitialValue": "const hasInitialValue = <TElement extends UiKit.ActionableElement>(\nconst hasInitialValue = <TElement extends UiKit.ActionableElement>(\n  element: TElement\n): element is TElement & { initialValue: number | string } =>",
            "hasInitialTime": "const hasInitialTime = <TElement extends UiKit.ActionableElement>(\nconst hasInitialTime = <TElement extends UiKit.ActionableElement>(\n  element: TElement\n): element is TElement & { initialTime: string } => 'initialTime' in element;",
            "hasInitialDate": "const hasInitialDate = <TElement extends UiKit.ActionableElement>(\nconst hasInitialDate = <TElement extends UiKit.ActionableElement>(\n  element: TElement\n): element is TElement & { initialDate: string } => 'initialDate' in element;",
            "hasInitialOption": "const hasInitialOption = <TElement extends UiKit.ActionableElement>(\nconst hasInitialOption = <TElement extends UiKit.ActionableElement>(\n  element: TElement\n): element is TElement & { initialOption: UiKit.Option } =>",
            "hasInitialOptions": "const hasInitialOptions = <TElement extends UiKit.ActionableElement>(\nconst hasInitialOptions = <TElement extends UiKit.ActionableElement>(\n  element: TElement\n): element is TElement & { initialOptions: UiKit.Option[] } =>"
        },
        "depth_rank": 5
    },
    {
        "file": "Modal.stories.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/stories/Modal.stories.tsx",
        "code": {
            "DemoModal": "const DemoModal = ({\nconst DemoModal = ({\n  children,\n  visible,\n}: {"
        },
        "depth_rank": 5
    },
    {
        "file": "ModalSurface.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/ModalSurface.tsx",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }: ModalSurfaceProps): ReactElement => (\nconst ModalSurface = ({ children }: ModalSurfaceProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "BannerSurface.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/BannerSurface.tsx",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }: BannerSurfaceProps): ReactElement => (\nconst BannerSurface = ({ children }: BannerSurfaceProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "MessageSurface.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/MessageSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }: MessageSurfaceProps): ReactElement => (\nconst MessageSurface = ({ children }: MessageSurfaceProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "ContextualBarSurface.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/ContextualBarSurface.tsx",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({\nconst ContextualBarSurface = ({\n  children,\n}: ContextualBarSurfaceProps): ReactElement => (\n  <Surface type='contextualBar'>\n    <Margins blockEnd='x16'>{children}</Margins>"
        },
        "depth_rank": 5
    },
    {
        "file": "ImageElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/ImageElement.tsx",
        "code": {
            "ImageElement": "const ImageElement = ({\nconst ImageElement = ({\n  block,\n  context,\n}: ImageElementProps): ReactElement | null => {"
        },
        "depth_rank": 5
    },
    {
        "file": "LinearScaleElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/LinearScaleElement.tsx",
        "code": {
            "LinearScaleElement": "const LinearScaleElement = ({\nconst LinearScaleElement = ({\n  className,\n  block,\n  context,\n  surfaceRenderer,\n}: LinearScaleElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ButtonElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/ButtonElement.tsx",
        "code": {
            "ButtonElement": "const ButtonElement = ({\nconst ButtonElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: ButtonElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "MultiStaticSelectElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/MultiStaticSelectElement.tsx",
        "code": {
            "MultiStaticSelectElement": "const MultiStaticSelectElement = ({\nconst MultiStaticSelectElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: MultiStaticSelectElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "RadioButtonElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/RadioButtonElement.tsx",
        "code": {
            "RadioButtonElement": "const RadioButtonElement = ({\nconst RadioButtonElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: RadioButtonElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "OverflowElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/OverflowElement.tsx",
        "code": {
            "OverflowElement": "const OverflowElement = ({\nconst OverflowElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: OverflowElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "DatePickerElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/DatePickerElement.tsx",
        "code": {
            "DatePickerElement": "const DatePickerElement = ({\nconst DatePickerElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: DatePickerElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "StaticSelectElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/StaticSelectElement.tsx",
        "code": {
            "StaticSelectElement": "const StaticSelectElement = ({\nconst StaticSelectElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: StaticSelectElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ImageElement.styles.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/ImageElement.styles.tsx",
        "code": {
            "filterElementProps": "const filterElementProps = ({\nconst filterElementProps = ({\n  imageUrl: _imageUrl,\n  size: _size,\n  ...props\n}: {"
        },
        "depth_rank": 5
    },
    {
        "file": "CheckboxElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/CheckboxElement.tsx",
        "code": {
            "CheckboxElement": "const CheckboxElement = ({\nconst CheckboxElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: CheckboxElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "TimePickerElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/TimePickerElement.tsx",
        "code": {
            "TimePickerElement": "const TimePickerElement = ({\nconst TimePickerElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: TimePickerElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "PlainTextInputElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/PlainTextInputElement.tsx",
        "code": {
            "PlainTextInputElement": "const PlainTextInputElement = ({\nconst PlainTextInputElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: PlainTextInputElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ToggleSwitchElement.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/elements/ToggleSwitchElement.tsx",
        "code": {
            "ToggleSwitchElement": "const ToggleSwitchElement = ({\nconst ToggleSwitchElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: ToggleSwitchElementProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "DividerBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/DividerBlock.tsx",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }: DividerBlockProps): ReactElement => (\nconst DividerBlock = ({ className }: DividerBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "CalloutBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/CalloutBlock.tsx",
        "code": {
            "CalloutBlock": "const CalloutBlock = ({\nconst CalloutBlock = ({\n  block,\n  surfaceRenderer,\n}: CalloutBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/PreviewBlock.tsx",
        "code": {
            "PreviewBlock": "const PreviewBlock = ({\nconst PreviewBlock = ({\n  block,\n  surfaceRenderer,\n}: PreviewBlockProps): ReactElement => (\n  <Box>\n    <MessageGenericPreview>\n      {isPreviewBlockWithPreview(block) && block.preview?.dimensions && (\n        <MessageGenericPreviewCoverImage\n          width={block.preview.dimensions.width}"
        },
        "depth_rank": 5
    },
    {
        "file": "ActionsBlock.Action.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ActionsBlock.Action.tsx",
        "code": {
            "Action": "const Action = ({\nconst Action = ({\n  element,\n  parser,\n  index,\n}: ActionProps): ReactElement | null => {"
        },
        "depth_rank": 5
    },
    {
        "file": "SectionBlock.Fields.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/SectionBlock.Fields.tsx",
        "code": {
            "Fields": "const breakpoints = {\nconst breakpoints = {\n  xs: 4,\n  sm: 4,\n  md: 4,\n  lg: 6,\n  xl: 6,\n} as const;\n} as const;\n\ntype FieldsProps = {\n  fields: readonly UiKit.TextObject[];\n  surfaceRenderer: UiKit.SurfaceRenderer<ReactElement>;\n};\n\nconst Fields = ({ fields, surfaceRenderer }: FieldsProps): ReactElement => (\nconst Fields = ({ fields, surfaceRenderer }: FieldsProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "SectionBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/SectionBlock.tsx",
        "code": {
            "SectionBlock": "const SectionBlock = ({\nconst SectionBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: SectionBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ContextBlock.Item.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ContextBlock.Item.tsx",
        "code": {
            "Item": "const Item = ({\nconst Item = ({\n  block: element,\n  surfaceRenderer: parser,\n  index,\n}: ItemProps): ReactElement | null => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ImageBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ImageBlock.tsx",
        "code": {
            "ImageBlock": "const ImageBlock = ({\nconst ImageBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ImageBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ContextBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ContextBlock.tsx",
        "code": {
            "ContextBlock": "const ContextBlock = ({\nconst ContextBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ContextBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ActionsBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ActionsBlock.tsx",
        "code": {
            "ActionsBlock": "const ActionsBlock = ({\nconst ActionsBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ActionsBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "InputBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/InputBlock.tsx",
        "code": {
            "InputBlock": "const InputBlock = ({\nconst InputBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n  context,\n}: InputBlockProps): ReactElement => {"
        },
        "depth_rank": 5
    },
    {
        "file": "ImageBlock.styles.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ImageBlock.styles.tsx",
        "code": {
            "filterImageProps": "const filterImageProps = ({\nconst filterImageProps = ({\n  imageUrl: _imageUrl,\n  width: _width,\n  height: _height,\n  ...props\n}: {"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConferenceBlock.tsx",
        "path": "../Rocket.Chat/packages/fuselage-ui-kit/src/blocks/VideoConferenceBlock/VideoConferenceBlock.tsx",
        "code": {
            "VideoConferenceBlock": "const MAX_USERS = 3;\nconst MAX_USERS = 3;\n\nconst VideoConferenceBlock = ({\nconst VideoConferenceBlock = ({\n  block,\n}: VideoConferenceBlockProps): ReactElement => {"
        },
        "depth_rank": 6
    },
    {
        "file": "badge.ts",
        "path": "../Rocket.Chat/packages/favicon/src/badge.ts",
        "code": {
            "text": "\tconst text = getBadgeText(badge);\n\tconst text = getBadgeText(badge);\n\tconst { fontFamily, fontStyle, bgColor, textColor } = getBadgeStyle(badge);\n\tconst { fontFamily, fontStyle, bgColor, textColor } = getBadgeStyle(badge);"
        },
        "depth_rank": 4
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/packages/favicon/src/index.ts",
        "code": {
            "img": "\t\tconst link = document.createElement('link');\n\t\tconst link = document.createElement('link');\n\t\tlink.setAttribute('rel', 'icon');\n\t\tdocument.head.appendChild(link);\n\t\tfavicons.push(link);\n\t}\n\n\tfor (const favicon of favicons) {\n\tfor (const favicon of favicons) {\n\t\tfavicon.setAttribute('type', 'image/png');\n\t}\n\n\treturn favicons;\n};\n\nconst fetchFaviconImage = async (url: string | undefined) => {\nconst fetchFaviconImage = async (url: string | undefined) => {\n\tconst img = new Image();\n\tconst img = new Image();\n\n\tif (url) {\n\t\timg.crossOrigin = 'anonymous';\n\t\timg.src = url;\n\t} else {",
            "renderAndUpdate": "const renderAndUpdate = ({\nconst renderAndUpdate = ({\n\tbadge,\n\tcanvas,\n\tfavicons,\n\tcontext,\n\timg,\n}: {"
        },
        "depth_rank": 4
    },
    {
        "file": "parsers.ts",
        "path": "../Rocket.Chat/packages/server-fetch/src/parsers.ts",
        "code": {
            "headers": "\tconst headers = (options.headers as { [k: string]: string }) ?? {};\n\tconst headers = (options.headers as { [k: string]: string }) ?? {};"
        },
        "depth_rank": 4
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/packages/server-fetch/src/index.ts",
        "code": {
            "timeoutId": "function getTimeout(timeout?: number) {\nfunction getTimeout(timeout?: number) {\n\tconst controller = new AbortController();\n\tconst controller = new AbortController();\n\tconst timeoutId = setTimeout(() => controller.abort(), timeout ?? 20000);\n\tconst timeoutId = setTimeout(() => controller.abort(), timeout ?? 20000);\n\n\treturn { controller, timeoutId };",
            "agent": "\tconst agent = getFetchAgent(input, allowSelfSignedCerts);\n\tconst agent = getFetchAgent(input, allowSelfSignedCerts);\n\tconst { controller, timeoutId } = getTimeout(options?.timeout);\n\tconst { controller, timeoutId } = getTimeout(options?.timeout);"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfButton.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfButton": "const VideoConfButton = (_a) => {\nconst VideoConfButton = (_a) => {\n    var { primary, secondary, danger, disabled, icon, children } = _a, props = __rest(_a, [\"primary\", \"secondary\", \"danger\", \"disabled\", \"icon\", \"children\"]);"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfButton.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfButton.d.ts",
        "code": {
            "const": "declare const VideoConfButton: ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps) => ReactElement;\ndeclare const VideoConfButton: ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps) => ReactElement;"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfController.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfController.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfController": "const VideoConfController = (_a) => {\nconst VideoConfController = (_a) => {\n    var { icon, active, secondary, disabled, small = true } = _a, props = __rest(_a, [\"icon\", \"active\", \"secondary\", \"disabled\", \"small\"]);"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfController.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfController.d.ts",
        "code": {
            "const": "declare const VideoConfController: ({ icon, active, secondary, disabled, small, ...props }: VideoConfControllerProps) => ReactElement;\ndeclare const VideoConfController: ({ icon, active, secondary, disabled, small, ...props }: VideoConfControllerProps) => ReactElement;"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfMessageFooterText.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageFooterText.js",
        "code": {
            "VideoConfMessageFooterText": "const VideoConfMessageFooterText = ({ children }) => (_jsx(Box, { fontScale: 'c1', mi: 'x4', children: children }));\nconst VideoConfMessageFooterText = ({ children }) => (_jsx(Box, { fontScale: 'c1', mi: 'x4', children: children }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageButton.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageButton": "const VideoConfMessageButton = (_a) => {\nconst VideoConfMessageButton = (_a) => {\n    var { children, primary } = _a, props = __rest(_a, [\"children\", \"primary\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageAction.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageAction.d.ts",
        "code": {
            "const": "declare const VideoConfMessageAction: ({ icon, ...props }: ComponentProps<typeof IconButton>) => ReactElement;\ndeclare const VideoConfMessageAction: ({ icon, ...props }: ComponentProps<typeof IconButton>) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageText.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageText.d.ts",
        "code": {
            "const": "declare const VideoConfMessageText: ({ ...props }: ComponentProps<typeof Box>) => ReactElement;\ndeclare const VideoConfMessageText: ({ ...props }: ComponentProps<typeof Box>) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageFooter.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageFooter.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageFooter": "const VideoConfMessageFooter = (_a) => {\nconst VideoConfMessageFooter = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessage.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessage.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageIcon.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageIcon.d.ts",
        "code": {
            "const": "declare const VideoConfMessageIcon: ({ variant }: VideoConfMessageIconProps) => ReactElement;\ndeclare const VideoConfMessageIcon: ({ variant }: VideoConfMessageIconProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageIcon.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageIcon.js",
        "code": {
            "VideoConfMessageIcon": "const VideoConfMessageIcon = ({ variant = 'ended' }) => (_jsx(Box, { size: 'x28', alignItems: 'center', justifyContent: 'center', display: 'flex', borderRadius: 'x4', backgroundColor: styles[variant].backgroundColor, children: _jsx(Icon, { size: 'x20', name: styles[variant].icon, color: styles[variant].color }) }));\nconst VideoConfMessageIcon = ({ variant = 'ended' }) => (_jsx(Box, { size: 'x28', alignItems: 'center', justifyContent: 'center', display: 'flex', borderRadius: 'x4', backgroundColor: styles[variant].backgroundColor, children: _jsx(Icon, { size: 'x20', name: styles[variant].icon, color: styles[variant].color }) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageContent.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageContent.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageContent": "const VideoConfMessageContent = (_a) => {\nconst VideoConfMessageContent = (_a) => {\n    var props = __rest(_a, []);\n    return _jsx(Box, Object.assign({ display: 'flex', alignItems: 'center' }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageActions.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageActions.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageActions": "const VideoConfMessageActions = (_a) => {\nconst VideoConfMessageActions = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageRow.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageRow.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageText.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageText.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageText": "const VideoConfMessageText = (_a) => {\nconst VideoConfMessageText = (_a) => {\n    var props = __rest(_a, []);\n    return _jsx(Box, Object.assign({ fontScale: 'c2', mis: 'x8' }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageSkeleton.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageSkeleton.js",
        "code": {
            "VideoConfMessageSkeleton": "const VideoConfMessageSkeleton = () => (_jsxs(VideoConfMessage, { children: [_jsx(VideoConfMessageRow, { children: _jsx(Skeleton, { width: 'full', pb: 'x4' }) }), _jsx(VideoConfMessageRow, { backgroundColor: 'tint', children: _jsx(Skeleton, { width: 'full', pb: 'x4' }) })] }));\nconst VideoConfMessageSkeleton = () => (_jsxs(VideoConfMessage, { children: [_jsx(VideoConfMessageRow, { children: _jsx(Skeleton, { width: 'full', pb: 'x4' }) }), _jsx(VideoConfMessageRow, { backgroundColor: 'tint', children: _jsx(Skeleton, { width: 'full', pb: 'x4' }) })] }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageAction.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageAction.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageAction": "const VideoConfMessageAction = (_a) => {\nconst VideoConfMessageAction = (_a) => {\n    var { icon = 'info' } = _a, props = __rest(_a, [\"icon\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageActions.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageActions.d.ts",
        "code": {
            "const": "declare const VideoConfMessageActions: ({ children, ...props }: ComponentProps<typeof ButtonGroup>) => ReactElement;\ndeclare const VideoConfMessageActions: ({ children, ...props }: ComponentProps<typeof ButtonGroup>) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupTitle.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupTitle.js",
        "code": {
            "VideoConfPopupTitle": "const VideoConfPopupTitle = ({ text, counter = false }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [_jsx(Box, { fontScale: 'p2b', children: text }), counter && _jsx(Throbber, { size: 'x8', mis: 'x4' })] }));\nconst VideoConfPopupTitle = ({ text, counter = false }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [_jsx(Box, { fontScale: 'p2b', children: text }), counter && _jsx(Throbber, { size: 'x8', mis: 'x4' })] }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupFooter.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupFooter.js",
        "code": {
            "VideoConfPopupFooter": "const VideoConfPopupFooter = ({ children }) => _jsx(Margins, { blockStart: 'x28', children: children });\nconst VideoConfPopupFooter = ({ children }) => _jsx(Margins, { blockStart: 'x28', children: children });"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupInfo.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupInfo.js",
        "code": {
            "VideoConfPopupInfo": "const VideoConfPopupInfo = ({ avatar, icon, children }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [avatar, (icon || children) && (_jsxs(Box, { display: 'flex', flexGrow: 1, flexShrink: 1, flexBasis: '0%', alignItems: 'center', mis: 'x8', withTruncatedText: true, children: [icon, _jsx(Box, { mis: 'x8', fontScale: 'h4', withTruncatedText: true, children: children })] }))] }));\nconst VideoConfPopupInfo = ({ avatar, icon, children }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [avatar, (icon || children) && (_jsxs(Box, { display: 'flex', flexGrow: 1, flexShrink: 1, flexBasis: '0%', alignItems: 'center', mis: 'x8', withTruncatedText: true, children: [icon, _jsx(Box, { mis: 'x8', fontScale: 'h4', withTruncatedText: true, children: children })] }))] }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupTitle.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupTitle.d.ts",
        "code": {
            "const": "declare const VideoConfPopupTitle: ({ text, counter }: VideoConfPopupTitleProps) => ReactElement;\ndeclare const VideoConfPopupTitle: ({ text, counter }: VideoConfPopupTitleProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupInfo.d.ts",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupInfo.d.ts",
        "code": {
            "const": "declare const VideoConfPopupInfo: ({ avatar, icon, children }: VideoConfPopupInfoProps) => ReactElement;\ndeclare const VideoConfPopupInfo: ({ avatar, icon, children }: VideoConfPopupInfoProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupFooterButtons.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupFooterButtons.js",
        "code": {
            "VideoConfPopupFooterButtons": "const VideoConfPopupFooterButtons = ({ children }) => (_jsx(ButtonGroup, { width: 'full', stretch: true, children: children }));\nconst VideoConfPopupFooterButtons = ({ children }) => (_jsx(ButtonGroup, { width: 'full', stretch: true, children: children }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupIcon.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupIcon.js",
        "code": {
            "VideoConfPopupIcon": "const VideoConfPopupIcon = ({ children }) => (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 18, overflow: 'hidden', justifyContent: 'center', children: children }));\nconst VideoConfPopupIcon = ({ children }) => (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 18, overflow: 'hidden', justifyContent: 'center', children: children }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopup.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopup.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfPopup": "const VideoConfPopup = forwardRef(function VideoConfPopup({ children, position }, ref) {\nconst VideoConfPopup = forwardRef(function VideoConfPopup({ children, position }, ref) {\n    return (_jsx(VideoConfPopupContainer, { ref: ref, position: position, children: _jsx(Box, { p: 'x24', maxWidth: 'x276', color: 'default', children: children }) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupBackdrop.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupBackdrop.js",
        "code": {
            "VideoConfPopupBackdrop": "const VideoConfPopupBackdrop = ({ children }) => (_jsx(Box, { m: 'x40', className: backdropStyle, children: children }));\nconst VideoConfPopupBackdrop = ({ children }) => (_jsx(Box, { m: 'x40', className: backdropStyle, children: children }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupControllers.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupControllers.js",
        "code": {
            "VideoConfPopupControllers": "const VideoConfPopupControllers = ({ children }) => _jsx(ButtonGroup, { children: children });\nconst VideoConfPopupControllers = ({ children }) => _jsx(ButtonGroup, { children: children });"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupContent.js",
        "path": "../Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupContent.js",
        "code": {
            "VideoConfPopupContent": "const VideoConfPopupContent = ({ children }) => (_jsx(Box, { display: 'flex', flexDirection: 'column', mbs: 'x8', children: children }));\nconst VideoConfPopupContent = ({ children }) => (_jsx(Box, { display: 'flex', flexDirection: 'column', mbs: 'x8', children: children }));"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfButton.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfButton.tsx",
        "code": {
            "VideoConfButton": "const VideoConfButton = ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps): ReactElement => (\nconst VideoConfButton = ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps): ReactElement => ("
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfController.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfController.tsx",
        "code": {
            "id": "const VideoConfController = ({ icon, active, secondary, disabled, small = true, ...props }: VideoConfControllerProps): ReactElement => {\nconst VideoConfController = ({ icon, active, secondary, disabled, small = true, ...props }: VideoConfControllerProps): ReactElement => {\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<IconButton\n\t\t\tsmall={small}"
        },
        "depth_rank": 4
    },
    {
        "file": "VideoConfMessageIcon.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageIcon.tsx",
        "code": {
            "VideoConfMessageIcon": "} as const;\n} as const;\n\nconst VideoConfMessageIcon = ({ variant = 'ended' }: VideoConfMessageIconProps): ReactElement => (\nconst VideoConfMessageIcon = ({ variant = 'ended' }: VideoConfMessageIconProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageFooterText.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageFooterText.tsx",
        "code": {
            "VideoConfMessageFooterText": "const VideoConfMessageFooterText = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfMessageFooterText = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageFooter.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageFooter.tsx",
        "code": {
            "VideoConfMessageFooter": "const VideoConfMessageFooter = ({ children, ...props }: { children: ReactNode }): ReactElement => (\nconst VideoConfMessageFooter = ({ children, ...props }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageButton.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageButton.tsx",
        "code": {
            "VideoConfMessageButton": "const VideoConfMessageButton = ({\nconst VideoConfMessageButton = ({\n\tchildren,\n\tprimary,\n\t...props\n}: { children: ReactNode; primary?: boolean } & Omit<AllHTMLAttributes<HTMLButtonElement>, 'is'>): ReactElement => (\n\t<Box mi='x4'>\n\t\t<Button small primary={primary} {...props}>"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageAction.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageAction.tsx",
        "code": {
            "VideoConfMessageAction": "const VideoConfMessageAction = ({ icon = 'info', ...props }: ComponentProps<typeof IconButton>): ReactElement => (\nconst VideoConfMessageAction = ({ icon = 'info', ...props }: ComponentProps<typeof IconButton>): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessage.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessage.tsx",
        "code": {
            "VideoConfMessage": "const VideoConfMessage = ({ ...props }): ReactElement => (\nconst VideoConfMessage = ({ ...props }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageContent.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageContent.tsx",
        "code": {
            "VideoConfMessageContent": "const VideoConfMessageContent = ({ ...props }): ReactElement => <Box display='flex' alignItems='center' {...props} />;\nconst VideoConfMessageContent = ({ ...props }): ReactElement => <Box display='flex' alignItems='center' {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageText.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageText.tsx",
        "code": {
            "VideoConfMessageText": "const VideoConfMessageText = ({ ...props }: ComponentProps<typeof Box>): ReactElement => <Box fontScale='c2' mis='x8' {...props} />;\nconst VideoConfMessageText = ({ ...props }: ComponentProps<typeof Box>): ReactElement => <Box fontScale='c2' mis='x8' {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfMessageActions.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageActions.tsx",
        "code": {
            "VideoConfMessageActions": "const VideoConfMessageActions = ({ children, ...props }: ComponentProps<typeof ButtonGroup>): ReactElement => (\nconst VideoConfMessageActions = ({ children, ...props }: ComponentProps<typeof ButtonGroup>): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupInfo.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupInfo.tsx",
        "code": {
            "VideoConfPopupInfo": "const VideoConfPopupInfo = ({ avatar, icon, children }: VideoConfPopupInfoProps): ReactElement => (\nconst VideoConfPopupInfo = ({ avatar, icon, children }: VideoConfPopupInfoProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupBackdrop.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupBackdrop.tsx",
        "code": {
            "VideoConfPopupBackdrop": "const VideoConfPopupBackdrop = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupBackdrop = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupFooter.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupFooter.tsx",
        "code": {
            "VideoConfPopupFooter": "const VideoConfPopupFooter = ({ children }: { children: ReactNode }): ReactElement => <Margins blockStart='x28'>{children}</Margins>;\nconst VideoConfPopupFooter = ({ children }: { children: ReactNode }): ReactElement => <Margins blockStart='x28'>{children}</Margins>;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopup.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopup.tsx",
        "code": {
            "VideoConfPopup": "const VideoConfPopup = forwardRef(function VideoConfPopup(\nconst VideoConfPopup = forwardRef(function VideoConfPopup(\n\t{ children, position }: VideoConfPopupProps,"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupContent.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupContent.tsx",
        "code": {
            "VideoConfPopupContent": "const VideoConfPopupContent = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupContent = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupFooterButtons.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupFooterButtons.tsx",
        "code": {
            "VideoConfPopupFooterButtons": "const VideoConfPopupFooterButtons = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupFooterButtons = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupTitle.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupTitle.tsx",
        "code": {
            "VideoConfPopupTitle": "const VideoConfPopupTitle = ({ text, counter = false }: VideoConfPopupTitleProps): ReactElement => (\nconst VideoConfPopupTitle = ({ text, counter = false }: VideoConfPopupTitleProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupHeader.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupHeader.tsx",
        "code": {
            "VideoConfPopupHeader": "const VideoConfPopupHeader = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupHeader = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupControllers.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupControllers.tsx",
        "code": {
            "VideoConfPopupControllers": "const VideoConfPopupControllers = ({ children }: { children: ReactNode }): ReactElement => <ButtonGroup>{children}</ButtonGroup>;\nconst VideoConfPopupControllers = ({ children }: { children: ReactNode }): ReactElement => <ButtonGroup>{children}</ButtonGroup>;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfPopupIcon.tsx",
        "path": "../Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupIcon.tsx",
        "code": {
            "VideoConfPopupIcon": "const VideoConfPopupIcon = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupIcon = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "Markup.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/Markup.js",
        "code": {
            "Markup": "const Markup = ({ tokens }) => (_jsx(_Fragment, { children: tokens.map((block, index) => {\nconst Markup = ({ tokens }) => (_jsx(_Fragment, { children: tokens.map((block, index) => {\n        switch (block.type) {\n            case 'BIG_EMOJI':\n                return _jsx(BigEmojiBlock, { emoji: block.value }, index);"
        },
        "depth_rank": 4
    },
    {
        "file": "PreviewMarkup.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/PreviewMarkup.js",
        "code": {
            "PreviewMarkup": "const isOnlyBigEmojiBlock = (tokens) => tokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\nconst isOnlyBigEmojiBlock = (tokens) => tokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\nconst PreviewMarkup = ({ tokens }) => {\nconst PreviewMarkup = ({ tokens }) => {\n    if (isOnlyBigEmojiBlock(tokens)) {\n        return _jsx(PreviewBigEmojiBlock, { emoji: tokens[0].value });"
        },
        "depth_rank": 4
    },
    {
        "file": "Markup.stories.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/Markup.stories.js",
        "code": {
            "Template": "const Template = (args) => _jsx(Markup, Object.assign({}, args));\nconst Template = (args) => _jsx(Markup, Object.assign({}, args));"
        },
        "depth_rank": 4
    },
    {
        "file": "PreviewUserMentionElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/mentions/PreviewUserMentionElement.js",
        "code": {
            "PreviewUserMentionElement": "const PreviewUserMentionElement = ({ mention }) => _jsxs(_Fragment, { children: [\"@\", mention] });\nconst PreviewUserMentionElement = ({ mention }) => _jsxs(_Fragment, { children: [\"@\", mention] });"
        },
        "depth_rank": 5
    },
    {
        "file": "CodeElement.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/code/CodeElement.d.ts",
        "code": {
            "const": "declare const CodeElement: ({ code }: CodeElementProps) => ReactElement;\ndeclare const CodeElement: ({ code }: CodeElementProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "CodeBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/code/CodeBlock.d.ts",
        "code": {
            "const": "declare const CodeBlock: ({ lines, language }: CodeBlockProps) => ReactElement;\ndeclare const CodeBlock: ({ lines, language }: CodeBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewCodeElement.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/code/PreviewCodeElement.d.ts",
        "code": {
            "const": "declare const PreviewCodeElement: ({ code }: PreviewCodeElementProps) => ReactElement;\ndeclare const PreviewCodeElement: ({ code }: PreviewCodeElementProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewCodeElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/code/PreviewCodeElement.js",
        "code": {
            "PreviewCodeElement": "const PreviewCodeElement = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewCodeElement = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexElement.js",
        "code": {
            "PreviewKatexElement": "const PreviewKatexElement = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewKatexElement = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 5
    },
    {
        "file": "KatexElement.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/KatexElement.d.ts",
        "code": {
            "const": "declare const KatexElement: ({ code }: KatexElementProps) => ReactElement;\ndeclare const KatexElement: ({ code }: KatexElementProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexElement.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexElement.d.ts",
        "code": {
            "const": "declare const PreviewKatexElement: ({ code }: PreviewKatexElementProps) => ReactElement;\ndeclare const PreviewKatexElement: ({ code }: PreviewKatexElementProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexBlock.d.ts",
        "code": {
            "const": "declare const PreviewKatexBlock: ({ code }: PreviewKatexBlockProps) => ReactElement;\ndeclare const PreviewKatexBlock: ({ code }: PreviewKatexBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "KatexBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/KatexBlock.d.ts",
        "code": {
            "const": "declare const KatexBlock: ({ code }: KatexBlockProps) => ReactElement;\ndeclare const KatexBlock: ({ code }: KatexBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "KatexErrorBoundary.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/KatexErrorBoundary.d.ts",
        "code": {
            "const": "declare const KatexErrorBoundary: ({ children, code }: KatexErrorBoundaryProps) => ReactElement;\ndeclare const KatexErrorBoundary: ({ children, code }: KatexErrorBoundaryProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexBlock.js",
        "code": {
            "PreviewKatexBlock": "const PreviewKatexBlock = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewKatexBlock = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 5
    },
    {
        "file": "EmojiElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/EmojiElement.js",
        "code": {
            "EmojiElement": "const EmojiElement = (emoji) => _jsx(Emoji, Object.assign({}, emoji));\nconst EmojiElement = (emoji) => _jsx(Emoji, Object.assign({}, emoji));"
        },
        "depth_rank": 5
    },
    {
        "file": "BigEmojiElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiElement.js",
        "code": {
            "BigEmojiElement": "const BigEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ big: true }, emoji));\nconst BigEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ big: true }, emoji));"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewBigEmojiBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/PreviewBigEmojiBlock.d.ts",
        "code": {
            "const": "declare const PreviewBigEmojiBlock: ({ emoji }: PreviewBigEmojiBlockProps) => ReactElement;\ndeclare const PreviewBigEmojiBlock: ({ emoji }: PreviewBigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "EmojiRenderer.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/EmojiRenderer.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "EmojiRenderer": "const EmojiRenderer = (_a) => {\nconst EmojiRenderer = (_a) => {\n    var _b;\n    var { big = false, preview = false } = _a, emoji = __rest(_a, [\"big\", \"preview\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewEmojiElement.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/PreviewEmojiElement.js",
        "code": {
            "PreviewEmojiElement": "const PreviewEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ preview: true }, emoji));\nconst PreviewEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ preview: true }, emoji));"
        },
        "depth_rank": 5
    },
    {
        "file": "BigEmojiBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiBlock.d.ts",
        "code": {
            "const": "declare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;\ndeclare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "Emoji.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/Emoji.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "Emoji": "const Emoji = (_a) => {\nconst Emoji = (_a) => {\n    var { big = false, preview = false } = _a, emoji = __rest(_a, [\"big\", \"preview\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "BigEmojiBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiBlock.js",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }) => (_jsx(\"div\", { role: 'presentation', children: emoji.map((emoji, index) => (_jsx(BigEmojiElement, Object.assign({}, emoji), index))) }));\nconst BigEmojiBlock = ({ emoji }) => (_jsx(\"div\", { role: 'presentation', children: emoji.map((emoji, index) => (_jsx(BigEmojiElement, Object.assign({}, emoji), index))) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewBigEmojiBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/emoji/PreviewBigEmojiBlock.js",
        "code": {
            "PreviewBigEmojiBlock": "const PreviewBigEmojiBlock = ({ emoji }) => (_jsx(_Fragment, { children: emoji.map((emoji, index) => (_jsx(PreviewEmojiElement, Object.assign({}, emoji), index))) }));\nconst PreviewBigEmojiBlock = ({ emoji }) => (_jsx(_Fragment, { children: emoji.map((emoji, index) => (_jsx(PreviewEmojiElement, Object.assign({}, emoji), index))) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewInlineElements.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/PreviewInlineElements.d.ts",
        "code": {
            "const": "declare const PreviewInlineElements: ({ children }: PreviewInlineElementsProps) => ReactElement;\ndeclare const PreviewInlineElements: ({ children }: PreviewInlineElementsProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "BoldSpan.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/BoldSpan.js",
        "code": {
            "BoldSpan": "const BoldSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst BoldSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' || block.type === 'PLAIN_TEXT' || block.type === 'STRIKE' || block.type === 'ITALIC') {\n            return _jsx(\"strong\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 5
    },
    {
        "file": "ItalicSpan.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/ItalicSpan.js",
        "code": {
            "ItalicSpan": "const ItalicSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst ItalicSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' || block.type === 'PLAIN_TEXT' || block.type === 'STRIKE' || block.type === 'BOLD') {\n            return _jsx(\"em\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 5
    },
    {
        "file": "StrikeSpan.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/StrikeSpan.js",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst StrikeSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' || block.type === 'PLAIN_TEXT' || block.type === 'ITALIC' || block.type === 'BOLD') {\n            return _jsx(\"del\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 5
    },
    {
        "file": "ImageElement.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ src, alt }: ImageElementProps) => ReactElement;\ndeclare const ImageElement: ({ src, alt }: ImageElementProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewInlineElements.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/PreviewInlineElements.js",
        "code": {
            "PreviewInlineElements": "const PreviewInlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\nconst PreviewInlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return _jsx(BoldSpan, { children: child.value }, index);"
        },
        "depth_rank": 5
    },
    {
        "file": "LinkSpan.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/LinkSpan.d.ts",
        "code": {
            "const": "declare const LinkSpan: ({ href, label }: LinkSpanProps) => ReactElement;\ndeclare const LinkSpan: ({ href, label }: LinkSpanProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "ItalicSpan.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/ItalicSpan.d.ts",
        "code": {
            "const": "declare const ItalicSpan: ({ children }: ItalicSpanProps) => ReactElement;\ndeclare const ItalicSpan: ({ children }: ItalicSpanProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "BoldSpan.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/BoldSpan.d.ts",
        "code": {
            "const": "declare const BoldSpan: ({ children }: BoldSpanProps) => ReactElement;\ndeclare const BoldSpan: ({ children }: BoldSpanProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "StrikeSpan.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/StrikeSpan.d.ts",
        "code": {
            "const": "declare const StrikeSpan: ({ children }: StrikeSpanProps) => ReactElement;\ndeclare const StrikeSpan: ({ children }: StrikeSpanProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "InlineElements.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/InlineElements.js",
        "code": {
            "InlineElements": "const InlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\nconst InlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return _jsx(BoldSpan, { children: child.value }, index);"
        },
        "depth_rank": 5
    },
    {
        "file": "InlineElements.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/elements/InlineElements.d.ts",
        "code": {
            "const": "declare const InlineElements: ({ children }: InlineElementsProps) => ReactElement;\ndeclare const InlineElements: ({ children }: InlineElementsProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "UnorderedListBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/UnorderedListBlock.d.ts",
        "code": {
            "const": "declare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => ReactElement;\ndeclare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "QuoteBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/QuoteBlock.js",
        "code": {
            "QuoteBlock": "const QuoteBlock = ({ children }) => (_jsx(\"blockquote\", { children: children.map((paragraph, index) => (_jsx(ParagraphBlock, { children: paragraph.value }, index))) }));\nconst QuoteBlock = ({ children }) => (_jsx(\"blockquote\", { children: children.map((paragraph, index) => (_jsx(ParagraphBlock, { children: paragraph.value }, index))) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "TaskListBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/TaskListBlock.d.ts",
        "code": {
            "const": "declare const TaksListBlock: ({ tasks }: TaskListBlockProps) => ReactElement;\ndeclare const TaksListBlock: ({ tasks }: TaskListBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "UnorderedListBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/UnorderedListBlock.js",
        "code": {
            "UnorderedListBlock": "const UnorderedListBlock = ({ items }) => (_jsx(\"ul\", { children: items.map((item, index) => (_jsx(\"li\", { children: _jsx(InlineElements, { children: item.value }) }, index))) }));\nconst UnorderedListBlock = ({ items }) => (_jsx(\"ul\", { children: items.map((item, index) => (_jsx(\"li\", { children: _jsx(InlineElements, { children: item.value }) }, index))) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "QuoteBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/QuoteBlock.d.ts",
        "code": {
            "const": "declare const QuoteBlock: ({ children }: QuoteBlockProps) => ReactElement;\ndeclare const QuoteBlock: ({ children }: QuoteBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "HeadingBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/HeadingBlock.d.ts",
        "code": {
            "const": "declare const HeadingBlock: ({ children, level }: HeadingBlockProps) => ReactElement;\ndeclare const HeadingBlock: ({ children, level }: HeadingBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "OrderedListBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/OrderedListBlock.d.ts",
        "code": {
            "const": "declare const OrderedListBlock: ({ items }: OrderedListBlockProps) => ReactElement;\ndeclare const OrderedListBlock: ({ items }: OrderedListBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "ParagraphBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/ParagraphBlock.js",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ children }) => (_jsx(\"div\", { children: _jsx(InlineElements, { children: children }) }));\nconst ParagraphBlock = ({ children }) => (_jsx(\"div\", { children: _jsx(InlineElements, { children: children }) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "OrderedListBlock.js",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/OrderedListBlock.js",
        "code": {
            "OrderedListBlock": "const OrderedListBlock = ({ items }) => (_jsx(\"ol\", { children: items.map(({ value, number }, index) => (_jsx(\"li\", { value: number, children: _jsx(InlineElements, { children: value }) }, index))) }));\nconst OrderedListBlock = ({ items }) => (_jsx(\"ol\", { children: items.map(({ value, number }, index) => (_jsx(\"li\", { value: number, children: _jsx(InlineElements, { children: value }) }, index))) }));"
        },
        "depth_rank": 5
    },
    {
        "file": "ParagraphBlock.d.ts",
        "path": "../Rocket.Chat/packages/gazzodown/dist/blocks/ParagraphBlock.d.ts",
        "code": {
            "const": "declare const ParagraphBlock: ({ children }: ParagraphBlockProps) => ReactElement;\ndeclare const ParagraphBlock: ({ children }: ParagraphBlockProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "Markup.spec.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/Markup.spec.tsx",
        "code": {
            "items": "\tconst items = screen.getAllByRole('listitem');\n\tconst items = screen.getAllByRole('listitem');\n\texpect(items).toHaveLength(3);\n\n\texpect(items[0]).toHaveTextContent('Hello');\n\texpect(items[1]).toHaveTextContent('Hola');\n\texpect(items[2]).toHaveTextContent('\u4f60\u597d');\n});\n\nit('renders a task list', () => {\n\trender(\n\t\t<Markup\n\t\t\ttokens={[\n\t\t\t\t{\n\t\t\t\t\ttype: 'TASKS',\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\t{ type: 'TASK', status: true, value: [{ type: 'PLAIN_TEXT', value: 'Chores' }] },",
            "checkboxes": "\tconst items = screen.getAllByRole('listitem');\n\tconst items = screen.getAllByRole('listitem');\n\texpect(items).toHaveLength(3);\n\n\texpect(items[0]).toHaveTextContent('Chores');\n\texpect(items[1]).toHaveTextContent('Dishes');\n\texpect(items[2]).toHaveTextContent('Laundry');\n\n\tconst checkboxes = screen.getAllByRole('checkbox');\n\tconst checkboxes = screen.getAllByRole('checkbox');\n\texpect(checkboxes).toHaveLength(3);\n\n\texpect(checkboxes[0]).toBeChecked();\n\texpect(checkboxes[1]).not.toBeChecked();\n\texpect(checkboxes[2]).toBeChecked();\n});\n\nit('renders a blockquote', () => {\n\trender(\n\t\t<Markup\n\t\t\ttokens={[\n\t\t\t\t{\n\t\t\t\t\ttype: 'QUOTE',\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'PARAGRAPH',\n\t\t\t\t\t\t\tvalue: [{ type: 'PLAIN_TEXT', value: 'Cogito ergo sum.' }],",
            "foo": "\texpect(screen.getByRole('region')).toHaveTextContent('```const foo = bar;```');\n\texpect(screen.getByRole('region')).toHaveTextContent('```const foo = bar;```');\n});\n\nit('renders a code block with language', async () => {\n\trender(\n\t\t<Suspense fallback={null}>"
        },
        "depth_rank": 4
    },
    {
        "file": "PreviewMarkup.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/PreviewMarkup.tsx",
        "code": {
            "PreviewMarkup": "const isOnlyBigEmojiBlock = (tokens: MessageParser.Root): tokens is [MessageParser.BigEmoji] =>\nconst isOnlyBigEmojiBlock = (tokens: MessageParser.Root): tokens is [MessageParser.BigEmoji] =>\n\ttokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\n\ntype PreviewMarkupProps = {\n\ttokens: MessageParser.Root;\n};\n\nconst PreviewMarkup = ({ tokens }: PreviewMarkupProps): ReactElement | null => {\nconst PreviewMarkup = ({ tokens }: PreviewMarkupProps): ReactElement | null => {\n\tif (isOnlyBigEmojiBlock(tokens)) {\n\t\treturn <PreviewBigEmojiBlock emoji={tokens[0].value} />;",
            "firstTask": "\t\t\tconst firstTask = firstBlock.value[0];\n\t\t\tconst firstTask = firstBlock.value[0];\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{firstTask.status ? '\\u2611' : '\\u2610'} <PreviewInlineElements children={firstTask.value} />",
            "firstParagraph": "\t\t\tconst firstParagraph = firstBlock.value[0];\n\t\t\tconst firstParagraph = firstBlock.value[0];\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t&gt; <PreviewInlineElements children={firstParagraph.value} />"
        },
        "depth_rank": 4
    },
    {
        "file": "Markup.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/Markup.tsx",
        "code": {
            "Markup": "const Markup = ({ tokens }: MarkupProps): ReactElement => (\nconst Markup = ({ tokens }: MarkupProps): ReactElement => ("
        },
        "depth_rank": 4
    },
    {
        "file": "ChannelMentionElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/mentions/ChannelMentionElement.tsx",
        "code": {
            "ChannelMentionElement": "const ChannelMentionElement = ({ mention }: ChannelMentionElementProps): ReactElement => {\nconst ChannelMentionElement = ({ mention }: ChannelMentionElementProps): ReactElement => {\n\tconst { resolveChannelMention, onChannelMentionClick } = useContext(MarkupInteractionContext);\n\tconst { resolveChannelMention, onChannelMentionClick } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "UserMentionElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/mentions/UserMentionElement.tsx",
        "code": {
            "UserMentionElement": "const UserMentionElement = ({ mention }: UserMentionElementProps): ReactElement => {\nconst UserMentionElement = ({ mention }: UserMentionElementProps): ReactElement => {\n\tconst { resolveUserMention, onUserMentionClick, isMobile, ownUserId, useRealName } = useContext(MarkupInteractionContext);\n\tconst { resolveUserMention, onUserMentionClick, isMobile, ownUserId, useRealName } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewUserMentionElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/mentions/PreviewUserMentionElement.tsx",
        "code": {
            "PreviewUserMentionElement": "const PreviewUserMentionElement = ({ mention }: PreviewUserMentionElementProps): ReactElement => <>@{mention}</>;\nconst PreviewUserMentionElement = ({ mention }: PreviewUserMentionElementProps): ReactElement => <>@{mention}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "CodeBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/code/CodeBlock.tsx",
        "code": {
            "ref": "const CodeBlock = ({ lines = [], language }: CodeBlockProps): ReactElement => {\nconst CodeBlock = ({ lines = [], language }: CodeBlockProps): ReactElement => {\n\tconst ref = useRef<HTMLElement>(null);\n\tconst ref = useRef<HTMLElement>(null);\n\n\tconst { highlightRegex } = useContext(MarkupInteractionContext);\n\tconst { highlightRegex } = useContext(MarkupInteractionContext);",
            "head": "\tconst code = useMemo(() => lines.map((line) => line.value.value).join('\\n'), [lines]);\n\tconst code = useMemo(() => lines.map((line) => line.value.value).join('\\n'), [lines]);\n\n\tconst content = useMemo(() => {\n\tconst content = useMemo(() => {\n\t\tconst regex = highlightRegex?.();\n\t\tconst regex = highlightRegex?.();\n\n\t\tif (regex) {\n\t\t\tconst chunks = code.split(regex);\n\t\t\tconst chunks = code.split(regex);\n\t\t\tconst head = chunks.shift() ?? '';\n\t\t\tconst head = chunks.shift() ?? '';\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<>{head}</>"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewCodeElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/code/PreviewCodeElement.tsx",
        "code": {
            "PreviewCodeElement": "const PreviewCodeElement = ({ code }: PreviewCodeElementProps): ReactElement => <>{code}</>;\nconst PreviewCodeElement = ({ code }: PreviewCodeElementProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "CodeElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/code/CodeElement.tsx",
        "code": {
            "CodeElement": "const CodeElement = ({ code }: CodeElementProps): ReactElement => (\nconst CodeElement = ({ code }: CodeElementProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "KatexElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/katex/KatexElement.tsx",
        "code": {
            "html": "const KatexElement = ({ code }: KatexElementProps): ReactElement => {\nconst KatexElement = ({ code }: KatexElementProps): ReactElement => {\n\tconst html = useMemo(\n\tconst html = useMemo(\n\t\t() =>\n\t\t\tkatex.renderToString(code, {\n\t\t\t\tdisplayMode: false,\n\t\t\t\tmacros: {\n\t\t\t\t\t'\\\\href': '\\\\@secondoftwo',\n\t\t\t\t},\n\t\t\t}),\n\t\t[code],\n\t);\n\n\treturn <span dangerouslySetInnerHTML={{ __html: html }} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/katex/PreviewKatexElement.tsx",
        "code": {
            "PreviewKatexElement": "const PreviewKatexElement = ({ code }: PreviewKatexElementProps): ReactElement => <>{code}</>;\nconst PreviewKatexElement = ({ code }: PreviewKatexElementProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewKatexBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/katex/PreviewKatexBlock.tsx",
        "code": {
            "PreviewKatexBlock": "const PreviewKatexBlock = ({ code }: PreviewKatexBlockProps): ReactElement => <>{code}</>;\nconst PreviewKatexBlock = ({ code }: PreviewKatexBlockProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "KatexErrorBoundary.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/katex/KatexErrorBoundary.tsx",
        "code": {
            "KatexErrorBoundary": "const KatexErrorBoundary = ({ children, code }: KatexErrorBoundaryProps): ReactElement => {\nconst KatexErrorBoundary = ({ children, code }: KatexErrorBoundaryProps): ReactElement => {\n\tconst [error, setError] = useState<Error | null>(null);\n\tconst [error, setError] = useState<Error | null>(null);\n\treturn <ErrorBoundary children={children} onError={setError} fallback={<Fallback title={error?.message}>{code}</Fallback>} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "EmojiElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/EmojiElement.tsx",
        "code": {
            "EmojiElement": "const EmojiElement = (emoji: EmojiElementProps): ReactElement => <Emoji {...emoji} />;\nconst EmojiElement = (emoji: EmojiElementProps): ReactElement => <Emoji {...emoji} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "BigEmojiElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/BigEmojiElement.tsx",
        "code": {
            "BigEmojiElement": "const BigEmojiElement = (emoji: BigEmojiElementProps): ReactElement => <Emoji big {...emoji} />;\nconst BigEmojiElement = (emoji: BigEmojiElementProps): ReactElement => <Emoji big {...emoji} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "BigEmojiBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/BigEmojiBlock.tsx",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => (\nconst BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewEmojiElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/PreviewEmojiElement.tsx",
        "code": {
            "PreviewEmojiElement": "const PreviewEmojiElement = (emoji: PreviewEmojiElementProps): ReactElement => <Emoji preview {...emoji} />;\nconst PreviewEmojiElement = (emoji: PreviewEmojiElementProps): ReactElement => <Emoji preview {...emoji} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewBigEmojiBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/PreviewBigEmojiBlock.tsx",
        "code": {
            "PreviewBigEmojiBlock": "const PreviewBigEmojiBlock = ({ emoji }: PreviewBigEmojiBlockProps): ReactElement => (\nconst PreviewBigEmojiBlock = ({ emoji }: PreviewBigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "EmojiRenderer.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/EmojiRenderer.tsx",
        "code": {
            "EmojiRenderer": "const EmojiRenderer = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\nconst EmojiRenderer = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\n\tconst { detectEmoji } = useContext(MarkupInteractionContext);\n\tconst { detectEmoji } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "Emoji.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/emoji/Emoji.tsx",
        "code": {
            "Emoji": "const Emoji = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\nconst Emoji = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\n\tconst { convertAsciiToEmoji, useEmoji } = useContext(MarkupInteractionContext);\n\tconst { convertAsciiToEmoji, useEmoji } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "ColorElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/colors/ColorElement.tsx",
        "code": {
            "ColorElement": "const ColorElement = ({ r, g, b, a }: ColorElementProps): ReactElement => (\nconst ColorElement = ({ r, g, b, a }: ColorElementProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "ImageElement.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/ImageElement.tsx",
        "code": {
            "plainAlt": "const style = {\nconst style = {\n\tmaxWidth: '100%',\n};\n\ntype ImageElementProps = {\n\tsrc: string;\n\talt: MessageParser.Markup;\n};\n\nconst ImageElement = ({ src, alt }: ImageElementProps): ReactElement => {\nconst ImageElement = ({ src, alt }: ImageElementProps): ReactElement => {\n\tconst plainAlt = useMemo(() => flattenMarkup(alt), [alt]);\n\tconst plainAlt = useMemo(() => flattenMarkup(alt), [alt]);\n\n\treturn (\n\t\t<a href={src} target='_blank' rel='noopener noreferrer' title={plainAlt}>"
        },
        "depth_rank": 5
    },
    {
        "file": "InlineElements.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/InlineElements.tsx",
        "code": {
            "InlineElements": "const InlineElements = ({ children }: InlineElementsProps): ReactElement => (\nconst InlineElements = ({ children }: InlineElementsProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "ItalicSpan.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/ItalicSpan.tsx",
        "code": {
            "ItalicSpan": "const ItalicSpan = ({ children }: ItalicSpanProps): ReactElement => (\nconst ItalicSpan = ({ children }: ItalicSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "LinkSpan.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/LinkSpan.tsx",
        "code": {
            "labelElements": "const LinkSpan = ({ href, label }: LinkSpanProps): ReactElement => {\nconst LinkSpan = ({ href, label }: LinkSpanProps): ReactElement => {\n\tconst children = useMemo(() => {\n\tconst children = useMemo(() => {\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\t\tswitch (child.type) {\n\t\t\t\tcase 'PLAIN_TEXT':\n\t\t\t\t\treturn <PlainSpan key={index} text={child.value} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "StrikeSpan.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/StrikeSpan.tsx",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }: StrikeSpanProps): ReactElement => (\nconst StrikeSpan = ({ children }: StrikeSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "PlainSpan.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/PlainSpan.tsx",
        "code": {
            "PlainSpan": "const PlainSpan = ({ text }: PlainSpanProps): ReactElement => {\nconst PlainSpan = ({ text }: PlainSpanProps): ReactElement => {\n\tconst { highlightRegex, markRegex } = useContext(MarkupInteractionContext);\n\tconst { highlightRegex, markRegex } = useContext(MarkupInteractionContext);",
            "head": "\t\t\tconst chunks = text.split(markRegex());\n\t\t\tconst chunks = text.split(markRegex());\n\t\t\tconst head = chunks.shift() ?? '';\n\t\t\tconst head = chunks.shift() ?? '';\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<>{head}</>"
        },
        "depth_rank": 5
    },
    {
        "file": "PreviewInlineElements.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/PreviewInlineElements.tsx",
        "code": {
            "PreviewInlineElements": "const PreviewInlineElements = ({ children }: PreviewInlineElementsProps): ReactElement => (\nconst PreviewInlineElements = ({ children }: PreviewInlineElementsProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "BoldSpan.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/elements/BoldSpan.tsx",
        "code": {
            "BoldSpan": "const BoldSpan = ({ children }: BoldSpanProps): ReactElement => (\nconst BoldSpan = ({ children }: BoldSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "QuoteBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/blocks/QuoteBlock.tsx",
        "code": {
            "QuoteBlock": "const QuoteBlock = ({ children }: QuoteBlockProps): ReactElement => (\nconst QuoteBlock = ({ children }: QuoteBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "TaskListBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/blocks/TaskListBlock.tsx",
        "code": {
            "TaksListBlock": "const TaksListBlock = ({ tasks }: TaskListBlockProps): ReactElement => {\nconst TaksListBlock = ({ tasks }: TaskListBlockProps): ReactElement => {\n\tconst { onTaskChecked } = useContext(MarkupInteractionContext);\n\tconst { onTaskChecked } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "OrderedListBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/blocks/OrderedListBlock.tsx",
        "code": {
            "OrderedListBlock": "const OrderedListBlock = ({ items }: OrderedListBlockProps): ReactElement => (\nconst OrderedListBlock = ({ items }: OrderedListBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "ParagraphBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/blocks/ParagraphBlock.tsx",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ children }: ParagraphBlockProps): ReactElement => (\nconst ParagraphBlock = ({ children }: ParagraphBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "UnorderedListBlock.tsx",
        "path": "../Rocket.Chat/packages/gazzodown/src/blocks/UnorderedListBlock.tsx",
        "code": {
            "UnorderedListBlock": "const UnorderedListBlock = ({ items }: UnorderedListBlockProps): ReactElement => (\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "useVerifyPassword.ts",
        "path": "../Rocket.Chat/packages/ui-contexts/src/hooks/useVerifyPassword.ts",
        "code": {
            "repeatingCharsHash": "\tconst handleRepeatingChars = (maxRepeatingChars?: number) => {\n\tconst handleRepeatingChars = (maxRepeatingChars?: number) => {\n\t\tconst repeatingCharsHash = {} as Record<string, number>;\n\t\tconst repeatingCharsHash = {} as Record<string, number>;",
            "passwordVerifications": "\tconst passwordVerifications = {} as Record<string, { isValid: boolean; limit?: number }>;\n\tconst passwordVerifications = {} as Record<string, { isValid: boolean; limit?: number }>;"
        },
        "depth_rank": 5
    },
    {
        "file": "useRoute.ts",
        "path": "../Rocket.Chat/packages/ui-contexts/src/hooks/useRoute.ts",
        "code": {
            "queryStringParameters": "\t\t\t\tconst search =\n\t\t\t\tconst search =\n\t\t\t\t\ttypeof queryStringParameters === 'function' ? queryStringParameters(router.getSearchParameters()) : queryStringParameters;\n\t\t\t\t\ttypeof queryStringParameters === 'function' ? queryStringParameters(router.getSearchParameters()) : queryStringParameters;\n\t\t\t\trouter.navigate({ name, params, search }, { replace: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "useSettingSetValue.ts",
        "path": "../Rocket.Chat/packages/ui-contexts/src/hooks/useSettingSetValue.ts",
        "code": {
            "dispatch": "\tconst dispatch = useSettingsDispatch();\n\tconst dispatch = useSettingsDispatch();\n\treturn useCallback((value: T) => dispatch([{ _id, value }]), [dispatch, _id]);"
        },
        "depth_rank": 5
    },
    {
        "file": "useLogout.ts",
        "path": "../Rocket.Chat/packages/ui-contexts/src/hooks/useLogout.ts",
        "code": {
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { logout } = useContext(UserContext);\n\tconst { logout } = useContext(UserContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "useDeviceConstraints.ts",
        "path": "../Rocket.Chat/packages/ui-contexts/src/hooks/useDeviceConstraints.ts",
        "code": {
            "selectedAudioInputDeviceId": "\tconst selectedAudioInputDeviceId = context.selectedAudioInputDevice?.id;\n\tconst selectedAudioInputDeviceId = context.selectedAudioInputDevice?.id;\n\treturn { audio: selectedAudioInputDeviceId === 'default' ? true : { deviceId: { exact: selectedAudioInputDeviceId } } };"
        },
        "depth_rank": 5
    },
    {
        "file": "auth.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/auth.js",
        "code": {
            "loginPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst loginPropsSchema = {\nconst loginPropsSchema = {\n    type: 'object',\n    properties: {\n        user: { type: 'object', nullable: true },"
        },
        "depth_rank": 5
    },
    {
        "file": "permissions.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/permissions.js",
        "code": {
            "permissionUpdatePropsSchema": "const permissionUpdatePropsSchema = {\nconst permissionUpdatePropsSchema = {\n    type: 'object',\n    properties: {\n        permissions: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    _id: { type: 'string' },"
        },
        "depth_rank": 5
    },
    {
        "file": "UsersSetPreferenceParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UsersSetPreferenceParamsPOST.js",
        "code": {
            "UsersSetPreferencesParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst UsersSetPreferencesParamsPostSchema = {\nconst UsersSetPreferencesParamsPostSchema = {\n    type: 'object',\n    properties: {\n        userId: {\n            type: 'string',\n            nullable: true,\n        },\n        data: {\n            type: 'object',\n            properties: {\n                newRoomNotification: {\n                    type: 'string',\n                    nullable: true,\n                },\n                newMessageNotification: {\n                    type: 'string',\n                    nullable: true,\n                },\n                clockMode: {\n                    type: 'number',\n                    nullable: true,\n                },\n                useEmojis: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                convertAsciiEmoji: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                alsoSendThreadToChannel: {\n                    type: 'string',\n                    enum: ['default', 'always', 'never'],\n                    nullable: true,\n                },\n                saveMobileBandwidth: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                collapseMediaByDefault: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                autoImageLoad: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                emailNotificationMode: {\n                    type: 'string',\n                    nullable: true,\n                },\n                unreadAlert: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                notificationsSoundVolume: {\n                    type: 'number',\n                    nullable: true,\n                },\n                desktopNotifications: {\n                    type: 'string',\n                    nullable: true,\n                },\n                pushNotifications: {\n                    type: 'string',\n                    nullable: true,\n                },\n                enableAutoAway: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                highlights: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                    },\n                    nullable: true,\n                },\n                showThreadsInMainChannel: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                desktopNotificationRequireInteraction: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideUsernames: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideRoles: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                displayAvatars: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideFlexTab: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sendOnEnter: {\n                    type: 'string',\n                    nullable: true,\n                },\n                language: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarShowFavorites: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarShowUnread: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarSortby: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarViewMode: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarDisplayAvatar: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarGroupByType: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                muteFocusedConversations: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                dontAskAgainList: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            action: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersSendConfirmationEmailParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UsersSendConfirmationEmailParamsPOST.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersGetAvatarSuggestionParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UsersGetAvatarSuggestionParamsGET.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "UsersGetAvatarSuggestionParamsGETSchema": "const UsersGetAvatarSuggestionParamsGETSchema = {\nconst UsersGetAvatarSuggestionParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "UserCreateParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UserCreateParamsPOST.js",
        "code": {
            "userCreateParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst userCreateParamsPostSchema = {\nconst userCreateParamsPostSchema = {\n    type: 'object',\n    properties: {\n        email: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersCheckUsernameAvailabilityParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UsersCheckUsernameAvailabilityParamsGET.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "UserSetActiveStatusParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/users/UserSetActiveStatusParamsPOST.js",
        "code": {
            "UserCreateParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst UserCreateParamsPostSchema = {\nconst UserCreateParamsPostSchema = {\n    type: 'object',\n    properties: {\n        userId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsMembersProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsMembersProps.js",
        "code": {
            "GroupsMembersPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\n    offset: {\n        type: 'number',\n        nullable: true,\n    },\n    count: {\n        type: 'number',\n        nullable: true,\n    },\n    filter: {\n        type: 'string',\n        nullable: true,\n    },\n    status: {\n        type: 'array',\n        items: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsListProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsListProps.js",
        "code": {
            "groupsListPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst groupsListPropsSchema = {};\nconst groupsListPropsSchema = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsCreateProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsCreateProps.js",
        "code": {
            "GroupsCreatePropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GroupsCreatePropsSchema = {\nconst GroupsCreatePropsSchema = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n        },\n        members: {\n            type: 'array',\n            items: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "DmFileProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/dm/DmFileProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "DmMessagesProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/dm/DmMessagesProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "DmMembersProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/dm/DmMembersProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsMessagesProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsMessagesProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsGetAllUserMentionsByChannelProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsGetAllUserMentionsByChannelProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsModeratorsProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsModeratorsProps.js",
        "code": {
            "channelsModeratorsPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsModeratorsPropsSchema = {\nconst channelsModeratorsPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                roomId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsConvertToTeamProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsConvertToTeamProps.js",
        "code": {
            "channelsConvertToTeamPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsConvertToTeamPropsSchema = {\nconst channelsConvertToTeamPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                channelId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsListProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsListProps.js",
        "code": {
            "channelsListPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst channelsListPropsSchema = {};\nconst channelsListPropsSchema = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsHistoryProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsHistoryProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsSetReadOnlyProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsSetReadOnlyProps.js",
        "code": {
            "channelsSetReadOnlyPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsSetReadOnlyPropsSchema = {\nconst channelsSetReadOnlyPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                roomId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "IntegrationsHistoryProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/integrations/IntegrationsHistoryProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "integrationsHistorySchema": "const integrationsHistorySchema = {\nconst integrationsHistorySchema = {\n    type: 'object',\n    properties: {\n        id: { type: 'string', nullable: false, minLength: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "DownloadPendingAvatarsParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/DownloadPendingAvatarsParamsPOST.js",
        "code": {
            "DownloadPendingAvatarsParamsPOSTSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst DownloadPendingAvatarsParamsPOSTSchema = {\nconst DownloadPendingAvatarsParamsPOSTSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetImportProgressParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/GetImportProgressParamsGET.js",
        "code": {
            "GetImportProgressParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetImportProgressParamsGETSchema = {\nconst GetImportProgressParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetCurrentImportOperationParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/GetCurrentImportOperationParamsGET.js",
        "code": {
            "GetCurrentImportOperationParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetCurrentImportOperationParamsGETSchema = {\nconst GetCurrentImportOperationParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetImportFileDataParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/GetImportFileDataParamsGET.js",
        "code": {
            "GetImportFileDataParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetImportFileDataParamsGETSchema = {\nconst GetImportFileDataParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetLatestImportOperationsParamsGET.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/GetLatestImportOperationsParamsGET.js",
        "code": {
            "GetLatestImportOperationsParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetLatestImportOperationsParamsGETSchema = {\nconst GetLatestImportOperationsParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "DownloadPendingFilesParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/DownloadPendingFilesParamsPOST.js",
        "code": {
            "DownloadPendingFilesParamsPOSTSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst DownloadPendingFilesParamsPOSTSchema = {\nconst DownloadPendingFilesParamsPOSTSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "StartImportParamsPOST.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/import/StartImportParamsPOST.js",
        "code": {
            "StartImportParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst StartImportParamsPostSchema = {\nconst StartImportParamsPostSchema = {\n    type: 'object',\n    properties: {\n        input: {\n            type: 'object',\n            properties: {\n                users: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            user_id: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "VideoConfListProps.js",
        "path": "../Rocket.Chat/packages/rest-typings/dist/v1/videoConference/VideoConfListProps.js",
        "code": {
            "videoConfListPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst videoConfListPropsSchema = {\nconst videoConfListPropsSchema = {\n    type: 'object',\n    properties: {\n        roomId: {\n            type: 'string',\n            nullable: false,\n        },\n        offset: { type: 'number', nullable: true },"
        },
        "depth_rank": 6
    },
    {
        "file": "permissions.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/permissions.ts",
        "code": {
            "permissionUpdatePropsSchema": "const permissionUpdatePropsSchema = {\nconst permissionUpdatePropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tpermissions: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\t_id: { type: 'string' },"
        },
        "depth_rank": 5
    },
    {
        "file": "roles.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/roles.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype RoleDeleteProps = { roleId: IRole['_id'] };"
        },
        "depth_rank": 5
    },
    {
        "file": "customUserStatus.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/customUserStatus.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype CustomUserStatusListProps = PaginatedRequest<{ query: string }>;"
        },
        "depth_rank": 5
    },
    {
        "file": "statistics.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/statistics.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype StatisticsProps = { refresh?: 'true' | 'false' };"
        },
        "depth_rank": 5
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/rooms.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype RoomsAutoCompleteChannelAndPrivateProps = { selector: string };"
        },
        "depth_rank": 5
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype UsersInfo = { userId?: IUser['_id']; username?: IUser['username'] };"
        },
        "depth_rank": 5
    },
    {
        "file": "email-inbox.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/email-inbox.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype EmailInboxListProps = PaginatedRequest<{ query?: string }>;"
        },
        "depth_rank": 5
    },
    {
        "file": "customSounds.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/customSounds.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype CustomSoundsList = PaginatedRequest<{ query: string }>;"
        },
        "depth_rank": 5
    },
    {
        "file": "auth.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/auth.ts",
        "code": {
            "loginPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\n\nconst loginPropsSchema = {\nconst loginPropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuser: { type: 'object', nullable: true },"
        },
        "depth_rank": 5
    },
    {
        "file": "UserSetActiveStatusParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UserSetActiveStatusParamsPOST.ts",
        "code": {
            "UserCreateParamsPostSchema": "const UserCreateParamsPostSchema = {\nconst UserCreateParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuserId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersGetAvatarSuggestionParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UsersGetAvatarSuggestionParamsGET.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "UsersGetAvatarSuggestionParamsGETSchema": "const UsersGetAvatarSuggestionParamsGETSchema = {\nconst UsersGetAvatarSuggestionParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersSendConfirmationEmailParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UsersSendConfirmationEmailParamsPOST.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersSetPreferenceParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UsersSetPreferenceParamsPOST.ts",
        "code": {
            "UsersSetPreferencesParamsPostSchema": "const UsersSetPreferencesParamsPostSchema = {\nconst UsersSetPreferencesParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuserId: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tdata: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tnewRoomNotification: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tnewMessageNotification: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tclockMode: {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tuseEmojis: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tconvertAsciiEmoji: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\talsoSendThreadToChannel: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['default', 'always', 'never'],\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsaveMobileBandwidth: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tcollapseMediaByDefault: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tautoImageLoad: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\temailNotificationMode: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tunreadAlert: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tnotificationsSoundVolume: {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdesktopNotifications: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tpushNotifications: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tenableAutoAway: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thighlights: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tshowThreadsInMainChannel: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdesktopNotificationRequireInteraction: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideUsernames: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideRoles: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdisplayAvatars: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideFlexTab: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsendOnEnter: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tlanguage: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarShowFavorites: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarShowUnread: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarSortby: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarViewMode: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarDisplayAvatar: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarGroupByType: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tmuteFocusedConversations: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdontAskAgainList: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\taction: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersCheckUsernameAvailabilityParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UsersCheckUsernameAvailabilityParamsGET.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "UserCreateParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/users/UserCreateParamsPOST.ts",
        "code": {
            "userCreateParamsPostSchema": "const userCreateParamsPostSchema = {\nconst userCreateParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\temail: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsMembersProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsMembersProps.ts",
        "code": {
            "GroupsMembersPropsSchema": "const GroupsMembersPropsSchema = withGroupBaseProperties({\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\n\toffset: {\n\t\ttype: 'number',\n\t\tnullable: true,\n\t},\n\tcount: {\n\t\ttype: 'number',\n\t\tnullable: true,\n\t},\n\tfilter: {\n\t\ttype: 'string',\n\t\tnullable: true,\n\t},\n\tstatus: {\n\t\ttype: 'array',\n\t\titems: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsListProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsListProps.ts",
        "code": {
            "groupsListPropsSchema": "const groupsListPropsSchema = {};\nconst groupsListPropsSchema = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "GroupsCreateProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsCreateProps.ts",
        "code": {
            "GroupsCreatePropsSchema": "const GroupsCreatePropsSchema = {\nconst GroupsCreatePropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tname: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tmembers: {\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "DmMembersProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/dm/DmMembersProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "DmMessagesProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/dm/DmMessagesProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "DmFileProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/dm/DmFileProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsMessagesProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsMessagesProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsGetAllUserMentionsByChannelProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsGetAllUserMentionsByChannelProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsConvertToTeamProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsConvertToTeamProps.ts",
        "code": {
            "channelsConvertToTeamPropsSchema": "const channelsConvertToTeamPropsSchema = {\nconst channelsConvertToTeamPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tchannelId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsListProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsListProps.ts",
        "code": {
            "channelsListPropsSchema": "const channelsListPropsSchema = {};\nconst channelsListPropsSchema = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsSetReadOnlyProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsSetReadOnlyProps.ts",
        "code": {
            "channelsSetReadOnlyPropsSchema": "const channelsSetReadOnlyPropsSchema = {\nconst channelsSetReadOnlyPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\troomId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsModeratorsProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsModeratorsProps.ts",
        "code": {
            "channelsModeratorsPropsSchema": "const channelsModeratorsPropsSchema = {\nconst channelsModeratorsPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\troomId: { type: 'string' },"
        },
        "depth_rank": 6
    },
    {
        "file": "ChannelsHistoryProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsHistoryProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "IntegrationsHistoryProps.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/integrations/IntegrationsHistoryProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "integrationsHistorySchema": "const integrationsHistorySchema = {\nconst integrationsHistorySchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tid: { type: 'string', nullable: false, minLength: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "GetImportFileDataParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/GetImportFileDataParamsGET.ts",
        "code": {
            "GetImportFileDataParamsGETSchema": "const GetImportFileDataParamsGETSchema = {\nconst GetImportFileDataParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetLatestImportOperationsParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/GetLatestImportOperationsParamsGET.ts",
        "code": {
            "GetLatestImportOperationsParamsGETSchema": "const GetLatestImportOperationsParamsGETSchema = {\nconst GetLatestImportOperationsParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetCurrentImportOperationParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/GetCurrentImportOperationParamsGET.ts",
        "code": {
            "GetCurrentImportOperationParamsGETSchema": "const GetCurrentImportOperationParamsGETSchema = {\nconst GetCurrentImportOperationParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "DownloadPendingAvatarsParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/DownloadPendingAvatarsParamsPOST.ts",
        "code": {
            "DownloadPendingAvatarsParamsPOSTSchema": "const DownloadPendingAvatarsParamsPOSTSchema = {\nconst DownloadPendingAvatarsParamsPOSTSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "DownloadPendingFilesParamsPOST.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/DownloadPendingFilesParamsPOST.ts",
        "code": {
            "DownloadPendingFilesParamsPOSTSchema": "const DownloadPendingFilesParamsPOSTSchema = {\nconst DownloadPendingFilesParamsPOSTSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "GetImportProgressParamsGET.ts",
        "path": "../Rocket.Chat/packages/rest-typings/src/v1/import/GetImportProgressParamsGET.ts",
        "code": {
            "GetImportProgressParamsGETSchema": "const GetImportProgressParamsGETSchema = {\nconst GetImportProgressParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 6
    },
    {
        "file": "base64.spec.ts",
        "path": "../Rocket.Chat/packages/base64/src/base64.spec.ts",
        "code": {
            "expectedAsBinary": "\t\tconst encoded = Base64.encode(array);\n\t\tconst encoded = Base64.encode(array);\n\t\texpect(encoded).toBe(b64);\n\n\t\tconst decoded = Base64.decode(b64);\n\t\tconst decoded = Base64.decode(b64);\n\t\tconst expectedAsBinary = Uint8Array.from({ length: array.length }, (_, i) => array[i]);\n\t\tconst expectedAsBinary = Uint8Array.from({ length: array.length }, (_, i) => array[i]);"
        },
        "depth_rank": 4
    },
    {
        "file": "base64.ts",
        "path": "../Rocket.Chat/packages/base64/src/base64.ts",
        "code": {
            "ret": "const newBinary = (len: number) => {\nconst newBinary = (len: number) => {\n\tif (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n\t\tconst ret = Object.assign(\n\t\tconst ret = Object.assign(\n\t\t\tArray.from({ length: len }, () => 0),"
        },
        "depth_rank": 4
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/instance-status/dist/index.js",
        "code": {
            "currentInstance": "const ID = (0, uuid_1.v4)();\nconst ID = (0, uuid_1.v4)();\nfunction id() {\nfunction id() {\n    return ID;\n}\nconst currentInstance = {\nconst currentInstance = {\n    name: '',\n    extraInformation: {},",
            "function": "async function onExit() {\nasync function onExit() {\n    await unregisterInstance();\n}\nasync function updateConnections(conns) {\nasync function updateConnections(conns) {\n    await models_1.InstanceStatus.updateOne({\n        _id: ID,\n    }, {"
        },
        "depth_rank": 4
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/packages/instance-status/src/index.ts",
        "code": {
            "currentInstance": "const ID = uuidv4();\nconst ID = uuidv4();\n\nfunction id() {\nfunction id() {\n\treturn ID;\n}\n\nconst currentInstance = {\nconst currentInstance = {\n\tname: '',\n\textraInformation: {},",
            "result": "async function unregisterInstance() {\nasync function unregisterInstance() {\n\ttry {\n\t\tconst result = await InstanceStatusModel.deleteOne({ _id: ID });\n\t\tconst result = await InstanceStatusModel.deleteOne({ _id: ID });"
        },
        "depth_rank": 4
    },
    {
        "file": "validate.ts",
        "path": "../Rocket.Chat/packages/cas-validate/src/validate.ts",
        "code": {
            "query": "\tconst validatePath = version < 2.0 ? 'validate' : 'proxyValidate';\n\tconst validatePath = version < 2.0 ? 'validate' : 'proxyValidate';\n\n\tconst query = {\n\tconst query = {\n\t\tticket,\n\t\tservice,\n\t\t...(renew ? { renew: 1 } : {}),"
        },
        "depth_rank": 4
    },
    {
        "file": "MessageFooterCallout.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCallout.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageFooterCallout": "const MessageFooterCallout = forwardRef(function MessageFooterCallout(_a, ref) {\nconst MessageFooterCallout = forwardRef(function MessageFooterCallout(_a, ref) {\n    var { dashed } = _a, props = __rest(_a, [\"dashed\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutDivider.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutDivider.js",
        "code": {
            "MessageFooterCalloutDivider": "const MessageFooterCalloutDivider = forwardRef(function MessageFooterCalloutDivider(props, ref) {\nconst MessageFooterCalloutDivider = forwardRef(function MessageFooterCalloutDivider(props, ref) {\n    return _jsx(Box, Object.assign({ is: 'hr', ref: ref, borderInlineStart: '1px solid', mi: 'x4', flexShrink: 0 }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutContent.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutContent.js",
        "code": {
            "MessageFooterCalloutContent": "const MessageFooterCalloutContent = forwardRef(function MessageFooterCalloutContent(props, ref) {\nconst MessageFooterCalloutContent = forwardRef(function MessageFooterCalloutContent(props, ref) {\n    return _jsx(Box, Object.assign({ mi: 'x4', ref: ref, flexWrap: 'wrap', textAlign: 'center', color: 'default', flexGrow: 1, flexShrink: 1 }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutAction.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutAction.js",
        "code": {
            "MessageFooterCalloutAction": "const MessageFooterCalloutAction = forwardRef(function MessageFooterCalloutAction(props, ref) {\nconst MessageFooterCalloutAction = forwardRef(function MessageFooterCalloutAction(props, ref) {\n    return _jsx(Button, Object.assign({ mi: 'x4', ref: ref, primary: true, small: true, flexShrink: 0 }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerToolbarActions.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerToolbarActions.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposerToolbarActions": "const MessageComposerToolbarActions = (_a) => {\nconst MessageComposerToolbarActions = (_a) => {\n    var props = __rest(_a, []);\n    return _jsx(ButtonGroup, Object.assign({ role: 'toolbar', small: true, mis: 'x4' }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerIcon.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerIcon.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposerIcon": "const MessageComposerIcon = (_a) => {\nconst MessageComposerIcon = (_a) => {\n    var { name } = _a, props = __rest(_a, [\"name\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerToolbarSubmit.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerToolbarSubmit.js",
        "code": {
            "MessageComposerToolbarSubmit": "const MessageComposerToolbarSubmit = (props) => _jsx(ButtonGroup, Object.assign({ small: true }, props));\nconst MessageComposerToolbarSubmit = (props) => _jsx(ButtonGroup, Object.assign({ small: true }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerActionsDivider.d.ts",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerActionsDivider.d.ts",
        "code": {
            "const": "declare const MessageComposerActionsDivider: ({ height, ...props }: ComponentProps<typeof Divider>) => ReactElement;\ndeclare const MessageComposerActionsDivider: ({ height, ...props }: ComponentProps<typeof Divider>) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerSkeleton.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerSkeleton.js",
        "code": {
            "MessageComposerSkeleton": "const MessageComposerSkeleton = () => (_jsxs(MessageComposer, { children: [_jsx(Skeleton, { p: 'x4', m: 'x8' }), _jsxs(MessageComposerToolbar, { children: [_jsxs(MessageComposerToolbarActions, { children: [_jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(MessageComposerActionsDivider, {}), _jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(Skeleton, { p: 'x4', pi: 'x6' })] }), _jsxs(MessageComposerToolbarSubmit, { children: [_jsx(Skeleton, { p: 'x4', width: 60 }), _jsx(Skeleton, { p: 'x4', width: 60 })] })] })] }));\nconst MessageComposerSkeleton = () => (_jsxs(MessageComposer, { children: [_jsx(Skeleton, { p: 'x4', m: 'x8' }), _jsxs(MessageComposerToolbar, { children: [_jsxs(MessageComposerToolbarActions, { children: [_jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(MessageComposerActionsDivider, {}), _jsx(Skeleton, { p: 'x4', pi: 'x6' }), _jsx(Skeleton, { p: 'x4', pi: 'x6' })] }), _jsxs(MessageComposerToolbarSubmit, { children: [_jsx(Skeleton, { p: 'x4', width: 60 }), _jsx(Skeleton, { p: 'x4', width: 60 })] })] })] }));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerActionsDivider.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerActionsDivider.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposerActionsDivider": "const MessageComposerActionsDivider = (_a) => {\nconst MessageComposerActionsDivider = (_a) => {\n    var { height = 'x20' } = _a, props = __rest(_a, [\"height\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposer.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposer.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposer": "const MessageComposer = forwardRef(function MessageComposer(_a, ref) {\nconst MessageComposer = forwardRef(function MessageComposer(_a, ref) {\n    var { variant } = _a, props = __rest(_a, [\"variant\"]);"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerAction.js",
        "path": "../Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerAction.js",
        "code": {
            "MessageComposerAction": "const MessageComposerAction = (props) => _jsx(IconButton, Object.assign({ small: true }, props));\nconst MessageComposerAction = (props) => _jsx(IconButton, Object.assign({ small: true }, props));"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutDivider.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutDivider.tsx",
        "code": {
            "MessageFooterCalloutDivider": "const MessageFooterCalloutDivider = forwardRef<HTMLButtonElement>(function MessageFooterCalloutDivider(props, ref): ReactElement {\nconst MessageFooterCalloutDivider = forwardRef<HTMLButtonElement>(function MessageFooterCalloutDivider(props, ref): ReactElement {\n\treturn <Box is='hr' ref={ref} borderInlineStart='1px solid' mi='x4' flexShrink={0} {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCallout.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCallout.tsx",
        "code": {
            "MessageFooterCallout": "const MessageFooterCallout = forwardRef<\nconst MessageFooterCallout = forwardRef<\n\tHTMLElement,\n\tOmit<HTMLAttributes<HTMLElement>, 'is'> & {\n\t\tchildren: ReactNode;\n\t\tis?: React.ElementType<any>;\n\t\tvariant?: 'default' | 'error';\n\t\tdashed?: boolean;\n\t}\n>(function MessageFooterCallout({ dashed, ...props }, ref): ReactElement {\n>(function MessageFooterCallout({ dashed, ...props }, ref): ReactElement {\n\treturn (\n\t\t<Box\n\t\t\tref={ref}"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutContent.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutContent.tsx",
        "code": {
            "MessageFooterCalloutContent": "const MessageFooterCalloutContent = forwardRef<\nconst MessageFooterCalloutContent = forwardRef<\n\tHTMLButtonElement,\n\t{\n\t\tchildren: ReactNode;\n\t}\n>(function MessageFooterCalloutContent(props, ref): ReactElement {\n>(function MessageFooterCalloutContent(props, ref): ReactElement {\n\treturn <Box mi='x4' ref={ref} flexWrap='wrap' textAlign='center' color='default' flexGrow={1} flexShrink={1} {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageFooterCalloutAction.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutAction.tsx",
        "code": {
            "MessageFooterCalloutAction": "const MessageFooterCalloutAction = forwardRef<HTMLButtonElement, ComponentProps<typeof Button>>(function MessageFooterCalloutAction(\nconst MessageFooterCalloutAction = forwardRef<HTMLButtonElement, ComponentProps<typeof Button>>(function MessageFooterCalloutAction(\n\tprops,\n\tref,\n): ReactElement {\n\treturn <Button mi='x4' ref={ref} primary small flexShrink={0} {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerActionsDivider.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerActionsDivider.tsx",
        "code": {
            "MessageComposerActionsDivider": "const MessageComposerActionsDivider = ({ height = 'x20', ...props }: ComponentProps<typeof Divider>): ReactElement => (\nconst MessageComposerActionsDivider = ({ height = 'x20', ...props }: ComponentProps<typeof Divider>): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerIcon.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerIcon.tsx",
        "code": {
            "MessageComposerIcon": "const MessageComposerIcon = ({ name, ...props }: { name: Keys } & Omit<HTMLAttributes<HTMLElement>, 'is'>): ReactElement => (\nconst MessageComposerIcon = ({ name, ...props }: { name: Keys } & Omit<HTMLAttributes<HTMLElement>, 'is'>): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerToolbarSubmit.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerToolbarSubmit.tsx",
        "code": {
            "MessageComposerToolbarSubmit": "const MessageComposerToolbarSubmit = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup small {...props} />;\nconst MessageComposerToolbarSubmit = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup small {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerToolbarActions.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerToolbarActions.tsx",
        "code": {
            "MessageComposerToolbarActions": "const MessageComposerToolbarActions = ({ ...props }): ReactElement => <ButtonGroup role='toolbar' small mis='x4' {...props} />;\nconst MessageComposerToolbarActions = ({ ...props }): ReactElement => <ButtonGroup role='toolbar' small mis='x4' {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerAction.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerAction.tsx",
        "code": {
            "MessageComposerAction": "const MessageComposerAction = (props: ComponentProps<typeof IconButton>): ReactElement => <IconButton small {...props} />;\nconst MessageComposerAction = (props: ComponentProps<typeof IconButton>): ReactElement => <IconButton small {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerInput.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerInput.tsx",
        "code": {
            "MessageComposerInput": "const MessageComposerInput = forwardRef(function MessageComposerInput(\nconst MessageComposerInput = forwardRef(function MessageComposerInput(\n\tprops: MessageComposerInputProps,\n\tref: Ref<HTMLInputElement>,\n): ReactElement {\n\treturn (\n\t\t<Box is='label' width='full' fontSize={0}>"
        },
        "depth_rank": 5
    },
    {
        "file": "MessageComposerSkeleton.tsx",
        "path": "../Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerSkeleton.tsx",
        "code": {
            "MessageComposerSkeleton": "const MessageComposerSkeleton = (): ReactElement => (\nconst MessageComposerSkeleton = (): ReactElement => (\n\t<MessageComposer>\n\t\t<Skeleton p='x4' m='x8' />\n\t\t<MessageComposerToolbar>\n\t\t\t<MessageComposerToolbarActions>\n\t\t\t\t<Skeleton p='x4' pi='x6' />\n\t\t\t\t<Skeleton p='x4' pi='x6' />\n\t\t\t\t<MessageComposerActionsDivider />\n\t\t\t\t<Skeleton p='x4' pi='x6' />\n\t\t\t\t<Skeleton p='x4' pi='x6' />\n\t\t\t</MessageComposerToolbarActions>\n\t\t\t<MessageComposerToolbarSubmit>\n\t\t\t\t<Skeleton p='x4' width={60} />"
        },
        "depth_rank": 5
    },
    {
        "file": "LocalBroker.test.ts",
        "path": "../Rocket.Chat/packages/core-services/tests/LocalBroker.test.ts",
        "code": {
            "instance": "\t\t\tconst testListener = jest.fn();\n\t\t\tconst testListener = jest.fn();\n\t\t\tconst testListener2 = jest.fn();\n\t\t\tconst testListener2 = jest.fn();\n\t\t\tconst test2Listener = jest.fn();\n\t\t\tconst test2Listener = jest.fn();\n\t\t\tinstance.onEvent('test' as any, testListener);\n\t\t\tinstance.onEvent('test' as any, testListener2);\n\t\t\tinstance.onEvent('test2' as any, test2Listener);\n\n\t\t\tconst broker = new LocalBroker();\n\t\t\tconst broker = new LocalBroker();\n\t\t\tbroker.createService(instance);\n\t\t\tbroker.broadcast('test' as any, 'test');\n\t\t\tbroker.broadcast('test2' as any, 'test2');\n\n\t\t\texpect(testListener).toBeCalledWith('test');\n\t\t\texpect(testListener2).toBeCalledWith('test');\n\t\t\texpect(test2Listener).toBeCalledWith('test2');\n\t\t});\n\n\t\tit('should NOT call any instance event anymore after the service being destroyed', () => {\n\t\t\tconst instance = new (class extends ServiceClass {})();\n\t\t\tconst instance = new (class extends ServiceClass {})();"
        },
        "depth_rank": 4
    },
    {
        "file": "ServiceClass.test.ts",
        "path": "../Rocket.Chat/packages/core-services/tests/ServiceClass.test.ts",
        "code": {
            "instance": "\t\t\tconst instance = new (class extends ServiceClass {})();\n\t\t\tconst instance = new (class extends ServiceClass {})();",
            "listener1": "\t\t\tconst listener1 = () => {};\n\t\t\tconst listener1 = () => {};",
            "listener2": "\t\t\tconst listener2 = () => {};\n\t\t\tconst listener2 = () => {};",
            "listener3": "\t\t\tconst listener3 = () => {};\n\t\t\tconst listener3 = () => {};"
        },
        "depth_rank": 4
    },
    {
        "file": "proxify.js",
        "path": "../Rocket.Chat/packages/core-services/dist/lib/proxify.js",
        "code": {
            "proxifyWithWait": "function proxifyWithWait(namespace) {\nfunction proxifyWithWait(namespace) {\n    return new Proxy({}, handler(namespace, true));",
            "proxify": "function proxify(namespace) {\nfunction proxify(namespace) {\n    return new Proxy({}, handler(namespace, false));"
        },
        "depth_rank": 5
    },
    {
        "file": "LocalBroker.ts",
        "path": "../Rocket.Chat/packages/core-services/src/LocalBroker.ts",
        "code": {
            "instances": "\t\tconst instances = await InstanceStatus.find({}, { projection: { _id: 1 } }).toArray();\n\t\tconst instances = await InstanceStatus.find({}, { projection: { _id: 1 } }).toArray();"
        },
        "depth_rank": 4
    },
    {
        "file": "App.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/App.tsx",
        "code": {
            "App": "function App() {\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path='/' element={<Playground />} />"
        },
        "depth_rank": 4
    },
    {
        "file": "reducer.ts",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Context/reducer.ts",
        "code": {
            "reducer": "const reducer = (state: initialStateType, action: ActionType) => {\nconst reducer = (state: initialStateType, action: ActionType) => {\n  switch (action.type) {\n    case 'isMobile':\n      return { ...state, isMobile: action.payload };"
        },
        "depth_rank": 5
    },
    {
        "file": "DraggableListItem.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Draggable/DraggableListItem.tsx",
        "code": {
            "DraggableListItem": "const DraggableListItem = ({\nconst DraggableListItem = ({\n  block,\n  surface,\n  index,\n}: DraggableListItemProps) => (\n  <Draggable draggableId={block.id} index={index}>"
        },
        "depth_rank": 6
    },
    {
        "file": "DraggableList.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Draggable/DraggableList.tsx",
        "code": {
            "DraggableList": "const DraggableList = React.memo(\nconst DraggableList = React.memo(\n  ({ blocks, surface, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "ItemsIcon.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/DropDown/ItemsIcon.tsx",
        "code": {
            "ItemsIcon": "const ItemsIcon = ({\nconst ItemsIcon = ({\n  layer,\n  lastNode,\n  hover,\n}: {"
        },
        "depth_rank": 6
    },
    {
        "file": "RenderPayload.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/RenderPayload/RenderPayload.tsx",
        "code": {
            "RenderPayload": "const RenderPayload = ({\nconst RenderPayload = ({\n  index,\n  payload,\n  surface,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "ElementWrapper.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/RenderPayload/ElementWrapper.tsx",
        "code": {
            "ElementWrapper": "const ElementWrapper = ({\nconst ElementWrapper = ({\n  children,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "ModalSurface.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/ModalSurface.tsx",
        "code": {
            "ModalSurface": "const ModalSurface = ({ blocks, onDragEnd }: DraggableListProps) => (\nconst ModalSurface = ({ blocks, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "BannerSurface.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/BannerSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ blocks, onDragEnd }: DraggableListProps) => (\nconst MessageSurface = ({ blocks, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "MessageSurface.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/MessageSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ blocks, onDragEnd }: DraggableListProps) => (\nconst MessageSurface = ({ blocks, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ContextualBarSurface.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/ContextualBarSurface.tsx",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ blocks, onDragEnd }: DraggableListProps) => (\nconst ContextualBarSurface = ({ blocks, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "Wrapper.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/NavBar/BurgerIcon/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "Line.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/NavBar/BurgerIcon/Line.tsx",
        "code": {
            "Line": "const Line = ({\nconst Line = ({\n  animated,\n  moved,\n}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "Wrapper.tsx",
        "path": "../Rocket.Chat/packages/uikit-playground/src/Components/navMenu/Menu/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/node-poplib/src/index.js",
        "code": {
            "POP3Client": "function POP3Client(port, host, options) {\nfunction POP3Client(port, host, options) {\n\tif (options === undefined) options = {};"
        },
        "depth_rank": 4
    },
    {
        "file": "proxify.js",
        "path": "../Rocket.Chat/packages/models/dist/proxify.js",
        "code": {
            "proxify": "function proxify(namespace) {\nfunction proxify(namespace) {\n    return new Proxy({}, handler(namespace));"
        },
        "depth_rank": 4
    },
    {
        "file": "MockedUserContext.js",
        "path": "../Rocket.Chat/packages/mock-providers/dist/MockedUserContext.js",
        "code": {
            "createUserContextValue": "const createUserContextValue = ({ userPreferences }) => {\nconst createUserContextValue = ({ userPreferences }) => {\n    return Object.assign(Object.assign({}, userContextValue), (userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id]] }));"
        },
        "depth_rank": 4
    },
    {
        "file": "MockedSettingsContext.tsx",
        "path": "../Rocket.Chat/packages/mock-providers/src/MockedSettingsContext.tsx",
        "code": {
            "cache": "const settingContextValue: ContextType<typeof SettingsContext> = {\nconst settingContextValue: ContextType<typeof SettingsContext> = {\n\thasPrivateAccess: true,\n\tisLoading: false,\n\tquerySetting: (_id: string) => [() => () => undefined, () => undefined],\n\tquerySettings: () => [() => () => undefined, () => []],\n\tdispatch: async () => undefined,\n};\n\nconst createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\nconst createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\n\tconst cache = new Map<string, ISetting['value']>();\n\tconst cache = new Map<string, ISetting['value']>();\n\n\treturn {\n\t\t...settingContextValue,\n\t\t...(settings && {\n\t\t\tquerySetting: (_id: string) => [\n\t\t\t\t() => () => undefined,\n\t\t\t\t() => {\n\t\t\t\t\tif (cache.has(_id)) {\n\t\t\t\t\t\treturn cache.get(_id) as any;\n\t\t\t\t\t}\n\t\t\t\t\tcache.set(_id, { value: settings[_id] } as any);"
        },
        "depth_rank": 4
    },
    {
        "file": "MockedUserContext.tsx",
        "path": "../Rocket.Chat/packages/mock-providers/src/MockedUserContext.tsx",
        "code": {
            "createUserContextValue": "const userContextValue: ContextType<typeof UserContext> = {\nconst userContextValue: ContextType<typeof UserContext> = {\n\tuserId: 'john.doe',\n\tuser: {\n\t\t_id: 'john.doe',\n\t\tusername: 'john.doe',\n\t\tname: 'John Doe',\n\t\tcreatedAt: new Date(),\n\t\tactive: true,\n\t\t_updatedAt: new Date(),\n\t\troles: ['admin'],\n\t\ttype: 'user',\n\t},\n\tqueryPreference: (<T,>(pref: string, defaultValue: T) => [\n\t\t() => () => undefined,\n\t\t() => (typeof pref === 'string' ? undefined : defaultValue),\n\t]) as any,\n\tquerySubscriptions: () => [() => () => undefined, () => []],\n\tquerySubscription: () => [() => () => undefined, () => undefined],\n\tqueryRoom: () => [() => () => undefined, () => undefined],\n\n\tqueryAllServices: () => [() => (): void => undefined, (): LoginService[] => []],\n\tloginWithService: () => () => Promise.reject('loginWithService not implemented'),\n\tloginWithPassword: async () => Promise.reject('loginWithPassword not implemented'),\n\tloginWithToken: async () => Promise.reject('loginWithToken not implemented'),\n\tlogout: () => Promise.resolve(),\n};\n\nconst createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => {\nconst createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => {\n\treturn {\n\t\t...userContextValue,\n\t\t...(userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id as unknown as string] as any] }),"
        },
        "depth_rank": 4
    },
    {
        "file": "NodeRandomGenerator.ts",
        "path": "../Rocket.Chat/packages/random/src/NodeRandomGenerator.ts",
        "code": {
            "result": "\t\tconst result = bytes.toString('hex');\n\t\tconst result = bytes.toString('hex');\n\t\t// If the number of digits is odd, we'll have generated an extra 4 bits\n\t\t// of randomness, so we need to trim the last digit.\n\t\treturn result.substring(0, digits);\n\t}\n\n\tprotected safelyCreateWithSeeds(...seeds: readonly unknown[]) {\n\t\treturn new AleaRandomGenerator({ seeds });"
        },
        "depth_rank": 4
    },
    {
        "file": "createJob.js",
        "path": "../Rocket.Chat/packages/agenda/dist/createJob.js",
        "code": {
            "createJob": "const createJob = (agenda, jobData) => {\nconst createJob = (agenda, jobData) => {\n    return new Job_1.Job({ agenda, ...jobData });"
        },
        "depth_rank": 4
    },
    {
        "file": "Job.ts",
        "path": "../Rocket.Chat/packages/agenda/src/Job.ts",
        "code": {
            "previousNextRunAt": "\t\tconst previousNextRunAt = this.attrs.nextRunAt || new Date();\n\t\tconst previousNextRunAt = this.attrs.nextRunAt || new Date();\n\t\tthis.attrs.nextRunAt = null;\n\n\t\tif (interval) {\n\t\t\tthis._computeFromInterval(interval, previousNextRunAt);\n\t\t} else if (repeatAt) {",
            "newDate": "\t\tconst newDate = moment(date);\n\t\tconst newDate = moment(date);\n\t\tif (timezone) {\n\t\t\tnewDate.tz(timezone);\n\t\t}\n\n\t\treturn newDate;\n\t}\n\n\tprivate _computeFromInterval(interval: string | number, previousNextRunAt: Date): void {\n\t\tconst { repeatTimezone: timezone, name, _id } = this.attrs;\n\t\tconst { repeatTimezone: timezone, name, _id } = this.attrs;",
            "offset": "\t\tconst lastRun = this.attrs.lastRunAt || new Date();\n\t\tconst lastRun = this.attrs.lastRunAt || new Date();\n\t\tconst nextDate = date(repeatAt).valueOf();\n\t\tconst nextDate = date(repeatAt).valueOf();\n\n\t\t// If you do not specify offset date for below test it will fail for ms\n\t\tconst offset = Date.now();\n\t\tconst offset = Date.now();\n\t\tif (offset === date(repeatAt, offset).valueOf()) {\n\t\t\tthis.attrs.nextRunAt = null;\n\t\t\tdebug('[%s:%s] failed to calculate repeatAt due to invalid format', this.attrs.name, this.attrs._id);\n\t\t\tthis.fail('failed to calculate repeatAt time due to invalid format');\n\t\t} else if (nextDate.valueOf() === lastRun.valueOf()) {",
            "jobCallback": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tthis.attrs.failedAt = now;\n\t\tthis.attrs.lastFinishedAt = now;\n\t\tdebug('[%s:%s] fail() called [%d] times so far', this.attrs.name, this.attrs._id, this.attrs.failCount);\n\t\treturn this;\n\t}\n\n\tpublic run(): Promise<Job> {\n\t\tconst definition = this.agenda.getDefinition(this.attrs.name);\n\t\tconst definition = this.agenda.getDefinition(this.attrs.name);\n\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.attrs.lastRunAt = new Date();\n\t\t\tdebug('[%s:%s] setting lastRunAt to: %s', this.attrs.name, this.attrs._id, this.attrs.lastRunAt.toISOString());\n\t\t\tthis.computeNextRunAt();\n\t\t\tawait this.save();\n\n\t\t\tlet finished = false;\n\t\t\tconst jobCallback = async (err?: Error): Promise<void> => {\n\t\t\tconst jobCallback = async (err?: Error): Promise<void> => {\n\t\t\t\t// We don't want to complete the job multiple times\n\t\t\t\tif (finished) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfinished = true;\n\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.fail(err);\n\t\t\t\t} else {",
            "process": "\t\t\t\t\tdebug('[%s:%s] process function being called', this.attrs.name, this.attrs._id);\n\t\t\t\t\tdebug('[%s:%s] process function being called', this.attrs.name, this.attrs._id);\n\t\t\t\t\tawait definition.fn(this);\n\t\t\t\t\tawait jobCallback();\n\t\t\t\t}\n\t\t\t} catch (error: any) {"
        },
        "depth_rank": 4
    },
    {
        "file": "Agenda.ts",
        "path": "../Rocket.Chat/packages/agenda/src/Agenda.ts",
        "code": {
            "AgendaConfig": "\tconstructor(config: AgendaConfig = {}, cb?: AgendaCallback) {\n\tconstructor(config: AgendaConfig = {}, cb?: AgendaCallback) {\n\t\tsuper();\n\n\t\tthis._name = config.name;\n\t\tthis._processEvery = humanInterval(config.processEvery) || defaultInterval;\n\t\tthis._defaultConcurrency = config.defaultConcurrency || 5;\n\t\tthis._maxConcurrency = config.maxConcurrency || 20;\n\t\tthis._defaultLockLimit = config.defaultLockLimit || 0;\n\t\tthis._lockLimit = config.lockLimit || 0;\n\n\t\tthis._definitions = {};",
            "job": "\t\t\tconst job = this.create(name, data);\n\t\t\tconst job = this.create(name, data);\n\n\t\t\tjob.schedule(new Date());\n\t\t\tawait job.save();\n\n\t\t\treturn job;\n\t\t} catch (error) {",
            "record": "\t\tconst record = await this._collection.findOne(query, { projection: { _id: 1 } });\n\t\tconst record = await this._collection.findOne(query, { projection: { _id: 1 } });",
            "res": "\t\tconst res = await (async (): Promise<Document | null> => {\n\t\tconst res = await (async (): Promise<Document | null> => {\n\t\t\tif ('value' in result) {\n\t\t\t\treturn result.value;\n\t\t\t}\n\n\t\t\tif ('insertedId' in result) {\n\t\t\t\treturn this._collection.findOne({ _id: result.insertedId });",
            "result": "\t\tconst result = await this._collection.findOneAndUpdate(query, update, { upsert: true, returnDocument: 'after' });\n\t\tconst result = await this._collection.findOneAndUpdate(query, update, { upsert: true, returnDocument: 'after' });",
            "now": "\t\tconst result = await this._collection.insertOne(props);\n\t\tconst result = await this._collection.insertOne(props);\n\t\treturn this._processDbResult(job, result);\n\t}\n\n\tpublic async saveJob(job: Job): Promise<void> {\n\t\ttry {\n\t\t\tdebug('attempting to save a job into Agenda instance');\n\n\t\t\t// Grab information needed to save job but that we don't want to persist in MongoDB\n\t\t\tconst id = job.attrs._id;\n\t\t\tconst id = job.attrs._id;\n\n\t\t\tconst props = job.toJSON();\n\t\t\tconst props = job.toJSON();\n\t\t\t// delete props._id;\n\t\t\t// delete props.unique;\n\t\t\t// delete props.uniqueOpts;\n\n\t\t\t// Store name of agenda queue as last modifier in job data\n\t\t\tprops.lastModifiedBy = this._name;\n\t\t\tdebug('[job %s] set job props: \\n%O', id, props);\n\n\t\t\t// Grab current time and set default query options for MongoDB\n\t\t\tconst now = new Date();\n\t\t\tconst now = new Date();\n\t\t\tdebug('current time stored as %s', now.toISOString());\n\n\t\t\t// If the job already had an ID, then update the properties of the job\n\t\t\t// i.e, who last modified it, etc\n\t\t\tif (id) {\n\t\t\t\treturn this._updateJob(job, props);\n\t\t\t}\n\n\t\t\tif (props.type === 'single') {\n\t\t\t\treturn this._saveSingleJob(job, props, now);\n\t\t\t}\n\n\t\t\tif (job.attrs.unique) {\n\t\t\t\treturn this._saveUniqueJob(job, props);\n\t\t\t}\n\n\t\t\treturn this._saveNewJob(job, props);\n\t\t} catch (error) {",
            "resp": "\t\tconst resp = await this._collection.findOneAndUpdate(criteria, update, { returnDocument: 'after' });\n\t\tconst resp = await this._collection.findOneAndUpdate(criteria, update, { returnDocument: 'after' });"
        },
        "depth_rank": 4
    },
    {
        "file": "widget.js",
        "path": "../Rocket.Chat/packages/livechat/src/widget.js",
        "code": {
            "log": "const log =\nconst log =\n\tprocess.env.NODE_ENV === 'development'\n\t\t? (...args) => window.console.log('%cwidget%c', 'color: red', 'color: initial', ...args)\n\t\t: () => {};",
            "WIDGET_MARGIN": "const WIDGET_OPEN_WIDTH = 365;\nconst WIDGET_OPEN_WIDTH = 365;\nconst WIDGET_OPEN_HEIGHT = 525;\nconst WIDGET_OPEN_HEIGHT = 525;\nconst WIDGET_MINIMIZED_WIDTH = 54;\nconst WIDGET_MINIMIZED_WIDTH = 54;\nconst WIDGET_MINIMIZED_HEIGHT = 54;\nconst WIDGET_MINIMIZED_HEIGHT = 54;\nconst WIDGET_MARGIN = 16;\nconst WIDGET_MARGIN = 16;\n\nwindow.RocketChat = window.RocketChat || { _: [] };",
            "config": "const config = {};\nconst config = {};"
        },
        "depth_rank": 4
    },
    {
        "file": "api.ts",
        "path": "../Rocket.Chat/packages/livechat/src/api.ts",
        "code": {
            "function": "Livechat.rest.use(async function (request, next) {\nLivechat.rest.use(async function (request, next) {\n\ttry {\n\t\treturn await next(...request);\n\t} catch (error) {"
        },
        "depth_rank": 4
    },
    {
        "file": "hooks.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/hooks.js",
        "code": {
            "createOrUpdateGuest": "const createOrUpdateGuest = async (guest) => {\nconst createOrUpdateGuest = async (guest) => {\n\tconst { token } = guest;\n\tconst { token } = guest;",
            "updateIframeGuestData": "const updateIframeGuestData = (data) => {\nconst updateIframeGuestData = (data) => {\n\tconst {\n\tconst {\n\t\tiframe,\n\t\tiframe: { guest },",
            "guestData": "\tconst guestData = { token, ...data };\n\tconst guestData = { token, ...data };",
            "api": "const api = {\nconst api = {\n\tpageVisited(info) {\n\t\tif (info.change === 'url') {\n\t\t\tTriggers.processRequest(info);\n\t\t}\n\n\t\tconst { token, room } = store.state;\n\t\tconst { token, room } = store.state;",
            "department": "\t\tconst department = departments.find((dep) => dep._id === value || dep.name === value)?._id || '';\n\t\tconst department = departments.find((dep) => dep._id === value || dep.name === value)?._id || '';\n\n\t\tupdateIframeGuestData({ department });"
        },
        "depth_rank": 5
    },
    {
        "file": "uiKit.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/uiKit.js",
        "code": {
            "result": "\tconst triggerId = generateTriggerId(appId);\n\tconst triggerId = generateTriggerId(appId);\n\n\ttry {\n\t\tconst result = await Promise.race([\n\t\tconst result = await Promise.race([\n\t\t\tLivechat.sendUiInteraction(\n\t\t\t\t{\n\t\t\t\t\ttype,\n\t\t\t\t\tactionId,\n\t\t\t\t\trid,\n\t\t\t\t\tmid,\n\t\t\t\t\tviewId,\n\t\t\t\t\tcontainer,\n\t\t\t\t\ttriggerId,\n\t\t\t\t\tpayload,\n\t\t\t\t},\n\t\t\t\tappId,\n\t\t\t),\n\n\t\t\tnew Promise((_, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\treject(new Error(triggerId));\n\t\t\t\t}, TRIGGER_TIMEOUT);\n\t\t\t}),\n\t\t]);\n\n\t\tconst { type: interactionType, ...data } = result;\n\t\tconst { type: interactionType, ...data } = result;"
        },
        "depth_rank": 5
    },
    {
        "file": "triggers.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/triggers.js",
        "code": {
            "getAgent": "const agentCacheExpiry = 3600000;\nconst agentCacheExpiry = 3600000;\nlet agentPromise;\nconst getAgent = (triggerAction) => {\nconst getAgent = (triggerAction) => {\n\tif (agentPromise) {\n\t\treturn agentPromise;\n\t}\n\n\tagentPromise = new Promise(async (resolve, reject) => {\n\t\tconst { params } = triggerAction;\n\t\tconst { params } = triggerAction;",
            "message": "\t\t\t\t\tconst ts = new Date();\n\t\t\t\t\tconst ts = new Date();\n\n\t\t\t\t\tconst message = {\n\t\t\t\t\tconst message = {\n\t\t\t\t\t\tmsg: action.params.msg,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\tu: agent,\n\t\t\t\t\t\tts: ts.toISOString(),\n\t\t\t\t\t\t_id: createToken(),\n\t\t\t\t\t\ttrigger: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tawait store.setState({\n\t\t\t\t\t\ttriggered: true,\n\t\t\t\t\t\tmessages: upsert(\n\t\t\t\t\t\t\tstore.state.messages,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t({ _id }) => _id === message._id,"
        },
        "depth_rank": 5
    },
    {
        "file": "main.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/main.js",
        "code": {
            "unreadMessages": "\tconst shouldMarkUnread = shouldMarkAsUnread();\n\tconst shouldMarkUnread = shouldMarkAsUnread();\n\tif (shouldMarkUnread) {\n\t\tconst unreadMessages = getUnreadMessages();\n\t\tconst unreadMessages = getUnreadMessages();\n\n\t\tif (unreadMessages.length > 0) {\n\t\t\tconst { alerts } = store.state;\n\t\t\tconst { alerts } = store.state;",
            "alertMessage": "\t\t\tconst lastReadMessage = getLastReadMessage();\n\t\t\tconst lastReadMessage = getLastReadMessage();\n\t\t\tconst alertMessage = i18next.t('count_new_messages_since_since', {\n\t\t\tconst alertMessage = i18next.t('count_new_messages_since_since', {\n\t\t\t\tcount: unreadMessages.length,\n\t\t\t\tval: new Date(lastReadMessage.ts),\n\t\t\t\tformatParams: {\n\t\t\t\t\tval: { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' },",
            "alert": "\t\t\tconst alert = { id: constants.unreadMessagesAlertId, children: alertMessage, success: true, timeout: 0 };\n\t\t\tconst alert = { id: constants.unreadMessagesAlertId, children: alertMessage, success: true, timeout: 0 };"
        },
        "depth_rank": 5
    },
    {
        "file": "room.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/room.js",
        "code": {
            "alert": "\t\tconst alert = { id: createToken(), children: i18next.t('error_getting_call_alert'), error: true, timeout: 5000 };\n\t\tconst alert = { id: createToken(), children: i18next.t('error_getting_call_alert'), error: true, timeout: 5000 };",
            "doPlaySound": "const doPlaySound = async (message) => {\nconst doPlaySound = async (message) => {\n\tconst { sound, user } = store.state;\n\tconst { sound, user } = store.state;",
            "isAgentHidden": "const isAgentHidden = () => {\nconst isAgentHidden = () => {\n\tconst { config: { settings: { agentHiddenInfo } = {} } = {} } = store.state;\n\tconst { config: { settings: { agentHiddenInfo } = {} } = {} } = store.state;",
            "transformAgentInformationOnMessage": "const transformAgentInformationOnMessage = (message) => {\nconst transformAgentInformationOnMessage = (message) => {\n\tconst { user } = store.state;\n\tconst { user } = store.state;",
            "previousMessages": "\tconst previousMessages = getGreetingMessages(storedMessages);\n\tconst previousMessages = getGreetingMessages(storedMessages);\n\n\tawait store.setState({ loading: true });",
            "messages": "\tconst rawMessages = (await Livechat.loadMessages(rid)).concat(previousMessages);\n\tconst rawMessages = (await Livechat.loadMessages(rid)).concat(previousMessages);\n\tconst messages = (await normalizeMessages(rawMessages)).map(transformAgentInformationOnMessage);\n\tconst messages = (await normalizeMessages(rawMessages)).map(transformAgentInformationOnMessage);\n\n\tawait initRoom();\n\tawait store.setState({ messages: (messages || []).reverse(), noMoreMessages: false, loading: false });",
            "params": "\tconst params = {};\n\tconst params = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "threads.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/threads.js",
        "code": {
            "addParentMessage": "const addParentMessage = async (parentMessage) => {\nconst addParentMessage = async (parentMessage) => {\n\tconst { state } = store;\n\tconst { state } = store;",
            "findParentMessage": "const findParentMessage = async (tmid) => {\nconst findParentMessage = async (tmid) => {\n\tconst { state } = store;\n\tconst { state } = store;",
            "alert": "\t\t\tconst alert = { id: createToken(), children: reason, error: true, timeout: 5000 };\n\t\t\tconst alert = { id: createToken(), children: reason, error: true, timeout: 5000 };",
            "normalizeThreadMessage": "const normalizeThreadMessage = async (message) => {\nconst normalizeThreadMessage = async (message) => {\n\tconst { state } = store;\n\tconst { state } = store;"
        },
        "depth_rank": 5
    },
    {
        "file": "transcript.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/transcript.js",
        "code": {
            "promptTranscript": "const promptTranscript = async () => {\nconst promptTranscript = async () => {\n\tconst {\n\tconst {\n\t\tconfig: {\n\t\t\tmessages: { transcriptMessage },",
            "message": "\tconst message = transcriptMessage || i18next.t('would_you_like_a_copy_of_this_chat_emailed');\n\tconst message = transcriptMessage || i18next.t('would_you_like_a_copy_of_this_chat_emailed');\n\n\treturn ModalManager.confirm({\n\t\ttext: message,\n\t}).then((result) => {"
        },
        "depth_rank": 5
    },
    {
        "file": "api.js",
        "path": "../Rocket.Chat/packages/livechat/src/lib/api.js",
        "code": {
            "estimatedWaitTime": "\tconst locale = getDateFnsLocale();\n\tconst locale = getDateFnsLocale();\n\tconst estimatedWaitTime =\n\tconst estimatedWaitTime =\n\t\testimatedWaitTimeSeconds && formatDistance(new Date().setSeconds(estimatedWaitTimeSeconds), new Date(), { locale });"
        },
        "depth_rank": 5
    },
    {
        "file": "Store.js",
        "path": "../Rocket.Chat/packages/livechat/src/store/Store.js",
        "code": {
            "getLocalStorage": "function getLocalStorage() {\nfunction getLocalStorage() {\n\ttry {\n\t\treturn window.localStorage;\n\t} catch (_) {",
            "store": "\t\tconst store = {};\n\t\tconst store = {};",
            "localStorage": "const localStorage = getLocalStorage();\nconst localStorage = getLocalStorage();\nconst { sessionStorage } = window;\nconst { sessionStorage } = window;",
            "sessionId": "\t\t\tconst sessionId = sessionStorage.getItem('sessionId');\n\t\t\tconst sessionId = sessionStorage.getItem('sessionId');\n\t\t\tconst { openSessionIds = [] } = this._state;\n\t\t\tconst { openSessionIds = [] } = this._state;",
            "persistable": "\t\tconst persistable = { ...this._state };\n\t\tconst persistable = { ...this._state };",
            "prevState": "\t\tconst prevState = this._state;\n\t\tconst prevState = this._state;\n\t\tdelete prevState[propName];\n\t\tthis._state = { ...prevState };",
            "nonPeristable": "\t\tconst prevState = this._state;\n\t\tconst prevState = this._state;\n\n\t\tconst nonPeristable = {};\n\t\tconst nonPeristable = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "helpers.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/helpers.js",
        "code": {
            "to": "\t\t\tconst to = transferredTo && (transferredTo.name || transferredTo.username);\n\t\t\tconst to = transferredTo && (transferredTo.name || transferredTo.username);\n\t\t\treturn t('from_transferred_the_chat_to_to', { from, to });",
            "host": "\tconst host = window.location.origin;\n\tconst host = window.location.origin;\n\treturn Object.assign(fields, { host });",
            "sessionId": "\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst { openSessionIds: [firstSessionId] = [] } = store.state;\n\tconst { openSessionIds: [firstSessionId] = [] } = store.state;"
        },
        "depth_rank": 5
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Footer/index.js",
        "code": {
            "handleMouseUp": "const handleMouseUp = ({ target }) => target.blur();\nconst handleMouseUp = ({ target }) => target.blur();",
            "OptionsTrigger": "const OptionsTrigger = withTranslation()(({ pop, t }) => (\nconst OptionsTrigger = withTranslation()(({ pop, t }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/App/index.js",
        "code": {
            "AppConnector": "const AppConnector = () => (\nconst AppConnector = () => (\n\t<div id='app'>\n\t\t<StoreProvider>\n\t\t\t<StoreConsumer>\n\t\t\t\t{({ config, user, triggered, gdpr, sound, undocked, minimized = true, expanded = false, alerts, modal, dispatch, iframe }) => (\n\t\t\t\t\t<App\n\t\t\t\t\t\tconfig={config}"
        },
        "depth_rank": 6
    },
    {
        "file": "App.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/App/App.js",
        "code": {
            "dispatchRestore": "\t\tconst dispatchRestore = () => dispatch({ minimized: false, undocked: false });\n\t\tconst dispatchRestore = () => dispatch({ minimized: false, undocked: false });",
            "dispatchEvent": "\t\tconst dispatchEvent = () => {\n\t\tconst dispatchEvent = () => {\n\t\t\tdispatchRestore();\n\t\t\tstore.off('storageSynced', dispatchEvent);\n\t\t};\n\t\tif (undocked) {\n\t\t\tstore.on('storageSynced', dispatchEvent);\n\t\t} else {",
            "poppedOut": "\t\tconst poppedOut = parse(window.location.search).mode === 'popout';\n\t\tconst poppedOut = parse(window.location.search).mode === 'popout';\n\t\tthis.setState({ poppedOut });"
        },
        "depth_rank": 6
    },
    {
        "file": "manager.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Modal/manager.js",
        "code": {
            "handleButton": "\t\t\tconst handleButton = () => () => {\n\t\t\tconst handleButton = () => () => {\n\t\t\t\tstore.setState({ modal: null });"
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Form/DateInput/index.js",
        "code": {
            "DateInput": "const DateInput = ({ name, value, placeholder, disabled, small, error, onChange, onInput, className, style = {} }) => (\nconst DateInput = ({ name, value, placeholder, disabled, small, error, onChange, onInput, className, style = {} }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/packages/livechat/src/components/Alert/index.tsx",
        "code": {
            "Alert": "const Alert = ({\nconst Alert = ({\n\tid,\n\tonDismiss,\n\tsuccess,\n\twarning,\n\terror,\n\tcolor,\n\thideCloseButton = false,\n\tclassName,\n\tstyle = {},",
            "handleDismiss": "\tconst handleDismiss = useCallback(() => {\n\tconst handleDismiss = useCallback(() => {\n\t\tonDismiss?.(id);\n\t}, [id, onDismiss]);\n\n\tuseEffect(() => {\n\t\tlet dismissTimeout: ReturnType<typeof setTimeout> | undefined;\n\t\tif (Number.isFinite(timeout) && timeout > 0) {\n\t\t\tdismissTimeout = setTimeout(handleDismiss, timeout);\n\t\t}\n\t\treturn () => clearTimeout(dismissTimeout);\n\t}, [handleDismiss, timeout]);\n\n\treturn (\n\t\t<div\n\t\t\trole='alert'\n\t\t\tclassName={createClassName(styles, 'alert', { success, warning, error }, [className])}"
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Screen/index.js",
        "code": {
            "ChatButton": "const ChatButton = ({ text, minimized, badge, onClick, triggered = false, agent }) => (\nconst ChatButton = ({ text, minimized, badge, onClick, triggered = false, agent }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/Message/index.js",
        "code": {
            "renderContent": "} from '../constants';\n} from '../constants';\n\nconst renderContent = ({ text, system, quoted, me, blocks, attachments, attachmentResolver, mid, rid }) =>\nconst renderContent = ({ text, system, quoted, me, blocks, attachments, attachmentResolver, mid, rid }) =>",
            "time": "const resolveWebRTCEndCallMessage = ({ webRtcCallEndTs, ts, t }) => {\nconst resolveWebRTCEndCallMessage = ({ webRtcCallEndTs, ts, t }) => {\n\tconst callEndTime = resolveDate(webRtcCallEndTs);\n\tconst callEndTime = resolveDate(webRtcCallEndTs);\n\tconst callStartTime = resolveDate(ts);\n\tconst callStartTime = resolveDate(ts);\n\tconst callDuration = formatDistance(callEndTime, callStartTime);\n\tconst callDuration = formatDistance(callEndTime, callStartTime);\n\tconst time = format(callEndTime, isToday(callEndTime) ? 'HH:mm' : 'dddd HH:mm');\n\tconst time = format(callEndTime, isToday(callEndTime) ? 'HH:mm' : 'dddd HH:mm');\n\treturn t('call_end_time', { time, callDuration });",
            "getSystemMessageText": "const getSystemMessageText = ({ type, conversationFinishedMessage, transferData, u, webRtcCallEndTs, ts }, t) =>\nconst getSystemMessageText = ({ type, conversationFinishedMessage, transferData, u, webRtcCallEndTs, ts }, t) =>",
            "Message": "const Message = memo(\nconst Message = memo(\n\t({ avatarResolver, attachmentResolver = getAttachmentUrl, use, me, compact, className, style = {}, t, ...message }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "stories.tsx",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/Message/stories.tsx",
        "code": {
            "defaultMessage": "} from '../constants';\n} from '../constants';\n\nconst defaultMessage = loremIpsum({ count: 1, units: 'sentences' });\nconst defaultMessage = loremIpsum({ count: 1, units: 'sentences' });",
            "defaultMessageExtra": "const defaultMessageExtra = loremIpsum({ count: 1, units: 'sentences' });\nconst defaultMessageExtra = loremIpsum({ count: 1, units: 'sentences' });"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/AudioAttachment/index.js",
        "code": {
            "AudioAttachment": "const AudioAttachment = memo(({ url, className, t, ...messageBubbleProps }) => (\nconst AudioAttachment = memo(({ url, className, t, ...messageBubbleProps }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageList/index.js",
        "code": {
            "items": "\t\tconst items = [];\n\t\tconst items = [];\n\t\tconst { incomingCallAlert } = store.state;\n\t\tconst { incomingCallAlert } = store.state;",
            "showUnreadSeparator": "\t\t\tconst showUnreadSeparator = lastReadMessageId && nextMessage && lastReadMessageId === message._id;\n\t\t\tconst showUnreadSeparator = lastReadMessageId && nextMessage && lastReadMessageId === message._id;\n\t\t\tif (showUnreadSeparator) {\n\t\t\t\titems.push(<MessageSeparator key='unread' use='li' unread />);\n\t\t\t}\n\t\t}\n\n\t\tif (typingUsernames && typingUsernames.length) {\n\t\t\titems.push(<TypingIndicator key='typing' use='li' avatarResolver={avatarResolver} usernames={typingUsernames} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/VideoAttachment/index.js",
        "code": {
            "VideoAttachment": "const VideoAttachment = memo(({ url, className, t, ...messageBubbleProps }) => (\nconst VideoAttachment = memo(({ url, className, t, ...messageBubbleProps }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/FileAttachmentIcon/index.js",
        "code": {
            "Icon": "\tconst extension = url ? url.split('.').pop() : null;\n\tconst extension = url ? url.split('.').pop() : null;\n\n\tconst Icon =\n\tconst Icon =\n\t\t(/pdf/i.test(extension) && PDFIcon) ||\n\t\t(/doc|docx|rtf|txt|odt|pages|log/i.test(extension) && DocIcon) ||\n\t\t(/ppt|pptx|pps/i.test(extension) && PPTIcon) ||\n\t\t(/xls|xlsx|csv/i.test(extension) && SheetIcon) ||\n\t\t(/zip|rar|7z|gz/i.test(extension) && ZipIcon) ||\n\t\tFileIcon;\n\treturn <Icon width={32} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "stories.tsx",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageBubble/stories.tsx",
        "code": {
            "text": "const text = loremIpsum({ count: 1, units: 'sentences' });\nconst text = loremIpsum({ count: 1, units: 'sentences' });"
        },
        "depth_rank": 7
    },
    {
        "file": "markdown.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageText/markdown.js",
        "code": {
            "relAttrIndex": "const md = new MarkdownIt({\nconst md = new MarkdownIt({\n\thtml: true,\n\tbreaks: true,\n\tlinkify: true,\n\ttypographer: true,\n});\n\nconst defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\nconst defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\nmd.renderer.rules.link_open = (tokens, idx, options, env, self) => {\n\tconst targetAttrIndex = tokens[idx].attrIndex('target');\n\tconst targetAttrIndex = tokens[idx].attrIndex('target');\n\tconst relAttrIndex = tokens[idx].attrIndex('rel');\n\tconst relAttrIndex = tokens[idx].attrIndex('rel');\n\n\tif (targetAttrIndex < 0) {\n\t\ttokens[idx].attrPush(['target', '_blank']);\n\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "emoji.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageText/emoji.js",
        "code": {
            "emojiRanges": "const emojiRanges = [\nconst emojiRanges = [\n\temojiUnicode, // unicode emoji from https://www.regextester.com/106421\n\t':.{1,40}:', // custom emoji"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageTime/index.js",
        "code": {
            "timestamp": "const parseDate = (ts, t) => {\nconst parseDate = (ts, t) => {\n\tconst timestamp = new Date(ts).toISOString();\n\tconst timestamp = new Date(ts).toISOString();\n\treturn t('message_time', {\n\t\tval: new Date(timestamp),\n\t\tformatParams: {\n\t\t\tval: isToday(parseISO(timestamp)) ? { hour: 'numeric', minute: 'numeric' } : { day: 'numeric', hour: 'numeric', minute: 'numeric' },",
            "MessageTime": "const MessageTime = memo(({ ts, normal, inverted, className, style = {}, t }) => (\nconst MessageTime = memo(({ ts, normal, inverted, className, style = {}, t }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageSeparator/index.js",
        "code": {
            "MessageSeparator": "const MessageSeparator = memo(({ date, unread, use: Element = 'div', className, style = {}, t }) => (\nconst MessageSeparator = memo(({ date, unread, use: Element = 'div', className, style = {}, t }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Messages/MessageBlocks/index.js",
        "code": {
            "dispatchAction": "const MessageBlocks = ({ blocks = [], mid = undefined, rid = undefined }) => {\nconst MessageBlocks = ({ blocks = [], mid = undefined, rid = undefined }) => {\n\tconst dispatchAction = useCallback(\n\tconst dispatchAction = useCallback(\n\t\t({ appId, actionId, payload }) =>"
        },
        "depth_rank": 7
    },
    {
        "file": "CallNotification.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Calls/CallNotification.js",
        "code": {
            "callInNewTab": "const CallNotification = ({ callProvider, callerUsername, url, dispatch, time, rid, callId, t }) => {\nconst CallNotification = ({ callProvider, callerUsername, url, dispatch, time, rid, callId, t }) => {\n\tconst [show, setShow] = useState(true);\n\tconst [show, setShow] = useState(true);\n\n\tconst callInNewTab = async () => {\n\tconst callInNewTab = async () => {\n\t\tconst { token } = store.state;\n\t\tconst { token } = store.state;",
            "declineClick": "\tconst declineClick = async () => {\n\tconst declineClick = async () => {\n\t\tawait Livechat.updateCallStatus(CallStatus.DECLINED, rid, callId);\n\t\tawait Livechat.notifyCallDeclined(rid);\n\t\tawait dispatch({\n\t\t\tincomingCallAlert: null,\n\t\t\tongoingCall: {\n\t\t\t\tcallStatus: CallStatus.DECLINED,\n\t\t\t\ttime: { time },"
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Popover/index.js",
        "code": {
            "PopoverOverlay": "const PopoverContext = createContext();\nconst PopoverContext = createContext();\n\nconst PopoverOverlay = ({ children, className, visible, ...props }) => (\nconst PopoverOverlay = ({ children, className, visible, ...props }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "stories.tsx",
        "path": "../Rocket.Chat/packages/livechat/src/components/FilesDropTarget/stories.tsx",
        "code": {
            "DummyContent": "const DummyContent = () => (\nconst DummyContent = () => (\n\t<div\n\t\tstyle={{\n\t\t\tdisplay: 'flex',\n\t\t\twidth: '100vw',\n\t\t\theight: '100vh',\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\t\t\tflexDirection: 'column',\n\t\t}}\n\t>\n\t\tDrop files here\n\t\t<span style={{ border: '1px solid', padding: '1rem', margin: '1rem' }}>Or into this span</span>",
            "ref": "const ref = createRef();\nconst ref = createRef();\nTriggeringBrowseAction.args = {\n\tchildren: (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\twidth: '100vw',\n\t\t\t\theight: '100vh',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\tflexDirection: 'column',\n\t\t\t}}\n\t\t>\n\t\t\t<Button onClick={() => ref.current.browse()}>Browse</Button>"
        },
        "depth_rank": 6
    },
    {
        "file": "Surface.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/Surface.js",
        "code": {
            "Surface": "const SurfaceContext = createContext({\nconst SurfaceContext = createContext({\n\tdispatchAction: () => undefined,\n});\n\nconst Surface = ({ children, dispatchAction }) => (\nconst Surface = ({ children, dispatchAction }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "Block.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/Block.js",
        "code": {
            "Block": "const BlockContext = createContext({\nconst BlockContext = createContext({\n\tappId: null,\n\tblockId: null,\n});\n\nconst Block = ({ appId, blockId, children }) => (\nconst Block = ({ appId, blockId, children }) => (",
            "perform": "\tconst dispatchAction = useDispatchAction();\n\tconst dispatchAction = useDispatchAction();\n\n\tconst [performing, setPerforming] = useState(false);\n\tconst [performing, setPerforming] = useState(false);\n\tconst mountedRef = useRef(true);\n\tconst mountedRef = useRef(true);\n\n\tuseEffect(\n\t\t() => () => {\n\t\t\tmountedRef.current = false;\n\t\t},\n\t\t[],\n\t);\n\n\tconst perform = useCallback(\n\tconst perform = useCallback(\n\t\tasync (payload = {}) => {\n\t\t\tsetPerforming(true);\n\n\t\t\ttry {\n\t\t\t\tawait dispatchAction({\n\t\t\t\t\tappId,\n\t\t\t\t\tactionId,\n\t\t\t\t\tpayload,\n\t\t\t\t});\n\t\t\t} finally {"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/ContextBlock/index.js",
        "code": {
            "ContextBlock": "const ContextBlock = ({ appId, blockId, elements, parser }) => (\nconst ContextBlock = ({ appId, blockId, elements, parser }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/OverflowElement/index.js",
        "code": {
            "newTab": "const OverflowOption = ({ confirm, text, value, url, parser, onClick }) => {\nconst OverflowOption = ({ confirm, text, value, url, parser, onClick }) => {\n\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\tasync (event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tif (confirm) {\n\t\t\t\t// TODO\n\t\t\t}\n\n\t\t\tif (url) {\n\t\t\t\tconst newTab = window.open();\n\t\t\t\tconst newTab = window.open();\n\t\t\t\tnewTab.opener = null;\n\t\t\t\tnewTab.location = url;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait onClick(value);\n\t\t},\n\t\t[confirm, onClick, url, value],\n\t);\n\n\treturn <Menu.Item onClick={handleClick}>{parser.text(text)}</Menu.Item>;",
            "handleClick": "const OverflowElement = ({ actionId, confirm, options, parser }) => {\nconst OverflowElement = ({ actionId, confirm, options, parser }) => {\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\n\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\tasync (value) => {\n\t\t\tawait performAction({ value });"
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/SectionBlock/index.js",
        "code": {
            "SectionBlock": "const SectionBlock = ({ appId, blockId, text, fields, accessory, parser }) => (\nconst SectionBlock = ({ appId, blockId, text, fields, accessory, parser }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/DatePickerElement/index.js",
        "code": {
            "handleChange": "\tconst [performAction, performingAction] = usePerformAction(actionId);\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\n\tconst handleChange = useCallback(\n\tconst handleChange = useCallback(\n\t\tasync (event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tif (confirm) {\n\t\t\t\t// TODO\n\t\t\t}\n\n\t\t\tawait performAction({\n\t\t\t\tinitialDate,\n\t\t\t\tselectedDate: event.target.value,\n\t\t\t});\n\t\t},\n\t\t[confirm, initialDate, performAction],\n\t);\n\n\treturn (\n\t\t<DateInput\n\t\t\tvalue={initialDate}"
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/ButtonElement/index.js",
        "code": {
            "handleMouseUp": "const handleMouseUp = ({ target }) => target.blur();\nconst handleMouseUp = ({ target }) => target.blur();",
            "newTab": "const ButtonElement = ({ text, actionId, url, value, style, context, confirm, parser }) => {\nconst ButtonElement = ({ text, actionId, url, value, style, context, confirm, parser }) => {\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\n\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\tasync (event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tif (confirm) {\n\t\t\t\t// TODO\n\t\t\t}\n\n\t\t\tif (url) {\n\t\t\t\tconst newTab = window.open();\n\t\t\t\tconst newTab = window.open();\n\t\t\t\tnewTab.opener = null;\n\t\t\t\tnewTab.location = url;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait performAction({ value });"
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/DividerBlock/index.js",
        "code": {
            "DividerBlock": "const DividerBlock = ({ appId, blockId }) => (\nconst DividerBlock = ({ appId, blockId }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/ImageElement/index.js",
        "code": {
            "ImageElement": "const ImageElement = ({ imageUrl, altText, context }) => (\nconst ImageElement = ({ imageUrl, altText, context }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/PlainText/index.js",
        "code": {
            "PlainText": "const PlainText = ({ text, emoji = false }) => (\nconst PlainText = ({ text, emoji = false }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/uiKit/message/ActionsBlock/index.js",
        "code": {
            "handleMoreButtonClick": "\tconst isMoreButtonVisible = hiddenElementsCount > 0;\n\tconst isMoreButtonVisible = hiddenElementsCount > 0;\n\n\tconst handleMoreButtonClick = useCallback(() => {\n\tconst handleMoreButtonClick = useCallback(() => {\n\t\tsetCollapsed(false);\n\t}, []);\n\n\treturn (\n\t\t<Block appId={appId} blockId={blockId}>"
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Composer/index.js",
        "code": {
            "texts": "\t\tconst items = Array.from(event.dataTransfer.items);\n\t\tconst items = Array.from(event.dataTransfer.items);\n\n\t\tconst files = items.filter((item) => item.kind === 'file' && /^image\\//.test(item.type)).map((item) => item.getAsFile());\n\t\tconst files = items.filter((item) => item.kind === 'file' && /^image\\//.test(item.type)).map((item) => item.getAsFile());\n\t\tif (files.length) {\n\t\t\tonUpload && onUpload(files);\n\t\t\treturn;\n\t\t}\n\n\t\tconst texts = await Promise.all(\n\t\tconst texts = await Promise.all(\n\t\t\titems\n\t\t\t\t.filter((item) => item.kind === 'string' && /^text\\/plain/.test(item.type))\n\t\t\t\t.map((item) => new Promise((resolve) => item.getAsString(resolve))),\n\t\t);\n\t\ttexts.forEach((text) => this.pasteText(parse(text)));\n\t};\n\n\thandleClick = () => {\n\t\tconst { handleEmojiClick } = this.props;\n\t\tconst { handleEmojiClick } = this.props;",
            "preCaretTextRange": "\t\t\tconst textRange = doc.selection.createRange();\n\t\t\tconst textRange = doc.selection.createRange();\n\t\t\tconst preCaretTextRange = doc.body.createTextRange();\n\t\t\tconst preCaretTextRange = doc.body.createTextRange();\n\t\t\tpreCaretTextRange.moveToElementText(element);\n\t\t\tpreCaretTextRange.setEndPoint('EndToEnd', textRange);\n\t\t\treturn preCaretTextRange.text.length;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\thandleInputLock(locked) {\n\t\tthis.setState({ inputLock: locked });"
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/livechat/src/components/Tooltip/index.js",
        "code": {
            "triggerBounds": "\t\tconst triggerBounds = event.target.getBoundingClientRect();\n\t\tconst triggerBounds = event.target.getBoundingClientRect();\n\t\tthis.setState({\n\t\t\ttooltip: (\n\t\t\t\t<Tooltip floating placement={placement} triggerBounds={triggerBounds}>",
            "TooltipConnection": "\tconst TooltipConnection = ({ tooltip, ...props }) => <Tooltip.Trigger content={tooltip}>{component(props)}</Tooltip.Trigger>;\n\tconst TooltipConnection = ({ tooltip, ...props }) => <Tooltip.Trigger content={tooltip}>{component(props)}</Tooltip.Trigger>;"
        },
        "depth_rank": 6
    },
    {
        "file": "component.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/GDPRAgreement/component.js",
        "code": {
            "md": "const md = new MarkdownIt({\nconst md = new MarkdownIt({\n\tlinkify: false,\n\ttypographer: false,\n});\n\nclass GDPR extends Component {\n\thandleClick = () => {\n\t\tconst { onAgree } = this.props;\n\t\tconst { onAgree } = this.props;"
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/GDPRAgreement/container.js",
        "code": {
            "GDPRConnector": "const GDPRConnector = ({ ref, t, ...props }) => (\nconst GDPRConnector = ({ ref, t, ...props }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "component.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/SwitchDepartment/component.js",
        "code": {
            "error": "\t\t\tconst error = this.validate({ name, value });\n\t\t\tconst error = this.validate({ name, value });"
        },
        "depth_rank": 6
    },
    {
        "file": "connector.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/SwitchDepartment/connector.js",
        "code": {
            "SwitchDepartmentConnector": "const SwitchDepartmentConnector = ({ ref, ...props }) => (\nconst SwitchDepartmentConnector = ({ ref, ...props }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/SwitchDepartment/container.js",
        "code": {
            "result": "\t\t\tconst result = await Livechat.transferChat({ rid, department });\n\t\t\tconst result = await Livechat.transferChat({ rid, department });"
        },
        "depth_rank": 6
    },
    {
        "file": "component.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/LeaveMessage/component.js",
        "code": {
            "error": "\t\t\tconst error = this.validate({ name, value });\n\t\t\tconst error = this.validate({ name, value });"
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/LeaveMessage/container.js",
        "code": {
            "alert": "\t\t\tconst alert = { id: createToken(), children: message, error: true, timeout: 5000 };\n\t\t\tconst alert = { id: createToken(), children: message, error: true, timeout: 5000 };"
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/ChatFinished/container.js",
        "code": {
            "ChatFinishedConnector": "const ChatFinishedConnector = ({ ref, t, ...props }) => (\nconst ChatFinishedConnector = ({ ref, t, ...props }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "connector.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/Chat/connector.js",
        "code": {
            "ChatConnector": "const ChatConnector = ({ ref, ...props }) => (\nconst ChatConnector = ({ ref, ...props }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/Chat/container.js",
        "code": {
            "visitor": "\t\tconst visitor = { token, ...guest };\n\t\tconst visitor = { token, ...guest };",
            "previousMessages": "\t\tconst previousMessages = getGreetingMessages(messages);\n\t\tconst previousMessages = getGreetingMessages(messages);\n\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\tawait dispatch({ loading: true });",
            "newRoom": "\t\t\tconst params = defaultRoomParams();\n\t\t\tconst params = defaultRoomParams();\n\t\t\tconst newRoom = await Livechat.room(params);\n\t\t\tconst newRoom = await Livechat.room(params);\n\t\t\tawait dispatch({ room: newRoom, messages: previousMessages, noMoreMessages: false });",
            "alert": "\t\t\tconst alert = { id: createToken(), children: i18n.t('error_removing_user_data'), error: true, timeout: 0 };\n\t\t\tconst alert = { id: createToken(), children: i18n.t('error_removing_user_data'), error: true, timeout: 0 };",
            "showDepartment": "\t\tconst showDepartment = departments.filter((dept) => dept.showOnRegistration).length > 0;\n\t\tconst showDepartment = departments.filter((dept) => dept.showOnRegistration).length > 0;\n\t\treturn nameFieldRegistrationForm || emailFieldRegistrationForm || showDepartment;\n\t};\n\n\tonRegisterUser = () => route('/register');\n\n\tshowOptionsMenu = () => this.canSwitchDepartment() || this.canFinishChat() || this.canRemoveUserData();\n\n\tasync handleConnectingAgentAlert(connecting, message) {\n\t\tconst { alerts: oldAlerts, dispatch, i18n } = this.props;\n\t\tconst { alerts: oldAlerts, dispatch, i18n } = this.props;",
            "message": "\t\tconst ts = new Date();\n\t\tconst ts = new Date();\n\t\tconst message = { _id: livechatQueueMessageId, msg, u, ts: ts.toISOString() };\n\t\tconst message = { _id: livechatQueueMessageId, msg, u, ts: ts.toISOString() };"
        },
        "depth_rank": 6
    },
    {
        "file": "component.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/TriggerMessage/component.js",
        "code": {
            "defaultTitle": "\t\tconst defaultTitle = t('messages');\n\t\tconst defaultTitle = t('messages');\n\t\tconst {\n\t\tconst {\n\t\t\ttheme: { color },"
        },
        "depth_rank": 6
    },
    {
        "file": "component.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/Register/component.js",
        "code": {
            "renderCustomFields": "const getDefaultDepartment = (departments = []) => (departments.length === 1 && departments[0]._id) || '';\nconst getDefaultDepartment = (departments = []) => (departments.length === 1 && departments[0]._id) || '';\n\nconst renderCustomFields = (customFields, { loading, handleFieldChange = () => {} }, state, t) =>\nconst renderCustomFields = (customFields, { loading, handleFieldChange = () => {} }, state, t) =>",
            "getCustomValidations": "const validations = {\nconst validations = {\n\tname: [Validations.nonEmpty],\n\temail: [Validations.nonEmpty, Validations.email],\n\tdepartment: [],\n};\n\nconst getCustomValidations = ({ customFields = [] }) =>\nconst getCustomValidations = ({ customFields = [] }) =>",
            "getValidableFields": "const getValidableFields = (state) =>\nconst getValidableFields = (state) =>\n\tObject.keys(validations)\n\t\t.map((fieldName) => (state[fieldName] ? { fieldName, ...state[fieldName] } : null))",
            "validation": "const validate = (props, { _id, name, value, regexp: pattern }) => {\nconst validate = (props, { _id, name, value, regexp: pattern }) => {\n\tconst validation = validations[name] || getCustomValidations(props)[_id];\n\tconst validation = validations[name] || getCustomValidations(props)[_id];\n\treturn validation.reduce((error, validation) => error || validation({ value, pattern }), undefined);",
            "getDefaultState": "const getDefaultState = (props) => {\nconst getDefaultState = (props) => {\n\tconst { hasNameField, hasEmailField, hasDepartmentField, departments, customFields = [] } = props;\n\tconst { hasNameField, hasEmailField, hasDepartmentField, departments, customFields = [] } = props;",
            "error": "\t\tconst error = validate(this.props, { name, value, regexp });\n\t\tconst error = validate(this.props, { name, value, regexp });",
            "newState": "\t\tconst newState = {};\n\t\tconst newState = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "container.js",
        "path": "../Rocket.Chat/packages/livechat/src/routes/Register/container.js",
        "code": {
            "fields": "\t\tconst fields = {\n\t\tconst fields = {\n\t\t\tname,\n\t\t\temail,\n\t\t\t...(department && { department }),"
        },
        "depth_rank": 6
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/packages/cron/src/index.ts",
        "code": {
            "result": "const runCronJobFunctionAndPersistResult = async (fn: () => Promise<any>, jobName: string): Promise<void> => {\nconst runCronJobFunctionAndPersistResult = async (fn: () => Promise<any>, jobName: string): Promise<void> => {\n\tconst { insertedId } = await CronHistory.insertOne({\n\tconst { insertedId } = await CronHistory.insertOne({\n\t\t_id: Random.id(),\n\t\tintendedAt: new Date(),\n\t\tname: jobName,\n\t\tstartedAt: new Date(),\n\t});\n\ttry {\n\t\tconst result = await fn();\n\t\tconst result = await fn();\n\t\tawait CronHistory.updateOne(\n\t\t\t{ _id: insertedId },",
            "await": "\t\tfor await (const job of this.reservedJobs) {\n\t\tfor await (const job of this.reservedJobs) {\n\t\t\tif (job.timestamped) {\n\t\t\t\tawait this.addAtTimestamp(job.name, job.when, job.callback);\n\t\t\t} else {"
        },
        "depth_rank": 4
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/packages/api-client/dist/index.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 4
    },
    {
        "file": "useFeaturePreview.spec.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/hooks/useFeaturePreview.spec.js",
        "code": {
            "createUserContextValue": "    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n        wrapper: ({ children }) => (_jsx(MockedSettingsContext, { settings: {\n                Accounts_AllowFeaturePreview: false,\n            }, children: _jsx(MockedUserContext, { userPreferences: {}, children: children }) })),\n    });\n    expect(result.all[0]).toBe(false);\n});\nit('should return false if featurePreviewEnabled is true but feature is not in userPreferences', () => {\n    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n        wrapper: ({ children }) => (_jsx(MockedSettingsContext, { settings: {\n                Accounts_AllowFeaturePreview: false,\n            }, children: _jsx(MockedUserContext, { userPreferences: {\n                    featuresPreview: [\n                        {\n                            name: 'quickReactions',\n                            value: true,\n                        },\n                    ],\n                }, children: children }) })),\n    });\n    expect(result.all[0]).toBe(false);\n});\nit('should return true if featurePreviewEnabled is true and feature is in userPreferences', () => {\n    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n    const { result } = renderHook(() => useFeaturePreview('quickReactions'), {\n        wrapper: ({ children }) => (_jsx(MockedSettingsContext, { settings: {\n                Accounts_AllowFeaturePreview: true,\n            }, children: _jsx(MockedUserContext, { userPreferences: {\n                    featuresPreview: [\n                        {\n                            name: 'quickReactions',\n                            value: true,\n                        },\n                    ],\n                }, children: children }) })),\n    });\n    expect(result.all[0]).toBe(true);\n});\nconst createUserContextValue = ({ userPreferences }) => (Object.assign(Object.assign({}, userContextValue), (userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id]] })));\nconst createUserContextValue = ({ userPreferences }) => (Object.assign(Object.assign({}, userContextValue), (userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id]] })));"
        },
        "depth_rank": 5
    },
    {
        "file": "CustomFieldsForm.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/CustomFieldsForm.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "TextSeparator.d.ts",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/TextSeparator.d.ts",
        "code": {
            "const": "declare const TextSeparator: ({ label, value }: TextSeparatorProps) => ReactElement;\ndeclare const TextSeparator: ({ label, value }: TextSeparatorProps) => ReactElement;"
        },
        "depth_rank": 5
    },
    {
        "file": "ExternalLink.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/ExternalLink.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "Busy.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/Busy.js",
        "code": {
            "Busy": "function Busy(props) {\nfunction Busy(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'busy' }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "Loading.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/Loading.js",
        "code": {
            "Loading": "function Loading(props) {\nfunction Loading(props) {\n    return _jsx(UserStatus, Object.assign({}, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "Offline.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/Offline.js",
        "code": {
            "Offline": "function Offline(props) {\nfunction Offline(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'offline' }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "Away.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/Away.js",
        "code": {
            "Away": "function Away(props) {\nfunction Away(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'away' }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "Online.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/Online.js",
        "code": {
            "Online": "function Online(props) {\nfunction Online(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'online' }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "UserStatus.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/UserStatus.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "UserStatus": "function UserStatus(_a) {\nfunction UserStatus(_a) {\n    var { small, status, statusText } = _a, props = __rest(_a, [\"small\", \"status\", \"statusText\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "UserStatus.d.ts",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/UserStatus/UserStatus.d.ts",
        "code": {
            "function": "declare function UserStatus({ small, status, statusText, ...props }: UserStatusProps): ReactElement;\ndeclare function UserStatus({ small, status, statusText, ...props }: UserStatusProps): ReactElement;"
        },
        "depth_rank": 6
    },
    {
        "file": "Card.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/Card.js",
        "code": {
            "Card": "const Card = (props) => (_jsx(Box, Object.assign({ borderRadius: 'x8', p: 'x20', height: 'full', display: 'flex', flexDirection: 'column', bg: 'light', color: 'default' }, props)));\nconst Card = (props) => (_jsx(Box, Object.assign({ borderRadius: 'x8', p: 'x20', height: 'full', display: 'flex', flexDirection: 'column', bg: 'light', color: 'default' }, props)));"
        },
        "depth_rank": 6
    },
    {
        "file": "CardColTitle.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardColTitle.js",
        "code": {
            "CardColTitle": "const CardColTitle = ({ children }) => (_jsx(Box, { fontScale: 'c2', m: 'none', children: children }));\nconst CardColTitle = ({ children }) => (_jsx(Box, { fontScale: 'c2', m: 'none', children: children }));"
        },
        "depth_rank": 6
    },
    {
        "file": "CardFooterWrapper.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardFooterWrapper.js",
        "code": {
            "CardFooterWrapper": "const CardFooterWrapper = ({ children }) => _jsx(Box, { mbs: 'x16', children: children });\nconst CardFooterWrapper = ({ children }) => _jsx(Box, { mbs: 'x16', children: children });"
        },
        "depth_rank": 6
    },
    {
        "file": "CardFooter.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardFooter.js",
        "code": {
            "CardFooter": "const CardFooter = ({ children }) => _jsx(ButtonGroup, { children: children });\nconst CardFooter = ({ children }) => _jsx(ButtonGroup, { children: children });"
        },
        "depth_rank": 6
    },
    {
        "file": "CardBody.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardBody.js",
        "code": {
            "CardBody": "const CardBody = ({ children, flexDirection = 'row', height }) => (_jsx(Box, { mb: 'x8', display: 'flex', flexDirection: flexDirection, flexGrow: 1, height: height, children: children }));\nconst CardBody = ({ children, flexDirection = 'row', height }) => (_jsx(Box, { mb: 'x8', display: 'flex', flexDirection: flexDirection, flexGrow: 1, height: height, children: children }));"
        },
        "depth_rank": 6
    },
    {
        "file": "CardTitle.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardTitle.js",
        "code": {
            "CardTitle": "const CardTitle = ({ children }) => (_jsx(Box, { mbe: 'x12', fontScale: 'h4', color: 'default', children: children }));\nconst CardTitle = ({ children }) => (_jsx(Box, { mbe: 'x12', fontScale: 'h4', color: 'default', children: children }));"
        },
        "depth_rank": 6
    },
    {
        "file": "CardDivider.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Card/CardDivider.js",
        "code": {
            "CardDivider": "const CardDivider = () => _jsx(Divider, { width: 'x1', mi: 'x24', mb: 'none', alignSelf: 'stretch' });\nconst CardDivider = () => _jsx(Divider, { width: 'x1', mi: 'x24', mb: 'none', alignSelf: 'stretch' });"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderAvatar.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderAvatar.js",
        "code": {
            "HeaderAvatar": "const HeaderAvatar = (props) => _jsx(Box, Object.assign({ mi: 'x4', display: 'flex', alignItems: 'center' }, props));\nconst HeaderAvatar = (props) => _jsx(Box, Object.assign({ mi: 'x4', display: 'flex', alignItems: 'center' }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderTitle.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTitle.js",
        "code": {
            "HeaderTitle": "const HeaderTitle = (props) => (_jsx(Box, Object.assign({ color: 'default', mi: 'x4', is: 'h1', fontScale: 'h4', withTruncatedText: true }, props)));\nconst HeaderTitle = (props) => (_jsx(Box, Object.assign({ color: 'default', mi: 'x4', is: 'h1', fontScale: 'h4', withTruncatedText: true }, props)));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderSubtitle.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderSubtitle.js",
        "code": {
            "HeaderSubtitle": "const HeaderSubtitle = (props) => _jsx(Box, Object.assign({ color: 'hint', fontScale: 'p2', withTruncatedText: true }, props));\nconst HeaderSubtitle = (props) => _jsx(Box, Object.assign({ color: 'hint', fontScale: 'p2', withTruncatedText: true }, props));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderContentRow.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderContentRow.js",
        "code": {
            "HeaderContentRow": "const HeaderContentRow = (props) => (_jsx(Box, Object.assign({ alignItems: 'center', flexShrink: 1, flexGrow: 1, display: 'flex' }, props)));\nconst HeaderContentRow = (props) => (_jsx(Box, Object.assign({ alignItems: 'center', flexShrink: 1, flexGrow: 1, display: 'flex' }, props)));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderContent.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderContent.js",
        "code": {
            "HeaderContent": "const HeaderContent = (props) => (_jsx(Box, Object.assign({ flexGrow: 1, width: 1, flexShrink: 1, mi: 'x4', display: 'flex', justifyContent: 'center', flexDirection: 'column' }, props)));\nconst HeaderContent = (props) => (_jsx(Box, Object.assign({ flexGrow: 1, width: 1, flexShrink: 1, mi: 'x4', display: 'flex', justifyContent: 'center', flexDirection: 'column' }, props)));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderState.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderState.js",
        "code": {
            "HeaderState": "const HeaderState = (props) => (props.onClick ? _jsx(IconButton, Object.assign({ mini: true }, props)) : _jsx(Icon, Object.assign({ size: 16, name: props.icon }, props)));\nconst HeaderState = (props) => (props.onClick ? _jsx(IconButton, Object.assign({ mini: true }, props)) : _jsx(Icon, Object.assign({ size: 16, name: props.icon }, props)));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderIcon.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderIcon.js",
        "code": {
            "HeaderIcon": "const HeaderIcon = ({ icon }) => icon && (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 18, overflow: 'hidden', justifyContent: 'center', children: isValidElement(icon) ? icon : _jsx(Icon, { color: 'default', size: 'x18', name: icon.name }) }));\nconst HeaderIcon = ({ icon }) => icon && (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 18, overflow: 'hidden', justifyContent: 'center', children: isValidElement(icon) ? icon : _jsx(Icon, { color: 'default', size: 'x18', name: icon.name }) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderTag.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTag/HeaderTag.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "HeaderTag": "const HeaderTag = (_a) => {\nconst HeaderTag = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 7
    },
    {
        "file": "HeaderTagSkeleton.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTag/HeaderTagSkeleton.js",
        "code": {
            "HeaderTagSkeleton": "const HeaderTagSkeleton = () => _jsx(Skeleton, { width: 'x48' });\nconst HeaderTagSkeleton = () => _jsx(Skeleton, { width: 'x48' });"
        },
        "depth_rank": 7
    },
    {
        "file": "HeaderToolbox.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderToolbox/HeaderToolbox.js",
        "code": {
            "HeaderToolbox": "const HeaderToolbox = (props) => _jsx(ButtonGroup, Object.assign({ role: 'toolbar', mi: 'x4' }, props));\nconst HeaderToolbox = (props) => _jsx(ButtonGroup, Object.assign({ role: 'toolbar', mi: 'x4' }, props));"
        },
        "depth_rank": 7
    },
    {
        "file": "HeaderToolboxAction.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderToolbox/HeaderToolboxAction.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "HeaderToolboxDivider.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/Header/HeaderToolbox/HeaderToolboxDivider.js",
        "code": {
            "HeaderToolboxDivider": "const HeaderToolboxDivider = () => _jsx(Divider, { mi: 'x4', vertical: true });\nconst HeaderToolboxDivider = () => _jsx(Divider, { mi: 'x4', vertical: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiPickerNotFound.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerNotFound.js",
        "code": {
            "EmojiPickerNotFound": "const EmojiPickerNotFound = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', flexDirection: 'column', alignItems: 'center', fontScale: 'c1', mb: 'x8' })));\nconst EmojiPickerNotFound = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', flexDirection: 'column', alignItems: 'center', fontScale: 'c1', mb: 'x8' })));"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerListArea.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerListArea.js",
        "code": {
            "EmojiPickerListArea": "const EmojiPickerListArea = (props) => (_jsx(Box, Object.assign({}, props, { w: 'full', h: 'full', pis: 'x12', overflow: 'hidden' })));\nconst EmojiPickerListArea = (props) => (_jsx(Box, Object.assign({}, props, { w: 'full', h: 'full', pis: 'x12', overflow: 'hidden' })));"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerHeader.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerHeader.js",
        "code": {
            "EmojiPickerHeader": "const EmojiPickerHeader = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', alignItems: 'center', pbs: 'x12', pi: 'x12' })));\nconst EmojiPickerHeader = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', alignItems: 'center', pbs: 'x12', pi: 'x12' })));"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerLoadMore.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerLoadMore.js",
        "code": {
            "EmojiPickerLoadMore": "const EmojiPickerLoadMore = (props) => (_jsx(Box, { display: 'flex', flexDirection: 'column', alignItems: 'center', mbe: 'x8', children: _jsx(Box, Object.assign({}, props, { is: 'a', fontScale: 'c1' })) }));\nconst EmojiPickerLoadMore = (props) => (_jsx(Box, { display: 'flex', flexDirection: 'column', alignItems: 'center', mbe: 'x8', children: _jsx(Box, Object.assign({}, props, { is: 'a', fontScale: 'c1' })) }));"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerCategoryHeader.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerCategoryHeader.js",
        "code": {
            "EmojiPickerCategoryHeader": "const EmojiPickerCategoryHeader = (props) => (_jsx(ButtonGroup, Object.assign({}, props, { small: true, mbs: 'x12', mi: 'x12', stretch: true })));\nconst EmojiPickerCategoryHeader = (props) => (_jsx(ButtonGroup, Object.assign({}, props, { small: true, mbs: 'x12', mi: 'x12', stretch: true })));"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerPreview.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerPreview.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "EmojiPickerPreview": "const EmojiPickerPreview = (_a) => {\nconst EmojiPickerPreview = (_a) => {\n    var { emoji, name } = _a, props = __rest(_a, [\"emoji\", \"name\"]);"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerCategoryWrapper.js",
        "path": "../Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerCategoryWrapper.js",
        "code": {
            "EmojiPickerCategoryWrapper": "const EmojiPickerCategoryWrapper = (props) => _jsx(Box, Object.assign({}, props, { display: 'flex', flexWrap: 'wrap' }));\nconst EmojiPickerCategoryWrapper = (props) => _jsx(Box, Object.assign({}, props, { display: 'flex', flexWrap: 'wrap' }));"
        },
        "depth_rank": 6
    },
    {
        "file": "useFeaturePreviewList.ts",
        "path": "../Rocket.Chat/packages/ui-client/src/hooks/useFeaturePreviewList.ts",
        "code": {
            "userFeature": "\tconst mergedFeatures = defaultFeaturesPreview.map((feature) => {\n\tconst mergedFeatures = defaultFeaturesPreview.map((feature) => {\n\t\tconst userFeature = userFeaturesPreview?.find((userFeature) => userFeature.name === feature.name);\n\t\tconst userFeature = userFeaturesPreview?.find((userFeature) => userFeature.name === feature.name);\n\t\treturn { ...feature, ...userFeature };"
        },
        "depth_rank": 5
    },
    {
        "file": "useFeaturePreview.spec.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/hooks/useFeaturePreview.spec.tsx",
        "code": {
            "createUserContextValue": "const createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => ({\nconst createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => ({\n\t...userContextValue,\n\t...(userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id as unknown as string] as any] }),",
            "cache": "const createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\nconst createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\n\tconst cache = new Map<string, ISetting['value']>();\n\tconst cache = new Map<string, ISetting['value']>();\n\n\treturn {\n\t\t...settingContextValue,\n\t\t...(settings && {\n\t\t\tquerySetting: (_id: string) => [\n\t\t\t\t() => () => undefined,\n\t\t\t\t() => {\n\t\t\t\t\tif (cache.has(_id)) {\n\t\t\t\t\t\treturn cache.get(_id) as any;\n\t\t\t\t\t}\n\t\t\t\t\tcache.set(_id, { value: settings[_id] } as any);"
        },
        "depth_rank": 5
    },
    {
        "file": "CustomFieldsForm.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/CustomFieldsForm.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { errors } = useFormState({ control });\n\tconst { errors } = useFormState({ control });",
            "errorMessage": "\tconst error = get(errors, name);\n\tconst error = get(errors, name);\n\tconst errorMessage = useMemo(() => getErrorMessage(error), [error, getErrorMessage]);\n\tconst errorMessage = useMemo(() => getErrorMessage(error), [error, getErrorMessage]);\n\n\treturn (\n\t\t<Controller<T, any>\n\t\t\tname={name}"
        },
        "depth_rank": 5
    },
    {
        "file": "TextSeparator.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/TextSeparator.tsx",
        "code": {
            "TextSeparator": "const TextSeparator = ({ label, value }: TextSeparatorProps): ReactElement => (\nconst TextSeparator = ({ label, value }: TextSeparatorProps): ReactElement => ("
        },
        "depth_rank": 5
    },
    {
        "file": "FeaturePreview.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/FeaturePreview/FeaturePreview.tsx",
        "code": {
            "toggledChildren": "\tconst featureToggleEnabled = useFeaturePreview(feature);\n\tconst featureToggleEnabled = useFeaturePreview(feature);\n\n\tconst toggledChildren = Children.map(children, (child) =>\n\tconst toggledChildren = Children.map(children, (child) =>\n\t\tcloneElement(child, {\n\t\t\tfeatureToggleEnabled,\n\t\t}),\n\t);\n\n\treturn <Suspense fallback={null}>{toggledChildren}</Suspense>;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserStatus.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/UserStatus.tsx",
        "code": {
            "t": "function UserStatus({ small, status, statusText, ...props }: UserStatusProps): ReactElement {\nfunction UserStatus({ small, status, statusText, ...props }: UserStatusProps): ReactElement {\n\tconst size = small ? 'small' : 'large';\n\tconst size = small ? 'small' : 'large';\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tswitch (status) {\n\t\tcase 'online':\n\t\t\treturn <StatusBullet size={size} status={status} title={statusText || t('Online')} {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Away.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/Away.tsx",
        "code": {
            "Away": "function Away(props: AwayProps): ReactElement {\nfunction Away(props: AwayProps): ReactElement {\n\treturn <UserStatus status='away' {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Offline.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/Offline.tsx",
        "code": {
            "Offline": "function Offline(props: OfflineProps): ReactElement {\nfunction Offline(props: OfflineProps): ReactElement {\n\treturn <UserStatus status='offline' {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Busy.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/Busy.tsx",
        "code": {
            "Busy": "function Busy(props: BusyProps): ReactElement {\nfunction Busy(props: BusyProps): ReactElement {\n\treturn <UserStatus status='busy' {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Online.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/Online.tsx",
        "code": {
            "Online": "function Online(props: OnlineProps): ReactElement {\nfunction Online(props: OnlineProps): ReactElement {\n\treturn <UserStatus status='online' {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserStatus.stories.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/UserStatus.stories.tsx",
        "code": {
            "status": "\tconst status = useAutoSequence(['online', 'away', 'busy', 'offline'] as const);\n\tconst status = useAutoSequence(['online', 'away', 'busy', 'offline'] as const);\n\n\treturn <UserStatus.UserStatus status={status} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Loading.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/UserStatus/Loading.tsx",
        "code": {
            "Loading": "function Loading(props: LoadingProps): ReactElement {\nfunction Loading(props: LoadingProps): ReactElement {\n\treturn <UserStatus {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "CardIcon.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/Card/CardIcon.tsx",
        "code": {
            "hasChildrenProp": "const hasChildrenProp = (props: CardIconProps): props is { children: ReactNode } => 'children' in props;\nconst hasChildrenProp = (props: CardIconProps): props is { children: ReactNode } => 'children' in props;"
        },
        "depth_rank": 6
    },
    {
        "file": "CardFooterWrapper.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/Card/CardFooterWrapper.tsx",
        "code": {
            "CardFooterWrapper": "const CardFooterWrapper = ({ children }: { children: ReactNode }): ReactElement => <Box mbs='x16'>{children}</Box>;\nconst CardFooterWrapper = ({ children }: { children: ReactNode }): ReactElement => <Box mbs='x16'>{children}</Box>;"
        },
        "depth_rank": 6
    },
    {
        "file": "Header.stories.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/Header/Header.stories.tsx",
        "code": {
            "avatar": "} as const;\n} as const;\n\nconst avatar = <Avatar size='x40' url={avatarUrl} />;\nconst avatar = <Avatar size='x40' url={avatarUrl} />;",
            "icon": "const icon = { name: 'hash' } as const;\nconst icon = { name: 'hash' } as const;"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerCategoryWrapper.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerCategoryWrapper.tsx",
        "code": {
            "EmojiPickerCategoryWrapper": "const EmojiPickerCategoryWrapper = (props: ComponentProps<typeof Box>) => <Box {...props} display='flex' flexWrap='wrap' />;\nconst EmojiPickerCategoryWrapper = (props: ComponentProps<typeof Box>) => <Box {...props} display='flex' flexWrap='wrap' />;"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerHeader.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerHeader.tsx",
        "code": {
            "EmojiPickerHeader": "const EmojiPickerHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} display='flex' alignItems='center' pbs='x12' pi='x12' />"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerPreviewArea.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerPreviewArea.tsx",
        "code": {
            "EmojiPickerPreviewArea": "const EmojiPickerPreviewArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => (\nconst EmojiPickerPreviewArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => (\n\t<Box\n\t\t{...props}"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerCategoryHeader.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerCategoryHeader.tsx",
        "code": {
            "EmojiPickerCategoryHeader": "const EmojiPickerCategoryHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'wrap'>) => (\nconst EmojiPickerCategoryHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'wrap'>) => (\n\t<ButtonGroup {...props} small mbs='x12' mi='x12' stretch />"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerNotFound.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerNotFound.tsx",
        "code": {
            "EmojiPickerNotFound": "const EmojiPickerNotFound = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerNotFound = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} display='flex' flexDirection='column' alignItems='center' fontScale='c1' mb='x8' />"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerContainer.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerContainer.tsx",
        "code": {
            "EmojiPickerContainer": "const EmojiPickerContainer = forwardRef<HTMLElement, Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>>(function EmojiPickerContainer(\nconst EmojiPickerContainer = forwardRef<HTMLElement, Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>>(function EmojiPickerContainer(\n\tprops,\n\tref,\n) {\n\treturn (\n\t\t<Box\n\t\t\t{...props}"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerListArea.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerListArea.tsx",
        "code": {
            "EmojiPickerListArea": "const EmojiPickerListArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerListArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} w='full' h='full' pis='x12' overflow='hidden' />"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerPreview.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerPreview.tsx",
        "code": {
            "previewEmojiClass": "const EmojiPickerPreview = ({ emoji, name, ...props }: { emoji: string; name: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\nconst EmojiPickerPreview = ({ emoji, name, ...props }: { emoji: string; name: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\n\tconst previewEmojiClass = css`\n\tconst previewEmojiClass = css`\n\t\tspan {\n\t\t\twidth: 40px;\n\t\t\theight: 40px;\n\t\t}\n\t`;\n\n\treturn (\n\t\t<Box {...props} display='flex' alignItems='center'>"
        },
        "depth_rank": 6
    },
    {
        "file": "EmojiPickerLoadMore.tsx",
        "path": "../Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerLoadMore.tsx",
        "code": {
            "EmojiPickerLoadMore": "const EmojiPickerLoadMore = (props: Omit<AllHTMLAttributes<HTMLAnchorElement>, 'style'>) => (\nconst EmojiPickerLoadMore = (props: Omit<AllHTMLAttributes<HTMLAnchorElement>, 'style'>) => (\n\t<Box display='flex' flexDirection='column' alignItems='center' mbe='x8'>\n\t\t<Box {...props} is='a' fontScale='c1' />"
        },
        "depth_rank": 6
    },
    {
        "file": "LoginServicesButton.js",
        "path": "../Rocket.Chat/packages/web-ui-registration/dist/LoginServicesButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "LoginServicesButton": "const LoginServicesButton = (_a) => {\nconst LoginServicesButton = (_a) => {\n    var { buttonLabelText, icon, title, clientConfig, service, className, disabled, setError } = _a, props = __rest(_a, [\"buttonLabelText\", \"icon\", \"title\", \"clientConfig\", \"service\", \"className\", \"disabled\", \"setError\"]);"
        },
        "depth_rank": 4
    },
    {
        "file": "CMSPage.d.ts",
        "path": "../Rocket.Chat/packages/web-ui-registration/dist/CMSPage.d.ts",
        "code": {
            "const": "declare const CMSPage: ({ page }: CMSPageProps) => ReactElement;\ndeclare const CMSPage: ({ page }: CMSPageProps) => ReactElement;"
        },
        "depth_rank": 4
    },
    {
        "file": "RegisterForm.js",
        "path": "../Rocket.Chat/packages/web-ui-registration/dist/RegisterForm.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 4
    },
    {
        "file": "useRegisterMethod.js",
        "path": "../Rocket.Chat/packages/web-ui-registration/dist/hooks/useRegisterMethod.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 5
    },
    {
        "file": "LoginServicesButton.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/LoginServicesButton.tsx",
        "code": {
            "LoginServicesButton": "const LoginServicesButton = <T extends LoginService>({\nconst LoginServicesButton = <T extends LoginService>({\n\tbuttonLabelText,\n\ticon,\n\ttitle,\n\tclientConfig,\n\tservice,\n\tclassName,\n\tdisabled,\n\tsetError,\n\t...props\n}: T & {",
            "handler": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handler = useLoginWithService({ service, buttonLabelText, title, clientConfig, ...props });\n\tconst handler = useLoginWithService({ service, buttonLabelText, title, clientConfig, ...props });"
        },
        "depth_rank": 4
    },
    {
        "file": "SecretRegisterForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/SecretRegisterForm.tsx",
        "code": {
            "hash": "const SecretRegisterForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }): ReactElement => {\nconst SecretRegisterForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }): ReactElement => {\n\tconst hash = useRouteParameter('hash');\n\tconst hash = useRouteParameter('hash');\n\n\tconst { data: valid, isSuccess } = useCheckRegistrationSecret(hash);\n\tconst { data: valid, isSuccess } = useCheckRegistrationSecret(hash);"
        },
        "depth_rank": 4
    },
    {
        "file": "SecretRegisterInvalidForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/SecretRegisterInvalidForm.tsx",
        "code": {
            "t": "const SecretRegisterInvalidForm = (): ReactElement => {\nconst SecretRegisterInvalidForm = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<VerticalTemplate>\n\t\t\t<h2>{t('Invalid_secret_URL_message')}</h2>"
        },
        "depth_rank": 4
    },
    {
        "file": "CMSPage.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/CMSPage.tsx",
        "code": {
            "customBackground": "const CMSPage = ({ page }: CMSPageProps): ReactElement => {\nconst CMSPage = ({ page }: CMSPageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst pageContent = useSetting(page) as string;\n\tconst pageContent = useSetting(page) as string;\n\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 4
    },
    {
        "file": "RegisterForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/RegisterForm.tsx",
        "code": {
            "dispatchToastMessage": "\tconst manuallyApproveNewUsersRequired = useSetting('Accounts_ManuallyApproveNewUsers');\n\tconst manuallyApproveNewUsersRequired = useSetting('Accounts_ManuallyApproveNewUsers');\n\n\tconst usernameOrEmailPlaceholder = String(useSetting('Accounts_EmailOrUsernamePlaceholder'));\n\tconst usernameOrEmailPlaceholder = String(useSetting('Accounts_EmailOrUsernamePlaceholder'));\n\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\n\tconst formLabelId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\tconst registerUser = useRegisterMethod();\n\tconst registerUser = useRegisterMethod();\n\tconst customFields = useAccountsCustomFields();\n\tconst customFields = useAccountsCustomFields();\n\n\tconst [serverError, setServerError] = useState<string | undefined>(undefined);\n\tconst [serverError, setServerError] = useState<string | undefined>(undefined);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetError,\n\t\twatch,\n\t\tgetValues,\n\t\tclearErrors,\n\t\tcontrol,\n\t\tformState: { errors },",
            "handleRegister": "\tconst passwordVerifications = useVerifyPassword(watch('password'));\n\tconst passwordVerifications = useVerifyPassword(watch('password'));\n\n\tconst handleRegister = async ({ password, passwordConfirmation: _, ...formData }: LoginRegisterPayload) => {\n\tconst handleRegister = async ({ password, passwordConfirmation: _, ...formData }: LoginRegisterPayload) => {\n\t\tregisterUser.mutate(\n\t\t\t{ pass: password, ...formData },"
        },
        "depth_rank": 4
    },
    {
        "file": "EmailConfirmationForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/EmailConfirmationForm.tsx",
        "code": {
            "sendEmail": "\tconst sendEmail = useLoginSendEmailConfirmation();\n\tconst sendEmail = useLoginSendEmailConfirmation();\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={handleSubmit((data) => {\n\t\t\t\tif (sendEmail.isLoading) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsendEmail.mutate(data.email);\n\t\t\t})}\n\t\t>\n\t\t\t<Form.Header>\n\t\t\t\t<Form.Title>{t('registration.component.form.confirmation')}</Form.Title>"
        },
        "depth_rank": 4
    },
    {
        "file": "RegisterFormDisabled.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/RegisterFormDisabled.tsx",
        "code": {
            "linkReplacementText": "\tconst linkReplacementText = String(useSetting('Accounts_RegistrationForm_LinkReplacementText'));\n\tconst linkReplacementText = String(useSetting('Accounts_RegistrationForm_LinkReplacementText'));\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 4
    },
    {
        "file": "ResetPasswordForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/ResetPasswordForm.tsx",
        "code": {
            "resetPassword": "\tconst resetPassword = useSendForgotPassword();\n\tconst resetPassword = useSendForgotPassword();\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={handleSubmit((data) => {\n\t\t\t\tresetPassword({ email: data.email });"
        },
        "depth_rank": 4
    },
    {
        "file": "LoginServices.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/LoginServices.tsx",
        "code": {
            "LoginServices": "const LoginServices = ({\nconst LoginServices = ({\n\tdisabled,\n\tsetError,\n}: {",
            "showFormLogin": "\tconst services = useLoginServices();\n\tconst services = useLoginServices();\n\tconst showFormLogin = useSetting('Accounts_ShowFormLogin');\n\tconst showFormLogin = useSetting('Accounts_ShowFormLogin');\n\n\tif (services.length === 0) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{showFormLogin && <Divider mb={24} p={0} children={t('registration.component.form.divider')} />}"
        },
        "depth_rank": 4
    },
    {
        "file": "GuestForm.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/GuestForm.tsx",
        "code": {
            "GuestForm": "const GuestForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }) => {\nconst GuestForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 4
    },
    {
        "file": "useRegisterMethod.ts",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/hooks/useRegisterMethod.ts",
        "code": {
            "result": "\tconst register = useEndpoint('POST', '/v1/users.register');\n\tconst register = useEndpoint('POST', '/v1/users.register');\n\tconst secret = useRouteParameter('hash');\n\tconst secret = useRouteParameter('hash');\n\n\tconst login = useLoginWithPassword();\n\tconst login = useLoginWithPassword();\n\n\treturn useMutation({\n\t\tmutationFn: async ({ ...props }: Parameters<typeof register>[0]): Promise<ReturnType<typeof register>> => {\n\t\t\tconst result = await register({ ...props, secret });\n\t\t\tconst result = await register({ ...props, secret });"
        },
        "depth_rank": 5
    },
    {
        "file": "VerticalTemplate.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/template/VerticalTemplate.tsx",
        "code": {
            "customBackground": "const VerticalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\nconst VerticalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 5
    },
    {
        "file": "HorizontalTemplate.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/template/HorizontalTemplate.tsx",
        "code": {
            "customBackground": "const HorizontalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\nconst HorizontalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<HorizontalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 5
    },
    {
        "file": "LoginPoweredBy.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/components/LoginPoweredBy.tsx",
        "code": {
            "hidePoweredBy": "\tconst hidePoweredBy = useSetting<boolean>('Layout_Login_Hide_Powered_By');\n\tconst hidePoweredBy = useSetting<boolean>('Layout_Login_Hide_Powered_By');\n\tif (hidePoweredBy) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<Box mbe='x18'>\n\t\t\t<Trans i18nKey='registration.page.poweredBy'>\n\t\t\t\t{'Powered by '}"
        },
        "depth_rank": 5
    },
    {
        "file": "RegisterTitle.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/components/RegisterTitle.tsx",
        "code": {
            "hideTitle": "\tconst siteName = useSetting<string>('Site_Name');\n\tconst siteName = useSetting<string>('Site_Name');\n\tconst hideTitle = useSetting<boolean>('Layout_Login_Hide_Title');\n\tconst hideTitle = useSetting<boolean>('Layout_Login_Hide_Title');\n\n\tif (hideTitle) {\n\t\treturn null;\n\t}\n\treturn <Trans i18nKey='registration.component.welcome'>Welcome to {siteName} workspace</Trans>;"
        },
        "depth_rank": 5
    },
    {
        "file": "ResetPasswordPage.tsx",
        "path": "../Rocket.Chat/packages/web-ui-registration/src/ResetPassword/ResetPasswordPage.tsx",
        "code": {
            "changePasswordReason": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst changePasswordReason = getChangePasswordReason(user || {});\n\tconst changePasswordReason = getChangePasswordReason(user || {});",
            "loginWithToken": "\tconst loginWithToken = useLoginWithToken();\n\tconst loginWithToken = useLoginWithToken();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetError,\n\t\tformState: { errors },",
            "result": "\tconst passwordVerifications = useVerifyPassword(watch('password'));\n\tconst passwordVerifications = useVerifyPassword(watch('password'));\n\n\tconst submit = handleSubmit(async (data) => {\n\tconst submit = handleSubmit(async (data) => {\n\t\ttry {\n\t\t\tif (token) {\n\t\t\t\tconst result = await resetPassword(token, data.password);\n\t\t\t\tconst result = await resetPassword(token, data.password);\n\t\t\t\tawait loginWithToken(result.token);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} else {",
            "_error": "\t\t\tconst _error = reason ?? error;\n\t\t\tconst _error = reason ?? error;\n\t\t\tsetError('password', { message: String(_error) });"
        },
        "depth_rank": 5
    },
    {
        "file": "callbacks.ts",
        "path": "../Rocket.Chat/apps/meteor/lib/callbacks.ts",
        "code": {
            "stopTracking": "\t\t\t\treturn (await this.runOne(callback, item, constant)) ?? item;\n\t\t\t\treturn (await this.runOne(callback, item, constant)) ?? item;\n\t\t\t};\n\n\t\tconst identity = <TItem>(item: TItem): Promise<TItem> => Promise.resolve(item);\n\t\tconst identity = <TItem>(item: TItem): Promise<TItem> => Promise.resolve(item);\n\n\t\tconst pipe =\n\t\tconst pipe =\n\t\t\t(curr: (item: unknown, constant?: unknown) => Promise<unknown>, next: (item: unknown, constant?: unknown) => Promise<unknown>) =>\n\t\t\t(curr: (item: unknown, constant?: unknown) => Promise<unknown>, next: (item: unknown, constant?: unknown) => Promise<unknown>) =>\n\t\t\tasync (item: unknown, constant?: unknown): Promise<unknown> =>\n\t\t\tasync (item: unknown, constant?: unknown): Promise<unknown> =>\n\t\t\t\tnext(await curr(item, constant), constant);\n\t\t\t\tnext(await curr(item, constant), constant);\n\n\t\tconst fn = callbacks.map(wrapCallback).reduce(pipe, identity);\n\t\tconst fn = callbacks.map(wrapCallback).reduce(pipe, identity);\n\n\t\treturn async (item: unknown, constant?: unknown): Promise<unknown> => {\n\t\treturn async (item: unknown, constant?: unknown): Promise<unknown> => {\n\t\t\tconst stopTracking = this.trackHook?.({ hook, length: callbacks.length });\n\t\t\tconst stopTracking = this.trackHook?.({ hook, length: callbacks.length });"
        },
        "depth_rank": 4
    },
    {
        "file": "highOrderFunctions.ts",
        "path": "../Rocket.Chat/apps/meteor/lib/utils/highOrderFunctions.ts",
        "code": {
            "cancel": "\t\tconst cancel = () => {\n\t\tconst cancel = () => {\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = undefined;\n\t\t};\n\n\t\treturn Object.assign(debounced, { cancel });"
        },
        "depth_rank": 5
    },
    {
        "file": "throttledCounter.ts",
        "path": "../Rocket.Chat/apps/meteor/lib/utils/throttledCounter.ts",
        "code": {
            "throttledFn": "\tconst throttledFn = throttle(\n\tconst throttledFn = throttle(\n\t\t() => {\n\t\t\tfn(counter);\n\n\t\t\tcounter = 0;\n\t\t},\n\t\twait,\n\t\t{ leading: false },"
        },
        "depth_rank": 5
    },
    {
        "file": "omit.ts",
        "path": "../Rocket.Chat/apps/meteor/lib/utils/omit.ts",
        "code": {
            "result": "\tconst result = { ...obj };\n\tconst result = { ...obj };"
        },
        "depth_rank": 5
    },
    {
        "file": "transformMappedData.js",
        "path": "../Rocket.Chat/apps/meteor/ee/lib/misc/transformMappedData.js",
        "code": {
            "transformedData": "\tconst originalData = cloneDeep(data);\n\tconst originalData = cloneDeep(data);\n\tconst transformedData = {};\n\tconst transformedData = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "ecdh.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/ecdh.ts",
        "code": {
            "data": "\t\tconst data = await response.json();\n\t\tconst data = await response.json();\n\n\t\tif (data.success === false) {\n\t\t\tresolveSession();\n\t\t\treturn Meteor.connection._stream.allowConnection();\n\t\t}\n\n\t\tawait session.setServerKey(data.publicKeyString);\n\t\tresolveSession(session);\n\t\tinit(session);\n\t} catch (e) {"
        },
        "depth_rank": 5
    },
    {
        "file": "useDeviceLogout.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/hooks/useDeviceLogout.tsx",
        "code": {
            "handleCloseContextualBar": "\tconst routeId = useRouteParameter('id');\n\tconst routeId = useRouteParameter('id');\n\n\tconst logoutDevice = useEndpointAction('POST', endpoint);\n\tconst logoutDevice = useEndpointAction('POST', endpoint);\n\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);",
            "handleLogoutDevice": "\tconst isContextualBarOpen = routeId === sessionId;\n\tconst isContextualBarOpen = routeId === sessionId;\n\n\tconst handleLogoutDeviceModal = useCallback(\n\tconst handleLogoutDeviceModal = useCallback(\n\t\t(onReload: () => void) => {\n\t\t\tconst closeModal = (): void => setModal(null);\n\t\t\tconst closeModal = (): void => setModal(null);\n\n\t\t\tconst handleLogoutDevice = async (): Promise<void> => {\n\t\t\tconst handleLogoutDevice = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait logoutDevice({ sessionId });"
        },
        "depth_rank": 6
    },
    {
        "file": "useVoipClient.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/hooks/useVoipClient.ts",
        "code": {
            "empty": "const empty = {};\nconst empty = {};",
            "isSignedResponse": "const isSignedResponse = (data: any): data is { result: string } => typeof data?.result === 'string';\nconst isSignedResponse = (data: any): data is { result: string } => typeof data?.result === 'string';",
            "iceServers": "\tconst iceServers = useWebRtcServers();\n\tconst iceServers = useWebRtcServers();\n\tconst [result, setResult] = useSafely(useState<UseVoipClientResult>({}));\n\tconst [result, setResult] = useSafely(useState<UseVoipClientResult>({}));",
            "result": "\t\t\t\t\tconst result = KJUR.jws.JWS.parse(data.result);\n\t\t\t\t\tconst result = KJUR.jws.JWS.parse(data.result);\n\t\t\t\t\tparsedData = (result.payloadObj as any)?.context as IRegistrationInfo;\n\t\t\t\t} else {",
            "subscription": "\t\t\t\t\t\tconst wsURL = new URL(websocketPath);\n\t\t\t\t\t\tconst wsURL = new URL(websocketPath);\n\t\t\t\t\t\tconst subscription = await membership({ extension });\n\t\t\t\t\t\tconst subscription = await membership({ extension });",
            "config": "\t\t\t\t\t\tconst config = {\n\t\t\t\t\t\tconst config = {\n\t\t\t\t\t\t\tauthUserName: extension,\n\t\t\t\t\t\t\tauthPassword: password,\n\t\t\t\t\t\t\tsipRegistrarHostnameOrIP: wsURL.host,\n\t\t\t\t\t\t\twebSocketURI: websocketPath,\n\t\t\t\t\t\t\tenableVideo: true,\n\t\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\t\tconnectionRetryCount: Number(voipRetryCount),\n\t\t\t\t\t\t\tenableKeepAliveUsingOptionsForUnstableNetworks: Boolean(enableKeepAlive),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tclient = await (isEE ? EEVoipClient.create(config) : VoIPUser.create(config));\n\n\t\t\t\t\t\t// Today we are hardcoding workflow mode.\n\t\t\t\t\t\t// In future, this should be ready from configuration\n\t\t\t\t\t\tclient.setWorkflowMode(WorkflowTypes.CONTACT_CENTER_USER);\n\t\t\t\t\t\tclient.setMembershipSubscription(subscription);\n\t\t\t\t\t\tsetResult({ voipClient: client, registrationInfo: parsedData });"
        },
        "depth_rank": 6
    },
    {
        "file": "useDevicesMenuOption.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/hooks/useDevicesMenuOption.tsx",
        "code": {
            "option": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst option = {\n\tconst option = {\n\t\tlabel: (\n\t\t\t<Box alignItems='center' display='flex'>\n\t\t\t\t<Icon mie='x4' name='customize' size='x16' />\n\t\t\t\t{t('Device_settings')}"
        },
        "depth_rank": 6
    },
    {
        "file": "EEVoipClient.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/lib/voip/EEVoipClient.ts",
        "code": {
            "inviterOptions": "\t\tconst constraints = {\n\t\tconst constraints = {\n\t\t\taudio: true,\n\t\t\tvideo: false,\n\t\t};\n\t\tconst inviterOptions = {\n\t\tconst inviterOptions = {\n\t\t\tsessionDescriptionHandlerOptions: { constraints },\n\t\t\tsessionDescriptionHandlerOptions: { constraints },"
        },
        "depth_rank": 7
    },
    {
        "file": "SidebarFooterWatermark.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/sidebar/footer/SidebarFooterWatermark.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { isLoading, isError, data } = useIsEnterprise();\n\tconst { isLoading, isError, data } = useIsEnterprise();"
        },
        "depth_rank": 7
    },
    {
        "file": "orchestrator.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/orchestrator.ts",
        "code": {
            "result": "\t\tconst result = await sdk.rest.get<'/apps/installed'>('/apps/installed');\n\t\tconst result = await sdk.rest.get<'/apps/installed'>('/apps/installed');\n\n\t\tif ('apps' in result) {\n\t\t\t// TODO: chapter day: multiple results are returned, but we only need one\n\t\t\treturn result.apps as App[];\n\t\t}\n\t\tthrow new Error('Invalid response from API');\n\t}\n\n\tpublic async getAppsFromMarketplace(isAdminUser?: boolean): Promise<App[]> {\n\t\tconst result = await sdk.rest.get('/apps/marketplace', { isAdminUser: isAdminUser ? isAdminUser.toString() : 'false' });\n\t\tconst result = await sdk.rest.get('/apps/marketplace', { isAdminUser: isAdminUser ? isAdminUser.toString() : 'false' });"
        },
        "depth_rank": 6
    },
    {
        "file": "i18n.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/i18n.js",
        "code": {
            "scopedTranslations": "\t\t\tconst scopedTranslations = Object.entries(translations).reduce((translations, [key, value]) => {\n\t\t\tconst scopedTranslations = Object.entries(translations).reduce((translations, [key, value]) => {\n\t\t\t\ttranslations[Utilities.getI18nKeyForApp(key, appId)] = value;\n\t\t\t\treturn translations;\n\t\t\t}, {});\n\n\t\t\ti18n.addResourceBundle(normalizedLanguage, 'core', scopedTranslations);\n\t\t} catch (error) {"
        },
        "depth_rank": 6
    },
    {
        "file": "GameCenterInvitePlayersModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterInvitePlayersModal.tsx",
        "code": {
            "t": "const GameCenterInvitePlayersModal = ({ game, onClose }: IGameCenterInvitePlayersModalProps): ReactElement => {\nconst GameCenterInvitePlayersModal = ({ game, onClose }: IGameCenterInvitePlayersModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [users, setUsers] = useState<Array<Username>>([]);\n\tconst [users, setUsers] = useState<Array<Username>>([]);\n\tconst { name } = game;\n\tconst { name } = game;"
        },
        "depth_rank": 7
    },
    {
        "file": "GameCenterContainer.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterContainer.tsx",
        "code": {
            "GameCenterContainer": "const GameCenterContainer = ({ handleClose, handleBack, game }: IGameCenterContainerProps): ReactElement => {\nconst GameCenterContainer = ({ handleClose, handleBack, game }: IGameCenterContainerProps): ReactElement => {\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{handleBack && <ContextualbarBack onClick={handleBack} />}"
        },
        "depth_rank": 7
    },
    {
        "file": "GameCenterList.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterList.tsx",
        "code": {
            "handleClose": "const GameCenterList = ({ handleClose, handleOpenGame, games, isLoading }: IGameCenterListProps): ReactElement => {\nconst GameCenterList = ({ handleClose, handleOpenGame, games, isLoading }: IGameCenterListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst handleInvitePlayer = useCallback(\n\tconst handleInvitePlayer = useCallback(\n\t\t(game) => {\n\t\t\tconst handleClose = (): void => {\n\t\t\tconst handleClose = (): void => {\n\t\t\t\tsetModal(null);\n\t\t\t};\n\t\t\tsetModal(() => <GameCenterInvitePlayersModal onClose={handleClose} game={game} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "websockets.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/apps/communication/websockets.js",
        "code": {
            "retryOnFailure": "\tconstructor() {\n\tconstructor() {\n\t\tsuper();\n\n\t\tCachedCollectionManager.onLogin(() => {\n\t\t\tthis.listenStreamerEvents();\n\t\t});\n\t}\n\n\tlistenStreamerEvents() {\n\t\tObject.values(AppEvents).forEach((eventName) => {\n\t\t\tsdk.stream('apps', [eventName], this.emit.bind(this, eventName));\n\t\t});\n\n\t\tsdk.stream('apps', [AppEvents.COMMAND_ADDED], this.onCommandAddedOrUpdated);\n\t\tsdk.stream('apps', [AppEvents.COMMAND_UPDATED], this.onCommandAddedOrUpdated);\n\t\tsdk.stream('apps', [AppEvents.COMMAND_REMOVED], this.onCommandRemovedOrDisabled);\n\t\tsdk.stream('apps', [AppEvents.COMMAND_DISABLED], this.onCommandRemovedOrDisabled);\n\t}\n\n\tregisterListener(event, listener) {\n\t\tthis.on(event, listener);\n\t}\n\n\tunregisterListener(event, listener) {\n\t\tthis.off(event, listener);\n\t}\n\n\tonCommandAddedOrUpdated = (command) => {\n\t\tconst retryOnFailure = (retries) => {\n\t\tconst retryOnFailure = (retries) => {\n\t\t\tsdk.rest\n\t\t\t\t.get('/v1/commands.get', { command })"
        },
        "depth_rank": 7
    },
    {
        "file": "LoggedOutBanner.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/components/deviceManagement/LoggedOutBanner.tsx",
        "code": {
            "t": "const LoggedOutBanner = (): ReactElement => {\nconst LoggedOutBanner = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Banner variant='warning' icon={<Icon name='warning' size={24} />}>"
        },
        "depth_rank": 7
    },
    {
        "file": "DeviceIcon.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/deviceManagement/components/DeviceIcon.tsx",
        "code": {
            "DeviceIcon": "const DeviceIcon = ({ deviceType }: { deviceType: string }): ReactElement => (\nconst DeviceIcon = ({ deviceType }: { deviceType: string }): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "DeviceManagementTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/deviceManagement/components/DeviceManagementTable/DeviceManagementTable.tsx",
        "code": {
            "DeviceManagementTable": "const DeviceManagementTable = <T extends DeviceManagementSession | DeviceManagementPopulatedSession>({\nconst DeviceManagementTable = <T extends DeviceManagementSession | DeviceManagementPopulatedSession>({\n\tdata,\n\tphase,\n\terror,\n\treload,\n\theaders,\n\trenderRow,\n\tcurrent,\n\titemsPerPage,\n\tsetCurrent,\n\tsetItemsPerPage,\n\tpaginationProps,\n}: DeviceManagementTableProps<T>): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "audit.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/startup/audit.tsx",
        "code": {
            "canView": "const PermissionGuard = ({ children, permission }: { children: React.ReactNode; permission: string }) => {\nconst PermissionGuard = ({ children, permission }: { children: React.ReactNode; permission: string }) => {\n\tconst canView = hasAllPermission(permission);\n\tconst canView = hasAllPermission(permission);\n\n\treturn <>{canView ? children : <NotAuthorizedPage />}</>;"
        },
        "depth_rank": 6
    },
    {
        "file": "BusinessHoursTable.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/BusinessHoursTable.js",
        "code": {
            "t": "const BusinessHoursTable = () => {\nconst BusinessHoursTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 6
    },
    {
        "file": "RemoveBusinessHourButton.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/RemoveBusinessHourButton.js",
        "code": {
            "handleRemoveClick": "function RemoveBusinessHourButton({ _id, type, reload }) {\nfunction RemoveBusinessHourButton({ _id, type, reload }) {\n\tconst removeBusinessHour = useMethod('livechat:removeBusinessHour');\n\tconst removeBusinessHour = useMethod('livechat:removeBusinessHour');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait removeBusinessHour(_id, type);\n\t\t} catch (error) {",
            "onBusinessHour": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onBusinessHour = async () => {\n\t\tconst onBusinessHour = async () => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Business_Hour_Removed') });"
        },
        "depth_rank": 6
    },
    {
        "file": "ContactManagerInfo.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/ContactManagerInfo.js",
        "code": {
            "ContactManagerInfo": "function ContactManagerInfo({ username }) {\nfunction ContactManagerInfo({ username }) {\n\tconst { value: data, phase: state } = useEndpointData('/v1/users.info', { params: useMemo(() => ({ username }), [username]) });\n\tconst { value: data, phase: state } = useEndpointData('/v1/users.info', { params: useMemo(() => ({ username }), [username]) });"
        },
        "depth_rank": 6
    },
    {
        "file": "BusinessHoursRow.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/BusinessHoursRow.js",
        "code": {
            "BusinessHoursRow": "function BusinessHoursRow(props) {\nfunction BusinessHoursRow(props) {\n\tconst { _id, name, timezone, workHours, active, type, reload } = props;\n\tconst { _id, name, timezone, workHours, active, type, reload } = props;",
            "preventClickPropagation": "\tconst openDays = useMemo(\n\tconst openDays = useMemo(\n\t\t() =>\n\t\t\tworkHours.reduce((acc, day) => {\n\t\t\t\tif (day.open) {\n\t\t\t\t\tacc.push(t(day.day));\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, []),\n\t\t[t, workHours],\n\t);\n\n\tconst preventClickPropagation = (e) => {\n\tconst preventClickPropagation = (e) => {\n\t\te.stopPropagation();\n\t};\n\n\treturn (\n\t\t<GenericTableRow key={_id} role='link' action tabIndex={0} onClick={handleClick} onKeyDown={handleKeyDown}>"
        },
        "depth_rank": 6
    },
    {
        "file": "useOmnichannelPrioritiesMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useOmnichannelPrioritiesMenu.tsx",
        "code": {
            "updateRoomPriority": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst updateRoomPriority = useEndpoint('POST', '/v1/livechat/room/:rid/priority', { rid });\n\tconst updateRoomPriority = useEndpoint('POST', '/v1/livechat/room/:rid/priority', { rid });",
            "removeRoomPriority": "\tconst removeRoomPriority = useEndpoint('DELETE', '/v1/livechat/room/:rid/priority', { rid });\n\tconst removeRoomPriority = useEndpoint('DELETE', '/v1/livechat/room/:rid/priority', { rid });",
            "handlePriorityChange": "\tconst handlePriorityChange = useMutableCallback((priorityId: string) => async () => {\n\tconst handlePriorityChange = useMutableCallback((priorityId: string) => async () => {\n\t\ttry {\n\t\t\tpriorityId ? await updateRoomPriority({ priorityId }) : await removeRoomPriority();",
            "renderOption": "\tconst renderOption = useCallback((label: string, weight: LivechatPriorityWeight) => {\n\tconst renderOption = useCallback((label: string, weight: LivechatPriorityWeight) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<PriorityIcon level={weight || LivechatPriorityWeight.NOT_SPECIFIED} showUnprioritized /> {label}",
            "label": "\t\tconst menuHeading = {\n\t\tconst menuHeading = {\n\t\t\ttype: 'heading',\n\t\t\tlabel: t('Priorities'),\n\t\t};\n\n\t\tconst unprioritizedOption = {\n\t\tconst unprioritizedOption = {\n\t\t\ttype: 'option',\n\t\t\taction: handlePriorityChange(''),\n\t\t\tlabel: {\n\t\t\t\tlabel: renderOption(t('Unprioritized'), LivechatPriorityWeight.NOT_SPECIFIED),\n\t\t\t},\n\t\t};\n\n\t\tconst options = priorities.reduce<Record<string, object>>((items, { _id: priorityId, name, i18n, dirty, sortItem }) => {\n\t\tconst options = priorities.reduce<Record<string, object>>((items, { _id: priorityId, name, i18n, dirty, sortItem }) => {\n\t\t\tconst label = dirty && name ? name : i18n;\n\t\t\tconst label = dirty && name ? name : i18n;\n\n\t\t\titems[label] = {\n\t\t\t\taction: handlePriorityChange(priorityId),\n\t\t\t\tlabel: {\n\t\t\t\t\tlabel: renderOption(label, sortItem),\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn items;\n\t\t}, {});\n\n\t\treturn priorities.length ? { menuHeading, unprioritizedOption, ...options } : {};"
        },
        "depth_rank": 7
    },
    {
        "file": "useCannedResponseList.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useCannedResponseList.ts",
        "code": {
            "fetchData": "\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\t\t...(options.filter && { text: options.filter }),"
        },
        "depth_rank": 7
    },
    {
        "file": "useCannedResponseFilterOptions.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useCannedResponseFilterOptions.ts",
        "code": {
            "fetchData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\n\tconst defaultOptions = useMemo(\n\tconst defaultOptions = useMemo(\n\t\t() => [\n\t\t\t['all', t('All')],\n\t\t\t['global', t('Public')],\n\t\t\t['user', t('Private')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst [options, setOptions] = useState(defaultOptions);\n\tconst [options, setOptions] = useState(defaultOptions);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async (): Promise<void> => {\n\t\tconst fetchData = async (): Promise<void> => {\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\t\t\tconst { departments } = await getDepartments({ text: '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "PrioritiesPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesPage.tsx",
        "code": {
            "savePriority": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [isResetting, setResetting] = useState(false);\n\tconst [isResetting, setResetting] = useState(false);\n\n\tconst savePriority = useEndpoint('PUT', `/v1/livechat/priorities/:priorityId`, { priorityId });\n\tconst savePriority = useEndpoint('PUT', `/v1/livechat/priorities/:priorityId`, { priorityId });",
            "resetPriorities": "\tconst resetPriorities = useEndpoint('POST', '/v1/livechat/priorities.reset');\n\tconst resetPriorities = useEndpoint('POST', '/v1/livechat/priorities.reset');\n\n\tconst { data: priorities, isLoading } = useOmnichannelPriorities();\n\tconst { data: priorities, isLoading } = useOmnichannelPriorities();",
            "onReset": "\tconst handleReset = (): void => {\n\tconst handleReset = (): void => {\n\t\tconst onReset = async (): Promise<void> => {\n\t\tconst onReset = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tsetResetting(true);\n\t\t\t\tsetModal(null);\n\n\t\t\t\tawait resetPriorities();\n\t\t\t\tawait queryClient.invalidateQueries(['/v1/livechat/priorities'], { exact: true });",
            "onRowClick": "\tconst onRowClick = useMutableCallback((id: string): void => {\n\tconst onRowClick = useMutableCallback((id: string): void => {\n\t\tprioritiesRoute.push({ context: 'edit', id });",
            "onContextualbarClose": "\tconst onContextualbarClose = (): void => {\n\tconst onContextualbarClose = (): void => {\n\t\tprioritiesRoute.push({});",
            "onSavePriority": "\tconst onSavePriority = async ({ reset, ...payload }: PriorityFormData): Promise<void> => {\n\tconst onSavePriority = async ({ reset, ...payload }: PriorityFormData): Promise<void> => {\n\t\tawait savePriority(reset ? { reset } : payload);"
        },
        "depth_rank": 7
    },
    {
        "file": "PrioritiesResetModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesResetModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='danger'\n\t\t\ttitle={t('Reset_priorities')}"
        },
        "depth_rank": 7
    },
    {
        "file": "PriorityIcon.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityIcon.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { iconName, color } = PRIORITY_ICONS[level] || {};\n\tconst { iconName, color } = PRIORITY_ICONS[level] || {};",
            "name": "\tconst name = useMemo(() => {\n\tconst name = useMemo(() => {\n\t\tconst { _id, dirty, name, i18n } = priorities.find((p) => p.sortItem === level) || {};\n\t\tconst { _id, dirty, name, i18n } = priorities.find((p) => p.sortItem === level) || {};"
        },
        "depth_rank": 7
    },
    {
        "file": "PriorityList.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityList.tsx",
        "code": {
            "t": "const PriorityList = ({ priorityId, onClose, onSave }: PriorityListProps): ReactElement | null => {\nconst PriorityList = ({ priorityId, onClose, onSave }: PriorityListProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{t('Edit_Priority')}"
        },
        "depth_rank": 7
    },
    {
        "file": "PriorityEditFormWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityEditFormWithData.tsx",
        "code": {
            "t": "function PriorityEditFormWithData({ priorityId, ...props }: PriorityEditFormWithDataProps): ReactElement {\nfunction PriorityEditFormWithData({ priorityId, ...props }: PriorityEditFormWithDataProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(priorityId);\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(priorityId);"
        },
        "depth_rank": 7
    },
    {
        "file": "PrioritiesTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesTable.tsx",
        "code": {
            "headers": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='icon' w='100px'>\n\t\t\t\t{t('Icon')}"
        },
        "depth_rank": 7
    },
    {
        "file": "PriorityEditForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityEditForm.tsx",
        "code": {
            "t": "const PriorityEditForm = ({ data, onSave, onCancel }: PriorityEditFormProps): ReactElement => {\nconst PriorityEditForm = ({ data, onSave, onCancel }: PriorityEditFormProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [isSaving, setSaving] = useState(false);\n\tconst [isSaving, setSaving] = useState(false);\n\n\tconst { name, i18n, dirty } = data;\n\tconst { name, i18n, dirty } = data;",
            "defaultName": "\tconst defaultName = t(i18n);\n\tconst defaultName = t(i18n);\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tgetValues,\n\t\tsetValue,\n\t\tformState: { errors, isValid, isDirty },",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst { name } = getValues();\n\t\tconst { name } = getValues();"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveTagButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/RemoveTagButton.tsx",
        "code": {
            "onDeleteAgent": "\tconst removeTag = useMethod('livechat:removeTag');\n\tconst removeTag = useMethod('livechat:removeTag');\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeTag(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Tag_removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "TagEditWithData.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEditWithData.js",
        "code": {
            "getTag": "function TagEditWithData({ tagId, reload, title }) {\nfunction TagEditWithData({ tagId, reload, title }) {\n\tconst getTag = useEndpoint('GET', '/v1/livechat/tags/:tagId', { tagId });\n\tconst getTag = useEndpoint('GET', '/v1/livechat/tags/:tagId', { tagId });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (isLoading && tagId) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (isError) {\n\t\treturn (\n\t\t\t<Callout m='x16' type='danger'>\n\t\t\t\t{t('Not_Available')}"
        },
        "depth_rank": 7
    },
    {
        "file": "AutoCompleteTagsMultiple.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/AutoCompleteTagsMultiple.js",
        "code": {
            "AutoCompleteTagMultiple": "const AutoCompleteTagMultiple = (props) => {\nconst AutoCompleteTagMultiple = (props) => {\n\tconst { value, onlyMyTags = false, onChange = () => {}, department, viewAll = false } = props;\n\tconst { value, onlyMyTags = false, onChange = () => {}, department, viewAll = false } = props;",
            "debouncedTagsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [tagsFilter, setTagsFilter] = useState('');\n\tconst [tagsFilter, setTagsFilter] = useState('');\n\n\tconst debouncedTagsFilter = useDebouncedValue(tagsFilter, 500);\n\tconst debouncedTagsFilter = useDebouncedValue(tagsFilter, 500);\n\n\tconst { itemsList: tagsList, loadMoreItems: loadMoreTags } = useTagsList(\n\tconst { itemsList: tagsList, loadMoreItems: loadMoreTags } = useTagsList("
        },
        "depth_rank": 7
    },
    {
        "file": "TagsRoute.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagsRoute.js",
        "code": {
            "id": "\tconst handleReload = useCallback(() => {\n\tconst handleReload = useCallback(() => {\n\t\treload.current();\n\t}, []);\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tif (context === 'edit') {\n\t\treturn <TagEditWithData reload={handleReload} tagId={id} title={t('Edit_Tag')} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "TagEdit.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEdit.js",
        "code": {
            "tag": "\tconst tag = data || {};\n\tconst tag = data || {};",
            "handleReturn": "\tconst saveTag = useMethod('livechat:saveTag');\n\tconst saveTag = useMethod('livechat:saveTag');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\ttagsRoute.push({});",
            "tagData": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst tagData = { name, description };\n\t\tconst tagData = { name, description };",
            "finalDepartments": "\t\tconst finalDepartments = departments ? departments.map((dep) => dep.value) : [''];\n\t\tconst finalDepartments = departments ? departments.map((dep) => dep.value) : [''];\n\n\t\ttry {\n\t\t\tawait saveTag(tagId, tagData, finalDepartments);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });"
        },
        "depth_rank": 7
    },
    {
        "file": "TagEditWithDepartmentData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEditWithDepartmentData.tsx",
        "code": {
            "t": "function TagEditWithDepartmentData({ data, title, ...props }: TagEditWithDepartmentDataPropsType): ReactElement {\nfunction TagEditWithDepartmentData({ data, title, ...props }: TagEditWithDepartmentDataPropsType): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tvalue: currentDepartments,\n\t\tphase: currentDepartmentsState,\n\t\terror: currentDepartmentsError,\n\t} = useEndpointData('/v1/livechat/department.listByIds', {"
        },
        "depth_rank": 7
    },
    {
        "file": "TagsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagsTable.tsx",
        "code": {
            "t": "const TagsTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\nconst TagsTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => () =>\n\t\t\ttagsRoute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid,\n\t\t\t}),\n\t);\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tviewAll: 'true' as const,\n\t\t\tviewAll: 'true' as const,\n\t\t\tfields: JSON.stringify({ name: 1 }),",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 7
    },
    {
        "file": "TagsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagsPage.tsx",
        "code": {
            "handleClick": "\tconst handleClick = useMutableCallback(() =>\n\tconst handleClick = useMutableCallback(() =>\n\t\ttagsRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Tags')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "UnitEdit.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitEdit.js",
        "code": {
            "debouncedDepartmentsFilter": "\tconst [monitorsFilter, setMonitorsFilter] = useState('');\n\tconst [monitorsFilter, setMonitorsFilter] = useState('');\n\n\tconst debouncedMonitorsFilter = useDebouncedValue(monitorsFilter, 500);\n\tconst debouncedMonitorsFilter = useDebouncedValue(monitorsFilter, 500);\n\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: monitorsList, loadMoreItems: loadMoreMonitors } = useMonitorsList(\n\tconst { itemsList: monitorsList, loadMoreItems: loadMoreMonitors } = useMonitorsList(",
            "unit": "\tconst unit = data || {};\n\tconst unit = data || {};",
            "currUnitDepartments": "\tconst currUnitMonitors = useMemo(\n\tconst currUnitMonitors = useMemo(\n\t\t() =>\n\t\t\tunitMonitors && unitMonitors.monitors\n\t\t\t\t? unitMonitors.monitors.map(({ monitorId, username }) => ({\n\t\t\t\t\t\tvalue: monitorId,\n\t\t\t\t\t\tlabel: username,\n\t\t\t\t  }))\n\t\t\t\t: [],\n\t\t[unitMonitors],\n\t);\n\tconst visibilityOpts = [\n\tconst visibilityOpts = [\n\t\t['public', t('Public')],\n\t\t['private', t('Private')],\n\t];\n\n\tconst currUnitDepartments = useMemo(\n\tconst currUnitDepartments = useMemo(\n\t\t() =>\n\t\t\tunitDepartments && unitDepartments.departments && unitId\n\t\t\t\t? unitDepartments.departments.map(({ _id, name }) => ({\n\t\t\t\t\t\tvalue: _id,\n\t\t\t\t\t\tlabel: name,\n\t\t\t\t  }))\n\t\t\t\t: [],\n\t\t[unitDepartments, unitId],\n\t);\n\n\tconst { values, handlers, hasUnsavedChanges } = useForm({\n\tconst { values, handlers, hasUnsavedChanges } = useForm({\n\t\tname: unit.name,\n\t\tvisibility: unit.visibility,\n\t\tdepartments: currUnitDepartments,\n\t\tmonitors: currUnitMonitors,\n\t});\n\n\tconst { handleName, handleVisibility, handleDepartments, handleMonitors } = handlers;\n\tconst { handleName, handleVisibility, handleDepartments, handleMonitors } = handlers;",
            "handleReturn": "\tconst saveUnit = useMethod('livechat:saveUnit');\n\tconst saveUnit = useMethod('livechat:saveUnit');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\tunitsRoute.push({});",
            "unitData": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst unitData = { name, visibility };\n\t\tconst unitData = { name, visibility };",
            "departmentsData": "\t\tconst departmentsData = departments.map((department) => ({ departmentId: department.value }));\n\t\tconst departmentsData = departments.map((department) => ({ departmentId: department.value }));"
        },
        "depth_rank": 7
    },
    {
        "file": "UnitEditWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitEditWithData.tsx",
        "code": {
            "t": "\tconst {\n\tconst {\n\t\tvalue: unitMonitors,\n\t\tphase: unitMonitorsState,\n\t\terror: unitMonitorsError,\n\t} = useEndpointData('/v1/livechat/units/:unitId/monitors', { keys: { unitId } });\n\n\tconst {\n\tconst {\n\t\tvalue: unitDepartments,\n\t\tphase: unitDepartmentsState,\n\t\terror: unitDepartmentsError,\n\t} = useEndpointData('/v1/livechat/units/:unitId/departments', { keys: { unitId } });\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif ([state, unitMonitorsState, unitDepartmentsState].includes(AsyncStatePhase.LOADING)) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (error || unitMonitorsError || unitDepartmentsError) {\n\t\treturn (\n\t\t\t<Callout m='x16' type='danger'>\n\t\t\t\t{t('Not_Available')}"
        },
        "depth_rank": 7
    },
    {
        "file": "UnitsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitsPage.tsx",
        "code": {
            "handleClick": "\tconst handleClick = useMutableCallback(() =>\n\tconst handleClick = useMutableCallback(() =>\n\t\tunitsRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Units')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "UnitsRoute.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitsRoute.js",
        "code": {
            "id": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tif (context === 'edit' && id) {\n\t\treturn <UnitEditWithData title={t('Edit_Unit')} unitId={id} reload={handleReload} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveUnitButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/RemoveUnitButton.tsx",
        "code": {
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeUnit(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Unit_removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "UnitsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitsTable.tsx",
        "code": {
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tfields: JSON.stringify({ name: 1 }),",
            "headers": "\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => () =>\n\t\t\tunitsRoute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid,\n\t\t\t}),\n\t);\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 7
    },
    {
        "file": "WrapCannedResponse.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/contextualBar/CannedResponse/WrapCannedResponse.tsx",
        "code": {
            "onClickEdit": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst onClickEdit = (): void => {\n\tconst onClickEdit = (): void => {\n\t\tsetModal(<CreateCannedResponse data={{ _id, departmentId, shortcut, tags, scope, text }} reloadCannedList={reload} />);"
        },
        "depth_rank": 9
    },
    {
        "file": "CannedResponse.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/contextualBar/CannedResponse/CannedResponse.tsx",
        "code": {
            "scope": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst scope = useScopeDict(dataScope, departmentName);\n\tconst scope = useScopeDict(dataScope, departmentName);\n\n\treturn (\n\t\t<Contextualbar color='default' display='flex' flexDirection='column' width='full' overflow='hidden' zIndex={100} insetBlock={0}>"
        },
        "depth_rank": 9
    },
    {
        "file": "Item.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/contextualBar/CannedResponse/Item.tsx",
        "code": {
            "clickable": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst scope = useScopeDict(data.scope, data.departmentName);\n\tconst scope = useScopeDict(data.scope, data.departmentName);\n\n\tconst clickable = css`\n\tconst clickable = css`\n\t\tcursor: pointer;\n\t`;\n\n\tconst [visibility, setVisibility] = useState(false);\n\tconst [visibility, setVisibility] = useState(false);\n\n\treturn (\n\t\t<Box\n\t\t\tpbs={16}"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/contextualBar/CannedResponse/index.tsx",
        "code": {
            "debouncedText": "\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst debouncedText = useDebouncedValue(text, 400);\n\tconst debouncedText = useDebouncedValue(text, 400);\n\n\tconst { cannedList, loadMoreItems, reload } = useCannedResponseList(\n\tconst { cannedList, loadMoreItems, reload } = useCannedResponseList(",
            "onClickItem": "\tconst onClickItem = useMutableCallback((data) => {\n\tconst onClickItem = useMutableCallback((data) => {\n\t\tconst { _id: context } = data;\n\t\tconst { _id: context } = data;",
            "onClickCreate": "\tconst composer = useChat()?.composer;\n\tconst composer = useChat()?.composer;\n\n\tconst onClickUse = (e: MouseEvent<HTMLOrSVGElement>, text: string): void => {\n\tconst onClickUse = (e: MouseEvent<HTMLOrSVGElement>, text: string): void => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tcomposer?.setText(text);\n\t\tcomposer?.focus();\n\t};\n\n\tconst onClickCreate = (): void => {\n\tconst onClickCreate = (): void => {\n\t\tsetModal(<CreateCannedResponse reloadCannedList={reload} />);"
        },
        "depth_rank": 9
    },
    {
        "file": "CannedResponseList.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/contextualBar/CannedResponse/CannedResponseList.tsx",
        "code": {
            "cannedId": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\n\tconst cannedId = useTabContext();\n\tconst cannedId = useTabContext();\n\n\tconst { ref, contentBoxSize: { inlineSize = 378 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Canned_Responses')}</ContextualbarTitle>"
        },
        "depth_rank": 9
    },
    {
        "file": "IconButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/TextEditor/IconButton.tsx",
        "code": {
            "IconButton": "const IconButton = ({ name, action, title }: IconButtonProps): ReactElement => (\nconst IconButton = ({ name, action, title }: IconButtonProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "TextButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/TextEditor/TextButton.tsx",
        "code": {
            "t": "const TextButton = forwardRef<HTMLElement, TextButtonProps>(function TextButton({ text, action }, ref) {\nconst TextButton = forwardRef<HTMLElement, TextButtonProps>(function TextButton({ text, action }, ref) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Button\n\t\t\tsmall\n\t\t\tdisplay='flex'\n\t\t\tjustifyContent='center'\n\t\t\talignItems='center'\n\t\t\tonClick={(e): void => {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\taction();\n\t\t\t}}\n\t\t\tref={ref}"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/MarkdownTextEditor/index.tsx",
        "code": {
            "ref": "const MarkdownTextEditor: FC<{ onChange: any; value: string }> = ({ onChange, value }) => {\nconst MarkdownTextEditor: FC<{ onChange: any; value: string }> = ({ onChange, value }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst useEmojisPreference = useUserPreference('useEmojis');\n\tconst useEmojisPreference = useUserPreference('useEmojis');\n\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null);\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null);\n\tconst ref = useRef<HTMLButtonElement>(null);\n\tconst ref = useRef<HTMLButtonElement>(null);\n\n\tconst [visible, setVisible] = useState(false);\n\tconst [visible, setVisible] = useState(false);\n\n\tconst { open: openEmojiPicker } = useEmojiPicker();\n\tconst { open: openEmojiPicker } = useEmojiPicker();"
        },
        "depth_rank": 9
    },
    {
        "file": "CreateCannedResponseModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/modals/CreateCannedResponse/CreateCannedResponseModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { _id, shortcut, text, scope, departmentId } = values;\n\tconst { _id, shortcut, text, scope, departmentId } = values;",
            "canSave": "\tconst canSave = shortcut && text && checkDepartment;\n\tconst canSave = shortcut && text && checkDepartment;\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{_id ? t('Edit_Canned_Response') : t('Create_Canned_Response')}</Modal.Title>"
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/modals/CreateCannedResponse/index.tsx",
        "code": {
            "form": "\tconst form = useForm({\n\tconst form = useForm({\n\t\t_id: data ? data._id : '',\n\t\tshortcut: data ? data.shortcut : '',\n\t\ttext: data ? data.text : '',\n\t\ttags: data?.tags && Array.isArray(data.tags) ? data.tags.map((tag: string) => ({ label: tag, value: tag })) : [],",
            "listErrors": "\tconst [radioDescription, setRadioDescription] = useState<string>(t('Canned_Response_Sharing_Private_Description'));\n\tconst [radioDescription, setRadioDescription] = useState<string>(t('Canned_Response_Sharing_Private_Description'));\n\tconst [preview, setPreview] = useState(false);\n\tconst [preview, setPreview] = useState(false);\n\n\tconst listErrors = useMemo(() => {\n\tconst listErrors = useMemo(() => {\n\t\tconst empty: any = {};\n\t\tconst empty: any = {};",
            "onSave": "\tconst radioHandlers = {\n\tconst radioHandlers = {\n\t\tsetPublic: (): void => {\n\t\t\thandlers.handleScope('global');\n\t\t\thandlers.handleDepartmentId('');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Public_Description'));\n\t\t},\n\t\tsetDepartment: (): void => {\n\t\t\thandlers.handleScope('department');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Department_Description'));\n\t\t},\n\t\tsetPrivate: (): void => {\n\t\t\thandlers.handleScope('user');\n\t\t\thandlers.handleDepartmentId('');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Private_Description'));\n\t\t},\n\t};\n\n\tconst onSave = useCallback(async (): Promise<void> => {\n\tconst onSave = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { _id, shortcut, text, scope, tags, departmentId } = values as {\n\t\t\tconst { _id, shortcut, text, scope, tags, departmentId } = values as {\n\t\t\t\t_id: string;\n\t\t\t\tshortcut: string;\n\t\t\t\ttext: string;\n\t\t\t\tscope: string;\n\t\t\t\ttags: any;\n\t\t\t\tdepartmentId: string;\n\t\t\t};\n\t\t\tawait saveCannedResponse({\n\t\t\t\t...(_id && { _id }),"
        },
        "depth_rank": 10
    },
    {
        "file": "PreviewText.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/components/CannedResponse/modals/CreateCannedResponse/PreviewText.tsx",
        "code": {
            "textM": "const PreviewText: FC<{ text: string }> = ({ text }) => {\nconst PreviewText: FC<{ text: string }> = ({ text }) => {\n\tconst textM = text.split(/\\n/).join('  \\n');\n\tconst textM = text.split(/\\n/).join('  \\n');\n\n\treturn (\n\t\t<Box\n\t\t\tstyle={{ wordBreak: 'normal' }}"
        },
        "depth_rank": 10
    },
    {
        "file": "MonitorsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/monitors/MonitorsTable.tsx",
        "code": {
            "addMonitor": "const MonitorsTable = () => {\nconst MonitorsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst pagination = usePagination();\n\tconst pagination = usePagination();\n\tconst sort = useSort<'name' | 'username' | 'email'>('name');\n\tconst sort = useSort<'name' | 'username' | 'email'>('name');\n\n\tconst getMonitors = useEndpoint('GET', '/v1/livechat/monitors');\n\tconst getMonitors = useEndpoint('GET', '/v1/livechat/monitors');\n\n\t// TODO: implement endpoints for monitors add/remove\n\tconst removeMonitor = useMethod('livechat:removeMonitor');\n\tconst removeMonitor = useMethod('livechat:removeMonitor');\n\tconst addMonitor = useMethod('livechat:addMonitor');\n\tconst addMonitor = useMethod('livechat:addMonitor');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = pagination;\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = pagination;",
            "addMutation": "\tconst addMutation = useMutation({\n\tconst addMutation = useMutation({\n\t\tmutationFn: async (username: string) => {\n\t\t\tawait addMonitor(username);\n\n\t\t\tawait queryClient.invalidateQueries(['omnichannel', 'monitors']);\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tsetUsername('');\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Monitor_added') });",
            "onDeleteMonitor": "\tconst handleAdd = () => {\n\tconst handleAdd = () => {\n\t\taddMutation.mutate(username);\n\t};\n\n\tconst handleRemove = (username: string) => {\n\tconst handleRemove = (username: string) => {\n\t\tconst onDeleteMonitor = async () => {\n\t\tconst onDeleteMonitor = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeMonitor(username);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Monitor_removed') });",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort}>"
        },
        "depth_rank": 7
    },
    {
        "file": "MonitorsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/monitors/MonitorsPage.tsx",
        "code": {
            "t": "const MonitorsPage = () => {\nconst MonitorsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Livechat_Monitors')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponseEditWithDepartmentData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseEditWithDepartmentData.tsx",
        "code": {
            "departmentId": "\tconst departmentId = useMemo(() => data?.cannedResponse?.departmentId, [data]) as string;\n\tconst departmentId = useMemo(() => data?.cannedResponse?.departmentId, [data]) as string;\n\tconst { value: departmentData, phase: state, error } = useEndpointData('/v1/livechat/department/:_id', { keys: { _id: departmentId } });\n\tconst { value: departmentData, phase: state, error } = useEndpointData('/v1/livechat/department/:_id', { keys: { _id: departmentId } });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (state === AsyncStatePhase.LOADING) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (error) {\n\t\treturn (\n\t\t\t<Callout m='x16' type='danger'>\n\t\t\t\t{t('Not_Available')}"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponsesTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponsesTable.tsx",
        "code": {
            "headers": "\tconst defaultOptions = useMemo(\n\tconst defaultOptions = useMemo(\n\t\t() => ({\n\t\t\tglobal: t('Public'),\n\t\t\tdepartment: t('Department'),\n\t\t\tuser: t('Private'),\n\t\t}),\n\t\t[t],\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='shortcut' direction={sortDirection} active={sortBy === 'shortcut'} onClick={setSort} sort='shortcut'>"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveCannedResponseButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/RemoveCannedResponseButton.tsx",
        "code": {
            "handleDelete": "\tconst removeCannedResponse = useMethod('removeCannedResponse');\n\tconst removeCannedResponse = useMethod('removeCannedResponse');\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteCannedResponse: () => Promise<void> = async () => {\n\t\tconst onDeleteCannedResponse: () => Promise<void> = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeCannedResponse(_id);\n\t\t\t\treload();\n\t\t\t\tcannedResponsesRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponseEditWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseEditWithData.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (state === AsyncStatePhase.LOADING) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (error) {\n\t\treturn (\n\t\t\t<Callout m='x16' type='danger'>\n\t\t\t\t{t('Not_Available')}"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponseEdit.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseEdit.tsx",
        "code": {
            "form": "\tconst form = useForm({\n\tconst form = useForm({\n\t\t_id: data?.cannedResponse ? data.cannedResponse._id : '',\n\t\tshortcut: data ? data.cannedResponse.shortcut : '',\n\t\ttext: data ? data.cannedResponse.text : '',\n\t\ttags: data?.cannedResponse?.tags ?? [],\n\t\tscope: data ? data.cannedResponse.scope : 'user',\n\t\tdepartmentId: data?.cannedResponse?.departmentId ? data.cannedResponse.departmentId : '',\n\t});\n\n\tconst { values, handlers, hasUnsavedChanges } = form;\n\tconst { values, handlers, hasUnsavedChanges } = form;",
            "listErrors": "\tconst [radioDescription, setRadioDescription] = useState<string>(t('Canned_Response_Sharing_Private_Description'));\n\tconst [radioDescription, setRadioDescription] = useState<string>(t('Canned_Response_Sharing_Private_Description'));\n\tconst [preview, setPreview] = useState(false);\n\tconst [preview, setPreview] = useState(false);\n\n\tconst listErrors = useMemo(() => {\n\tconst listErrors = useMemo(() => {\n\t\tconst empty: any = {};\n\t\tconst empty: any = {};",
            "onSave": "\tconst radioHandlers = {\n\tconst radioHandlers = {\n\t\tsetPublic: (): void => {\n\t\t\thandlers.handleScope('global');\n\t\t\thandlers.handleDepartmentId('');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Public_Description'));\n\t\t},\n\t\tsetDepartment: (): void => {\n\t\t\thandlers.handleScope('department');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Department_Description'));\n\t\t},\n\t\tsetPrivate: (): void => {\n\t\t\thandlers.handleScope('user');\n\t\t\thandlers.handleDepartmentId('');\n\t\t\tsetRadioDescription(t('Canned_Response_Sharing_Private_Description'));\n\t\t},\n\t};\n\n\tconst onSave = useCallback(async (): Promise<void> => {\n\tconst onSave = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { _id, shortcut, text, scope, tags, departmentId } = values as {\n\t\t\tconst { _id, shortcut, text, scope, tags, departmentId } = values as {\n\t\t\t\t_id: string;\n\t\t\t\tshortcut: string;\n\t\t\t\ttext: string;\n\t\t\t\tscope: string;\n\t\t\t\ttags: any;\n\t\t\t\tdepartmentId: string;\n\t\t\t};\n\t\t\tawait saveCannedResponse({\n\t\t\t\t...(_id && { _id }),",
            "canSave": "\tconst canSave = shortcut && text && checkDepartment;\n\tconst canSave = shortcut && text && checkDepartment;\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={isNew ? t('New_CannedResponse') : t('Edit_CannedResponse')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponseFilter.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseFilter.tsx",
        "code": {
            "handleFormSubmit": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst sharingList: SelectOption[] = [\n\tconst sharingList: SelectOption[] = [\n\t\t['', t('All')],\n\t\t['user', t('Private')],\n\t\t['global', t('Public')],\n\t\t['department', t('Department')],\n\t];\n\n\tconst handleFormSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n\tconst handleFormSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\t}, []);\n\n\treturn (\n\t\t<Box mb='x16' is='form' onSubmit={handleFormSubmit} display='flex' flexDirection='row' color='default' {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "cannedResponseForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/components/cannedResponseForm.tsx",
        "code": {
            "clickable": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst clickable = css`\n\tconst clickable = css`\n\t\tcursor: pointer;\n\t`;\n\n\treturn (\n\t\t<>\n\t\t\t<Field mbe='x24'>\n\t\t\t\t<Field.Label>{t('Shortcut')}</Field.Label>"
        },
        "depth_rank": 8
    },
    {
        "file": "RemoveSlaButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/RemoveSlaButton.tsx",
        "code": {
            "removeSLA": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst removeSLA = useEndpoint('DELETE', `/v1/livechat/sla/:slaId`, { slaId: _id });\n\tconst removeSLA = useEndpoint('DELETE', `/v1/livechat/sla/:slaId`, { slaId: _id });",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeSLA();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('SLA_removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaNew.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaNew.tsx",
        "code": {
            "SlaNew": "function SlaNew({ reload }: { reload: () => void }): ReactElement {\nfunction SlaNew({ reload }: { reload: () => void }): ReactElement {\n\treturn <SlaEdit isNew reload={reload} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaEditWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaEditWithData.tsx",
        "code": {
            "getSLA": "function SlaEditWithData({ slaId, reload }: SlaEditProps): ReactElement {\nfunction SlaEditWithData({ slaId, reload }: SlaEditProps): ReactElement {\n\tconst getSLA = useEndpoint('GET', `/v1/livechat/sla/:slaId`, { slaId });\n\tconst getSLA = useEndpoint('GET', `/v1/livechat/sla/:slaId`, { slaId });"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaTable.tsx",
        "code": {
            "headers": "\tconst getSlaData = useEndpoint('GET', '/v1/livechat/sla');\n\tconst getSlaData = useEndpoint('GET', '/v1/livechat/sla');\n\tconst { data, isSuccess, isLoading, refetch } = useQuery(['/v1/livechat/sla', query], () => getSlaData(query), {\n\tconst { data, isSuccess, isLoading, refetch } = useQuery(['/v1/livechat/sla', query], () => getSlaData(query), {\n\t\trefetchOnWindowFocus: false,\n\t});\n\n\tuseEffect(() => {\n\t\treload.current = refetch;\n\t}, [reload, refetch]);\n\n\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => () =>\n\t\t\tslaPoliciesRoute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid,\n\t\t\t}),\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaEdit.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaEdit.tsx",
        "code": {
            "updateSLA": "\tconst saveSLA = useEndpoint('POST', '/v1/livechat/sla');\n\tconst saveSLA = useEndpoint('POST', '/v1/livechat/sla');\n\tconst updateSLA = useEndpoint('PUT', `/v1/livechat/sla/:slaId`, { slaId: slaId || '' });\n\tconst updateSLA = useEndpoint('PUT', `/v1/livechat/sla/:slaId`, { slaId: slaId || '' });",
            "t": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { name, description, dueTimeInMinutes } = data || {};\n\tconst { name, description, dueTimeInMinutes } = data || {};",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst { name, description, dueTimeInMinutes } = getValues();\n\t\tconst { name, description, dueTimeInMinutes } = getValues();",
            "payload": "\t\t\tconst payload = { name, description, dueTimeInMinutes: Number(dueTimeInMinutes) };\n\t\t\tconst payload = { name, description, dueTimeInMinutes: Number(dueTimeInMinutes) };"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaPage.tsx",
        "code": {
            "handleCloseContextualbar": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tconst handleReload = useCallback(() => {\n\tconst handleReload = useCallback(() => {\n\t\treload.current();\n\t}, []);\n\n\tconst handleClick = useMutableCallback(() =>\n\tconst handleClick = useMutableCallback(() =>\n\t\tslaPoliciesRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\tconst handleCloseContextualbar = (): void => {\n\tconst handleCloseContextualbar = (): void => {\n\t\tslaPoliciesRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "MaxChatsPerAgent.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/MaxChatsPerAgent.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { maxNumberSimultaneousChat } = values;\n\tconst { maxNumberSimultaneousChat } = values;"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomFieldsAdditionalFormContainer.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/CustomFieldsAdditionalFormContainer.js",
        "code": {
            "t": "const CustomFieldsAdditionalFormContainer = ({ data = {}, state, onChange, className }) => {\nconst CustomFieldsAdditionalFormContainer = ({ data = {}, state, onChange, className }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialValues(data));\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialValues(data));"
        },
        "depth_rank": 7
    },
    {
        "file": "BusinessHoursMultipleContainer.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/BusinessHoursMultipleContainer.js",
        "code": {
            "mapDepartments": "const mapDepartments = (departments) => departments.map(({ _id, name }) => ({ value: _id, label: name }));\nconst mapDepartments = (departments) => departments.map(({ _id, name }) => ({ value: _id, label: name }));",
            "BusinessHoursMultipleContainer": "const getInitialData = (data = {}) => ({\nconst getInitialData = (data = {}) => ({\n\tactive: data.active ?? true,\n\tname: data.name ?? '',\n\tdepartments: mapDepartments(data.departments),\n});\n\nconst BusinessHoursMultipleContainer = ({ onChange, data: initialData, className, hasChangesAndIsValid = () => {} }) => {\nconst BusinessHoursMultipleContainer = ({ onChange, data: initialData, className, hasChangesAndIsValid = () => {} }) => {\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialData(initialData));\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialData(initialData));"
        },
        "depth_rank": 7
    },
    {
        "file": "BusinessHoursTimeZone.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/BusinessHoursTimeZone.js",
        "code": {
            "t": "const getInitialData = (data = {}) => ({\nconst getInitialData = (data = {}) => ({\n\tname: data ?? '',\n});\n\nconst BusinessHoursTimeZone = ({ onChange, data, className, hasChanges = () => {} }) => {\nconst BusinessHoursTimeZone = ({ onChange, data, className, hasChanges = () => {} }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialData(data));\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialData(data));",
            "timeZonesOptions": "\tconst timeZones = useTimezoneNameList();\n\tconst timeZones = useTimezoneNameList();\n\n\tconst timeZonesOptions = useMemo(() => timeZones.map((name) => [name, t(name)]), [t, timeZones]);\n\tconst timeZonesOptions = useMemo(() => timeZones.map((name) => [name, t(name)]), [t, timeZones]);\n\n\tonChange && onChange({ name });"
        },
        "depth_rank": 7
    },
    {
        "file": "ContactManager.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/ContactManager.js",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{t('Contact_Manager')}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "DepartmentBusinessHours.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/DepartmentBusinessHours.tsx",
        "code": {
            "name": "\tconst name = data?.businessHour?.name;\n\tconst name = data?.businessHour?.name;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{t('Business_Hour')}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "EeTextAreaInput.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/EeTextAreaInput.js",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{t(label)}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "MaxChatsPerAgentContainer.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/MaxChatsPerAgentContainer.js",
        "code": {
            "MaxChatsPerAgentContainer": "const MaxChatsPerAgentContainer = ({ data: { livechat: { maxNumberSimultaneousChat = '' } = {} } = {}, onChange }) => {\nconst MaxChatsPerAgentContainer = ({ data: { livechat: { maxNumberSimultaneousChat = '' } = {} } = {}, onChange }) => {\n\tconst { values, handlers, hasUnsavedChanges, commit, reset } = useForm({\n\tconst { values, handlers, hasUnsavedChanges, commit, reset } = useForm({\n\t\tmaxNumberSimultaneousChat,\n\t});\n\n\tonChange({ values, hasUnsavedChanges, commit, reset });"
        },
        "depth_rank": 7
    },
    {
        "file": "EeTextInput.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/EeTextInput.js",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{t(label)}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "DepartmentForwarding.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/DepartmentForwarding.tsx",
        "code": {
            "debouncedDepartmentsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 7
    },
    {
        "file": "EeNumberInput.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/EeNumberInput.js",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{t(label)}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "MaxChatsPerAgentDisplay.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/MaxChatsPerAgentDisplay.js",
        "code": {
            "t": "const MaxChatsPerAgentDisplay = ({ data: { livechat: { maxNumberSimultaneousChat = 0 } = {} } = {} }) => {\nconst MaxChatsPerAgentDisplay = ({ data: { livechat: { maxNumberSimultaneousChat = 0 } = {} } = {} }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn maxNumberSimultaneousChat ? (\n\t\t<>\n\t\t\t<UserInfo.Label>{t('Max_number_of_chats_per_agent')}</UserInfo.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "SlaPoliciesSelect.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/SlaPoliciesSelect.tsx",
        "code": {
            "optionsSelect": "\tconst optionsSelect = useMemo<SelectOption[]>(() => options?.map((option) => [option._id, option.name]), [options]);\n\tconst optionsSelect = useMemo<SelectOption[]>(() => options?.map((option) => [option._id, option.name]), [options]);\n\n\treturn (\n\t\t<Field>\n\t\t\t<Field.Label>{label}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomFieldsAdditionalForm.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/CustomFieldsAdditionalForm.js",
        "code": {
            "typeOptions": "\tconst typeOptions = useMemo(\n\tconst typeOptions = useMemo(\n\t\t() => [\n\t\t\t['input', t('Input')],\n\t\t\t['select', t('Select')],\n\t\t],\n\t\t[t],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Field className={className}>"
        },
        "depth_rank": 7
    },
    {
        "file": "BusinessHoursMultiple.js",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/BusinessHoursMultiple.js",
        "code": {
            "t": "const BusinessHoursMultiple = ({ values = {}, handlers = {}, className }) => {\nconst BusinessHoursMultiple = ({ values = {}, handlers = {}, className }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { active, name, departments } = values;\n\tconst { active, name, departments } = values;"
        },
        "depth_rank": 7
    },
    {
        "file": "PrioritiesSelect.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/PrioritiesSelect.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [sorting] = useState<Record<string, LivechatPriorityWeight>>({});\n\tconst [sorting] = useState<Record<string, LivechatPriorityWeight>>({});",
            "renderOption": "\tconst formattedOptions = useMemo<SelectOption[]>(() => {\n\tconst formattedOptions = useMemo<SelectOption[]>(() => {\n\t\tconst opts: SelectOption[] = options?.map(({ dirty, name, i18n, _id, sortItem }) => {\n\t\tconst opts: SelectOption[] = options?.map(({ dirty, name, i18n, _id, sortItem }) => {\n\t\t\tconst label = dirty && name ? name : t(i18n as TranslationKey);\n\t\t\tconst label = dirty && name ? name : t(i18n as TranslationKey);\n\t\t\tsorting[_id] = sortItem;\n\t\t\treturn [_id, label];\n\t\t});\n\t\treturn [['', t('Unprioritized')], ...opts];\n\t}, [options, sorting, t]);\n\n\tconst renderOption = useCallback(\n\tconst renderOption = useCallback(\n\t\t(label: string, value: string) => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<PriorityIcon level={sorting[value] || LivechatPriorityWeight.NOT_SPECIFIED} showUnprioritized /> {label}",
            "renderOptions": "\tconst renderOptions = forwardRef<HTMLElement, ComponentProps<typeof Options>>((props, ref) => (\n\tconst renderOptions = forwardRef<HTMLElement, ComponentProps<typeof Options>>((props, ref) => (\n\t\t<Options ref={ref} {...props} maxHeight={200} />"
        },
        "depth_rank": 7
    },
    {
        "file": "WrapUpCallModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/components/modals/WrapUpCallModal.tsx",
        "code": {
            "t": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst closeModal = (): void => setModal(null);\n\tconst closeModal = (): void => setModal(null);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { register, handleSubmit, setValue, watch } = useForm<WrapUpCallPayload>();\n\tconst { register, handleSubmit, setValue, watch } = useForm<WrapUpCallPayload>();",
            "onCancel": "\tconst tags = watch('tags');\n\tconst tags = watch('tags');\n\n\tuseEffect(() => {\n\t\tregister('tags');\n\t}, [register]);\n\n\tconst handleTags = (value: string[]): void => {\n\tconst handleTags = (value: string[]): void => {\n\t\tsetValue('tags', value);\n\t};\n\n\tconst onSubmit: SubmitHandler<WrapUpCallPayload> = (data: { comment?: string; tags?: string[] }): void => {\n\tconst onSubmit: SubmitHandler<WrapUpCallPayload> = (data: { comment?: string; tags?: string[] }): void => {\n\t\tcloseRoom(data);\n\t\tcloseModal();\n\t};\n\n\tconst onCancel = (): void => {\n\tconst onCancel = (): void => {\n\t\tcloseRoom();\n\t\tcloseModal();\n\t};\n\n\treturn (\n\t\t<Modal wrapperFunction={(props) => <Box is='form' onSubmit={handleSubmit(onSubmit)} {...props} />}>"
        },
        "depth_rank": 8
    },
    {
        "file": "Pad.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/Pad.tsx",
        "code": {
            "Pad": "const Pad = ({\nconst Pad = ({\n\tonClickPadButton,\n\tonLongPressPadButton,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "PadButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/PadButton.tsx",
        "code": {
            "PadButton": "const PadButton = ({\nconst PadButton = ({\n\tchildren,\n\tonClickPadButton,\n\tonLongPressPadButton,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "DialPadModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/DialPadModal.tsx",
        "code": {
            "DialPadModal": "const DialPadModal = ({ initialValue, errorMessage: initialErrorMessage, handleClose }: DialPadModalProps): ReactElement => {\nconst DialPadModal = ({ initialValue, errorMessage: initialErrorMessage, handleClose }: DialPadModalProps): ReactElement => {\n\tconst {\n\tconst {\n\t\tinputName,\n\t\tinputRef,\n\t\tinputError,\n\t\tisButtonDisabled,\n\t\thandleOnChange,\n\t\thandleBackspaceClick,\n\t\thandlePadButtonClick,\n\t\thandlePadButtonLongPressed,\n\t\thandleCallButtonClick,\n\t} = useDialPad({ initialValue, initialErrorMessage });\n\n\tuseEnterKey(handleCallButtonClick, isButtonDisabled);\n\n\treturn (\n\t\t<Modal width='432px'>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title />\n\t\t\t\t<Modal.Close onClick={handleClose} />"
        },
        "depth_rank": 8
    },
    {
        "file": "DialInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/DialInput.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<TextInput\n\t\t\tref={ref}"
        },
        "depth_rank": 8
    },
    {
        "file": "useDialPad.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/hooks/useDialPad.tsx",
        "code": {
            "outboundClient": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst outboundClient = useOutboundDialer();\n\tconst outboundClient = useOutboundDialer();\n\tconst { closeDialModal } = useDialModal();\n\tconst { closeDialModal } = useDialModal();"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceSettingsModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/voip/modals/DeviceSettingsModal.tsx",
        "code": {
            "selectedOutputDevice": "const DeviceSettingsModal = (): ReactElement => {\nconst DeviceSettingsModal = (): ReactElement => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst onCancel = (): void => setModal();\n\tconst onCancel = (): void => setModal();\n\tconst isDeviceManagementEnabled = useIsDeviceManagementEnabled();\n\tconst isDeviceManagementEnabled = useIsDeviceManagementEnabled();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst selectedAudioDevices = useSelectedDevices();\n\tconst selectedAudioDevices = useSelectedDevices();\n\n\tconst { handleSubmit, control } = useForm<FieldValues>({\n\tconst { handleSubmit, control } = useForm<FieldValues>({\n\t\tdefaultValues: {\n\t\t\tinputDevice: selectedAudioDevices?.audioInput?.id || '',\n\t\t\toutputDevice: selectedAudioDevices?.audioOutput?.id || '',\n\t\t},\n\t});\n\tconst [setSinkIdAvailable] = useState(() => isSetSinkIdAvailable());\n\tconst [setSinkIdAvailable] = useState(() => isSetSinkIdAvailable());\n\tconst availableDevices = useAvailableDevices();\n\tconst availableDevices = useAvailableDevices();\n\tconst changeAudioInputDevice = useChangeAudioInputDevice();\n\tconst changeAudioInputDevice = useChangeAudioInputDevice();\n\tconst changeAudioOutputDevice = useChangeAudioOutputDevice();\n\tconst changeAudioOutputDevice = useChangeAudioOutputDevice();\n\n\tconst availableInputDevices: SelectOption[] = availableDevices?.audioInput?.map((device) => [device.id, device.label]) || [];\n\tconst availableInputDevices: SelectOption[] = availableDevices?.audioInput?.map((device) => [device.id, device.label]) || [];\n\tconst availableOutputDevices: SelectOption[] = availableDevices?.audioOutput?.map((device) => [device.id, device.label]) || [];\n\tconst availableOutputDevices: SelectOption[] = availableDevices?.audioOutput?.map((device) => [device.id, device.label]) || [];\n\n\tconst onSubmit: SubmitHandler<FieldValues> = async (data) => {\n\tconst onSubmit: SubmitHandler<FieldValues> = async (data) => {\n\t\tconst selectedInputDevice = data.inputDevice && availableDevices?.audioInput?.find((device) => device.id === data.inputDevice);\n\t\tconst selectedInputDevice = data.inputDevice && availableDevices?.audioInput?.find((device) => device.id === data.inputDevice);\n\t\tconst selectedOutputDevice = data.outputDevice && availableDevices?.audioOutput?.find((device) => device.id === data.outputDevice);\n\t\tconst selectedOutputDevice = data.outputDevice && availableDevices?.audioOutput?.find((device) => device.id === data.outputDevice);\n\t\ttry {\n\t\t\tselectedInputDevice && changeAudioInputDevice(selectedInputDevice);\n\t\t\tselectedOutputDevice && changeAudioOutputDevice(selectedOutputDevice);\n\t\t\tsetModal();\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Devices_Set') });"
        },
        "depth_rank": 7
    },
    {
        "file": "AuditPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/AuditPage.tsx",
        "code": {
            "t": "const AuditPage = () => {\nconst AuditPage = () => {\n\tconst [type, setType] = useAuditTab();\n\tconst [type, setType] = useAuditTab();\n\tconst auditMutation = useAuditMutation(type);\n\tconst auditMutation = useAuditMutation(type);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Message_auditing')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "AuditLogPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/AuditLogPage.tsx",
        "code": {
            "t": "const AuditLogPage = (): ReactElement => {\nconst AuditLogPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Message_auditing_log')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "useAuditTab.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/hooks/useAuditTab.ts",
        "code": {
            "setType": "\tconst setType = useMutableCallback((newType: SetStateAction<IAuditLog['fields']['type']>) => {\n\tconst setType = useMutableCallback((newType: SetStateAction<IAuditLog['fields']['type']>) => {\n\t\tauditRoute.replace({ tab: typeToTabMap[typeof newType === 'function' ? newType(type) : newType] ?? 'rooms' });\n\t\tauditRoute.replace({ tab: typeToTabMap[typeof newType === 'function' ? newType(type) : newType] ?? 'rooms' });"
        },
        "depth_rank": 8
    },
    {
        "file": "AuditLogTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditLogTable.tsx",
        "code": {
            "getAudits": "const AuditLogTable = (): ReactElement => {\nconst AuditLogTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [dateRange, setDateRange] = useState<DateRange>(() => ({\n\tconst [dateRange, setDateRange] = useState<DateRange>(() => ({\n\t\tstart: createStartOfToday(),\n\t\tend: createEndOfToday(),\n\t}));\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getAudits = useMethod('auditGetAuditions');\n\tconst getAudits = useMethod('auditGetAuditions');\n\n\tconst { data, isLoading, isSuccess } = useQuery(\n\tconst { data, isLoading, isSuccess } = useQuery(",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('User')}</GenericTableHeaderCell>"
        },
        "depth_rank": 8
    },
    {
        "file": "AuditForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditForm.tsx",
        "code": {
            "form": "const AuditForm = ({ type, onSubmit }: AuditFormProps) => {\nconst AuditForm = ({ type, onSubmit }: AuditFormProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst form = useAuditForm();\n\tconst form = useAuditForm();\n\tconst { control, handleSubmit, register } = form;\n\tconst { control, handleSubmit, register } = form;",
            "submit": "\tconst sendTelemetryMutation = useSendTelemetryMutation();\n\tconst sendTelemetryMutation = useSendTelemetryMutation();\n\n\tconst submit = () => {\n\tconst submit = () => {\n\t\tsendTelemetryMutation.mutate({\n\t\t\tparams: [{ eventName: 'updateCounter', settingsId: 'Message_Auditing_Apply_Count', timestamp: Date.now() }],"
        },
        "depth_rank": 8
    },
    {
        "file": "AuditMessageList.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditMessageList.tsx",
        "code": {
            "system": "\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "AuditLogEntry.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditLogEntry.tsx",
        "code": {
            "formatDateAndTime": "const AuditLogEntry = ({ value: { u, results, ts, _id, fields } }: AuditLogEntryProps): ReactElement => {\nconst AuditLogEntry = ({ value: { u, results, ts, _id, fields } }: AuditLogEntryProps): ReactElement => {\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst { username, name, avatarETag } = u;\n\tconst { username, name, avatarETag } = u;"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomsTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/tabs/RoomsTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field flexShrink={1}>"
        },
        "depth_rank": 9
    },
    {
        "file": "VisitorAutoComplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/VisitorAutoComplete.tsx",
        "code": {
            "visitorAutocompleteQueryResult": "const VisitorAutoComplete = ({ value, onChange, ...props }: VisitorAutoCompleteProps): ReactElement => {\nconst VisitorAutoComplete = ({ value, onChange, ...props }: VisitorAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst performVisitorSearch = useEndpoint('GET', '/v1/livechat/visitors.autocomplete');\n\tconst performVisitorSearch = useEndpoint('GET', '/v1/livechat/visitors.autocomplete');\n\n\tconst visitorAutocompleteQueryResult = useQuery(['audit', 'visitors', filter], () =>\n\tconst visitorAutocompleteQueryResult = useQuery(['audit', 'visitors', filter], () =>\n\t\tperformVisitorSearch({ selector: JSON.stringify({ term: filter ?? '' }) }),",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => visitorAutocompleteQueryResult.data?.items.map((user) => ({ value: user._id, label: user.name ?? user.username })) ?? [],"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomAutoComplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/RoomAutoComplete.tsx",
        "code": {
            "roomAutocompleteQueryResult": "const RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps) => {\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst performRoomSearch = useEndpoint('GET', '/v1/rooms.autocomplete.adminRooms');\n\tconst performRoomSearch = useEndpoint('GET', '/v1/rooms.autocomplete.adminRooms');\n\n\tconst roomAutocompleteQueryResult = useQuery(['audit', 'rooms', filter], () =>\n\tconst roomAutocompleteQueryResult = useQuery(['audit', 'rooms', filter], () =>\n\t\tperformRoomSearch({ selector: JSON.stringify({ name: filter ?? '' }) }),",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\troomAutocompleteQueryResult.data?.items.map(({ name, _id, fname, avatarETag, t }) => ({\n\t\t\t\tvalue: _id,\n\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 9
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/DateRangePicker.tsx",
        "code": {
            "newRange": "\t\t\tconst newState = typeof action === 'function' ? action(state) : action;\n\t\t\tconst newState = typeof action === 'function' ? action(state) : action;\n\t\t\treturn newState;\n\t}\n};\n\ntype DateRangePickerProps = Omit<ComponentProps<typeof Box>, 'value' | 'onChange'> & {\n\tvalue?: DateRange;\n\tonChange?: (dateRange: DateRange) => void;\n};\n\nconst DateRangePicker = ({ value, onChange, ...props }: DateRangePickerProps): ReactElement => {\nconst DateRangePicker = ({ value, onChange, ...props }: DateRangePickerProps): ReactElement => {\n\tconst dispatch = useMutableCallback((action: DateRangeAction): void => {\n\tconst dispatch = useMutableCallback((action: DateRangeAction): void => {\n\t\tconst newRange = dateRangeReducer(value ?? { start: undefined, end: undefined }, action);\n\t\tconst newRange = dateRangeReducer(value ?? { start: undefined, end: undefined }, action);",
            "handleChangeStart": "\tconst handleChangeStart = useMutableCallback(({ currentTarget }) => {\n\tconst handleChangeStart = useMutableCallback(({ currentTarget }) => {\n\t\tdispatch({ newStart: currentTarget.value });",
            "handleChangeEnd": "\tconst handleChangeEnd = useMutableCallback(({ currentTarget }) => {\n\tconst handleChangeEnd = useMutableCallback(({ currentTarget }) => {\n\t\tdispatch({ newEnd: currentTarget.value });"
        },
        "depth_rank": 9
    },
    {
        "file": "CloseToSeatsCapModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/users/CloseToSeatsCapModal.tsx",
        "code": {
            "t": "const CloseToSeatsCapModal = ({ members, limit, title, onConfirm, onClose, requestSeatsLink }: CloseToSeatsCapModalProps): ReactElement => {\nconst CloseToSeatsCapModal = ({ members, limit, title, onConfirm, onClose, requestSeatsLink }: CloseToSeatsCapModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{title}</Modal.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "ReachedSeatsCapModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/users/ReachedSeatsCapModal.tsx",
        "code": {
            "t": "const ReachedSeatsCapModal = ({ members, limit, onClose, requestSeatsLink }: ReachedSeatsCapModalProps): ReactElement => {\nconst ReachedSeatsCapModal = ({ members, limit, onClose, requestSeatsLink }: ReachedSeatsCapModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Request_more_seats_title')}</Modal.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "EngagementDashboardPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardPage.tsx",
        "code": {
            "handleTabClick": "const EngagementDashboardPage = ({ tab = 'users', onSelectTab }: EngagementDashboardPageProps): ReactElement => {\nconst EngagementDashboardPage = ({ tab = 'users', onSelectTab }: EngagementDashboardPageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst timezoneOptions = useMemo<[timezone: 'utc' | 'local', label: string][]>(\n\tconst timezoneOptions = useMemo<[timezone: 'utc' | 'local', label: string][]>(\n\t\t() => [\n\t\t\t['utc', t('UTC_Timezone')],\n\t\t\t['local', t('Local_Timezone')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst [timezoneId, setTimezoneId] = useState<'utc' | 'local'>('utc');\n\tconst [timezoneId, setTimezoneId] = useState<'utc' | 'local'>('utc');\n\tconst handleTimezoneChange = (timezoneId: string): void => setTimezoneId(timezoneId as 'utc' | 'local');\n\tconst handleTimezoneChange = (timezoneId: string): void => setTimezoneId(timezoneId as 'utc' | 'local');\n\n\tconst handleTabClick = useCallback(\n\tconst handleTabClick = useCallback(\n\t\t(tab: 'users' | 'messages' | 'channels'): undefined | (() => void) => (onSelectTab ? (): void => onSelectTab(tab) : undefined),\n\t\t[onSelectTab],\n\t);\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<Page.Header title={t('Engagement')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "EngagementDashboardCardFilter.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCardFilter.tsx",
        "code": {
            "EngagementDashboardCardFilter": "const EngagementDashboardCardFilter = ({ children = <InputBox.Skeleton /> }: EngagementDashboardCardFilterProps): ReactElement => (\nconst EngagementDashboardCardFilter = ({ children = <InputBox.Skeleton /> }: EngagementDashboardCardFilterProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "EngagementDashboardCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCard.tsx",
        "code": {
            "EngagementDashboardCard": "const EngagementDashboardCard = ({ children, title = undefined }: EngagementDashboardCardProps): ReactElement => (\nconst EngagementDashboardCard = ({ children, title = undefined }: EngagementDashboardCardProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "EngagementDashboardCardErrorBoundary.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCardErrorBoundary.tsx",
        "code": {
            "errorHandler": "const EngagementDashboardCardErrorBoundary = ({ children }: EngagementDashboardCardErrorBoundaryProps): ReactElement => {\nconst EngagementDashboardCardErrorBoundary = ({ children }: EngagementDashboardCardErrorBoundaryProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [error, setError] = useState<Error>();\n\tconst [error, setError] = useState<Error>();\n\tconst isError = (error: unknown): error is Error => error instanceof Error;\n\tconst isError = (error: unknown): error is Error => error instanceof Error;\n\n\tconst errorHandler = (error: Error, info: { componentStack: string }): void => {\n\tconst errorHandler = (error: Error, info: { componentStack: string }): void => {\n\t\tsetError(error);\n\t\tconsole.error('Uncaught Error:', error, info);\n\t};\n\n\treturn (\n\t\t<QueryErrorResetBoundary>\n\t\t\t{({ reset }): ReactElement => (\n\t\t\t\t<ErrorBoundary\n\t\t\t\t\tchildren={children}"
        },
        "depth_rank": 8
    },
    {
        "file": "EngagementDashboardRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx",
        "code": {
            "handleOpenModal": "\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst tab = useRouteParameter('tab');\n\tconst tab = useRouteParameter('tab');\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\n\tconst handleOpenModal = useCallback(() => {\n\tconst handleOpenModal = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericUpsellModal\n\t\t\t\ttitle={t('Engagement_Dashboard')}"
        },
        "depth_rank": 8
    },
    {
        "file": "NewUsersSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/NewUsersSection.tsx",
        "code": {
            "utc": "const TICK_WIDTH = 45;\nconst TICK_WIDTH = 45;\n\ntype NewUsersSectionProps = {\n\ttimezone: 'utc' | 'local';\n};\n\nconst NewUsersSection = ({ timezone }: NewUsersSectionProps): ReactElement => {\nconst NewUsersSection = ({ timezone }: NewUsersSectionProps): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst periodLabel = usePeriodLabel(period);\n\tconst periodLabel = usePeriodLabel(period);\n\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useNewUsers({ period, utc });\n\tconst { data } = useNewUsers({ period, utc });",
            "formatDate": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst { ref: sizeRef, contentBoxSize: { inlineSize = 600 } = {} } = useResizeObserver();\n\tconst { ref: sizeRef, contentBoxSize: { inlineSize = 600 } = {} } = useResizeObserver();"
        },
        "depth_rank": 9
    },
    {
        "file": "ActiveUsersSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ActiveUsersSection.tsx",
        "code": {
            "utc": "const ActiveUsersSection = ({ timezone }: ActiveUsersSectionProps): ReactElement => {\nconst ActiveUsersSection = ({ timezone }: ActiveUsersSectionProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useActiveUsers({ utc });\n\tconst { data } = useActiveUsers({ utc });",
            "createPoints": "\t\tconst createPoint = (i: number): { x: Date; y: number } => ({\n\t\tconst createPoint = (i: number): { x: Date; y: number } => ({\n\t\t\tx: moment(data.start).add(i, 'days').toDate(),\n\t\t\ty: 0,\n\t\t});\n\n\t\tconst createPoints = (): { x: Date; y: number }[] =>\n\t\tconst createPoints = (): { x: Date; y: number }[] =>",
            "distributeValueOverPoints": "\t\t\tconst dateOffset = date.diff(data.start, 'days');\n\t\t\tconst dateOffset = date.diff(data.start, 'days');\n\t\t\tif (dateOffset >= 0) {\n\t\t\t\tmap[dateOffset] = dayData.usersList;\n\t\t\t\tdauValues[dateOffset].y = dayData.users;\n\t\t\t}\n\t\t\treturn map;\n\t\t}, {});\n\n\t\tconst distributeValueOverPoints = (\n\t\tconst distributeValueOverPoints = (\n\t\t\tusersListsMap: { [x: number]: string[] },"
        },
        "depth_rank": 9
    },
    {
        "file": "ContentForHours.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ContentForHours.tsx",
        "code": {
            "utc": "const ContentForHours = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForHoursProps): ReactElement => {\nconst ContentForHours = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForHoursProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useHourlyChatActivity({ displacement, utc });\n\tconst { data } = useHourlyChatActivity({ displacement, utc });"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/UsersTab.tsx",
        "code": {
            "isXxlScreen": "const UsersTab = ({ timezone }: UsersTabProps): ReactElement => {\nconst UsersTab = ({ timezone }: UsersTabProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isXxlScreen = useBreakpoints().includes('xxl');\n\tconst isXxlScreen = useBreakpoints().includes('xxl');\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCard title={t('New_users')}>"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersByTimeOfTheDaySection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/UsersByTimeOfTheDaySection.tsx",
        "code": {
            "utc": "const UsersByTimeOfTheDaySection = ({ timezone }: UsersByTimeOfTheDaySectionProps): ReactElement => {\nconst UsersByTimeOfTheDaySection = ({ timezone }: UsersByTimeOfTheDaySectionProps): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\n\tconst { data } = useUsersByTimeOfTheDay({ period, utc });\n\tconst { data } = useUsersByTimeOfTheDay({ period, utc });",
            "values": "\t\tconst values = Array.from(\n\t\tconst values = Array.from(\n\t\t\t{ length: 24 },"
        },
        "depth_rank": 9
    },
    {
        "file": "ContentForDays.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ContentForDays.tsx",
        "code": {
            "utc": "const ContentForDays = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForDaysProps): ReactElement => {\nconst ContentForDays = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForDaysProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useWeeklyChatActivity({ displacement, utc });\n\tconst { data } = useWeeklyChatActivity({ displacement, utc });"
        },
        "depth_rank": 9
    },
    {
        "file": "BusiestChatTimesSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/BusiestChatTimesSection.tsx",
        "code": {
            "as": "\tconst Content = (\n\tconst Content = (\n\t\t{\n\t\t\thours: ContentForHours,\n\t\t\tdays: ContentForDays,\n\t\t} as const\n\t\t} as const\n\t)[timeUnit];\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCardFilter>\n\t\t\t\t<Select options={timeUnitOptions} value={timeUnit} onChange={handleTimeUnitChange} />"
        },
        "depth_rank": 9
    },
    {
        "file": "PeriodSelector.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/dataView/PeriodSelector.tsx",
        "code": {
            "options": "const PeriodSelector = <TPeriod extends Period['key']>({ periods, value, onChange }: PeriodSelectorProps<TPeriod>): ReactElement => {\nconst PeriodSelector = <TPeriod extends Period['key']>({ periods, value, onChange }: PeriodSelectorProps<TPeriod>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst options = useMemo<[string, string][]>(() => periods.map((period) => [period, t(...getPeriod(period).label)]), [periods, t]);\n\tconst options = useMemo<[string, string][]>(() => periods.map((period) => [period, t(...getPeriod(period).label)]), [periods, t]);\n\n\treturn <Select options={options} value={value} onChange={(value: string): void => onChange(value as TPeriod)} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "DownloadDataButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/dataView/DownloadDataButton.tsx",
        "code": {
            "DownloadDataButton": "const DownloadDataButton = <H extends readonly string[]>({\nconst DownloadDataButton = <H extends readonly string[]>({\n\tattachmentName,\n\theaders,\n\tdataAvailable,\n\tdataExtractor,\n\t...props\n}: DownloadDataButtonProps<H>): ReactElement => {"
        },
        "depth_rank": 9
    },
    {
        "file": "LegendSymbol.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/dataView/LegendSymbol.tsx",
        "code": {
            "LegendSymbol": "const LegendSymbol = ({ color = 'currentColor' }: LegendSymbolProps): ReactElement => (\nconst LegendSymbol = ({ color = 'currentColor' }: LegendSymbolProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "MessagesSentSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesSentSection.tsx",
        "code": {
            "t": "const MessagesSentSection = (): ReactElement => {\nconst MessagesSentSection = (): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst periodLabel = usePeriodLabel(period);\n\tconst periodLabel = usePeriodLabel(period);\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data } = useMessagesSent({ period });\n\tconst { data } = useMessagesSent({ period });"
        },
        "depth_rank": 9
    },
    {
        "file": "MessagesPerChannelSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesPerChannelSection.tsx",
        "code": {
            "t": "const MessagesPerChannelSection = (): ReactElement => {\nconst MessagesPerChannelSection = (): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data: messageOriginsData } = useMessageOrigins({ period });\n\tconst { data: messageOriginsData } = useMessageOrigins({ period });",
            "pie": "\tconst pie = useMemo(\n\tconst pie = useMemo(\n\t\t() => messageOriginsData?.origins?.reduce<{ [roomType: string]: number }>((obj, { messages, t }) => ({ ...obj, [t]: messages }), {}),",
            "table": "\tconst table = useMemo(\n\tconst table = useMemo(\n\t\t() =>\n\t\t\ttopFivePopularChannelsData?.channels?.reduce<\n\t\t\t\t{\n\t\t\t\t\ti: number;\n\t\t\t\t\tt: string;\n\t\t\t\t\tname?: string;\n\t\t\t\t\tmessages: number;\n\t\t\t\t}[]\n\t\t\t>((entries, { t, messages, name, usernames }, i) => [...entries, { i, t, name: name || usernames?.join(' \u00d7 '), messages }], []),"
        },
        "depth_rank": 9
    },
    {
        "file": "MessagesTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesTab.tsx",
        "code": {
            "t": "const MessagesTab = (): ReactElement => {\nconst MessagesTab = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCard title={t('Messages_sent')}>"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementAdminPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminPage.tsx",
        "code": {
            "reloadRef": "const DeviceManagementAdminPage = (): ReactElement => {\nconst DeviceManagementAdminPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst deviceId = useRouteParameter('id');\n\tconst deviceId = useRouteParameter('id');\n\n\tconst reloadRef = useRef(() => null);\n\tconst reloadRef = useRef(() => null);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Device_Management')} />"
        },
        "depth_rank": 8
    },
    {
        "file": "DeviceManagementAdminRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminRoute.tsx",
        "code": {
            "handleOpenModal": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\n\tconst handleOpenModal = useCallback(() => {\n\tconst handleOpenModal = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericUpsellModal\n\t\t\t\ttitle={t('Device_Management')}"
        },
        "depth_rank": 8
    },
    {
        "file": "DeviceManagementInfoWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementInfo/DeviceManagementInfoWithData.tsx",
        "code": {
            "convertSessionFromAPI": "const convertSessionFromAPI = ({\nconst convertSessionFromAPI = ({\n\tloginAt,\n\tlogoutAt,\n\t...rest\n}: Serialized<DeviceManagementPopulatedSession>): DeviceManagementPopulatedSession => ({"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementInfo/DeviceManagementInfo.tsx",
        "code": {
            "handleDeviceLogout": "\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst handleDeviceLogout = useDeviceLogout(sessionId, '/v1/sessions/logout');\n\tconst handleDeviceLogout = useDeviceLogout(sessionId, '/v1/sessions/logout');\n\n\tconst { name: clientName, os, version: rcVersion } = device || {};\n\tconst { name: clientName, os, version: rcVersion } = device || {};",
            "handleCloseContextualBar": "\tconst userPresence = usePresence(userId);\n\tconst userPresence = usePresence(userId);\n\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementAdminRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminTable/DeviceManagementAdminRow.tsx",
        "code": {
            "DeviceManagementAdminRow": "const DeviceManagementAdminRow = ({\nconst DeviceManagementAdminRow = ({\n\t_id,\n\tusername,\n\tip,\n\tdeviceName,\n\tdeviceType = 'browser',\n\tdeviceOSName = '',\n\tloginAt,\n\trcVersion,\n\tonReload,\n}: DeviceRowProps): ReactElement => {"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementAdminTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminTable/DeviceManagementAdminTable.tsx",
        "code": {
            "t": "const sortMapping = {\nconst sortMapping = {\n\tclient: 'device.name',\n\tusername: '_user.username',\n\tos: 'device.os.name',\n\tloginAt: 'loginAt',\n};\n\nconst isSessionPopulatedSession = (\nconst isSessionPopulatedSession = (\n\tsession: Serialized<DeviceManagementPopulatedSession | DeviceManagementSession>,\n): session is Serialized<DeviceManagementPopulatedSession> => '_user' in session;\n\nconst DeviceManagementAdminTable = ({ reloadRef }: { reloadRef: MutableRefObject<() => void> }): ReactElement => {\nconst DeviceManagementAdminTable = ({ reloadRef }: { reloadRef: MutableRefObject<() => void> }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='client' direction={sortDirection} active={sortBy === 'client'} onClick={setSort} sort='client'>"
        },
        "depth_rank": 9
    },
    {
        "file": "SeatsCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/admin/info/SeatsCard.tsx",
        "code": {
            "color": "\tconst isNearLimit = seatsCap && seatsCap.activeUsers / seatsCap.maxActiveUsers >= 0.8;\n\tconst isNearLimit = seatsCap && seatsCap.activeUsers / seatsCap.maxActiveUsers >= 0.8;\n\n\tconst color = isNearLimit ? colors.d500 : undefined;\n\tconst color = isNearLimit ? colors.d500 : undefined;\n\n\tif (seatsCap && seatsCap.maxActiveUsers === Infinity) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Title>{t('Seats_usage')}</Card.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "DeviceManagementAccountPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountPage.tsx",
        "code": {
            "t": "const DeviceManagementAccountPage = (): ReactElement => {\nconst DeviceManagementAccountPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Manage_Devices')} />"
        },
        "depth_rank": 8
    },
    {
        "file": "DeviceManagementAccountRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountTable/DeviceManagementAccountRow.tsx",
        "code": {
            "DeviceManagementAccountRow": "const DeviceManagementAccountRow = ({\nconst DeviceManagementAccountRow = ({\n\t_id,\n\tdeviceName,\n\tdeviceType = 'browser',\n\tdeviceOSName,\n\tloginAt,\n\tonReload,\n}: DevicesRowProps): ReactElement => {",
            "handleDeviceLogout": "\tconst handleDeviceLogout = useDeviceLogout(_id, '/v1/sessions/logout.me');\n\tconst handleDeviceLogout = useDeviceLogout(_id, '/v1/sessions/logout.me');\n\n\treturn (\n\t\t<GenericTableRow key={_id}>"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementAccountTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountTable/DeviceManagementAccountTable.tsx",
        "code": {
            "t": "const sortMapping = {\nconst sortMapping = {\n\tclient: 'device.name',\n\tos: 'device.os.name',\n\tloginAt: 'loginAt',\n};\n\nconst DeviceManagementAccountTable = (): ReactElement => {\nconst DeviceManagementAccountTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='client' direction={sortDirection} active={sortBy === 'client'} onClick={setSort} sort='client'>"
        },
        "depth_rank": 9
    },
    {
        "file": "requestSeatsRoute.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/requestSeatsRoute.ts",
        "code": {
            "url": "\t\tconst url = await getSeatsRequestLink();\n\t\tconst url = await getSeatsRequestLink();\n\n\t\tawait Analytics.saveSeatRequest();\n\t\tres.writeHead(302, { Location: url });"
        },
        "depth_rank": 5
    },
    {
        "file": "roles.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/api/roles.ts",
        "code": {
            "role": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tbroadcastUpdate: settings.get<boolean>('UI_DisplayRoles'),\n\t\t\t};\n\n\t\t\tconst role = await insertRoleAsync(roleData, options);\n\t\t\tconst role = await insertRoleAsync(roleData, options);\n\n\t\t\treturn API.v1.success({\n\t\t\t\trole,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'roles.update',\n\t{ authRequired: true },"
        },
        "depth_rank": 6
    },
    {
        "file": "sessions.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/api/sessions.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "sessions": "\t\t\tconst sessions = await Sessions.aggregateSessionsAndPopulate({ search: search.join('|'), sort, offset, count });\n\t\t\tconst sessions = await Sessions.aggregateSessionsAndPopulate({ search: search.join('|'), sort, offset, count });",
            "sessionId": "\t\t\tconst sessionId = this.queryParams?.sessionId as string;\n\t\t\tconst sessionId = this.queryParams?.sessionId as string;\n\t\t\tconst { sessions } = await Sessions.aggregateSessionsAndPopulate({ search: sessionId, count: 1 });\n\t\t\tconst { sessions } = await Sessions.aggregateSessionsAndPopulate({ search: sessionId, count: 1 });"
        },
        "depth_rank": 6
    },
    {
        "file": "licenses.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/api/licenses.ts",
        "code": {
            "licenseTransform": "function licenseTransform(license: ILicense): ILicense {\nfunction licenseTransform(license: ILicense): ILicense {\n\treturn {\n\t\t...license,\n\t\tmodules: flatModules(license.modules),\n\t};\n}\n\nAPI.v1.addRoute(\n\t'licenses.get',\n\t{ authRequired: true },",
            "licenses": "\t\t\tconst licenses = getLicenses()\n\t\t\tconst licenses = getLicenses()\n\t\t\t\t.filter(({ valid }) => valid)",
            "activeUsers": "\t\t\tconst maxActiveUsers = getMaxActiveUsers() || null;\n\t\t\tconst maxActiveUsers = getMaxActiveUsers() || null;\n\t\t\tconst activeUsers = await Users.getActiveLocalUserCount();\n\t\t\tconst activeUsers = await Users.getActiveLocalUserCount();\n\n\t\t\treturn API.v1.success({ maxActiveUsers, activeUsers });",
            "isEnterpriseEdtion": "\t\t\tconst isEnterpriseEdtion = isEnterprise();\n\t\t\tconst isEnterpriseEdtion = isEnterprise();\n\t\t\treturn API.v1.success({ isEnterprise: isEnterpriseEdtion });"
        },
        "depth_rank": 6
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/api/federation/rooms.ts",
        "code": {
            "servers": "\t\t\tconst result = await FederationEE.searchPublicRooms(serverName, roomName, pageToken, count);\n\t\t\tconst result = await FederationEE.searchPublicRooms(serverName, roomName, pageToken, count);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'federation/listServersByUser',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst servers = await FederationEE.getSearchedServerNamesByInternalUserId(this.userId);\n\t\t\tconst servers = await FederationEE.getSearchedServerNamesByInternalUserId(this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tservers,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'federation/addServerByUser',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFederationAddServerProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { serverName } = this.bodyParams;\n\t\t\tconst { serverName } = this.bodyParams;"
        },
        "depth_rank": 7
    },
    {
        "file": "EnterpriseCheck.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/EnterpriseCheck.ts",
        "code": {
            "hasLicense": "\t\t\tconst firstNode = nodes.sort().shift();\n\t\t\tconst firstNode = nodes.sort().shift();\n\n\t\t\t// if the first node is the current node and there are others nodes running the same service or\n\t\t\t// if this is the only one node online, then we should shutdown\n\t\t\treturn firstNode === this.broker.nodeID && (nodes.length > 0 || services.length === 1);\n\t\t},\n\t},\n\tasync started(): Promise<void> {\n\t\tsetInterval(async () => {\n\t\t\ttry {\n\t\t\t\tconst hasLicense = await this.broker.call('license.hasLicense', ['scalability']);\n\t\t\t\tconst hasLicense = await this.broker.call('license.hasLicense', ['scalability']);\n\t\t\t\tif (hasLicense) {\n\t\t\t\t\tcheckFails = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {"
        },
        "depth_rank": 6
    },
    {
        "file": "syncUserRoles.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/syncUserRoles.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'roles'>>(uid, { projection: { username: 1, roles: 1 } });\n\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'roles'>>(uid, { projection: { username: 1, roles: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/users.ts",
        "code": {
            "users": "\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst users = (await Users.getTotalOfRegisteredUsersByDate({\n\t\tconst users = (await Users.getTotalOfRegisteredUsersByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t})) as {",
            "lastPeriodTotalUsers": "\tconst yesterdayUsers = currentPeriodUsers.find((item) => item._id === yesterday)?.users || 0;\n\tconst yesterdayUsers = currentPeriodUsers.find((item) => item._id === yesterday)?.users || 0;\n\tconst todayUsers = currentPeriodUsers.find((item) => item._id === today)?.users || 0;\n\tconst todayUsers = currentPeriodUsers.find((item) => item._id === today)?.users || 0;\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\treturn {\n\t\tdays: currentPeriodUsers.map((day) => ({ day: convertIntToDate(day._id), users: day.users })),",
            "createDestructuredDate": "const createDestructuredDate = (\nconst createDestructuredDate = (\n\tinput: moment.MomentInput,\n): {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n} => {"
        },
        "depth_rank": 7
    },
    {
        "file": "methods.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/audit/methods.ts",
        "code": {
            "getValue": "const getValue = (room: IRoom | null) => room && { rids: [room._id], name: room.name };\nconst getValue = (room: IRoom | null) => room && { rids: [room._id], name: room.name };",
            "getRoomInfoByAuditParams": "const getUsersIdFromUserName = async (usernames: IUser['username'][]) => {\nconst getUsersIdFromUserName = async (usernames: IUser['username'][]) => {\n\tconst users = usernames ? await Users.findByUsernames(usernames.filter(isTruthy)).toArray() : undefined;\n\tconst users = usernames ? await Users.findByUsernames(usernames.filter(isTruthy)).toArray() : undefined;\n\n\treturn users?.filter(isTruthy).map((userId) => userId._id);\n};\n\nconst getRoomInfoByAuditParams = async ({\nconst getRoomInfoByAuditParams = async ({\n\ttype,\n\troomId: rid,\n\tusers: usernames,\n\tvisitor,\n\tagent,\n}: {",
            "rids": "\t\tconst rids = rooms?.length ? rooms.map(({ _id }) => _id) : undefined;\n\t\tconst rids = rooms?.length ? rooms.map(({ _id }) => _id) : undefined;",
            "messages": "\t\t\tconst regex = new RegExp(escapeRegExp(msg).trim(), 'i');\n\t\t\tconst regex = new RegExp(escapeRegExp(msg).trim(), 'i');\n\t\t\tquery.msg = regex;\n\t\t}\n\n\t\tconst messages = await Messages.find(query).toArray();\n\t\tconst messages = await Messages.find(query).toArray();\n\n\t\t// Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n\t\tawait AuditLog.insertOne({\n\t\t\tts: new Date(),\n\t\t\tresults: messages.length,\n\t\t\tu: user,\n\t\t\tfields: { msg, users: usernames, rids, room: name, startDate, endDate, type, visitor, agent },",
            "roomInfo": "\t\t\tconst roomInfo = await getRoomInfoByAuditParams({ type, roomId: rid, users: usernames, visitor, agent });\n\t\t\tconst roomInfo = await getRoomInfoByAuditParams({ type, roomId: rid, users: usernames, visitor, agent });"
        },
        "depth_rank": 7
    },
    {
        "file": "startup.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/audit/startup.ts",
        "code": {
            "defaultRoles": "\tconst defaultRoles = [\n\tconst defaultRoles = [\n\t\t{ name: 'auditor', scope: 'Users' },"
        },
        "depth_rank": 7
    },
    {
        "file": "session.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/deviceManagement/session.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByIdWithEmailAddress(userId, {\n\t\tconst user = await Users.findOneByIdWithEmailAddress(userId, {\n\t\t\tprojection: { 'name': 1, 'username': 1, 'emails': 1, 'settings.preferences.receiveLoginDetectionEmail': 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "Manager.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/ldap/Manager.ts",
        "code": {
            "ldap": "\t\t\tconst ldap = new LDAPConnection();\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.logoutDeactivatedUsers(ldap);\n\t\t\t} finally {",
            "roles": "\t\tconst roles = (await Roles.find(\n\t\tconst roles = (await Roles.find(\n\t\t\t{},",
            "room": "\t\tconst room = await createRoom('c', channel, roomOwner, [], false, false, {\n\t\tconst room = await createRoom('c', channel, roomOwner, [], false, false, {\n\t\t\tcustomFields: { ldap: true },",
            "isUserInGroup": "\t\t\tconst isUserInGroup = await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapField);\n\t\t\tconst isUserInGroup = await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapField);",
            "name": "\t\t\tconst channels: Array<string> = [].concat(fieldMap[ldapField]);\n\t\t\tconst channels: Array<string> = [].concat(fieldMap[ldapField]);\n\t\t\tfor await (const channel of channels) {\n\t\t\tfor await (const channel of channels) {\n\t\t\t\ttry {\n\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });",
            "allTeams": "\t\tconst teamNames = this.getRocketChatTeamsByLdapTeams(map, ldapUserTeams);\n\t\tconst teamNames = this.getRocketChatTeamsByLdapTeams(map, ldapUserTeams);\n\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });",
            "inTeamIds": "\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);\n\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);",
            "currentTeams": "\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\t\tprojection: { teamId: 1 },",
            "currentTeamIds": "\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);\n\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);"
        },
        "depth_rank": 7
    },
    {
        "file": "replacesNestedValues.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/ldap/replacesNestedValues.spec.ts",
        "code": {
            "result": "\t\tconst result = replacesNestedValues(\n\t\tconst result = replacesNestedValues(\n\t\t\t{\n\t\t\t\ta: {\n\t\t\t\t\tb: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t'a.b',\n\t\t\t2,\n\t\t);\n\t\texpect(result).to.eql({\n\t\t\ta: {\n\t\t\t\tb: 2,\n\t\t\t},\n\t\t});\n\t});\n\tit('should replace undefined nested values', () => {\n\t\tconst result = replacesNestedValues(\n\t\tconst result = replacesNestedValues(\n\t\t\t{\n\t\t\t\ta: {},"
        },
        "depth_rank": 7
    },
    {
        "file": "updateRole.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/roles/updateRole.ts",
        "code": {
            "otherRole": "\t\tconst otherRole = await Roles.findOneByName(roleData.name, { projection: { _id: 1 } });\n\t\tconst otherRole = await Roles.findOneByName(roleData.name, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "ReadReceipt.js",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/message-read-receipt/ReadReceipt.js",
        "code": {
            "list": "// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\n// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\nconst list = {};\nconst list = {};",
            "room": "\t\tconst room = await Rooms.findOneById(roomId, { projection: { lm: 1 } });\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { lm: 1 } });",
            "extraData": "\t\tconst isUserAlone = (await Subscriptions.countByRoomIdAndNotUserId(roomId, userId)) === 0;\n\t\tconst isUserAlone = (await Subscriptions.countByRoomIdAndNotUserId(roomId, userId)) === 0;\n\t\tif (isUserAlone) {\n\t\t\tawait Messages.setAsReadById(message._id);\n\t\t}\n\n\t\tconst extraData = roomCoordinator.getRoomDirectives(t).getReadReceiptsExtraData(message);\n\t\tconst extraData = roomCoordinator.getRoomDirectives(t).getReadReceiptsExtraData(message);\n\t\tthis.storeReadReceipts([{ _id: message._id }], roomId, userId, extraData);",
            "message": "\t\tconst message = await Messages.findOneById(tmid, { projection: { tlm: 1, rid: 1 } });\n\t\tconst message = await Messages.findOneById(tmid, { projection: { tlm: 1, rid: 1 } });",
            "receipts": "\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\n\t\treturn Promise.all(\n\t\t\treceipts.map(async (receipt) => ({\n\t\t\t\t...receipt,\n\t\t\t\tuser: receipt.token\n\t\t\t\t\t? await LivechatVisitors.getVisitorByToken(receipt.token, { projection: { username: 1, name: 1 } })"
        },
        "depth_rank": 7
    },
    {
        "file": "Manager.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/lib/oauth/Manager.ts",
        "code": {
            "name": "\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/instance/service.ts",
        "code": {
            "tx": "\tconstructor() {\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });"
        },
        "depth_rank": 7
    },
    {
        "file": "UserService.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/UserService.ts",
        "code": {
            "searchedServersByUser": "\t\tconst searchedServersByUser = await this.internalUserAdapter.getSearchedServerNamesByUserId(internalUserId);\n\t\tconst searchedServersByUser = await this.internalUserAdapter.getSearchedServerNamesByUserId(internalUserId);\n\n\t\treturn [...this.availableServers, ...searchedServersByUser.map((server) => ({ name: server, default: false, local: false }))];"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomServiceSender.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts",
        "code": {
            "await": "\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\t\tawait this.inviteUserToAFederatedRoom({\n\t\t\t\tinternalInviterId,\n\t\t\t\tinternalRoomId,\n\t\t\t\tinviteeUsernameOnly: user.inviteeUsernameOnly,\n\t\t\t\tnormalizedInviteeId: user.normalizedInviteeId,\n\t\t\t\trawInviteeId: user.rawInviteeId,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async onUsersAddedToARoom(roomOnUsersAddedToARoomInput: FederationOnUsersAddedToARoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;",
            "externalRoomId": "\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n\t}\n\n\tprivate async inviteUserToAFederatedRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;"
        },
        "depth_rank": 10
    },
    {
        "file": "DirectMessageRoomServiceSender.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts",
        "code": {
            "inviteesFromTheSameHomeServer": "\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\t\tinternalRoomId,\n\t\t});\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(inviteesFromTheSameHomeServer.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tprivate async createUserForDirectMessageRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomSender.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/converters/RoomSender.ts",
        "code": {
            "inviteesUsername": "\t\tconst allUsernamesToBeInvited: string[] = [...externalUsernamesToBeInvited, ...internalUsernamesToBeInvited];\n\t\tconst allUsernamesToBeInvited: string[] = [...externalUsernamesToBeInvited, ...internalUsernamesToBeInvited];\n\n\t\tconst externalInviterId = isAnExternalUserIdFormat(internalInviterId) && internalInviterId;\n\t\tconst externalInviterId = isAnExternalUserIdFormat(internalInviterId) && internalInviterId;\n\n\t\treturn new FederationOnDirectMessageRoomCreationDto({\n\t\t\tinternalInviterId,\n\t\t\tinternalRoomId,\n\t\t\tinvitees: normalizeInvitees(allUsernamesToBeInvited, homeServerDomainName),\n\t\t\tinviteComesFromAnExternalHomeServer: Boolean(externalInviterId),\n\t\t});\n\t}\n\n\tpublic static toBeforeDirectMessageCreatedDto(\n\t\tmembers: (IUser | string)[],\n\t\thomeServerDomainName: string,\n\t): FederationBeforeDirectMessageRoomCreationDto {\n\t\tconst invitees = getExternalUsersToBeInvited(members);\n\t\tconst invitees = getExternalUsersToBeInvited(members);\n\t\tconst inviteesUsername = getInviteesUsername(invitees);\n\t\tconst inviteesUsername = getInviteesUsername(invitees);\n\n\t\treturn new FederationBeforeDirectMessageRoomCreationDto({\n\t\t\tinvitees: normalizeInvitees(inviteesUsername, homeServerDomainName),\n\t\t});\n\t}\n\n\tpublic static toBeforeAddUserToARoomDto(\n\t\tmembers: (IUser | string)[],\n\t\tinternalRoom: IRoom,\n\t\thomeServerDomainName: string,\n\t\tinternalInviter?: IUser,\n\t): FederationBeforeAddUserToARoomDto {\n\t\tconst { invitees } = FederationRoomSenderConverterEE.toBeforeDirectMessageCreatedDto(members, homeServerDomainName);\n\t\tconst { invitees } = FederationRoomSenderConverterEE.toBeforeDirectMessageCreatedDto(members, homeServerDomainName);"
        },
        "depth_rank": 10
    },
    {
        "file": "User.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/adapters/User.ts",
        "code": {
            "existingLocalUser": "\t\tconst existingLocalUser = internalUser.username && (await Users.findOneByUsername(internalUser.username, { projection: { _id: 1 } }));\n\t\tconst existingLocalUser = internalUser.username && (await Users.findOneByUsername(internalUser.username, { projection: { _id: 1 } }));"
        },
        "depth_rank": 10
    },
    {
        "file": "action.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/slash-commands/action.ts",
        "code": {
            "invitees": "\tconst invitees = externalUserIdsToInvite.map((rawUserId) => normalizeExternalInviteeId(rawUserId));\n\tconst invitees = externalUserIdsToInvite.map((rawUserId) => normalizeExternalInviteeId(rawUserId));\n\n\tconst { rid: roomId } = item;\n\tconst { rid: roomId } = item;"
        },
        "depth_rank": 10
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/local-services/message-reads/service.ts",
        "code": {
            "threadMessage": "\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });",
            "subscriptions": "\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\n\t\tif (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "totalMessageReads": "\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "appRequestsCron.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/appRequestsCron.ts",
        "code": {
            "installedApps": "const appsNotifyAppRequests = async function _appsNotifyAppRequests() {\nconst appsNotifyAppRequests = async function _appsNotifyAppRequests() {\n\ttry {\n\t\tconst installedApps = await Apps.installedApps({ enabled: true });\n\t\tconst installedApps = await Apps.installedApps({ enabled: true });",
            "result": "\t\tconst result = await fetch(pendingSentUrl, options);\n\t\tconst result = await fetch(pendingSentUrl, options);\n\t\tconst { data } = await result.json();\n\t\tconst { data } = await result.json();"
        },
        "depth_rank": 6
    },
    {
        "file": "cron.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/cron.ts",
        "code": {
            "result": "\t\tconst response = await fetch(fullUrl, options);\n\t\tconst response = await fetch(fullUrl, options);\n\n\t\tconst result = await response.json();\n\t\tconst result = await response.json();\n\n\t\tif (Array.isArray(result)) {\n\t\t\tdata = result;\n\t\t}\n\t} catch (err) {"
        },
        "depth_rank": 6
    },
    {
        "file": "logs-storage.js",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/storage/logs-storage.js",
        "code": {
            "id": "\tconstructor(model) {\n\tconstructor(model) {\n\t\tsuper('mongodb');\n\t\tthis.db = model;\n\t}\n\n\tasync find(...args) {\n\t\treturn this.db.find(...args).toArray();\n\t}\n\n\tasync storeEntries(appId, logger) {\n\t\tconst item = AppConsole.toStorageEntry(appId, logger);\n\t\tconst item = AppConsole.toStorageEntry(appId, logger);\n\n\t\titem.instanceId = InstanceStatus.id();\n\n\t\tconst id = (await this.db.insertOne(item)).insertedId;\n\t\tconst id = (await this.db.insertOne(item)).insertedId;\n\n\t\treturn this.db.findOneById(id);\n\t}\n\n\tasync getEntriesFor(appId) {\n\t\treturn this.db.find({ appId }).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "AppRealStorage.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/storage/AppRealStorage.ts",
        "code": {
            "docs": "\t\tconst docs = await this.db.find({}).toArray();\n\t\tconst docs = await this.db.find({}).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "uikit.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/communication/uikit.ts",
        "code": {
            "getPayloadForType": "const getPayloadForType = (type: UIKitIncomingInteractionType, req: Request) => {\nconst getPayloadForType = (type: UIKitIncomingInteractionType, req: Request) => {\n\tif (type === UIKitIncomingInteractionType.BLOCK) {\n\t\tconst { type, actionId, triggerId, mid, rid, payload, container } = req.body;\n\t\tconst { type, actionId, triggerId, mid, rid, payload, container } = req.body;",
            "as": "\t\tconst room = rid; // orch.getConverters().get('rooms').convertById(rid);\n\t\tconst room = rid; // orch.getConverters().get('rooms').convertById(rid);\n\t\tconst message = mid;\n\t\tconst message = mid;\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tcontainer,\n\t\t\tactionId,\n\t\t\tmessage,\n\t\t\ttriggerId,\n\t\t\tpayload,\n\t\t\tuser,\n\t\t\tvisitor,\n\t\t\troom,\n\t\t} as const;\n\t\t} as const;\n\t}\n\n\tif (type === UIKitIncomingInteractionType.VIEW_CLOSED) {\n\t\tconst {\n\t\tconst {\n\t\t\ttype,\n\t\t\tactionId,\n\t\t\tpayload: { view, isCleared },",
            "error": "\t\t\t\t\tconst error = e instanceof Error ? e.message : e;\n\t\t\t\t\tconst error = e instanceof Error ? e.message : e;\n\t\t\t\t\tres.status(500).send({ error });",
            "appsRoutes": "const appsRoutes =\nconst appsRoutes =\n\t(orch: AppServerOrchestrator) =>\n\tasync (req: Request, res: Response): Promise<void> => {\n\t\tconst { appId } = req.params;\n\t\tconst { appId } = req.params;",
            "result": "\t\t\t\t\tconst result = await orch.triggerEvent('IUIKitInteractionHandler', action);\n\t\t\t\t\tconst result = await orch.triggerEvent('IUIKitInteractionHandler', action);\n\n\t\t\t\t\tres.send(result);\n\t\t\t\t} catch (e) {",
            "action": "\t\t\t\tconst room = await orch.getConverters()?.get('rooms').convertById(rid);\n\t\t\t\tconst room = await orch.getConverters()?.get('rooms').convertById(rid);\n\t\t\t\tconst user = orch.getConverters()?.get('users').convertToApp(req.user);\n\t\t\t\tconst user = orch.getConverters()?.get('users').convertToApp(req.user);\n\t\t\t\tconst message = mid && (await orch.getConverters()?.get('messages').convertById(mid));\n\t\t\t\tconst message = mid && (await orch.getConverters()?.get('messages').convertById(mid));\n\n\t\t\t\tconst action = {\n\t\t\t\tconst action = {\n\t\t\t\t\ttype,\n\t\t\t\t\tappId,\n\t\t\t\t\tactionId,\n\t\t\t\t\ttriggerId,\n\t\t\t\t\tuser,\n\t\t\t\t\troom,\n\t\t\t\t\tmessage,\n\t\t\t\t\ttmid,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t...(msgText && { message: msgText }),"
        },
        "depth_rank": 7
    },
    {
        "file": "rest.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/communication/rest.ts",
        "code": {
            "workspaceId": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst workspaceId = settings.get('Cloud_Workspace_Id');\n\t\t\t\t\tconst workspaceId = settings.get('Cloud_Workspace_Id');\n\t\t\t\t\tconst { action, appId, appVersion } = this.queryParams;\n\t\t\t\t\tconst { action, appId, appVersion } = this.queryParams;",
            "apps": "\t\t\t\t\tconst apps = manager.get().map((prl) => ({\n\t\t\t\t\tconst apps = manager.get().map((prl) => ({\n\t\t\t\t\t\tid: prl.getID(),\n\t\t\t\t\t\tlanguages: prl.getStorageItem().languageContent,\n\t\t\t\t\t}));\n\n\t\t\t\t\treturn API.v1.success({ apps });",
            "app": "\t\t\t\t\t\tconst app = await getUploadFormData(\n\t\t\t\t\t\tconst app = await getUploadFormData(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ field: 'app', sizeLimit: settings.get('FileUpload_MaxFileSize') },",
            "permissions": "\t\t\t\t\t\t\t\tconst permissions = JSON.parse(formData?.permissions || '');\n\t\t\t\t\t\t\t\tconst permissions = JSON.parse(formData?.permissions || '');\n\t\t\t\t\t\t\t\treturn permissions.length ? permissions : undefined;\n\t\t\t\t\t\t\t} catch {",
            "aff": "\t\t\t\t\tconst aff = await manager.update(buff, permissionsGranted);\n\t\t\t\t\tconst aff = await manager.update(buff, permissionsGranted);\n\t\t\t\t\tconst info: IAppInfo & { status?: AppStatus } = aff.getAppInfo();\n\t\t\t\t\tconst info: IAppInfo & { status?: AppStatus } = aff.getAppInfo();",
            "success": "\t\t\t\t\t\tconst success = await manager.enable(info.id);\n\t\t\t\t\t\tconst success = await manager.enable(info.id);\n\t\t\t\t\t\tinfo.status = success ? AppStatus.AUTO_ENABLED : info.status;\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid orchestrator.getNotifier().appAdded(info.id);\n\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tapp: info,\n\t\t\t\t\t\timplemented: aff.getImplementedInferfaces(),\n\t\t\t\t\t\tlicenseValidation: aff.getLicenseValidationResult(),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tthis.api.addRoute(\n\t\t\t'buildExternalAppRequest',\n\t\t\t{ authRequired: true },",
            "adminsRaw": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst workspaceId = settings.get<string>('Cloud_Workspace_Id');\n\t\t\t\t\tconst workspaceId = settings.get<string>('Cloud_Workspace_Id');\n\n\t\t\t\t\tconst requester = {\n\t\t\t\t\tconst requester = {\n\t\t\t\t\t\tid: this.user._id,\n\t\t\t\t\t\tusername: this.user.username,\n\t\t\t\t\t\tname: this.user.name,\n\t\t\t\t\t\tnickname: this.user.nickname,\n\t\t\t\t\t\temails: this.user?.emails?.map((e) => e.address),\n\t\t\t\t\t};\n\n\t\t\t\t\tlet admins: {\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t\tusername?: string;\n\t\t\t\t\t\tname?: string;\n\t\t\t\t\t\tnickname?: string;\n\t\t\t\t\t}[] = [];\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst adminsRaw = await Users.findUsersInRoles(['admin'], undefined, {\n\t\t\t\t\t\tconst adminsRaw = await Users.findUsersInRoles(['admin'], undefined, {\n\t\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t\tnickname: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}).toArray();\n\n\t\t\t\t\t\tadmins = adminsRaw.map((a) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tid: a._id,\n\t\t\t\t\t\t\t\tusername: a.username,\n\t\t\t\t\t\t\t\tname: a.name,\n\t\t\t\t\t\t\t\tnickname: a.nickname,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {",
            "externalComponents": "\t\t\t\t\tconst externalComponents = orchestrator.getProvidedComponents();\n\t\t\t\t\tconst externalComponents = orchestrator.getProvidedComponents();\n\n\t\t\t\t\treturn API.v1.success({ externalComponents });",
            "result": "\t\t\t\t\tconst result = await manager.changeStatus(prl.getID(), this.bodyParams.status);\n\t\t\t\t\tconst result = await manager.changeStatus(prl.getID(), this.bodyParams.status);\n\n\t\t\t\t\treturn API.v1.success({ status: result.getStatus() });",
            "baseUrl": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst { appId, q = '', sort = '', limit = 25, offset = 0 } = this.queryParams;\n\t\t\t\t\tconst { appId, q = '', sort = '', limit = 25, offset = 0 } = this.queryParams;",
            "user": "\t\t\t\t\tconst user = orchestrator\n\t\t\t\t\tconst user = orchestrator\n\t\t\t\t\t\t?.getConverters()\n\t\t\t\t\t\t?.get('users')\n\t\t\t\t\t\t.convertToApp(await Meteor.userAsync());\n\n\t\t\t\t\tawait manager.remove(prl.getID(), { user });",
            "data": "\t\t\t\t\t\tconst data = await request.json();\n\t\t\t\t\t\tconst data = await request.json();\n\n\t\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\t\tscreenshots: data,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e: any) {",
            "languages": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\tconst languages = prl.getStorageItem().languageContent || {};\n\t\t\t\t\t\tconst languages = prl.getStorageItem().languageContent || {};",
            "prl": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\treturn API.v1.success({ status: prl.getStatus() });",
            "ourQuery": "\t\t\t\t\t\tconst ourQuery = Object.assign({}, query, { appId: prl.getID() });\n\t\t\t\t\t\tconst ourQuery = Object.assign({}, query, { appId: prl.getID() });",
            "logs": "\t\t\t\t\t\tconst logs = await orchestrator?.getLogStorage()?.find(ourQuery, options);\n\t\t\t\t\t\tconst logs = await orchestrator?.getLogStorage()?.find(ourQuery, options);\n\n\t\t\t\t\t\treturn API.v1.success({ logs });",
            "settings": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\tconst settings = Object.assign({}, prl.getStorageItem().settings);\n\t\t\t\t\t\tconst settings = Object.assign({}, prl.getStorageItem().settings);",
            "setting": "\t\t\t\t\t\tconst setting = manager.getSettingsManager().getAppSetting(this.urlParams.id, this.urlParams.settingId);\n\t\t\t\t\t\tconst setting = manager.getSettingsManager().getAppSetting(this.urlParams.id, this.urlParams.settingId);\n\n\t\t\t\t\t\treturn API.v1.success({ setting });"
        },
        "depth_rank": 7
    },
    {
        "file": "appsCountHandler.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/communication/endpoints/appsCountHandler.ts",
        "code": {
            "apps": "\t\t\t\tconst manager = apiManager._manager as AppManager;\n\t\t\t\tconst manager = apiManager._manager as AppManager;\n\n\t\t\t\tconst apps = manager.get({ enabled: true });\n\t\t\t\tconst apps = manager.get({ enabled: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "appRequestNotifyUsers.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/apps/marketplace/appRequestNotifyUsers.ts",
        "code": {
            "data": "\t\tconst data = (await response.json()) as { meta: { total: number }; data: any };\n\t\tconst data = (await response.json()) as { meta: { total: number }; data: any };",
            "finalResult": "\t\tconst finalResult = await Promise.all(requestsCollection);\n\t\tconst finalResult = await Promise.all(requestsCollection);\n\n\t\t// Return the list of users that were notified\n\t\treturn finalResult.flat();\n\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/services/ecdh-proxy/lib/server.ts",
        "code": {
            "getSessionCached": "const app = express();\nconst app = express();\napp.use(cookieParser());\n\nconst port = process.env.PORT || 4000;\nconst port = process.env.PORT || 4000;\n\nfunction streamToBuffer(stream: Readable): Promise<Buffer> {\nfunction streamToBuffer(stream: Readable): Promise<Buffer> {\n\treturn new Promise((resolve) => {\n\t\tconst buffers: any[] = [];\n\t\tconst buffers: any[] = [];\n\t\tstream.on('data', (d) => buffers.push(d));\n\t\tstream.on('end', () => {\n\t\t\tresolve(Buffer.concat(buffers));\n\t\t});\n\t\tstream.resume();\n\t});\n}\n\nasync function getSession(clientPublicKey: string): Promise<ServerSession> {\nasync function getSession(clientPublicKey: string): Promise<ServerSession> {\n\tconst serverSession = new ServerSession();\n\tconst serverSession = new ServerSession();\n\tawait serverSession.init(clientPublicKey);\n\treturn serverSession;\n}\n\nconst getSessionCached = mem(getSession, { maxAge: 1000 });\nconst getSessionCached = mem(getSession, { maxAge: 1000 });",
            "responseData": "\tconst connector = http.request(options, async function (serverResponse) {\n\tconst connector = http.request(options, async function (serverResponse) {\n\t\tserverResponse.pause();\n\t\tif (serverResponse.statusCode) {\n\t\t\tres.writeHead(serverResponse.statusCode, serverResponse.headers);\n\t\t}\n\t\tif (session) {\n\t\t\tconst responseData = await streamToBuffer(serverResponse);\n\t\t\tconst responseData = await streamToBuffer(serverResponse);\n\t\t\tif (responseData.length) {\n\t\t\t\tres.write(await processResponse(session, responseData));\n\t\t\t}\n\t\t\tres.end();\n\t\t\t// session.encryptStream(serverResponse, processInput, processOutput).pipe(res);\n\t\t} else {",
            "requestData": "\t\tconst requestData = await streamToBuffer(req);\n\t\tconst requestData = await streamToBuffer(req);\n\t\tif (requestData.length) {\n\t\t\tconnector.write(await processRequest(session, requestData));\n\t\t}\n\t\tconnector.end();\n\t} else {",
            "session": "\t\tconst session = await getSessionCached(req.body.clientPublicKey);\n\t\tconst session = await getSessionCached(req.body.clientPublicKey);\n\n\t\tres.cookie('ecdhSession', req.body.clientPublicKey);\n\t\tres.send({\n\t\t\tsuccess: true,\n\t\t\tpublicKeyString: session.publicKeyString,\n\t\t});\n\t} catch (e) {",
            "result": "\t\tconst result = await session.decrypt(req.body.text);\n\t\tconst result = await session.decrypt(req.body.text);\n\t\tres.send(await session.encrypt(result));\n\t} catch (e) {",
            "wss": "const wss = new WebSocket.Server({ server: httpServer });\nconst wss = new WebSocket.Server({ server: httpServer });",
            "decrypted": "\t\tconst decrypted = JSON.stringify([await session.decrypt(data.replace('[\"', '').replace('\"]', ''))]);\n\t\tconst decrypted = JSON.stringify([await session.decrypt(data.replace('[\"', '').replace('\"]', ''))]);\n\t\tproxy.send(decrypted);\n\t});\n\n\tproxy.on('message', async (data: string) => {\n\t\tws.send(await session.encrypt(data.toString()));\n\t});\n\n\tproxy.on('error', (error) => {\n\t\tconsole.error(error);\n\t});\n\n\tws.on('error', (error) => {\n\t\tconsole.error(error);\n\t});\n\n\tws.on('close', (code, reason) => {\n\t\ttry {\n\t\t\tproxy.close(code, reason);\n\t\t} catch (e) {"
        },
        "depth_rank": 8
    },
    {
        "file": "LivechatPriority.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatPriority.ts",
        "code": {
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };"
        },
        "depth_rank": 7
    },
    {
        "file": "CannedResponse.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/CannedResponse.ts",
        "code": {
            "_id": "\t\tconst record = {\n\t\tconst record = {\n\t\t\tshortcut,\n\t\t\ttext,\n\t\t\tscope,\n\t\t\ttags,\n\t\t\tuserId,\n\t\t\tdepartmentId,\n\t\t\tcreatedBy,\n\t\t\t_createdAt,\n\t\t};\n\n\t\tconst _id = (await this.insertOne(record)).insertedId;\n\t\tconst _id = (await this.insertOne(record)).insertedId;\n\t\treturn Object.assign(record, { _id });",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatTag.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatTag.ts",
        "code": {
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatRooms.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatRooms.ts",
        "code": {
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tt: 'l' as const,\n\t\t\tt: 'l' as const,\n\t\t\topen: true,\n\t\t\tslaId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;",
            "result": "\t\tconst result = await this.updateMany(query, update);\n\t\tconst result = await this.updateMany(query, update);\n\t\tqueriesLogger.debug({ msg: `LivechatRoomsRawEE.removeUnitAssociationFromRooms`, result });"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatDepartment.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatDepartment.ts",
        "code": {
            "unit": "\t\tconst unit = await LivechatUnit.findOneById(businessUnit, { projection: { _id: 1 } });\n\t\tconst unit = await LivechatUnit.findOneById(businessUnit, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatUnit.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatUnit.ts",
        "code": {
            "savedMonitors": "\t\tconst savedMonitors = (await LivechatUnitMonitors.findByUnitId(_id).toArray()).map(({ monitorId }) => monitorId);\n\t\tconst savedMonitors = (await LivechatUnitMonitors.findByUnitId(_id).toArray()).map(({ monitorId }) => monitorId);",
            "monitorsToSave": "\t\tconst monitorsToSave = monitors.map(({ monitorId }) => monitorId);\n\t\tconst monitorsToSave = monitors.map(({ monitorId }) => monitorId);",
            "savedDepartments": "\t\tfor await (const monitor of monitors) {\n\t\tfor await (const monitor of monitors) {\n\t\t\tawait LivechatUnitMonitors.saveMonitor({\n\t\t\t\tmonitorId: monitor.monitorId,\n\t\t\t\tunitId: _id,\n\t\t\t\tusername: monitor.username,\n\t\t\t});\n\t\t}\n\n\t\tconst savedDepartments = (await LivechatDepartment.find({ parentId: _id }).toArray()).map(({ _id }) => _id);\n\t\tconst savedDepartments = (await LivechatDepartment.find({ parentId: _id }).toArray()).map(({ _id }) => _id);",
            "departmentsToSave": "\t\tconst departmentsToSave = departments.map(({ departmentId }) => departmentId);\n\t\tconst departmentsToSave = departments.map(({ departmentId }) => departmentId);",
            "await": "\t\tfor await (const departmentId of departmentsToSave) {\n\t\tfor await (const departmentId of departmentsToSave) {\n\t\t\tawait LivechatDepartment.update(\n\t\t\t\t{ _id: departmentId },",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "monitoredUnits": "\t\tconst monitoredUnits = await LivechatUnitMonitors.findByMonitorId(monitorId).toArray();\n\t\tconst monitoredUnits = await LivechatUnitMonitors.findByMonitorId(monitorId).toArray();\n\t\tif (monitoredUnits.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn monitoredUnits.map((u) => u.unitId);\n\t}\n\n\tasync findMonitoredDepartmentsByMonitorId(monitorId: string): Promise<ILivechatDepartment[]> {\n\t\tconst monitoredUnits = await this.findByMonitorId(monitorId);\n\t\tconst monitoredUnits = await this.findByMonitorId(monitorId);\n\t\treturn LivechatDepartment.findActiveByUnitIds(monitoredUnits, {}).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "videoConference.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/configuration/videoConference.ts",
        "code": {
            "room": "\t\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'uids'>>(_id, { projection: { uids: 1 } });\n\t\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'uids'>>(_id, { projection: { uids: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "ldap.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/configuration/ldap.ts",
        "code": {
            "addLogoutCronJob": "\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AvatarSync',\n\t\t\t'LDAP_Background_Sync_Avatars',\n\t\t\t'LDAP_Background_Sync_Avatars_Interval',\n\t\t\t() => LDAPEE.syncAvatars(),\n\t\t);\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AutoLogout',\n\t\t\t'LDAP_Sync_AutoLogout_Enabled',\n\t\t\t'LDAP_Sync_AutoLogout_Interval',\n\t\t\t() => LDAPEE.syncLogout(),\n\t\t);\n\n\t\tsettings.watchMultiple(['LDAP_Background_Sync', 'LDAP_Background_Sync_Interval'], addCronJob);\n\t\tsettings.watchMultiple(['LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval'], addAvatarCronJob);\n\t\tsettings.watchMultiple(['LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval'], addLogoutCronJob);\n\n\t\tsettings.watch('LDAP_Enable', async () => {\n\t\t\tawait addCronJob();\n\t\t\tawait addAvatarCronJob();\n\t\t\tawait addLogoutCronJob();\n\t\t});\n\n\t\tsettings.watch<string>('LDAP_Groups_To_Rocket_Chat_Teams', (value) => {\n\t\t\ttry {\n\t\t\t\tLDAPEEManager.validateLDAPTeamsMappingChanges(value);\n\t\t\t} catch (error) {"
        },
        "depth_rank": 6
    },
    {
        "file": "oauth.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/configuration/oauth.ts",
        "code": {
            "getChannelsMap": "function getChannelsMap(channelsMap: string): Record<string, any> | undefined {\nfunction getChannelsMap(channelsMap: string): Record<string, any> | undefined {\n\tchannelsMap = (channelsMap || '{}').trim();"
        },
        "depth_rank": 6
    },
    {
        "file": "saml.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/configuration/saml.ts",
        "code": {
            "userDataCustomFieldMap": "\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\t\tconst customFieldsList: Record<string, any> = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "ldap.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/settings/ldap.ts",
        "code": {
            "enableQuery": "\treturn settingsRegistry.addGroup('LDAP', async function () {\n\treturn settingsRegistry.addGroup('LDAP', async function () {\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };",
            "backgroundSyncQuery": "\t\t\tasync function () {\n\t\t\tasync function () {\n\t\t\t\tawait this.section('LDAP_DataSync_BackgroundSync', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_BackgroundSync', async function () {\n\t\t\t\t\tawait this.add('LDAP_Background_Sync', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst backgroundSyncQuery = [enableQuery, { _id: 'LDAP_Background_Sync', value: true }];\n\t\t\t\t\tconst backgroundSyncQuery = [enableQuery, { _id: 'LDAP_Background_Sync', value: true }];",
            "syncRolesQuery": "\t\t\t\tawait this.section('LDAP_DataSync_Roles', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_Roles', async function () {\n\t\t\t\t\tawait this.add('LDAP_Sync_User_Data_Roles', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst syncRolesQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Roles', value: true }];\n\t\t\t\t\tconst syncRolesQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Roles', value: true }];",
            "syncChannelsQuery": "\t\t\t\tawait this.section('LDAP_DataSync_Channels', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_Channels', async function () {\n\t\t\t\t\tawait this.add('LDAP_Sync_User_Data_Channels', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst syncChannelsQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Channels', value: true }];\n\t\t\t\t\tconst syncChannelsQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Channels', value: true }];",
            "enableQueryTeams": "\t\t\t\t\tconst enableQueryTeams = { _id: 'LDAP_Enable_LDAP_Groups_To_RC_Teams', value: true };\n\t\t\t\t\tconst enableQueryTeams = { _id: 'LDAP_Enable_LDAP_Groups_To_RC_Teams', value: true };"
        },
        "depth_rank": 6
    },
    {
        "file": "deviceManagement.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/server/settings/deviceManagement.ts",
        "code": {
            "function": "\t\t\tasync function () {\n\t\t\tasync function () {\n\t\t\t\tawait this.add('Device_Management_Enable_Login_Emails', true, {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tpublic: true,\n\t\t\t\t\tinvalidValue: true,\n\t\t\t\t});\n\n\t\t\t\tawait this.add('Device_Management_Allow_Login_Email_preference', true, {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tpublic: true,\n\t\t\t\t\tinvalidValue: true,\n\t\t\t\t\tenableQuery: { _id: 'Device_Management_Enable_Login_Emails', value: true },"
        },
        "depth_rank": 6
    },
    {
        "file": "UserService.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/UserService.spec.ts",
        "code": {
            "result": "\t\t\tconst result = await service.getSearchedServerNamesByInternalUserId({} as any);\n\t\t\tconst result = await service.getSearchedServerNamesByInternalUserId({} as any);"
        },
        "depth_rank": 10
    },
    {
        "file": "DirectMessageRoomServiceSender.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/room/sender/DirectMessageRoomServiceSender.spec.ts",
        "code": {
            "bridge": "\tconst roomAdapter = {\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByInternalId: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tgetFederatedUserByInternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tgetInternalUserById: sinon.stub(),\n\t\tgetFederatedUserByInternalUsername: sinon.stub(),\n\t\tcreateLocalUser: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t};\n\tconst bridge = {\n\tconst bridge = {\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),",
            "invitees": "\tconst invitees = [\n\tconst invitees = [\n\t\t{\n\t\t\tinviteeUsernameOnly: 'marcos.defendi',\n\t\t\tnormalizedInviteeId: 'marcos.defendi:matrix.com',\n\t\t\trawInviteeId: '@marcos.defendi:matrix.com',\n\t\t},\n\t];\n\n\tbeforeEach(() => {\n\t\tservice = new FederationDirectMessageRoomServiceSender(\n\t\t\troomAdapter as any,\n\t\t\tuserAdapter as any,\n\t\t\t{} as any,",
            "room": "\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: true,\n\t\t});\n\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\n\t\tit('should NOT create the inviter user both externally and internally if it already exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(bridge.createUser.called).to.be.false;\n\t\t});\n\n\t\tit('should create the inviter user both externally and internally if it does not exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.onCall(0).resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByInternalId.onCall(1).resolves(user);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "inviter": "\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'name',\n\t\t\t\tusername: 'username',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\texpect(bridge.createUser.calledWith('username', 'name', 'localDomain')).to.be.true;\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the inviter does not exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(undefined);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "invitee": "\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].inviteeUsernameOnly,\n\t\t\t\tusername: invitees[0].inviteeUsernameOnly,\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should create the invitee user if it does not exists and it is NOT from the same home server', async () => {\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.onCall(0).resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].normalizedInviteeId,\n\t\t\t\tusername: invitees[0].normalizedInviteeId,\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should NOT create the invitee user if it already exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\n\t\tit('should NOT create the user on the proxy homeserver if it is NOT from the same homeserver, which means is a external user', async () => {\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(bridge.createUser.called).to.be.false;\n\t\t});\n\n\t\tit('should throw an error if the invitee is from the same home server but the federated user does not exists and also there is at least one external user', async () => {\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('matrix.com');\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(undefined);\n\n\t\t\tawait expect(\n\t\t\t\tservice.onDirectMessageRoomCreation({ invitees, internalInviterId: 'internalInviterId', internalRoomId: 'internalRoomId' } as any),"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomServiceSender.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/room/sender/RoomServiceSender.spec.ts",
        "code": {
            "messageAdapter": "\tconst roomAdapter = {\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByInternalId: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t\tgetInternalRoomById: sinon.stub(),\n\t\tgetInternalRoomRolesByUserId: sinon.stub(),\n\t\tisUserAlreadyJoined: sinon.stub(),\n\t\tgetFederatedRoomByExternalId: sinon.stub(),\n\t\tcreateFederatedRoom: sinon.stub(),\n\t\taddUserToRoom: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tgetFederatedUserByInternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tgetInternalUserById: sinon.stub(),\n\t\tgetFederatedUserByInternalUsername: sinon.stub(),\n\t\tcreateLocalUser: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t\tupdateFederationAvatar: sinon.stub(),\n\t\tsetAvatar: sinon.stub(),\n\t\tupdateRealName: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t\tisFederationEnabled: sinon.stub(),\n\t\tgetMaximumSizeOfUsersWhenJoiningPublicRooms: sinon.stub(),\n\t};\n\tconst messageAdapter = {};\n\tconst messageAdapter = {};",
            "bridge": "\tconst bridge = {\n\tconst bridge = {\n\t\tsearchPublicRooms: sinon.stub(),\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),",
            "room": "\t\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\n\t\t\tit('should throw an error if the federation is disabled', async () => {\n\t\t\t\tsettingsAdapter.isFederationEnabled.returns(false);\n\t\t\t\tawait expect(service.joinExternalPublicRoom({} as any)).to.be.rejectedWith('Federation is disabled');",
            "inviter": "\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'name',\n\t\t\t\tusername: 'username',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\texpect(bridge.createUser.calledWith('username', 'name', 'localDomain')).to.be.true;\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the inviter user was not found', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(undefined);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "invitee": "\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].normalizedInviteeId,\n\t\t\t\tusername: invitees[0].normalizedInviteeId,\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the invitee user was not found', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\n\t\t\tawait expect(service.onUsersAddedToARoom({ invitees, internalInviterId: 'internalInviterId' } as any)).to.be.rejectedWith(",
            "createUsersLocallyOnlySpy": "\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves({ getInternalId: () => 'differentId' });",
            "displayNameSpy": "\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(federatedUser);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\troomAdapter.getInternalRoomRolesByUserId.resolves([]);\n\n\t\t\tawait service.beforeAddUserToARoom({\n\t\t\t\t...validParams,\n\t\t\t\tinternalInviter: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t});\n\n\t\t\texpect(createUsersLocallyOnlySpy.calledWith(validParams.invitees)).to.be.true;\n\t\t});\n\n\t\tit('should create the invitee locally for each external user', async () => {\n\t\t\tconst avatarSpy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\tconst avatarSpy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\tconst displayNameSpy = sinon.spy(service, 'updateUserDisplayNameInternally');\n\t\t\tconst displayNameSpy = sinon.spy(service, 'updateUserDisplayNameInternally');\n\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: 'avatarUrl', displayName: 'displayName' });",
            "existsOnlyOnProxyServer": "\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\tFederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tname: 'displayName',\n\t\t\t\t}),\n\t\t\t);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: '', displayName: 'displayName' });",
            "userAvatar": "\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst userAvatar = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\tconst userAvatar = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\tfederation: {\n\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t},\n\t\t\t\t_id: 'userId',\n\t\t\t});\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: 'avatarUrl', displayName: 'displayName' });",
            "user": "\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst user = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\tconst user = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t_id: 'userId',\n\t\t\t\tname: 'currentName',\n\t\t\t});\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: '', displayName: 'displayName' });",
            "result": "\t\t\tconst result = await service.searchPublicRooms({ pageToken: 'pageToken' } as any);\n\t\t\tconst result = await service.searchPublicRooms({ pageToken: 'pageToken' } as any);",
            "spy": "\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserIncludingHomeserverUsingLocalInformation');\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserIncludingHomeserverUsingLocalInformation');\n\t\t\t\tsinon.stub(service, 'isRoomSizeAllowed').returns(true);\n\n\t\t\t\tawait service.joinExternalPublicRoom({ internalUserId: 'internalUserId' } as any);"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomSender.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/converters/RoomSender.spec.ts",
        "code": {
            "result": "\t\t\tconst result = FederationRoomSenderConverterEE.toCreateDirectMessageDto('inviterId', [\n\t\t\tconst result = FederationRoomSenderConverterEE.toCreateDirectMessageDto('inviterId', [\n\t\t\t\tinviteeId,\n\t\t\t\t{ _id: 'inviterId', username: 'username' } as any,"
        },
        "depth_rank": 12
    },
    {
        "file": "hooks.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/hooks/hooks.spec.ts",
        "code": {
            "get": "const remove = sinon.stub();\nconst remove = sinon.stub();\nconst get = sinon.stub();\nconst get = sinon.stub();\nconst hooks: Record<string, any> = {};\nconst hooks: Record<string, any> = {};"
        },
        "depth_rank": 12
    },
    {
        "file": "actions.spec.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/slash-commands/actions.spec.ts",
        "code": {
            "call": "\t\tit('should call the command function without any error', async () => {\n\t\tit('should call the command function without any error', async () => {\n\t\t\tawait executeSlashCommand('federation', 'dm @external:server.com', { rid: 'roomId' }, validCommands, currentUserId);"
        },
        "depth_rank": 12
    },
    {
        "file": "tags.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/api-enterprise/server/lib/tags.ts",
        "code": {
            "found": "const filterTags = (tags: string[], serverTags: ILivechatTag[]) => {\nconst filterTags = (tags: string[], serverTags: ILivechatTag[]) => {\n\treturn tags.reduce((acc, tag) => {\n\t\tconst found = serverTags.find((serverTag) => serverTag._id === tag);\n\t\tconst found = serverTags.find((serverTag) => serverTag._id === tag);\n\t\tif (found) {\n\t\t\tacc.push(found.name);\n\t\t} else {",
            "serverTags": "\t\t\tconst serverTags = await LivechatTag.findInIds(tags, { projection: { _id: 1, name: 1 } }).toArray();\n\t\t\tconst serverTags = await LivechatTag.findInIds(tags, { projection: { _id: 1, name: 1 } }).toArray();"
        },
        "depth_rank": 8
    },
    {
        "file": "messageTypes.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/client/messageTypes.ts",
        "code": {
            "to": "\t\tconst from = message.transferData.prevDepartment;\n\t\tconst from = message.transferData.prevDepartment;\n\t\tconst to = message.transferData.department.name;\n\t\tconst to = message.transferData.department.name;\n\n\t\treturn {\n\t\t\tfallback: t('Livechat_transfer_failed_fallback', { from, to }),"
        },
        "depth_rank": 7
    },
    {
        "file": "PlaceChatOnHoldModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/client/components/modals/PlaceChatOnHoldModal.tsx",
        "code": {
            "t": "const PlaceChatOnHoldModal: FC<PlaceChatOnHoldModalProps> = ({ onCancel, onOnHoldChat, confirm = onOnHoldChat, ...props }) => {\nconst PlaceChatOnHoldModal: FC<PlaceChatOnHoldModalProps> = ({ onCancel, onOnHoldChat, confirm = onOnHoldChat, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "permissions.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/permissions.ts",
        "code": {
            "monitorRole": "\tconst monitorRole = await Roles.findOneById(livechatMonitorRole, { projection: { _id: 1 } });\n\tconst monitorRole = await Roles.findOneById(livechatMonitorRole, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "priorities.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/priorities.ts",
        "code": {
            "priorities": "\tconst priorities = await LivechatPriority.col.countDocuments({});\n\tconst priorities = await LivechatPriority.col.countDocuments({});"
        },
        "depth_rank": 7
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/settings.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };",
            "businessHoursEnabled": "const businessHoursEnabled = { _id: 'Livechat_enable_business_hours', value: true };\nconst businessHoursEnabled = { _id: 'Livechat_enable_business_hours', value: true };"
        },
        "depth_rank": 7
    },
    {
        "file": "units.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/units.ts",
        "code": {
            "params": "\t\t\tconst params = this.queryParams;\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "unit": "\t\t\tconst unit = await findUnitById({\n\t\t\tconst unit = await findUnitById({\n\t\t\t\tunitId: id,\n\t\t\t});\n\n\t\t\treturn API.v1.success(unit);\n\t\t},\n\t\tasync post() {\n\t\t\tconst { unitData, unitMonitors, unitDepartments } = this.bodyParams;\n\t\t\tconst { unitData, unitMonitors, unitDepartments } = this.bodyParams;"
        },
        "depth_rank": 8
    },
    {
        "file": "sla.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/sla.ts",
        "code": {
            "newSla": "\t\t\tconst newSla = await LivechatEnterprise.saveSLA(null, {\n\t\t\tconst newSla = await LivechatEnterprise.saveSLA(null, {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdueTimeInMinutes,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ sla: newSla });",
            "updatedSla": "\t\t\tconst updatedSla = await LivechatEnterprise.saveSLA(slaId, {\n\t\t\tconst updatedSla = await LivechatEnterprise.saveSLA(slaId, {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdueTimeInMinutes,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ sla: updatedSla });"
        },
        "depth_rank": 8
    },
    {
        "file": "departments.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/departments.ts",
        "code": {
            "endDate": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst { departments, total } = await findPercentageOfAbandonedRoomsAsync({\n\t\t\tconst { departments, total } = await findPercentageOfAbandonedRoomsAsync({\n\t\t\t\tstart: startDate,\n\t\t\t\tend: endDate,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },"
        },
        "depth_rank": 8
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/rooms.ts",
        "code": {
            "room": "\t\t\tconst room = await LivechatRooms.findOneById<Room>(roomId, {\n\t\t\tconst room = await LivechatRooms.findOneById<Room>(roomId, {\n\t\t\t\tprojection: { t: 1, open: 1, onHold: 1, servedBy: 1 },",
            "subscription": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId, { projection: { _id: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId, { projection: { _id: 1 } });",
            "onHoldBy": "\t\t\tconst onHoldBy = { _id: userId, username, name };\n\t\t\tconst onHoldBy = { _id: userId, username, name };"
        },
        "depth_rank": 8
    },
    {
        "file": "agents.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/agents.ts",
        "code": {
            "endDate": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst { agents, total } = await findAvailableServiceTimeHistoryAsync({\n\t\t\tconst { agents, total } = await findAvailableServiceTimeHistoryAsync({\n\t\t\t\tstart: startDate,\n\t\t\t\tend: endDate,\n\t\t\t\tfullReport: fullReport && fullReport === 'true',\n\t\t\t\toptions: { offset, count },"
        },
        "depth_rank": 8
    },
    {
        "file": "priorities.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/priorities.ts",
        "code": {
            "priority": "\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });\n\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });",
            "room": "\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });\n\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });",
            "addPriorityChangeHistoryToRoom": "const addPriorityChangeHistoryToRoom = async (\nconst addPriorityChangeHistoryToRoom = async (\n\troomId: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriority?: Pick<ILivechatPriority, 'name' | 'i18n'>,\n) => {\n\tawait Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n\t\tpriorityData: {\n\t\t\tdefinedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\t...(priority && { priority }),"
        },
        "depth_rank": 9
    },
    {
        "file": "inquiries.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/inquiries.ts",
        "code": {
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { status: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { status: 1 } });",
            "user": "\tconst user = await Users.findOneById(userId, { projection: { _id: 1, username: 1, name: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { _id: 1, username: 1, name: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "monitors.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/monitors.ts",
        "code": {
            "query": "\tconst query = {};\n\tconst query = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "onCloseLivechat.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onCloseLivechat.ts",
        "code": {
            "onCloseLivechat": "const onCloseLivechat = async (params: LivechatCloseCallbackParams) => {\nconst onCloseLivechat = async (params: LivechatCloseCallbackParams) => {\n\tconst {\n\tconst {\n\t\troom,\n\t\troom: { _id: roomId },"
        },
        "depth_rank": 8
    },
    {
        "file": "addDepartmentAncestors.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/addDepartmentAncestors.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById(room.departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById(room.departmentId, {\n\t\t\tprojection: { ancestors: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "onLoadForwardDepartmentRestrictions.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onLoadForwardDepartmentRestrictions.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById(departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById(departmentId, {\n\t\t\tprojection: { departmentsAllowedToForward: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "afterForwardChatToDepartment.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/afterForwardChatToDepartment.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById(newDepartmentId, {\n\t\tconst department = await LivechatDepartment.findOneById(newDepartmentId, {\n\t\t\tprojection: { ancestors: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "sendPdfTranscriptOnClose.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/sendPdfTranscriptOnClose.ts",
        "code": {
            "sendPdfTranscriptOnClose": "const sendPdfTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst sendPdfTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\tconst { room, options } = params;"
        },
        "depth_rank": 8
    },
    {
        "file": "beforeNewInquiry.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/beforeNewInquiry.ts",
        "code": {
            "beforeNewInquiry": "const beforeNewInquiry = async (extraData: Props) => {\nconst beforeNewInquiry = async (extraData: Props) => {\n\tconst { sla: slaSearchTerm, priority: prioritySearchTerm, ...props } = extraData;\n\tconst { sla: slaSearchTerm, priority: prioritySearchTerm, ...props } = extraData;",
            "ts": "\t\t\t\tfunction: 'livechat.beforeInquiry',\n\t\t\t\tfunction: 'livechat.beforeInquiry',\n\t\t\t});\n\t\t}\n\t}\n\n\tconst ts = new Date();\n\tconst ts = new Date();\n\tconst changes: Partial<ILivechatInquiryRecord> = {\n\tconst changes: Partial<ILivechatInquiryRecord> = {\n\t\tts,\n\t};\n\tif (sla) {\n\t\tchanges.slaId = sla._id;\n\t\tchanges.estimatedWaitingTimeQueue = sla.dueTimeInMinutes;\n\t}\n\tif (priority) {\n\t\tchanges.priorityId = priority._id;\n\t\tchanges.priorityWeight = priority.sortItem;\n\t}\n\tcbLogger.debug('Callback success. Queue timing properties added to inquiry', changes);\n\treturn { ...props, ...changes };"
        },
        "depth_rank": 8
    },
    {
        "file": "onLoadConfigApi.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onLoadConfigApi.ts",
        "code": {
            "customFields": "\t\tconst queueInfo = await getLivechatQueueInfo(room);\n\t\tconst queueInfo = await getLivechatQueueInfo(room);\n\t\tconst customFields = await getLivechatCustomFields();\n\t\tconst customFields = await getLivechatCustomFields();\n\n\t\treturn {\n\t\t\t...(queueInfo && { queueInfo }),"
        },
        "depth_rank": 8
    },
    {
        "file": "afterOnHold.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/afterOnHold.ts",
        "code": {
            "handleAfterOnHold": "const handleAfterOnHold = async (room: Pick<IOmnichannelRoom, '_id'>): Promise<any> => {\nconst handleAfterOnHold = async (room: Pick<IOmnichannelRoom, '_id'>): Promise<any> => {\n\tconst { _id: rid } = room;\n\tconst { _id: rid } = room;"
        },
        "depth_rank": 8
    },
    {
        "file": "scheduleAutoTransfer.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/scheduleAutoTransfer.ts",
        "code": {
            "handleAfterTakeInquiryCallback": "const handleAfterTakeInquiryCallback = async (inquiry: any = {}): Promise<any> => {\nconst handleAfterTakeInquiryCallback = async (inquiry: any = {}): Promise<any> => {\n\tconst { rid } = inquiry;\n\tconst { rid } = inquiry;",
            "room": "\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, autoTransferredAt: 1, autoTransferOngoing: 1 } });\n\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, autoTransferredAt: 1, autoTransferOngoing: 1 } });",
            "handleAfterCloseRoom": "const handleAfterCloseRoom = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst handleAfterCloseRoom = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room } = params;\n\tconst { room } = params;"
        },
        "depth_rank": 8
    },
    {
        "file": "checkAgentBeforeTakeInquiry.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/checkAgentBeforeTakeInquiry.ts",
        "code": {
            "validateMaxChats": "const validateMaxChats = async ({\nconst validateMaxChats = async ({\n\tagent,\n\tinquiry,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "onAgentAssignmentFailed.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onAgentAssignmentFailed.ts",
        "code": {
            "handleOnAgentAssignmentFailed": "const handleOnAgentAssignmentFailed = async ({\nconst handleOnAgentAssignmentFailed = async ({\n\tinquiry,\n\troom,\n\toptions,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "applyRoomRestrictions.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/applyRoomRestrictions.ts",
        "code": {
            "query": "\tconst query = { ...originalQuery };\n\tconst query = { ...originalQuery };"
        },
        "depth_rank": 8
    },
    {
        "file": "handleNextAgentPreferredEvents.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/handleNextAgentPreferredEvents.ts",
        "code": {
            "guest": "\t\tconst guest = await LivechatVisitors.findOneById(guestId, {\n\t\tconst guest = await LivechatVisitors.findOneById(guestId, {\n\t\t\tprojection: { lastAgent: 1, token: 1, contactManager: 1 },",
            "room": "\t\tconst guestAgent = lastAgent?.username && getDefaultAgent(lastAgent?.username);\n\t\tconst guestAgent = lastAgent?.username && getDefaultAgent(lastAgent?.username);\n\t\tif (guestAgent) {\n\t\t\treturn guestAgent;\n\t\t}\n\n\t\tconst room = await LivechatRooms.findOneLastServedAndClosedByVisitorToken(token, {\n\t\tconst room = await LivechatRooms.findOneLastServedAndClosedByVisitorToken(token, {\n\t\t\tprojection: { servedBy: 1 },",
            "lastRoomAgent": "\t\tconst lastRoomAgent = normalizeDefaultAgent(\n\t\tconst lastRoomAgent = normalizeDefaultAgent(\n\t\t\tawait Users.findOneOnlineAgentByUserList(usernameByRoom, { projection: { _id: 1, username: 1 } }),"
        },
        "depth_rank": 8
    },
    {
        "file": "onTransferFailure.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onTransferFailure.ts",
        "code": {
            "onTransferFailure": "const onTransferFailure = async ({\nconst onTransferFailure = async ({\n\troom,\n\tguest,\n\ttransferData,\n}: {",
            "department": "\tconst department = (await LivechatDepartment.findOneById(departmentId, {\n\tconst department = (await LivechatDepartment.findOneById(departmentId, {\n\t\tprojection: { _id: 1, name: 1, fallbackForwardDepartment: 1 },",
            "transferDataFallback": "\tconst transferDataFallback = {\n\tconst transferDataFallback = {\n\t\t...transferData,\n\t\tprevDepartment: department.name,\n\t\tdepartmentId: department.fallbackForwardDepartment,\n\t\tdepartment: await LivechatDepartment.findOneById(department.fallbackForwardDepartment, {\n\t\t\tfields: { name: 1, _id: 1 },",
            "forwardSuccess": "\tconst forwardSuccess = await forwardRoomToDepartment(room, guest, transferDataFallback);\n\tconst forwardSuccess = await forwardRoomToDepartment(room, guest, transferDataFallback);\n\tif (forwardSuccess) {\n\t\tconst { _id, username } = transferData.transferredBy;\n\t\tconst { _id, username } = transferData.transferredBy;"
        },
        "depth_rank": 8
    },
    {
        "file": "resumeOnHold.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts",
        "code": {
            "resumeOnHoldCommentAndUser": "const resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\nconst resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\n\tconst {\n\tconst {\n\t\tv: { _id: visitorId },",
            "visitor": "\tconst visitor = await LivechatVisitors.findOneById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\tconst visitor = await LivechatVisitors.findOneById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },",
            "resumeChatComment": "\tconst guest = visitor.name || visitor.username;\n\tconst guest = visitor.name || visitor.username;\n\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });"
        },
        "depth_rank": 8
    },
    {
        "file": "QueueInactivityMonitor.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/QueueInactivityMonitor.ts",
        "code": {
            "language": "\t\tconst language = settings.get<string>('Language') || 'en';\n\t\tconst language = settings.get<string>('Language') || 'en';\n\t\tthis.message = i18n.t('Closed_automatically_chat_queued_too_long', { lng: language });",
            "job": "\t\tconst name = this.getName(inquiryId);\n\t\tconst name = this.getName(inquiryId);\n\t\tthis.scheduler.define(name, this.bindedCloseRoom);\n\n\t\tconst job = this.scheduler.create(name, { inquiryId });\n\t\tconst job = this.scheduler.create(name, { inquiryId });",
            "name": "\t\tconst name = this.getName(inquiryId);\n\t\tconst name = this.getName(inquiryId);\n\t\tawait this.scheduler.cancel({ name });",
            "comment": "\t\tconst comment = this.message;\n\t\tconst comment = this.message;\n\t\treturn Livechat.closeRoom({\n\t\t\tcomment,\n\t\t\troom,\n\t\t\tuser: await this.getRocketCatUser(),\n\t\t});\n\t}\n\n\tasync closeRoom({ attrs: { data } }: any = {}): Promise<void> {\n\t\tconst { inquiryId } = data;\n\t\tconst { inquiryId } = data;"
        },
        "depth_rank": 8
    },
    {
        "file": "units.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/units.ts",
        "code": {
            "memoizedHasUnits": "const memoizedHasUnits = mem(hasUnits, { maxAge: 5000 });\nconst memoizedHasUnits = mem(hasUnits, { maxAge: 5000 });"
        },
        "depth_rank": 8
    },
    {
        "file": "query.helper.js",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/query.helper.js",
        "code": {
            "query": "\tconst query = { ...originalQuery };\n\tconst query = { ...originalQuery };"
        },
        "depth_rank": 8
    },
    {
        "file": "SlaHelper.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/SlaHelper.ts",
        "code": {
            "openRooms": "\tconst openRooms = await LivechatRooms.findOpenBySlaId(slaId, { projection: { _id: 1 } }, extraQuery).toArray();\n\tconst openRooms = await LivechatRooms.findOpenBySlaId(slaId, { projection: { _id: 1 } }, extraQuery).toArray();",
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { rid: 1, ts: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { rid: 1, ts: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoTransferChatScheduler.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/AutoTransferChatScheduler.ts",
        "code": {
            "SCHEDULER_NAME": "const SCHEDULER_NAME = 'omnichannel_scheduler';\nconst SCHEDULER_NAME = 'omnichannel_scheduler';\n\nclass AutoTransferChatSchedulerClass {\n\tscheduler: Agenda;\n\n\trunning: boolean;\n\n\tuser: IUser;\n\n\tlogger: MainLogger;\n\n\tconstructor() {\n\tconstructor() {\n\t\tthis.logger = schedulerLogger.section('AutoTransferChatScheduler');\n\t}\n\n\tpublic async init(): Promise<void> {\n\t\tif (this.running) {\n\t\t\tthis.logger.debug('Already running');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: SCHEDULER_NAME },"
        },
        "depth_rank": 8
    },
    {
        "file": "LivechatEnterprise.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/LivechatEnterprise.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });",
            "unit": "\t\tconst unit = await LivechatUnit.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst unit = await LivechatUnit.findOneById(_id, { projection: { _id: 1 } });",
            "tag": "\t\tconst tag = await LivechatTag.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst tag = await LivechatTag.findOneById(_id, { projection: { _id: 1 } });",
            "oldSLA": "\t\tconst oldSLA = _id && (await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { dueTimeInMinutes: 1 } }));\n\t\tconst oldSLA = _id && (await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { dueTimeInMinutes: 1 } }));",
            "sla": "\t\tconst sla = await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst sla = await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { _id: 1 } });",
            "department": "\t\tconst department = _id ? await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1, archived: 1, enabled: 1 } }) : null;\n\t\tconst department = _id ? await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1, archived: 1, enabled: 1 } }) : null;"
        },
        "depth_rank": 8
    },
    {
        "file": "VisitorInactivityMonitor.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/VisitorInactivityMonitor.ts",
        "code": {
            "rejected": "\t\tconst rejected = result.filter(isPromiseRejectedResult).map((r) => r.reason);\n\t\tconst rejected = result.filter(isPromiseRejectedResult).map((r) => r.reason);\n\t\tif (rejected.length) {\n\t\t\tthis.logger.error({ msg: 'Error placing room on hold', error: rejected });"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoCloseOnHoldScheduler.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/AutoCloseOnHoldScheduler.ts",
        "code": {
            "SCHEDULER_NAME": "const SCHEDULER_NAME = 'omnichannel_auto_close_on_hold_scheduler';\nconst SCHEDULER_NAME = 'omnichannel_auto_close_on_hold_scheduler';\n\nclass AutoCloseOnHoldSchedulerClass {\n\tscheduler: Agenda;\n\n\tschedulerUser: IUser;\n\n\trunning: boolean;\n\n\tlogger: MainLogger;\n\n\tconstructor() {\n\tconstructor() {\n\t\tthis.logger = schedulerLogger.section('AutoCloseOnHoldScheduler');\n\t}\n\n\tpublic async init(): Promise<void> {\n\t\tif (this.running) {\n\t\t\tthis.logger.debug('Already running');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: SCHEDULER_NAME },",
            "when": "\t\tconst when = moment(new Date()).add(timeout, 's').toDate();\n\t\tconst when = moment(new Date()).add(timeout, 's').toDate();\n\n\t\tthis.scheduler.define(jobName, this.executeJob.bind(this));\n\t\tawait this.scheduler.schedule(when, jobName, { roomId, comment });"
        },
        "depth_rank": 8
    },
    {
        "file": "Helper.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/Helper.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };",
            "user": "\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};",
            "message": "const getWaitingQueueMessage = async (departmentId?: string) => {\nconst getWaitingQueueMessage = async (departmentId?: string) => {\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tif (department?.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get<string>('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department?: string) => {\nconst getQueueInfo = async (department?: string) => {\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst message = {\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },",
            "normalizeQueueInfo": "const normalizeQueueInfo = async ({\nconst normalizeQueueInfo = async ({\n\tposition,\n\tqueueInfo,\n\tdepartment,\n}: {",
            "estimatedWaitTimeSeconds": "\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };",
            "data": "\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });",
            "propagateAgentDelegated": "\tconst room = (await RoutingManager.delegateInquiry(inquiry, defaultAgent)) as IOmnichannelRoom;\n\tconst room = (await RoutingManager.delegateInquiry(inquiry, defaultAgent)) as IOmnichannelRoom;\n\n\tconst propagateAgentDelegated = async (rid: string, agentId: string) => {\n\tconst propagateAgentDelegated = async (rid: string, agentId: string) => {\n\t\tawait dispatchAgentDelegated(rid, agentId);\n\t};\n\n\tif (room?.servedBy) {\n\t\tconst {\n\t\tconst {\n\t\t\t_id: rid,\n\t\t\tservedBy: { _id: agentId },",
            "aggregatedDate": "\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tlogger.debug('QueueInactivityTimer: Disabling scheduled closing');\n\t\tawait OmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tlogger.debug('QueueInactivityTimer: Updating estimated inactivity time for queued items');\n\tawait LivechatInquiry.getQueuedInquiries({ projection: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\tvoid OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {",
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "Custom.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Custom.ts",
        "code": {
            "existingBusinessHour": "\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },",
            "businessHourToReturn": "\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };",
            "currentDepartments": "\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\tconst currentDepartments = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },",
            "businessHour": "\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});",
            "departmentIds": "\t\tconst departmentIds = (\n\t\tconst departmentIds = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },",
            "agentIds": "\t\tconst agentIds = (\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "Helper.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Helper.ts",
        "code": {
            "departmentIds": "\tconst agentIdsWithDepartmentNotConnectedToBusinessHour = await LivechatDepartmentAgents.findAllAgentsConnectedToListOfDepartments(\n\tconst agentIdsWithDepartmentNotConnectedToBusinessHour = await LivechatDepartmentAgents.findAllAgentsConnectedToListOfDepartments(\n\t\tactiveDepartmentsWithoutBusinessHour,\n\t);\n\treturn agentIdsWithDepartmentNotConnectedToBusinessHour;\n};\n\nconst getAllAgentIdsForDefaultBusinessHour = async (): Promise<string[]> => {\nconst getAllAgentIdsForDefaultBusinessHour = async (): Promise<string[]> => {\n\tconst [withoutDepartment, withDepartmentNotConnectedToBusinessHour] = await Promise.all([\n\tconst [withoutDepartment, withDepartmentNotConnectedToBusinessHour] = await Promise.all([\n\t\tgetAllAgentIdsWithoutDepartment(),\n\t\tgetAllAgentIdsWithDepartmentNotConnectedToBusinessHour(),\n\t]);\n\n\treturn [...new Set([...withoutDepartment, ...withDepartmentNotConnectedToBusinessHour])];\n};\n\nconst getAgentIdsToHandle = async (businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<string[]> => {\nconst getAgentIdsToHandle = async (businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<string[]> => {\n\tif (businessHour.type === LivechatBusinessHourTypes.DEFAULT) {\n\t\treturn getAllAgentIdsForDefaultBusinessHour();\n\t}\n\tconst departmentIds = (\n\tconst departmentIds = (\n\t\tawait LivechatDepartment.findEnabledByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { _id: 1 },",
            "activeDepartmentsWithoutBusinessHour": "const getAllAgentIdsWithDepartmentNotConnectedToBusinessHour = async (): Promise<string[]> => {\nconst getAllAgentIdsWithDepartmentNotConnectedToBusinessHour = async (): Promise<string[]> => {\n\tconst activeDepartmentsWithoutBusinessHour = (\n\tconst activeDepartmentsWithoutBusinessHour = (\n\t\tawait LivechatDepartment.findActiveDepartmentsWithoutBusinessHour({\n\t\t\tprojection: { _id: 1 },",
            "defaultBusinessHour": "\tconst defaultBusinessHour = await LivechatBusinessHours.findOneDefaultBusinessHour<Pick<ILivechatBusinessHour, '_id'>>({\n\tconst defaultBusinessHour = await LivechatBusinessHours.findOneDefaultBusinessHour<Pick<ILivechatBusinessHour, '_id'>>({\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "Multiple.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Multiple.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },",
            "dbDepartment": "\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n\t\tfor await (const bh of businessHourToOpen) {\n\t\tfor await (const bh of businessHourToOpen) {\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'onDepartmentDisabled: opening business hour',\n\t\t\t\tbusinessHourId: bh._id,\n\t\t\t});\n\t\t\tawait openBusinessHour(bh, false);\n\t\t}\n\n\t\tawait Users.updateLivechatStatusBasedOnBusinessHours();\n\n\t\tawait businessHourManager.restartCronJobsIfNecessary();\n\n\t\tbhLogger.debug({\n\t\t\tmsg: 'onDepartmentDisabled: successfully processed department disabled event',\n\t\t\tdepartmentId: department._id,\n\t\t});\n\t}\n\n\tasync onDepartmentArchived(department: Pick<ILivechatDepartment, '_id'>): Promise<void> {\n\t\tbhLogger.debug('Processing department archived event on multiple business hours', department);\n\t\tconst dbDepartment = await LivechatDepartment.findOneById(department._id, { projection: { businessHourId: 1, _id: 1 } });\n\t\tconst dbDepartment = await LivechatDepartment.findOneById(department._id, { projection: { businessHourId: 1, _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "business-hour.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/lib/business-hour.ts",
        "code": {
            "query": "\tconst query = {};\n\tconst query = {};",
            "filterReg": "\t\tconst filterReg = new RegExp(escapeRegExp(name), 'i');\n\t\tconst filterReg = new RegExp(escapeRegExp(name), 'i');\n\t\tObject.assign(query, { name: filterReg });",
            "currentDepartments": "\tconst [businessHours, total] = await Promise.all([cursor.toArray(), totalCount]);\n\tconst [businessHours, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t// add departments to businessHours\n\tconst businessHoursWithDepartments = await Promise.all(\n\tconst businessHoursWithDepartments = await Promise.all(\n\t\tbusinessHours.map(async (businessHour) => {\n\t\t\tconst currentDepartments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\tconst currentDepartments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "omnichannel.internalService.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts",
        "code": {
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});",
            "agent": "\t\t\tconst agent = {\n\t\t\tconst agent = {\n\t\t\t\tagentId: servingAgent._id,\n\t\t\t\tusername: servingAgent.username,\n\t\t\t};\n\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions: {},",
            "newInquiry": "\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiryId);\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiryId);\n\n\t\tawait queueInquiry(newInquiry);\n\n\t\tthis.logger.debug('Room queued successfully');\n\t}\n\n\tprivate async removeCurrentAgentFromRoom({\n\t\troom,\n\t\tinquiry,\n\t}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "resumeOnHold.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/methods/resumeOnHold.ts",
        "code": {
            "function": "async function resolveOnHoldCommentInfo(options: { clientAction: boolean }, room: any, onHoldChatResumedBy: any): Promise<string> {\nasync function resolveOnHoldCommentInfo(options: { clientAction: boolean }, room: any, onHoldChatResumedBy: any): Promise<string> {\n\tif (options.clientAction) {\n\t\treturn i18n.t('Omnichannel_on_hold_chat_manually', {\n\t\t\tuser: onHoldChatResumedBy.name || onHoldChatResumedBy.username,\n\t\t});\n\t}\n\tconst {\n\tconst {\n\t\tv: { _id: visitorId },",
            "visitor": "\tconst visitor = await LivechatVisitors.findOneById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\tconst visitor = await LivechatVisitors.findOneById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },",
            "guest": "\tconst guest = visitor.name || visitor.username;\n\tconst guest = visitor.name || visitor.username;\n\n\treturn i18n.t('Omnichannel_on_hold_chat_automatically', { guest });",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});"
        },
        "depth_rank": 8
    },
    {
        "file": "getUnitsFromUserRoles.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/methods/getUnitsFromUserRoles.ts",
        "code": {
            "memoizedGetUnitFromUserRoles": "const memoizedGetUnitFromUserRoles = mem(getUnitsFromUserRoles, { maxAge: 5000 });\nconst memoizedGetUnitFromUserRoles = mem(getUnitsFromUserRoles, { maxAge: 5000 });"
        },
        "depth_rank": 8
    },
    {
        "file": "voipService.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/voip-enterprise/server/services/voipService.ts",
        "code": {
            "callTotalHoldTime": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tconst callTotalHoldTime = await calculateOnHoldTimeForRoom(room, now);\n\t\tconst callTotalHoldTime = await calculateOnHoldTimeForRoom(room, now);\n\t\tcloseInfo.callTotalHoldTime = callTotalHoldTime;\n\n\t\treturn { closeInfo, closeSystemMsgData };"
        },
        "depth_rank": 8
    },
    {
        "file": "responses.js",
        "path": "../Rocket.Chat/apps/meteor/ee/app/canned-responses/client/startup/responses.js",
        "code": {
            "events": "const events = {\nconst events = {\n\tchanged: ({ type, ...response }) => {\n\t\tCannedResponse.upsert({ _id: response._id }, response);"
        },
        "depth_rank": 8
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/canned-responses/server/settings.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };"
        },
        "depth_rank": 7
    },
    {
        "file": "onMessageSentParsePlaceholder.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/canned-responses/server/hooks/onMessageSentParsePlaceholder.ts",
        "code": {
            "agent": "\tconst visitorId = room?.v?._id;\n\tconst visitorId = room?.v?._id;\n\tconst agent = (await Users.findOneById(agentId, { projection: { name: 1, _id: 1, emails: 1 } })) || {};\n\tconst agent = (await Users.findOneById(agentId, { projection: { name: 1, _id: 1, emails: 1 } })) || {};",
            "visitor": "\tconst visitor = visitorId && ((await LivechatVisitors.findOneById(visitorId, {})) || {});\n\tconst visitor = visitorId && ((await LivechatVisitors.findOneById(visitorId, {})) || {});"
        },
        "depth_rank": 8
    },
    {
        "file": "saveCannedResponse.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/canned-responses/server/methods/saveCannedResponse.ts",
        "code": {
            "duplicateShortcut": "\t\tconst duplicateShortcut = await CannedResponse.findOneByShortcut(responseData.shortcut, {\n\t\tconst duplicateShortcut = await CannedResponse.findOneByShortcut(responseData.shortcut, {\n\t\t\tprojection: { _id: 1 },",
            "data": "\t\t\tconst user = await Users.findOneById(userId);\n\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\t...responseData,\n\t\t\t\t...(responseData.scope === 'user' && { userId: user?._id }),"
        },
        "depth_rank": 8
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/license/client/index.ts",
        "code": {
            "features": "\t\tconst features = await queryClient.fetchQuery({\n\t\tconst features = await queryClient.fetchQuery({\n\t\t\tqueryKey: ['ee.features'],\n\t\t\tqueryFn: fetchFeatures,\n\t\t});\n\t\treturn features.includes(feature);\n\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "license.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/license/server/license.ts",
        "code": {
            "modules": "\t\t\tconst modules = isBundle(licenseModule) ? getBundleModules(licenseModule) : [licenseModule];\n\t\t\tconst modules = isBundle(licenseModule) ? getBundleModules(licenseModule) : [licenseModule];\n\n\t\t\tmodules.forEach((module) => {\n\t\t\t\tEnterpriseLicenses.emit('module', { module, valid: false });",
            "modulesFromBundles": "\tconst modulesFromBundles = bundles.map(getBundleModules).flat();\n\tconst modulesFromBundles = bundles.map(getBundleModules).flat();\n\n\treturn modules.concat(modulesFromBundles);\n}\n\ninterface IOverrideClassProperties {\n\t[key: string]: (...args: any[]) => any;\n}\n\ntype Class = { new (...args: any[]): any };"
        },
        "depth_rank": 7
    },
    {
        "file": "getSeatsRequestLink.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/license/server/getSeatsRequestLink.ts",
        "code": {
            "newUrl": "\tconst workspaceId = await Settings.findOneById('Cloud_Workspace_Id');\n\tconst workspaceId = await Settings.findOneById('Cloud_Workspace_Id');\n\tconst activeUsers = await Users.getActiveLocalUserCount();\n\tconst activeUsers = await Users.getActiveLocalUserCount();\n\tconst wizardSettings: WizardSettings = await Settings.findSetupWizardSettings().toArray();\n\tconst wizardSettings: WizardSettings = await Settings.findSetupWizardSettings().toArray();\n\n\tconst newUrl = new URL(url);\n\tconst newUrl = new URL(url);\n\n\tif (workspaceId?.value) {\n\t\tnewUrl.searchParams.append('workspaceId', String(workspaceId.value));\n\t}\n\n\tif (activeUsers) {\n\t\tnewUrl.searchParams.append('activeUsers', String(activeUsers));\n\t}\n\n\twizardSettings\n\t\t.filter(({ _id, value }) => ['Industry', 'Country', 'Size'].includes(_id) && value)"
        },
        "depth_rank": 7
    },
    {
        "file": "isUnderAppLimits.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/license/server/lib/isUnderAppLimits.ts",
        "code": {
            "apps": "\tconst apps = await Apps.getApps({ enabled: true });\n\tconst apps = await Apps.getApps({ enabled: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/settings/server/settings.ts",
        "code": {
            "value": "\tconst value = changeSettingValue(record);\n\tconst value = changeSettingValue(record);\n\n\treturn next({ ...record, value });"
        },
        "depth_rank": 7
    },
    {
        "file": "EESpotlight.js",
        "path": "../Rocket.Chat/apps/meteor/ee/app/teams-mention/server/EESpotlight.js",
        "code": {
            "teamOptions": "\t\tconst teamOptions = { ...options, projection: { name: 1, type: 1 } };\n\t\tconst teamOptions = { ...options, projection: { name: 1, type: 1 } };"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "../Rocket.Chat/apps/meteor/ee/app/teams-mention/server/index.ts",
        "code": {
            "teamIds": "\t\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);\n\t\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);"
        },
        "depth_rank": 7
    },
    {
        "file": "EEMentionQueries.js",
        "path": "../Rocket.Chat/apps/meteor/ee/app/teams-mention/server/EEMentionQueries.js",
        "code": {
            "teams": "\t\tconst uniqueUsernames = [...new Set(usernames)];\n\t\tconst uniqueUsernames = [...new Set(usernames)];\n\t\tconst teams = await Team.listByNames(uniqueUsernames, { projection: { name: 1 } });\n\t\tconst teams = await Team.listByNames(uniqueUsernames, { projection: { name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "useUserData.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useUserData.ts",
        "code": {
            "userPresence": "\tconst userPresence = useContext(UserPresenceContext);\n\tconst userPresence = useContext(UserPresenceContext);\n\n\tconst { subscribe, get } = useMemo(\n\tconst { subscribe, get } = useMemo("
        },
        "depth_rank": 5
    },
    {
        "file": "useAnalyticsEventTracking.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useAnalyticsEventTracking.ts",
        "code": {
            "trackEvent": "function trackEvent(category: string, action: string, label?: unknown) {\nfunction trackEvent(category: string, action: string, label?: unknown) {\n\tconst { _paq, ga } = window;\n\tconst { _paq, ga } = window;",
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tuseEffect(\n\t\t() =>\n\t\t\trouter.subscribeToRouteChange(() => {\n\t\t\t\tconst { _paq, ga } = window;\n\t\t\t\tconst { _paq, ga } = window;"
        },
        "depth_rank": 5
    },
    {
        "file": "useForm.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useForm.ts",
        "code": {
            "valueChanged": "const valueChanged =\nconst valueChanged =\n\t<Values extends Record<string, unknown>>(fieldName: string, newValue: unknown): FormAction<Values> =>\n\t(state: FormState<Values>): FormState<Values> => {\n\t\tlet { fields } = state;",
            "field": "\t\tconst field = fields.find(({ name }) => name === fieldName);\n\t\tconst field = fields.find(({ name }) => name === fieldName);",
            "formReset": "const formCommitted =\nconst formCommitted =\n\t<Values extends Record<string, unknown>>(): FormAction<Values> =>\n\t(state: FormState<Values>): FormState<Values> => ({\n\t\t...state,\n\t\tfields: state.fields.map((field) => ({\n\t\t\t...field,\n\t\t\tinitialValue: field.currentValue,\n\t\t\tchanged: false,\n\t\t})),\n\t\thasUnsavedChanges: false,\n\t});\n\nconst formReset =\nconst formReset =\n\t<Values extends Record<string, unknown>>(): FormAction<Values> =>\n\t(state: FormState<Values>): FormState<Values> => ({\n\t\t...state,\n\t\tfields: state.fields.map((field) => ({\n\t\t\t...field,\n\t\t\tcurrentValue: field.initialValue,\n\t\t\tchanged: false,\n\t\t})),\n\t\tvalues: state.fields.reduce(\n\t\t\t(values, field) => ({\n\t\t\t\t...values,\n\t\t\t\t[field.name]: field.initialValue,\n\t\t\t}),\n\t\t\t{} as Values,",
            "newValue": "\t\t\t\t\t\tconst newValue = getValue(eventOrValue);\n\t\t\t\t\t\tconst newValue = getValue(eventOrValue);\n\t\t\t\t\t\tdispatch(valueChanged(name, newValue));\n\t\t\t\t\t\tonChange({\n\t\t\t\t\t\t\tinitialValue,\n\t\t\t\t\t\t\tvalue: newValue,\n\t\t\t\t\t\t\tkey: name,\n\t\t\t\t\t\t\tvalues: state.values,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\t{},"
        },
        "depth_rank": 5
    },
    {
        "file": "useUserCustomFields.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useUserCustomFields.ts",
        "code": {
            "customFieldsToShowSetting": "\tconst customFieldsToShowSetting = useSetting('Accounts_CustomFieldsToShowInUserInfo');\n\tconst customFieldsToShowSetting = useSetting('Accounts_CustomFieldsToShowInUserInfo');\n\n\tlet customFieldsToShowObj: CustomField[] | undefined;\n\ttry {\n\t\tcustomFieldsToShowObj = JSON.parse(customFieldsToShowSetting as string);\n\t} catch (error) {"
        },
        "depth_rank": 5
    },
    {
        "file": "useEndpointAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useEndpointAction.ts",
        "code": {
            "data": "\tconst sendData = useEndpoint(method, pathPattern, options.keys as UrlParams<TPathPattern>);\n\tconst sendData = useEndpoint(method, pathPattern, options.keys as UrlParams<TPathPattern>);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useCallback(\n\t\tasync (params: OperationParams<TMethod, TPathPattern> | undefined) => {\n\t\t\ttry {\n\t\t\t\tconst data = await sendData(params as OperationParams<TMethod, TPathPattern>);\n\t\t\t\tconst data = await sendData(params as OperationParams<TMethod, TPathPattern>);\n\n\t\t\t\tif (options.successMessage) {\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: options.successMessage });"
        },
        "depth_rank": 5
    },
    {
        "file": "useClipboardWithToast.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useClipboardWithToast.ts",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useClipboard(text, {\n\t\tonCopySuccess: useMutableCallback(() => dispatchToastMessage({ type: 'success', message: t('Copied') })),"
        },
        "depth_rank": 5
    },
    {
        "file": "useRoomName.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useRoomName.ts",
        "code": {
            "username": "\tconst subscription = useUserSubscription(room._id);\n\tconst subscription = useUserSubscription(room._id);\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });"
        },
        "depth_rank": 5
    },
    {
        "file": "useReactiveQuery.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useReactiveQuery.ts",
        "code": {
            "data": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useQuery(\n\t\tqueryKey,\n\t\t(): Promise<TQueryFnData> =>\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tTracker.autorun((c) => {\n\t\t\t\t\t\tconst data = reactiveQueryFn();\n\t\t\t\t\t\tconst data = reactiveQueryFn();\n\n\t\t\t\t\t\tif (c.firstRun) {\n\t\t\t\t\t\t\tif (data === undefined) {\n\t\t\t\t\t\t\t\treject(new Error('Reactive query returned undefined'));\n\t\t\t\t\t\t\t} else {"
        },
        "depth_rank": 5
    },
    {
        "file": "useRoomsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useRoomsList.ts",
        "code": {
            "fetchData": "\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoomClient>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoomClient>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoomClient>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoomClient>()), []);\n\n\tconst getRooms = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate.withPagination');\n\tconst getRooms = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate.withPagination');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\t\tselector: JSON.stringify({ name: options.text || '' }),",
            "items": "\t\t\tconst items = rooms.map((room: any) => ({\n\t\t\tconst items = rooms.map((room: any) => ({\n\t\t\t\t_id: room._id,\n\t\t\t\t_updatedAt: new Date(room._updatedAt),\n\t\t\t\tlabel: room.name ?? '',\n\t\t\t\tvalue: room.name ?? '',\n\t\t\t}));\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getRooms, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);"
        },
        "depth_rank": 5
    },
    {
        "file": "useUpdateAvatar.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useUpdateAvatar.ts",
        "code": {
            "saveAvatarUrlAction": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst avatarUrl = isAvatarUrl(avatarObj) ? avatarObj.avatarUrl : '';\n\tconst avatarUrl = isAvatarUrl(avatarObj) ? avatarObj.avatarUrl : '';\n\n\tconst successMessage = t('Avatar_changed_successfully');\n\tconst successMessage = t('Avatar_changed_successfully');\n\tconst setAvatarFromService = useMethod('setAvatarFromService');\n\tconst setAvatarFromService = useMethod('setAvatarFromService');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', successMessage);\n\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', successMessage);\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage });\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage });",
            "resetAvatarAction": "\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage });\n\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage });",
            "updateAvatar": "\tconst updateAvatar = useCallback(async () => {\n\tconst updateAvatar = useCallback(async () => {\n\t\tif (isAvatarReset(avatarObj)) {\n\t\t\treturn resetAvatarAction({\n\t\t\t\tuserId,\n\t\t\t});\n\t\t}\n\t\tif (isAvatarUrl(avatarObj)) {\n\t\t\treturn saveAvatarUrlAction({\n\t\t\t\tuserId,\n\t\t\t\t...(avatarUrl && { avatarUrl }),"
        },
        "depth_rank": 5
    },
    {
        "file": "useAppActionButtons.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useAppActionButtons.ts",
        "code": {
            "data": "\tconst result = useAppActionButtons('messageBoxAction');\n\tconst result = useAppActionButtons('messageBoxAction');\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\n\tconst data = useMemo(\n\tconst data = useMemo(\n\t\t() =>\n\t\t\tresult.data\n\t\t\t\t?.filter((action) => {\n\t\t\t\t\treturn applyButtonFilters(action);\n\t\t\t\t})\n\t\t\t\t.map((action) => {\n\t\t\t\t\tconst item: MessageBoxAction = {\n\t\t\t\t\tconst item: MessageBoxAction = {\n\t\t\t\t\t\tid: getIdForActionButton(action),\n\t\t\t\t\t\tlabel: Utilities.getI18nKeyForApp(action.labelI18n, action.appId),\n\t\t\t\t\t\taction: (params) => {\n\t\t\t\t\t\t\tvoid actionManager.triggerActionButtonAction({\n\t\t\t\t\t\t\t\trid: params.rid,\n\t\t\t\t\t\t\t\ttmid: params.tmid,\n\t\t\t\t\t\t\t\tactionId: action.actionId,\n\t\t\t\t\t\t\t\tappId: action.appId,\n\t\t\t\t\t\t\t\tpayload: { context: action.context, message: params.chat.composer?.text },",
            "Filters": "\tconst result = useAppActionButtons('roomAction');\n\tconst result = useAppActionButtons('roomAction');\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst data = useMemo(\n\tconst data = useMemo(\n\t\t() =>\n\t\t\tresult.data\n\t\t\t\t?.filter((action) => {\n\t\t\t\t\tif (context && ['group', 'channel', 'live', 'team', 'direct', 'direct_multiple'].includes(context)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn applyButtonFilters(action);\n\t\t\t\t})\n\t\t\t\t.map((action) => {\n\t\t\t\t\tconst item: [string, ToolboxAction] = [\n\t\t\t\t\tconst item: [string, ToolboxAction] = [\n\t\t\t\t\t\taction.actionId,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: action.actionId,\n\t\t\t\t\t\t\ticon: undefined as any, // Apps won't provide icons for now\n\t\t\t\t\t\t\torder: 300, // Make sure the button only shows up inside the room toolbox\n\t\t\t\t\t\t\ttitle: Utilities.getI18nKeyForApp(action.labelI18n, action.appId),\n\t\t\t\t\t\t\tgroups: ['group', 'channel', 'live', 'team', 'direct', 'direct_multiple'],\n\t\t\t\t\t\t\t// Filters were applied in the applyButtonFilters function\n\t\t\t\t\t\t\t// Filters were applied in the applyButtonFilters function\n\t\t\t\t\t\t\t// if the code made it this far, the button should be shown\n\t\t\t\t\t\t\taction: () =>\n\t\t\t\t\t\t\t\tvoid actionManager.triggerActionButtonAction({\n\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\tactionId: action.actionId,\n\t\t\t\t\t\t\t\t\tappId: action.appId,\n\t\t\t\t\t\t\t\t\tpayload: { context: action.context },"
        },
        "depth_rank": 5
    },
    {
        "file": "useApplyButtonFilters.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/useApplyButtonFilters.ts",
        "code": {
            "applyRoomFilter": "const enumToFilter: { [k in RoomTypeFilter]: (room: IRoom) => boolean } = {\nconst enumToFilter: { [k in RoomTypeFilter]: (room: IRoom) => boolean } = {\n\t[RoomTypeFilter.PUBLIC_CHANNEL]: (room) => room.t === 'c',\n\t[RoomTypeFilter.PRIVATE_CHANNEL]: (room) => room.t === 'p',\n\t[RoomTypeFilter.PUBLIC_TEAM]: isPublicTeamRoom,\n\t[RoomTypeFilter.PRIVATE_TEAM]: isPrivateTeamRoom,\n\t[RoomTypeFilter.PUBLIC_DISCUSSION]: isPublicDiscussion,\n\t[RoomTypeFilter.PRIVATE_DISCUSSION]: isPrivateDiscussion,\n\t[RoomTypeFilter.DIRECT]: isDirectMessageRoom,\n\t[RoomTypeFilter.DIRECT_MULTIPLE]: isMultipleDirectMessageRoom,\n\t[RoomTypeFilter.LIVE_CHAT]: isOmnichannelRoom,\n};\n\nconst applyRoomFilter = (button: IUIActionButton, room: IRoom): boolean => {\nconst applyRoomFilter = (button: IUIActionButton, room: IRoom): boolean => {\n\tconst { roomTypes } = button.when || {};\n\tconst { roomTypes } = button.when || {};",
            "uid": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst { queryAllPermissions, queryAtLeastOnePermission, queryRole } = useContext(AuthorizationContext);\n\tconst { queryAllPermissions, queryAtLeastOnePermission, queryRole } = useContext(AuthorizationContext);"
        },
        "depth_rank": 5
    },
    {
        "file": "useRecordList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/lists/useRecordList.ts",
        "code": {
            "disconnectErroredEvent": "\tconst [state, setState] = useState<RecordListValue<T>>(() => ({\n\tconst [state, setState] = useState<RecordListValue<T>>(() => ({\n\t\tphase: recordList.phase,\n\t\titems: recordList.items,\n\t\titemCount: recordList.itemCount,\n\t\terror: undefined,\n\t}));\n\n\tuseEffect(() => {\n\t\tconst disconnectMutatingEvent = recordList.on('mutating', () => {\n\t\tconst disconnectMutatingEvent = recordList.on('mutating', () => {\n\t\t\tsetState(() => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: undefined,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectMutatedEvent = recordList.on('mutated', () => {\n\t\tconst disconnectMutatedEvent = recordList.on('mutated', () => {\n\t\t\tsetState((prevState) => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: prevState.error,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectClearedEvent = recordList.on('cleared', () => {\n\t\tconst disconnectClearedEvent = recordList.on('cleared', () => {\n\t\t\tsetState(() => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: undefined,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectErroredEvent = recordList.on('errored', (error) => {\n\t\tconst disconnectErroredEvent = recordList.on('errored', (error) => {\n\t\t\tsetState((state) => ({ ...state, error }));"
        },
        "depth_rank": 6
    },
    {
        "file": "useScrollableMessageList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/lists/useScrollableMessageList.ts",
        "code": {
            "batchChanges": "\tconst fetchItems = useCallback(\n\tconst fetchItems = useCallback(\n\t\tasync (start: number, end: number): Promise<RecordListBatchChanges<IMessage>> => {\n\t\t\tconst batchChanges = await fetchMessages(start, end);\n\t\t\tconst batchChanges = await fetchMessages(start, end);\n\t\t\treturn {\n\t\t\t\t...(batchChanges.items && { items: batchChanges.items.map(mapMessageFromApi) }),"
        },
        "depth_rank": 6
    },
    {
        "file": "useStreamUpdatesForMessageList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/hooks/lists/useStreamUpdatesForMessageList.ts",
        "code": {
            "createDeleteCriteria": "const createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\tconst query: Query<IMessage> = { ts: params.ts };"
        },
        "depth_rank": 6
    },
    {
        "file": "normalizeThreadMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/lib/normalizeThreadMessage.tsx",
        "code": {
            "tokens": "\t\tconst tokens = message.msg ? parse(message.msg, { emoticons: true }) : undefined;\n\t\tconst tokens = message.msg ? parse(message.msg, { emoticons: true }) : undefined;",
            "attachment": "\t\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\n\t\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\n\n\t\tif (attachment?.description) {\n\t\t\treturn <>{attachment.description}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "clickableItem.js",
        "path": "../Rocket.Chat/apps/meteor/client/lib/clickableItem.js",
        "code": {
            "WrappedComponent": "\tconst WrappedComponent = (props) => <Component className={clickable} tabIndex={0} {...props} />;\n\tconst WrappedComponent = (props) => <Component className={clickable} tabIndex={0} {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "download.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/download.ts",
        "code": {
            "hasMsSaveOrOpenBlob": "\tconst anchorElement = document.createElement('a');\n\tconst anchorElement = document.createElement('a');\n\tanchorElement.download = filename;\n\tanchorElement.href = href;\n\tanchorElement.target = '_blank';\n\tdocument.body.appendChild(anchorElement);\n\tanchorElement.click();\n\tdocument.body.removeChild(anchorElement);\n};\n\nconst hasMsSaveOrOpenBlob = (navigator: Navigator): navigator is Navigator & { msSaveOrOpenBlob: (blob: Blob) => void } =>\nconst hasMsSaveOrOpenBlob = (navigator: Navigator): navigator is Navigator & { msSaveOrOpenBlob: (blob: Blob) => void } =>"
        },
        "depth_rank": 5
    },
    {
        "file": "meteorCallWrapper.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/meteorCallWrapper.ts",
        "code": {
            "wrapMeteorDDPCalls": "function wrapMeteorDDPCalls(): void {\nfunction wrapMeteorDDPCalls(): void {\n\tconst { _send } = Meteor.connection;\n\tconst { _send } = Meteor.connection;",
            "restParams": "\t\tconst restParams = {\n\t\tconst restParams = {\n\t\t\tmessage: DDPCommon.stringifyDDP({ ...message }),",
            "parsedMessage": "\t\t\t\t\tconst parsedMessage = DDPCommon.parseDDP(_message as any) as { result?: { token?: string } };\n\t\t\t\t\tconst parsedMessage = DDPCommon.parseDDP(_message as any) as { result?: { token?: string } };"
        },
        "depth_rank": 5
    },
    {
        "file": "errorHandling.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/errorHandling.ts",
        "code": {
            "hasProperty": "const hasProperty = <TProperty extends number | string | symbol>(\nconst hasProperty = <TProperty extends number | string | symbol>(\n\tobj: unknown,\n\tproperty: TProperty,\n): obj is { [key in TProperty]: unknown } => isObject(obj) && property in obj;",
            "details": "\tconst message =\n\tconst message =\n\t\t(hasProperty(error, 'reason') && typeof error.reason === 'string' ? error.reason : undefined) ??\n\t\t(hasProperty(error, 'error') && typeof error.error === 'string' ? error.error : undefined) ??\n\t\t(hasProperty(error, 'message') && typeof error.message === 'string' ? error.message : undefined) ??\n\t\tdefaultMessage;\n\tconst details = hasProperty(error, 'details') && isObject(error.details) ? error.details : undefined;\n\tconst details = hasProperty(error, 'details') && isObject(error.details) ? error.details : undefined;\n\n\tif (message) return t(message, Object.fromEntries(Object.entries(details ?? {}).map(([key, value]) => [key, t(value)])));"
        },
        "depth_rank": 5
    },
    {
        "file": "userData.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/userData.ts",
        "code": {
            "user": "const updateUser = (userData: IUser): void => {\nconst updateUser = (userData: IUser): void => {\n\tconst user = Users.findOne({ _id: userData._id }) as IUser | undefined;\n\tconst user = Users.findOne({ _id: userData._id }) as IUser | undefined;"
        },
        "depth_rank": 5
    },
    {
        "file": "VideoConfManager.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/VideoConfManager.ts",
        "code": {
            "userId": "\t\tconst userId = Meteor.userId();\n\t\tconst userId = Meteor.userId();\n\n\t\tif (this.userId === userId) {\n\t\t\tdebug && console.log(`[VideoConf] Logged user has not changed, so we're not changing the hooks.`);\n\t\t\treturn;\n\t\t}\n\n\t\tdebug && console.log(`[VideoConf] Logged user has changed.`);\n\n\t\tif (this.userId) {\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tif (userId) {\n\t\t\tthis.connectUser(userId);\n\t\t}\n\t}\n\n\tpublic changePreference(key: keyof CallPreferences, value: boolean): void {\n\t\tthis._preferences[key] = value;\n\t\tthis.emit('preference/changed', { key, value });"
        },
        "depth_rank": 5
    },
    {
        "file": "presence.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/presence.ts",
        "code": {
            "uids": "const uids = new Set<UserPresence['_id']>();\nconst uids = new Set<UserPresence['_id']>();\n\nconst update: EventHandlerOf<ExternalEvents, string> = (update) => {\nconst update: EventHandlerOf<ExternalEvents, string> = (update) => {\n\tif (update?._id) {\n\t\tstore.set(update._id, { ...store.get(update._id), ...update, ...(status === 'disabled' && { status: UserStatus.DISABLED }) });",
            "params": "\t\t\t\tconst params = {\n\t\t\t\tconst params = {\n\t\t\t\t\tids: [...currentUids],\n\t\t\t\t};\n\n\t\t\t\tconst { users } = await sdk.rest.get('/v1/users.presence', params);\n\t\t\t\tconst { users } = await sdk.rest.get('/v1/users.presence', params);"
        },
        "depth_rank": 5
    },
    {
        "file": "parseMessageTextToAstMarkdown.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/parseMessageTextToAstMarkdown.ts",
        "code": {
            "msg": "\tconst msg = removePossibleNullMessageValues(message);\n\tconst msg = removePossibleNullMessageValues(message);\n\tconst { showAutoTranslate, autoTranslateLanguage } = autoTranslateOptions;\n\tconst { showAutoTranslate, autoTranslateLanguage } = autoTranslateOptions;",
            "text": "\tconst translations = autoTranslateLanguage && isTranslatedMessage(msg) && msg.translations;\n\tconst translations = autoTranslateLanguage && isTranslatedMessage(msg) && msg.translations;\n\tconst translated = showAutoTranslate(message);\n\tconst translated = showAutoTranslate(message);\n\n\tconst text = (translated && translations && translations[autoTranslateLanguage]) || msg.msg;\n\tconst text = (translated && translations && translations[autoTranslateLanguage]) || msg.msg;\n\n\treturn {\n\t\t...msg,\n\t\tmd:\n\t\t\tisE2EEMessage(message) || isOTRMessage(message) || translated\n\t\t\t\t? textToMessageToken(text, parseOptions)\n\t\t\t\t: msg.md ?? textToMessageToken(text, parseOptions),\n\t\t...(msg.attachments && {\n\t\t\tattachments: parseMessageAttachments(msg.attachments, parseOptions, { autoTranslateLanguage, translated }),"
        },
        "depth_rank": 5
    },
    {
        "file": "portalsSubscription.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/portals/portalsSubscription.ts",
        "code": {
            "emitter": "const createPortalsSubscription = (): PortalsSubscription => {\nconst createPortalsSubscription = (): PortalsSubscription => {\n\tconst portalsMap = new Map<unknown, SubscribedPortal>();\n\tconst portalsMap = new Map<unknown, SubscribedPortal>();\n\tlet portals = Array.from(portalsMap.values());\n\tconst emitter = new Emitter<{ update: void }>();\n\tconst emitter = new Emitter<{ update: void }>();"
        },
        "depth_rank": 6
    },
    {
        "file": "getUidDirectMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/utils/getUidDirectMessage.ts",
        "code": {
            "room": "\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { uids: 1 } });\n\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { uids: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "goToRoomById.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/utils/goToRoomById.ts",
        "code": {
            "room": "\tconst room = await getRoomById(rid);\n\tconst room = await getRoomById(rid);\n\troomCoordinator.openRouteLink(room.t, { rid: room._id, ...room }, router.getSearchParameters());"
        },
        "depth_rank": 6
    },
    {
        "file": "detectEmoji.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/utils/detectEmoji.ts",
        "code": {
            "html": "\tconst html = Object.values(emoji.packages)\n\tconst html = Object.values(emoji.packages)\n\t\t.reverse()\n\t\t.reduce((html, { render }) => render(html), text);"
        },
        "depth_rank": 6
    },
    {
        "file": "renderEmoji.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/utils/renderEmoji.ts",
        "code": {
            "emojiList": "const emojiList = emoji.list as Record<string, { emojiPackage: string }>;\nconst emojiList = emoji.list as Record<string, { emojiPackage: string }>;",
            "emojiPackages": "const emojiPackages = emoji.packages as Record<string, { render(emojiName: string): string }>;\nconst emojiPackages = emoji.packages as Record<string, { render(emojiName: string): string }>;"
        },
        "depth_rank": 6
    },
    {
        "file": "applyCustomTranslations.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/utils/applyCustomTranslations.ts",
        "code": {
            "parseToJSON": "const parseToJSON = (customTranslations: string) => {\nconst parseToJSON = (customTranslations: string) => {\n\ttry {\n\t\treturn JSON.parse(customTranslations);\n\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "DiscussionsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/lists/DiscussionsList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: DiscussionsListOptions) {\n\tpublic constructor(private _options: DiscussionsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): DiscussionsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: DiscussionsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 6
    },
    {
        "file": "FilesList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/lists/FilesList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: FilesListOptions) {\n\tpublic constructor(private _options: FilesListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): FilesListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: FilesListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IUpload): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 6
    },
    {
        "file": "ThreadsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/lists/ThreadsList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: ThreadsListOptions) {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 6
    },
    {
        "file": "VoIPUser.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/voip/VoIPUser.ts",
        "code": {
            "sdpFactoryOptions": "\t\tconst transportOptions = {\n\t\tconst transportOptions = {\n\t\t\tserver: this.config.webSocketURI,\n\t\t\tconnectionTimeout: 100, // Replace this with config\n\t\t\tkeepAliveInterval: 20,\n\t\t\t// traceSip: true,\n\t\t};\n\t\tconst sdpFactoryOptions = {\n\t\tconst sdpFactoryOptions = {\n\t\t\ticeGatheringTimeout: 10,\n\t\t\tpeerConnectionConfiguration: {\n\t\t\t\ticeServers: this.config.iceServers,\n\t\t\t},\n\t\t};\n\t\tthis.userAgentOptions = {\n\t\t\tdelegate: {\n\t\t\t\tonInvite: async (invitation: Invitation): Promise<void> => {\n\t\t\t\t\tawait this.handleIncomingCall(invitation);\n\t\t\t\t},\n\t\t\t},\n\t\t\tauthorizationPassword: this.config.authPassword,\n\t\t\tauthorizationUsername: this.config.authUserName,\n\t\t\turi: UserAgent.makeURI(sipUri),\n\t\t\ttransportOptions,\n\t\t\tsessionDescriptionHandlerFactoryOptions: sdpFactoryOptions,\n\t\t\tlogConfiguration: false,\n\t\t\tlogLevel: 'error',\n\t\t};\n\n\t\tthis.userAgent = new UserAgent(this.userAgentOptions);\n\t\tthis.userAgent.transport.isConnected();\n\t\tthis._opInProgress = Operation.OP_CONNECT;\n\t\ttry {\n\t\t\tthis.registerer = new Registerer(this.userAgent);\n\n\t\t\tthis.userAgent.transport.onConnect = this.onConnected.bind(this);\n\t\t\tthis.userAgent.transport.onDisconnect = this.onDisconnected.bind(this);\n\t\t\twindow.addEventListener('online', this.onlineNetworkHandler);\n\t\t\twindow.addEventListener('offline', this.offlineNetworkHandler);\n\t\t\tawait this.userAgent.start();\n\t\t\tif (this.config.enableKeepAliveUsingOptionsForUnstableNetworks) {\n\t\t\t\tthis.startOptionsPingForUnstableNetworks();\n\t\t\t}\n\t\t} catch (error) {",
            "sessionDescriptionHandlerOptions": "\t\tconst sessionDescriptionHandlerOptions = session.sessionDescriptionHandlerOptionsReInvite as SessionDescriptionHandlerOptions;\n\t\tconst sessionDescriptionHandlerOptions = session.sessionDescriptionHandlerOptionsReInvite as SessionDescriptionHandlerOptions;\n\t\tsessionDescriptionHandlerOptions.hold = holdState;\n\t\tsession.sessionDescriptionHandlerOptionsReInvite = sessionDescriptionHandlerOptions;\n\n\t\tconst { peerConnection } = sessionDescriptionHandler;\n\t\tconst { peerConnection } = sessionDescriptionHandler;",
            "outgoingMessage": "\t\tconst uri = new URI('sip', this.config.authUserName, this.config.sipRegistrarHostnameOrIP);\n\t\tconst uri = new URI('sip', this.config.authUserName, this.config.sipRegistrarHostnameOrIP);\n\t\tconst outgoingMessage = this.userAgent?.userAgentCore.makeOutgoingRequestMessage('OPTIONS', uri, uri, uri, {});\n\t\tconst outgoingMessage = this.userAgent?.userAgentCore.makeOutgoingRequestMessage('OPTIONS', uri, uri, uri, {});",
            "const": "\t// \tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;\n\t// \tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;"
        },
        "depth_rank": 6
    },
    {
        "file": "uploads.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/chats/uploads.ts",
        "code": {
            "send": "const send = async (\nconst send = async (\n\tfile: File,\n\t{\n\t\tdescription,\n\t\tmsg,\n\t\trid,\n\t\ttmid,\n\t}: {"
        },
        "depth_rank": 6
    },
    {
        "file": "data.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/chats/data.ts",
        "code": {
            "composeMessage": "\tconst composeMessage = async (\n\tconst composeMessage = async (\n\t\ttext: string,\n\t\t{ sendToChannel, quotedMessages, originalMessage }: { sendToChannel?: boolean; quotedMessages: IMessage[]; originalMessage?: IMessage },",
            "effectiveTMID": "\t\tconst msg = await prependReplies(text, quotedMessages);\n\t\tconst msg = await prependReplies(text, quotedMessages);\n\n\t\tconst effectiveRID = originalMessage?.rid ?? rid;\n\t\tconst effectiveRID = originalMessage?.rid ?? rid;\n\t\tconst effectiveTMID = originalMessage ? originalMessage.tmid : tmid;\n\t\tconst effectiveTMID = originalMessage ? originalMessage.tmid : tmid;\n\n\t\treturn (await onClientBeforeSendMessage({\n\t\t\t_id: originalMessage?._id ?? Random.id(),\n\t\t\trid: effectiveRID,\n\t\t\t...(effectiveTMID && {\n\t\t\t\ttmid: effectiveTMID,\n\t\t\t\t...(sendToChannel && { tshow: sendToChannel }),",
            "deleteMessage": "\tconst deleteMessage = async (mid: IMessage['_id']): Promise<void> => {\n\tconst deleteMessage = async (mid: IMessage['_id']): Promise<void> => {\n\t\tawait sdk.call('deleteMessage', { _id: mid });",
            "findRoom": "\tconst drafts = new Map<IMessage['_id'] | undefined, string>();\n\tconst drafts = new Map<IMessage['_id'] | undefined, string>();\n\n\tconst getDraft = async (mid: IMessage['_id'] | undefined): Promise<string | undefined> => drafts.get(mid);\n\tconst getDraft = async (mid: IMessage['_id'] | undefined): Promise<string | undefined> => drafts.get(mid);\n\n\tconst discardDraft = async (mid: IMessage['_id'] | undefined): Promise<void> => {\n\tconst discardDraft = async (mid: IMessage['_id'] | undefined): Promise<void> => {\n\t\tdrafts.delete(mid);\n\t};\n\n\tconst saveDraft = async (mid: IMessage['_id'] | undefined, draft: string): Promise<void> => {\n\tconst saveDraft = async (mid: IMessage['_id'] | undefined, draft: string): Promise<void> => {\n\t\tdrafts.set(mid, draft);\n\t};\n\n\tconst findRoom = async (): Promise<IRoom | undefined> => ChatRoom.findOne({ _id: rid }, { reactive: false });\n\tconst findRoom = async (): Promise<IRoom | undefined> => ChatRoom.findOne({ _id: rid }, { reactive: false });",
            "findSubscription": "\tconst findSubscription = async (): Promise<ISubscription | undefined> => {\n\tconst findSubscription = async (): Promise<ISubscription | undefined> => {\n\t\treturn ChatSubscription.findOne({ rid }, { reactive: false });",
            "findSubscriptionFromMessage": "\tconst getSubscription = createStrictGetter(findSubscription, 'Subscription not found');\n\tconst getSubscription = createStrictGetter(findSubscription, 'Subscription not found');\n\n\tconst findSubscriptionFromMessage = async (message: IMessage): Promise<ISubscription | undefined> => {\n\tconst findSubscriptionFromMessage = async (message: IMessage): Promise<ISubscription | undefined> => {\n\t\treturn ChatSubscription.findOne({ rid: message.rid }, { reactive: false });"
        },
        "depth_rank": 6
    },
    {
        "file": "processTooLongMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/chats/flows/processTooLongMessage.ts",
        "code": {
            "messageBlob": "\t\tconst onConfirm = async (): Promise<void> => {\n\t\tconst onConfirm = async (): Promise<void> => {\n\t\t\tconst contentType = 'text/plain';\n\t\t\tconst contentType = 'text/plain';\n\t\t\tconst messageBlob = new Blob([msg], { type: contentType });\n\t\t\tconst messageBlob = new Blob([msg], { type: contentType });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/chats/flows/sendMessage.ts",
        "code": {
            "message": "\t\tconst message = await chat.data.composeMessage(text, {\n\t\tconst message = await chat.data.composeMessage(text, {\n\t\t\tsendToChannel: tshow,\n\t\t\tquotedMessages: chat.composer?.quotedMessages.get() ?? [],\n\t\t\toriginalMessage: chat.currentEditing ? await chat.data.findMessageByID(chat.currentEditing.mid) : null,\n\t\t});\n\n\t\ttry {\n\t\t\tawait process(chat, message);\n\t\t\tchat.composer?.dismissAllQuotedMessages();\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "processSlashCommand.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/chats/flows/processSlashCommand.ts",
        "code": {
            "warnUnrecognizedSlashCommand": "const warnUnrecognizedSlashCommand = async (chat: ChatAPI, command: string): Promise<void> => {\nconst warnUnrecognizedSlashCommand = async (chat: ChatAPI, command: string): Promise<void> => {\n\tconsole.error(t('No_such_command', { command: escapeHTML(command) }));",
            "result": "\tconst triggerId = generateTriggerId(appId);\n\tconst triggerId = generateTriggerId(appId);\n\n\tconst data = {\n\tconst data = {\n\t\tcmd: commandName,\n\t\tparams,\n\t\tmsg: message,\n\t\tuserId: chat.uid,\n\t} as const;\n\t} as const;\n\n\ttry {\n\t\tconst result = await sdk.call('slashCommand', { cmd: commandName, params, msg: message, triggerId });\n\t\tconst result = await sdk.call('slashCommand', { cmd: commandName, params, msg: message, triggerId });"
        },
        "depth_rank": 7
    },
    {
        "file": "Federation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/federation/Federation.ts",
        "code": {
            "displayingUserRoomRoles": "\tconst myself = userSubscription.u?._id === displayingUserId;\n\tconst myself = userSubscription.u?._id === displayingUserId;\n\tconst removingMyself = action === RoomMemberActions.REMOVE_USER && myself;\n\tconst removingMyself = action === RoomMemberActions.REMOVE_USER && myself;\n\n\tif (removingMyself) {\n\t\treturn false;\n\t}\n\n\tconst displayingUserRoomRoles = RoomRoles.findOne({ 'rid': room._id, 'u._id': displayingUserId })?.roles || [];\n\tconst displayingUserRoomRoles = RoomRoles.findOne({ 'rid': room._id, 'u._id': displayingUserId })?.roles || [];"
        },
        "depth_rank": 6
    },
    {
        "file": "sort.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/minimongo/sort.ts",
        "code": {
            "createSortSpecParts": "const createSortSpecParts = <T>(\nconst createSortSpecParts = <T>(\n\tspec: Sort,\n): {\n\tlookup: (doc: T) => unknown[];\n\tascending: boolean;\n}[] => {"
        },
        "depth_rank": 6
    },
    {
        "file": "process2faReturn.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/2fa/process2faReturn.ts",
        "code": {
            "assertModalProps": "function assertModalProps(props: {\nfunction assertModalProps(props: {\n\tmethod: TwoFactorMethod;\n\temailOrUsername?: string;\n}): asserts props is { method: 'totp' } | { method: 'password' } | { method: 'email'; emailOrUsername: string } {",
            "code": "\t\tconst code = await invokeTwoFactorModal(props);\n\t\tconst code = await invokeTwoFactorModal(props);\n\n\t\treturn onCode(code, props.method);\n\t} catch (error) {"
        },
        "depth_rank": 6
    },
    {
        "file": "roomCoordinator.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/lib/rooms/roomCoordinator.tsx",
        "code": {
            "fields": "\t\tconst fields = {\n\t\tconst fields = {\n\t\t\tro: 1,\n\t\t\tt: 1,\n\t\t\t...(user && { muted: 1, unmuted: 1 }),",
            "room": "\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, federated: 1 } });\n\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, federated: 1 } });",
            "new": "\t\t\tthrow new Error('The route link must be a function.');\n\t\t\tthrow new Error('The route link must be a function.');\n\t\t}\n\t}\n\n\tprotected validateRoomConfig(roomConfig: IRoomTypeClientConfig): void {\n\t\tsuper.validateRoomConfig(roomConfig);\n\n\t\tconst { route, label } = roomConfig;\n\t\tconst { route, label } = roomConfig;"
        },
        "depth_rank": 6
    },
    {
        "file": "direct.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/rooms/roomTypes/direct.ts",
        "code": {
            "sub": "\t\t\tconst sub = Subscriptions.findOne({ rid: room._id }, { fields: { name: 1 } });\n\t\t\tconst sub = Subscriptions.findOne({ rid: room._id }, { fields: { name: 1 } });",
            "user": "\t\t\t\tconst user = Users.findOne({ username: sub.name }, { fields: { username: 1, avatarETag: 1 } }) as IUser | undefined;\n\t\t\t\tconst user = Users.findOne({ username: sub.name }, { fields: { username: 1, avatarETag: 1 } }) as IUser | undefined;"
        },
        "depth_rank": 7
    },
    {
        "file": "livechat.ts",
        "path": "../Rocket.Chat/apps/meteor/client/lib/rooms/roomTypes/livechat.ts",
        "code": {
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { open: 1, servedBy: 1 } });\n\t\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { open: 1, servedBy: 1 } });",
            "subscription": "\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/RoomMenu.tsx",
        "code": {
            "RoomMenu": "const fields: Fields = {\nconst fields: Fields = {\n\tf: true,\n\tt: true,\n\tname: true,\n};\n\ntype RoomMenuProps = {\n\trid: string;\n\tunread?: boolean;\n\tthreadUnread?: boolean;\n\talert?: boolean;\n\troomOpen?: boolean;\n\ttype: RoomType;\n\tcl?: boolean;\n\tname?: string;\n\thideDefaultOptions: boolean;\n};\n\nconst closeEndpoints = {\nconst closeEndpoints = {\n\tp: '/v1/groups.close',\n\tc: '/v1/channels.close',\n\td: '/v1/im.close',\n\n\tv: '/v1/channels.close',\n\tl: '/v1/groups.close',\n} as const;\n} as const;\n\nconst leaveEndpoints = {\nconst leaveEndpoints = {\n\tp: '/v1/groups.leave',\n\tc: '/v1/channels.leave',\n\td: '/v1/im.leave',\n\n\tv: '/v1/channels.leave',\n\tl: '/v1/groups.leave',\n} as const;\n} as const;\n\nconst RoomMenu = ({\nconst RoomMenu = ({\n\trid,\n\tunread,\n\tthreadUnread,\n\talert,\n\troomOpen,\n\ttype,\n\tcl,\n\tname = '',\n\thideDefaultOptions = false,\n}: RoomMenuProps): ReactElement | null => {",
            "leave": "\tconst handleLeave = useMutableCallback(() => {\n\tconst handleLeave = useMutableCallback(() => {\n\t\tconst leave = async (): Promise<void> => {\n\t\tconst leave = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait leaveRoom({ roomId: rid });",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(type).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(type).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tif (dontAskHideRoom) {\n\t\t\treturn hide();\n\t\t}\n\n\t\tsetModal(\n\t\t\t<GenericModalDoNotAskAgain\n\t\t\t\tvariant='danger'\n\t\t\t\tconfirmText={t('Yes_hide_it')}",
            "hide": "\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async (): Promise<void> => {\n\t\tconst hide = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait hideRoom({ roomId: rid });",
            "handleToggleRead": "\tconst handleToggleRead = useMutableCallback(async () => {\n\tconst handleToggleRead = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tif (isUnread) {\n\t\t\t\tawait readMessages({ rid, readThreads: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "useAvatarTemplate.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/hooks/useAvatarTemplate.tsx",
        "code": {
            "size": "\t\tconst size = ((): 'x36' | 'x28' | 'x16' => {\n\t\tconst size = ((): 'x36' | 'x28' | 'x16' => {\n\t\t\tswitch (viewMode) {\n\t\t\t\tcase 'extended':\n\t\t\t\t\treturn 'x36';\n\t\t\t\tcase 'medium':\n\t\t\t\t\treturn 'x28';\n\t\t\t\tcase 'condensed':\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'x16';\n\t\t\t}\n\t\t})();\n\n\t\tconst renderRoomAvatar: ComponentType<IRoom & { rid: string }> = (room) => (\n\t\tconst renderRoomAvatar: ComponentType<IRoom & { rid: string }> = (room) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "HeaderUnstable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/HeaderUnstable.tsx",
        "code": {
            "uid": "const HeaderUnstable = (): ReactElement => {\nconst HeaderUnstable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\treturn (\n\t\t<Sidebar.TopBar.Section>\n\t\t\t<Sidebar.TopBar.Actions justifyContent='end' width='100%'>\n\t\t\t\t<Search title={t('Search')} />"
        },
        "depth_rank": 6
    },
    {
        "file": "EditStatusModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/EditStatusModal.tsx",
        "code": {
            "handleSaveStatus": "const EditStatusModal = ({ onClose, userStatus, userStatusText }: EditStatusModalProps): ReactElement => {\nconst EditStatusModal = ({ onClose, userStatus, userStatusText }: EditStatusModalProps): ReactElement => {\n\tconst allowUserStatusMessageChange = useSetting('Accounts_AllowUserStatusMessageChange');\n\tconst allowUserStatusMessageChange = useSetting('Accounts_AllowUserStatusMessageChange');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [statusText, setStatusText] = useState(userStatusText);\n\tconst [statusText, setStatusText] = useState(userStatusText);\n\tconst [statusType, setStatusType] = useState(userStatus);\n\tconst [statusType, setStatusType] = useState(userStatus);\n\tconst [statusTextError, setStatusTextError] = useState<string | undefined>();\n\tconst [statusTextError, setStatusTextError] = useState<string | undefined>();\n\n\tconst setUserStatus = useEndpoint('POST', '/v1/users.setStatus');\n\tconst setUserStatus = useEndpoint('POST', '/v1/users.setStatus');\n\n\tconst handleStatusText = useMutableCallback((e: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleStatusText = useMutableCallback((e: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetStatusText(e.currentTarget.value);\n\n\t\tif (statusText && statusText.length > USER_STATUS_TEXT_MAX_LENGTH) {\n\t\t\treturn setStatusTextError(t('Max_length_is', USER_STATUS_TEXT_MAX_LENGTH));\n\t\t}\n\n\t\treturn setStatusTextError(undefined);\n\t});\n\n\tconst handleStatusType = (type: IUser['status']): void => setStatusType(type);\n\tconst handleStatusType = (type: IUser['status']): void => setStatusType(type);\n\n\tconst handleSaveStatus = useCallback(async () => {\n\tconst handleSaveStatus = useCallback(async () => {\n\t\ttry {\n\t\t\tawait setUserStatus({ message: statusText, status: statusType });"
        },
        "depth_rank": 6
    },
    {
        "file": "UserMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/UserMenu.tsx",
        "code": {
            "items": "const UserMenu = ({ user }: { user: IUser }) => {\nconst UserMenu = ({ user }: { user: IUser }) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst sections = useUserMenu(user);\n\tconst sections = useUserMenu(user);\n\tconst items = sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]);\n\tconst items = sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]);",
            "handleAction": "\tconst handleAction = useHandleMenuAction(items, () => setIsOpen(false));\n\tconst handleAction = useHandleMenuAction(items, () => setIsOpen(false));\n\n\treturn (\n\t\t<FeaturePreview feature='navigationBar'>\n\t\t\t<FeaturePreviewOff>\n\t\t\t\t<GenericMenu\n\t\t\t\t\ticon={<UserAvatarWithStatus />}"
        },
        "depth_rank": 6
    },
    {
        "file": "Header.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/Header.tsx",
        "code": {
            "user": "const Header = (): ReactElement => {\nconst Header = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\n\treturn (\n\t\t<Sidebar.TopBar.Section>\n\t\t\t{user ? <UserMenu user={user} /> : <UserAvatarWithStatus />}"
        },
        "depth_rank": 6
    },
    {
        "file": "useStatusItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useStatusItems.tsx",
        "code": {
            "modifier": "\tconst statusItems = Object.values(userStatus.list)\n\tconst statusItems = Object.values(userStatus.list)\n\t\t.filter(filterInvisibleStatus)\n\t\t.map((status) => {\n\t\t\tconst name = status.localizeName ? translateStatusName(t, status) : status.name;\n\t\t\tconst name = status.localizeName ? translateStatusName(t, status) : status.name;\n\t\t\tconst modifier = status.statusType || user?.status;\n\t\t\tconst modifier = status.statusType || user?.status;\n\t\t\treturn {\n\t\t\t\tid: status.id,\n\t\t\t\tstatus: <UserStatus status={modifier} />,"
        },
        "depth_rank": 7
    },
    {
        "file": "useAccountItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useAccountItems.tsx",
        "code": {
            "handleMyAccount": "\tconst logout = useLogout();\n\tconst logout = useLogout();\n\n\tconst handleMyAccount = useMutableCallback(() => {\n\tconst handleMyAccount = useMutableCallback(() => {\n\t\taccountRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "useCustomStatusModalHandler.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useCustomStatusModalHandler.tsx",
        "code": {
            "handleModalClose": "\tconst user = useUser();\n\tconst user = useUser();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn () => {\n\t\tconst handleModalClose = () => setModal(null);\n\t\tconst handleModalClose = () => setModal(null);\n\t\tsetModal(<EditStatusModal userStatus={user?.status} userStatusText={user?.statusText} onClose={handleModalClose} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "useThemeItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useThemeItems.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [selectedTheme, setTheme] = useThemeMode();\n\tconst [selectedTheme, setTheme] = useThemeMode();\n\n\treturn [\n\t\t{\n\t\t\tid: 'light',\n\t\t\ticon: 'sun',\n\t\t\tcontent: t('Theme_light'),\n\t\t\taddon: <RadioButton checked={selectedTheme === 'light'} onChange={setTheme('light')} m='x4' />,"
        },
        "depth_rank": 7
    },
    {
        "file": "useCreateRoomModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useCreateRoomModal.tsx",
        "code": {
            "handleClose": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback(() => {\n\t\tconst handleClose = (): void => {\n\t\tconst handleClose = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "useUserMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useUserMenu.tsx",
        "code": {
            "accountItems": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst statusItems = useStatusItems(user);\n\tconst statusItems = useStatusItems(user);\n\tconst themeItems = useThemeItems();\n\tconst themeItems = useThemeItems();\n\tconst accountItems = useAccountItems();\n\tconst accountItems = useAccountItems();\n\n\treturn [\n\t\t{\n\t\t\ttitle: <UserMenuHeader user={user} />,"
        },
        "depth_rank": 7
    },
    {
        "file": "CreateTeamModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/CreateTeam/CreateTeamModal.tsx",
        "code": {
            "handleCreateTeam": "\tconst isButtonEnabled = isDirty && canCreateTeam;\n\tconst isButtonEnabled = isDirty && canCreateTeam;\n\n\tconst handleCreateTeam = async ({\n\tconst handleCreateTeam = async ({\n\t\tname,\n\t\tmembers,\n\t\tisPrivate,\n\t\treadOnly,\n\t\ttopic,\n\t\tbroadcast,\n\t\tencrypted,\n\t}: CreateTeamModalInputs): Promise<void> => {",
            "params": "\t\tconst params = {\n\t\tconst params = {\n\t\t\tname,\n\t\t\tmembers,\n\t\t\ttype: isPrivate ? 1 : 0,\n\t\t\troom: {\n\t\t\t\treadOnly,\n\t\t\t\textraData: {\n\t\t\t\t\ttopic,\n\t\t\t\t\tbroadcast,\n\t\t\t\t\tencrypted,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst { team } = await createTeamAction(params);\n\t\t\tconst { team } = await createTeamAction(params);"
        },
        "depth_rank": 7
    },
    {
        "file": "CreateChannelModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/CreateChannel/CreateChannelModal.tsx",
        "code": {
            "params": "\tconst handleCreateChannel = async ({ name, members, readOnly, topic, broadcast, encrypted, federated }: CreateChannelModalPayload) => {\n\tconst handleCreateChannel = async ({ name, members, readOnly, topic, broadcast, encrypted, federated }: CreateChannelModalPayload) => {\n\t\tlet roomData;\n\t\tconst params = {\n\t\tconst params = {\n\t\t\tname,\n\t\t\tmembers,\n\t\t\treadOnly,\n\t\t\textraData: {\n\t\t\t\ttopic,\n\t\t\t\tbroadcast,\n\t\t\t\tencrypted,\n\t\t\t\t...(federated && { federated }),"
        },
        "depth_rank": 7
    },
    {
        "file": "Directory.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/Directory.tsx",
        "code": {
            "router": "const Directory = (props: DirectoryProps) => {\nconst Directory = (props: DirectoryProps) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleDirectory": "\tconst handleDirectory = useMutableCallback(() => {\n\tconst handleDirectory = useMutableCallback(() => {\n\t\tsidebar.toggle();\n\t\trouter.navigate('/directory');\n\t});\n\n\treturn (\n\t\t<Sidebar.TopBar.Action\n\t\t\t{...props}"
        },
        "depth_rank": 7
    },
    {
        "file": "Sort.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/Sort.tsx",
        "code": {
            "sections": "const Sort: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Sort: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = useSortMenu();\n\tconst sections = useSortMenu();\n\n\treturn (\n\t\t<GenericMenu icon='sort' sections={sections} title={t('Display')} selectionMode='multiple' is={Sidebar.TopBar.Action} {...props} />"
        },
        "depth_rank": 7
    },
    {
        "file": "Home.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/Home.tsx",
        "code": {
            "router": "const SidebarHeaderActionHome: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst SidebarHeaderActionHome: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleHome": "\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst handleHome = useMutableCallback(() => {\n\tconst handleHome = useMutableCallback(() => {\n\t\tsidebar.toggle();\n\t\trouter.navigate('/home');\n\t});\n\n\treturn showHome ? (\n\t\t<Sidebar.TopBar.Action {...props} icon='home' onClick={handleHome} pressed={router.getLocationPathname().includes('/home')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "Administration.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/Administration.tsx",
        "code": {
            "sections": "const Administration: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Administration: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = useAdministrationMenu();\n\tconst sections = useAdministrationMenu();\n\n\treturn <GenericMenu sections={sections} title={t('Administration')} is={Sidebar.TopBar.Action} {...props} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "Login.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/Login.tsx",
        "code": {
            "t": "const Login: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Login: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst setForceLogin = useSessionDispatch('forceLogin');\n\tconst setForceLogin = useSessionDispatch('forceLogin');\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Sidebar.TopBar.Action\n\t\t\t{...props}"
        },
        "depth_rank": 7
    },
    {
        "file": "useViewModeItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useViewModeItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst useHandleChange = (value: 'medium' | 'extended' | 'condensed'): (() => void) =>\n\tconst useHandleChange = (value: 'medium' | 'extended' | 'condensed'): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { sidebarViewMode: value } }), [value]);"
        },
        "depth_rank": 8
    },
    {
        "file": "useGroupingListItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useGroupingListItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sidebarGroupByType = useUserPreference<boolean>('sidebarGroupByType');\n\tconst sidebarGroupByType = useUserPreference<boolean>('sidebarGroupByType');\n\tconst sidebarShowFavorites = useUserPreference<boolean>('sidebarShowFavorites');\n\tconst sidebarShowFavorites = useUserPreference<boolean>('sidebarShowFavorites');\n\tconst sidebarShowUnread = useUserPreference<boolean>('sidebarShowUnread');\n\tconst sidebarShowUnread = useUserPreference<boolean>('sidebarShowUnread');\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst useHandleChange = (key: 'sidebarGroupByType' | 'sidebarShowFavorites' | 'sidebarShowUnread', value: boolean): (() => void) =>\n\tconst useHandleChange = (key: 'sidebarGroupByType' | 'sidebarShowFavorites' | 'sidebarShowUnread', value: boolean): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { [key]: value } }), [key, value]);"
        },
        "depth_rank": 8
    },
    {
        "file": "useAppsItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAppsItems.tsx",
        "code": {
            "appRequestStats": "\tconst showMarketplace = hasAccessMarketplacePermission || hasManageAppsPermission;\n\tconst showMarketplace = hasAccessMarketplacePermission || hasManageAppsPermission;\n\n\tconst marketplaceRoute = useRoute('marketplace');\n\tconst marketplaceRoute = useRoute('marketplace');\n\tconst page = 'list';\n\tconst page = 'list';\n\n\tconst appRequestStats = useAppRequestStats();\n\tconst appRequestStats = useAppRequestStats();\n\n\tconst marketPlaceItems: GenericMenuItemProps[] = [\n\tconst marketPlaceItems: GenericMenuItemProps[] = [\n\t\t{\n\t\t\tid: 'marketplace',\n\t\t\ticon: 'store',\n\t\t\tcontent: t('Marketplace'),\n\t\t\tonClick: () => marketplaceRoute.push({ context: 'explore', page }),"
        },
        "depth_rank": 8
    },
    {
        "file": "useSortModeItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useSortModeItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst sidebarSortBy = useUserPreference<'activity' | 'alphabetical'>('sidebarSortby', 'activity');\n\tconst sidebarSortBy = useUserPreference<'activity' | 'alphabetical'>('sidebarSortby', 'activity');\n\tconst isOmnichannelEnabled = useOmnichannelSortingDisclaimer();\n\tconst isOmnichannelEnabled = useOmnichannelSortingDisclaimer();\n\n\tconst useHandleChange = (value: 'alphabetical' | 'activity'): (() => void) =>\n\tconst useHandleChange = (value: 'alphabetical' | 'activity'): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { sidebarSortby: value } }), [value]);",
            "setToActivity": "\tconst setToAlphabetical = useHandleChange('alphabetical');\n\tconst setToAlphabetical = useHandleChange('alphabetical');\n\tconst setToActivity = useHandleChange('activity');\n\tconst setToActivity = useHandleChange('activity');\n\n\treturn [\n\t\t{\n\t\t\tid: 'activity',\n\t\t\tcontent: t('Activity'),\n\t\t\ticon: 'clock',\n\t\t\taddon: <RadioButton mi='x16' onChange={setToActivity} checked={sidebarSortBy === 'activity'} />,"
        },
        "depth_rank": 8
    },
    {
        "file": "useAdministrationItems.spec.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAdministrationItems.spec.tsx",
        "code": {
            "queryClient": "const queryClient = new QueryClient({\nconst queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\t// \u2705 turns retries off\n\t\t\tretry: false,\n\t\t},\n\t},\n});\n\nbeforeEach(() => {\n\tqueryClient.clear();\n});\n\nit('should not show upgrade item if has license and not have trial', async () => {\n\tconst { result, waitFor } = renderHook(() => useAdministrationItems(), {\n\tconst { result, waitFor } = renderHook(() => useAdministrationItems(), {\n\t\twrapper: ({ children }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "useAuditItems.spec.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAuditItems.spec.tsx",
        "code": {
            "queryClient": "const queryClient = new QueryClient({\nconst queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\t// \u2705 turns retries off\n\t\t\tretry: false,\n\t\t},\n\t},\n});\n\nit('should return an empty array if doesn`t have license', async () => {\n\tconst { result, waitFor } = renderHook(() => useAuditItems(), {\n\tconst { result, waitFor } = renderHook(() => useAuditItems(), {\n\t\twrapper: ({ children }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "useCreateRoomMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useCreateRoomMenu.tsx",
        "code": {
            "showCreate": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst showCreate = useAtLeastOnePermission(CREATE_ROOM_PERMISSIONS);\n\tconst showCreate = useAtLeastOnePermission(CREATE_ROOM_PERMISSIONS);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "matrixFederationSearchItems": "\tconst isMatrixEnabled = useSetting('Federation_Matrix_enabled') && data?.isEnterprise;\n\tconst isMatrixEnabled = useSetting('Federation_Matrix_enabled') && data?.isEnterprise;\n\n\tconst createRoomItems = useCreateRoomItems();\n\tconst createRoomItems = useCreateRoomItems();\n\tconst matrixFederationSearchItems = useMatrixFederationItems({ isMatrixEnabled });\n\tconst matrixFederationSearchItems = useMatrixFederationItems({ isMatrixEnabled });",
            "sections": "\tconst sections = [\n\tconst sections = [\n\t\t{ title: t('Create_new'), items: createRoomItems, permission: showCreate },"
        },
        "depth_rank": 8
    },
    {
        "file": "useCreateRoomItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useCreateRoomItems.tsx",
        "code": {
            "searchFederatedRooms": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst discussionEnabled = useSetting('Discussion_enabled');\n\tconst discussionEnabled = useSetting('Discussion_enabled');\n\n\tconst canCreateChannel = useAtLeastOnePermission(CREATE_CHANNEL_PERMISSIONS);\n\tconst canCreateChannel = useAtLeastOnePermission(CREATE_CHANNEL_PERMISSIONS);\n\tconst canCreateTeam = useAtLeastOnePermission(CREATE_TEAM_PERMISSIONS);\n\tconst canCreateTeam = useAtLeastOnePermission(CREATE_TEAM_PERMISSIONS);\n\tconst canCreateDirectMessages = useAtLeastOnePermission(CREATE_DIRECT_PERMISSIONS);\n\tconst canCreateDirectMessages = useAtLeastOnePermission(CREATE_DIRECT_PERMISSIONS);\n\tconst canCreateDiscussion = useAtLeastOnePermission(CREATE_DISCUSSION_PERMISSIONS);\n\tconst canCreateDiscussion = useAtLeastOnePermission(CREATE_DISCUSSION_PERMISSIONS);\n\n\tconst createChannel = useCreateRoomModal(CreateChannelWithData);\n\tconst createChannel = useCreateRoomModal(CreateChannelWithData);\n\tconst createTeam = useCreateRoomModal(CreateTeam);\n\tconst createTeam = useCreateRoomModal(CreateTeam);\n\tconst createDiscussion = useCreateRoomModal(CreateDiscussion);\n\tconst createDiscussion = useCreateRoomModal(CreateDiscussion);\n\tconst createDirectMessage = useCreateRoomModal(CreateDirectMessage);\n\tconst createDirectMessage = useCreateRoomModal(CreateDirectMessage);\n\tconst searchFederatedRooms = useCreateRoomModal(MatrixFederationSearch);\n\tconst searchFederatedRooms = useCreateRoomModal(MatrixFederationSearch);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 8
    },
    {
        "file": "useAdministrationItems.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAdministrationItems.tsx",
        "code": {
            "shouldShowAdminMenu": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst shouldShowAdminMenu = useAtLeastOnePermission(ADMIN_PERMISSIONS);\n\tconst shouldShowAdminMenu = useAtLeastOnePermission(ADMIN_PERMISSIONS);\n\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();",
            "setModal": "\tconst shouldShowEmoji = isFullyFeature(tabType);\n\tconst shouldShowEmoji = isFullyFeature(tabType);\n\n\tconst label = getUpgradeTabLabel(tabType);\n\tconst label = getUpgradeTabLabel(tabType);\n\n\tconst isAdmin = useRole('admin');\n\tconst isAdmin = useRole('admin');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { data: registrationStatusData } = useRegistrationStatus();\n\tconst { data: registrationStatusData } = useRegistrationStatus();",
            "handleModalClose": "\tconst workspaceRegistered = registrationStatusData?.registrationStatus?.workspaceRegistered ?? false;\n\tconst workspaceRegistered = registrationStatusData?.registrationStatus?.workspaceRegistered ?? false;\n\n\tconst handleRegisterWorkspaceClick = (): void => {\n\tconst handleRegisterWorkspaceClick = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisterWorkspaceModal onClose={handleModalClose} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "useAdministrationMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAdministrationMenu.tsx",
        "code": {
            "auditItems": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst administrationItems = useAdministrationItems();\n\tconst administrationItems = useAdministrationItems();\n\tconst appItems = useAppsItems();\n\tconst appItems = useAppsItems();\n\tconst auditItems = useAuditItems();\n\tconst auditItems = useAuditItems();\n\n\treturn [\n\t\tadministrationItems.length && { title: t('Administration'), items: administrationItems },"
        },
        "depth_rank": 8
    },
    {
        "file": "useSortMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useSortMenu.tsx",
        "code": {
            "sections": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst viewModeItems = useViewModeItems();\n\tconst viewModeItems = useViewModeItems();\n\tconst sortModeItems = useSortModeItems();\n\tconst sortModeItems = useSortModeItems();\n\tconst groupingListItems = useGroupingListItems();\n\tconst groupingListItems = useGroupingListItems();\n\n\tconst sections = [\n\tconst sections = [\n\t\t{ title: t('Display'), items: viewModeItems },"
        },
        "depth_rank": 8
    },
    {
        "file": "FederatedRoomListEmptyPlaceholder.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListEmptyPlaceholder.tsx",
        "code": {
            "t": "const FederatedRoomListEmptyPlaceholder: VFC = () => {\nconst FederatedRoomListEmptyPlaceholder: VFC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' justifyContent='center' height='full' backgroundColor='surface'>\n\t\t\t<GenericNoResults description={t('There_are_no_rooms_for_the_given_search_criteria')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "FederatedRoomListErrorBoundary.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListErrorBoundary.tsx",
        "code": {
            "t": "const FederatedRoomListErrorBoundary = ({ children, resetKeys }: FederatedRoomListErrorBoundaryProps): ReactElement => {\nconst FederatedRoomListErrorBoundary = ({ children, resetKeys }: FederatedRoomListErrorBoundaryProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<QueryErrorResetBoundary>\n\t\t\t{({ reset }): ReactElement => (\n\t\t\t\t<ErrorBoundary\n\t\t\t\t\tchildren={children}"
        },
        "depth_rank": 7
    },
    {
        "file": "MatrixFederationSearch.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationSearch.tsx",
        "code": {
            "t": "const MatrixFederationSearch: VFC<MatrixFederationSearchProps> = ({ onClose, defaultSelectedServer }) => {\nconst MatrixFederationSearch: VFC<MatrixFederationSearchProps> = ({ onClose, defaultSelectedServer }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isLoading } = useMatrixServerList();\n\tconst { data, isLoading } = useMatrixServerList();"
        },
        "depth_rank": 7
    },
    {
        "file": "MatrixFederationRemoveServerList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationRemoveServerList.tsx",
        "code": {
            "queryClient": "const style = css`\nconst style = css`\n\ti {\n\t\tvisibility: hidden;\n\t}\n\tli {\n\t\tcursor: default;\n\t}\n\tli:hover {\n\t\ti {\n\t\t\tcursor: pointer;\n\t\t\tvisibility: visible;\n\t\t}\n\t}\n`;\n\nconst MatrixFederationRemoveServerList: VFC<MatrixFederationRemoveServerListProps> = ({ servers }) => {\nconst MatrixFederationRemoveServerList: VFC<MatrixFederationRemoveServerListProps> = ({ servers }) => {\n\tconst removeMatrixServer = useEndpoint('POST', '/v1/federation/removeServerByUser');\n\tconst removeMatrixServer = useEndpoint('POST', '/v1/federation/removeServerByUser');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst { mutate: removeServer, isLoading: isRemovingServer } = useMutation(\n\tconst { mutate: removeServer, isLoading: isRemovingServer } = useMutation(",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' className={[style]}>"
        },
        "depth_rank": 7
    },
    {
        "file": "MatrixFederationManageServerModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationManageServerModal.tsx",
        "code": {
            "dispatchToastMessage": "const MatrixFederationAddServerModal: VFC<MatrixFederationAddServerModalProps> = ({ onClickClose }) => {\nconst MatrixFederationAddServerModal: VFC<MatrixFederationAddServerModalProps> = ({ onClickClose }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst addMatrixServer = useEndpoint('POST', '/v1/federation/addServerByUser');\n\tconst addMatrixServer = useEndpoint('POST', '/v1/federation/addServerByUser');\n\tconst [serverName, setServerName] = useState('');\n\tconst [serverName, setServerName] = useState('');\n\tconst [errorKey, setErrorKey] = useState<TranslationKey | undefined>();\n\tconst [errorKey, setErrorKey] = useState<TranslationKey | undefined>();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tmutate: addServer,\n\t\tisLoading,\n\t\tisError,\n\t} = useMutation(['v1/federation/addServerByUser', serverName], () => addMatrixServer({ serverName }), {"
        },
        "depth_rank": 7
    },
    {
        "file": "useInfiniteFederationSearchPublicRooms.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/useInfiniteFederationSearchPublicRooms.tsx",
        "code": {
            "fetchRoomList": "\tconst fetchRoomList = useEndpoint('GET', '/v1/federation/searchPublicRooms');\n\tconst fetchRoomList = useEndpoint('GET', '/v1/federation/searchPublicRooms');\n\treturn useInfiniteQuery(\n\t\t['federation/searchPublicRooms', serverName, roomName, count],\n\t\tasync ({ pageParam }) => fetchRoomList({ serverName, roomName, count, pageToken: pageParam }),"
        },
        "depth_rank": 7
    },
    {
        "file": "MatrixFederationSearchModalContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationSearchModalContent.tsx",
        "code": {
            "manageServers": "const MatrixFederationSearchModalContent: VFC<MatrixFederationSearchModalContentProps> = ({ defaultSelectedServer, servers }) => {\nconst MatrixFederationSearchModalContent: VFC<MatrixFederationSearchModalContentProps> = ({ defaultSelectedServer, servers }) => {\n\tconst [serverName, setServerName] = useState(() => {\n\tconst [serverName, setServerName] = useState(() => {\n\t\tconst defaultServer = servers.find((server) => server.name === defaultSelectedServer);\n\t\tconst defaultServer = servers.find((server) => server.name === defaultSelectedServer);\n\t\treturn defaultServer?.name ?? servers[0].name;\n\t});\n\n\tconst [roomName, setRoomName] = useState('');\n\tconst [roomName, setRoomName] = useState('');\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst debouncedRoomName = useDebouncedValue(roomName, 400);\n\tconst debouncedRoomName = useDebouncedValue(roomName, 400);\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst serverOptions = useMemo<Array<SelectOption>>(() => servers.map((server): SelectOption => [server.name, server.name]), [servers]);\n\tconst serverOptions = useMemo<Array<SelectOption>>(() => servers.map((server): SelectOption => [server.name, server.name]), [servers]);\n\n\tconst manageServers = useCallback(() => {\n\tconst manageServers = useCallback(() => {\n\t\tsetModal(\n\t\t\t<MatrixFederationManageServersModal onClickClose={() => setModal(<MatrixFederationSearch onClose={() => setModal(null)} />)} />,"
        },
        "depth_rank": 7
    },
    {
        "file": "FederatedRoomList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomList.tsx",
        "code": {
            "dispatchToastMessage": "const FederatedRoomList: VFC<FederatedRoomListProps> = ({ serverName, roomName, count }) => {\nconst FederatedRoomList: VFC<FederatedRoomListProps> = ({ serverName, roomName, count }) => {\n\tconst joinExternalPublicRoom = useEndpoint('POST', '/v1/federation/joinExternalPublicRoom');\n\tconst joinExternalPublicRoom = useEndpoint('POST', '/v1/federation/joinExternalPublicRoom');\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { data, isLoading, isFetchingNextPage, fetchNextPage } = useInfiniteFederationSearchPublicRooms(serverName, roomName, count);\n\tconst { data, isLoading, isFetchingNextPage, fetchNextPage } = useInfiniteFederationSearchPublicRooms(serverName, roomName, count);",
            "flattenedData": "\tconst flattenedData = data?.pages.flatMap((page) => page.rooms);\n\tconst flattenedData = data?.pages.flatMap((page) => page.rooms);\n\treturn (\n\t\t<Box is='ul' overflow='hidden' height='356px' flexGrow={1} flexShrink={0}>"
        },
        "depth_rank": 7
    },
    {
        "file": "FederatedRoomListItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListItem.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mb='x16' is='li' display='flex' flexDirection='column' w='full' name={canonicalAlias}>"
        },
        "depth_rank": 7
    },
    {
        "file": "VoipFooter.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/footer/voip/VoipFooter.stories.tsx",
        "code": {
            "callActions": "const callActions = {\nconst callActions = {\n\tmute: () => ({}),",
            "getSubtitle": "const VoipFooterTemplate: ComponentStory<typeof VoipFooter> = (args) => {\nconst VoipFooterTemplate: ComponentStory<typeof VoipFooter> = (args) => {\n\tconst [muted, toggleMic] = useState(false);\n\tconst [muted, toggleMic] = useState(false);\n\tconst [paused, togglePause] = useState(false);\n\tconst [paused, togglePause] = useState(false);\n\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\t\tconst subtitles: Record<string, string> = {\n\t\tconst subtitles: Record<string, string> = {\n\t\t\tIN_CALL: 'In Progress',\n\t\t\tOFFER_RECEIVED: 'Ringing',\n\t\t\tOFFER_SENT: 'Calling',\n\t\t\tON_HOLD: 'On Hold',\n\t\t};\n\n\t\treturn subtitles[state] || '';\n\t};\n\n\treturn (\n\t\t<Box maxWidth='x300' bg='dark' borderRadius='x4'>\n\t\t\t<VoipFooter\n\t\t\t\t{...args}"
        },
        "depth_rank": 7
    },
    {
        "file": "index.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/footer/voip/index.tsx",
        "code": {
            "getCallsInQueueText": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst callerInfo = useCallerInfo();\n\tconst callerInfo = useCallerInfo();\n\tconst callActions = useCallActions();\n\tconst callActions = useCallActions();\n\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\n\tconst createRoom = useCallCreateRoom();\n\tconst createRoom = useCallCreateRoom();\n\tconst openRoom = useCallOpenRoom();\n\tconst openRoom = useCallOpenRoom();\n\tconst queueCounter = useQueueCounter();\n\tconst queueCounter = useQueueCounter();\n\tconst queueName = useQueueName();\n\tconst queueName = useQueueName();\n\tconst openedRoomInfo = useOpenedRoomInfo();\n\tconst openedRoomInfo = useOpenedRoomInfo();\n\tconst options = useVoipFooterMenu();\n\tconst options = useVoipFooterMenu();\n\n\tconst [muted, setMuted] = useState(false);\n\tconst [muted, setMuted] = useState(false);\n\tconst [paused, setPaused] = useState(false);\n\tconst [paused, setPaused] = useState(false);\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst isEnterprise = useIsVoipEnterprise();\n\n\tconst toggleMic = useCallback(\n\tconst toggleMic = useCallback(\n\t\t(state: boolean) => {\n\t\t\tstate ? callActions.mute() : callActions.unmute();\n\t\t\tsetMuted(state);\n\t\t},\n\t\t[callActions],\n\t);\n\n\tconst togglePause = useCallback(\n\tconst togglePause = useCallback(\n\t\t(state: boolean) => {\n\t\t\tstate ? callActions.pause() : callActions.resume();\n\t\t\tsetMuted(false);\n\t\t\tsetPaused(state);\n\t\t},\n\t\t[callActions],\n\t);\n\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\t\tconst subtitles: Record<string, string> = {\n\t\tconst subtitles: Record<string, string> = {\n\t\t\tIN_CALL: t('In_progress'),\n\t\t\tOFFER_RECEIVED: t('Ringing'),\n\t\t\tOFFER_SENT: t('Calling'),\n\t\t\tON_HOLD: t('On_Hold'),\n\t\t};\n\n\t\treturn subtitles[state] || '';\n\t};\n\n\tconst getCallsInQueueText = useMemo((): string => {\n\tconst getCallsInQueueText = useMemo((): string => {\n\t\tif (queueCounter === 0) {\n\t\t\treturn t('Calls_in_queue_empty');\n\t\t}\n\n\t\tif (queueCounter === 1) {\n\t\t\treturn t('Calls_in_queue', { calls: queueCounter });"
        },
        "depth_rank": 7
    },
    {
        "file": "ScrollerWithCustomProps.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/search/ScrollerWithCustomProps.tsx",
        "code": {
            "ScrollerWithCustomProps": "const ScrollerWithCustomProps = forwardRef(function ScrollerWithCustomProps(props, ref: React.Ref<HTMLDivElement>) {\nconst ScrollerWithCustomProps = forwardRef(function ScrollerWithCustomProps(props, ref: React.Ref<HTMLDivElement>) {\n\treturn (\n\t\t<ScrollableContentWrapper\n\t\t\t{...props}"
        },
        "depth_rank": 6
    },
    {
        "file": "Row.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/search/Row.tsx",
        "code": {
            "Row": "const Row = ({ item, data }: RowProps): ReactElement => {\nconst Row = ({ item, data }: RowProps): ReactElement => {\n\tconst { t, SideBarItemTemplate, avatarTemplate: AvatarTemplate, useRealName, extended } = data;\n\tconst { t, SideBarItemTemplate, avatarTemplate: AvatarTemplate, useRealName, extended } = data;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/search/UserItem.tsx",
        "code": {
            "icon": "const UserItem = ({ item, id, style, t, SideBarItemTemplate, AvatarTemplate, useRealName }: UserItemProps): ReactElement => {\nconst UserItem = ({ item, id, style, t, SideBarItemTemplate, AvatarTemplate, useRealName }: UserItemProps): ReactElement => {\n\tconst title = useRealName ? item.fname || item.name : item.name || item.fname;\n\tconst title = useRealName ? item.fname || item.name : item.name || item.fname;\n\tconst icon = (\n\tconst icon = (\n\t\t<Sidebar.Item.Icon icon={'' as any}>",
            "href": "\tconst href = roomCoordinator.getRouteLink(item.t, { name: item.name });\n\tconst href = roomCoordinator.getRouteLink(item.t, { name: item.name });"
        },
        "depth_rank": 6
    },
    {
        "file": "SearchList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/search/SearchList.tsx",
        "code": {
            "usernamesFromClient": "\tconst localRooms = useUserSubscriptions(query, options);\n\tconst localRooms = useUserSubscriptions(query, options);\n\n\tconst usernamesFromClient = [...localRooms?.map(({ t, name }) => (t === 'd' ? name : null))].filter(Boolean) as string[];\n\tconst usernamesFromClient = [...localRooms?.map(({ t, name }) => (t === 'd' ? name : null))].filter(Boolean) as string[];",
            "type": "\tconst searchForDMs = mention === '@';\n\tconst searchForDMs = mention === '@';\n\n\tconst type = useMemo(() => {\n\tconst type = useMemo(() => {\n\t\tif (searchForChannels) {\n\t\t\treturn { users: false, rooms: true, includeFederatedRooms: true };",
            "getSpotlight": "\tconst getSpotlight = useMethod('spotlight');\n\tconst getSpotlight = useMethod('spotlight');\n\n\treturn useQuery(\n\t\t['sidebar/search/spotlight', name, usernamesFromClient, type, localRooms.map(({ _id }) => _id)],",
            "filterUsersUnique": "\t\t\tconst spotlight = await getSpotlight(name, usernamesFromClient, type);\n\t\t\tconst spotlight = await getSpotlight(name, usernamesFromClient, type);\n\n\t\t\tconst filterUsersUnique = ({ _id }: { _id: string }, index: number, arr: { _id: string }[]): boolean =>\n\t\t\tconst filterUsersUnique = ({ _id }: { _id: string }, index: number, arr: { _id: string }[]): boolean =>",
            "roomFilter": "\t\t\tconst roomFilter = (room: { t: string; uids?: string[]; _id: string; name?: string }): boolean =>\n\t\t\tconst roomFilter = (room: { t: string; uids?: string[]; _id: string; name?: string }): boolean =>",
            "usersFilter": "\t\t\tconst usersFilter = (user: { _id: string }): boolean =>\n\t\t\tconst usersFilter = (user: { _id: string }): boolean =>",
            "userMap": "\t\t\tconst userMap = (user: {\n\t\t\tconst userMap = (user: {\n\t\t\t\t_id: string;\n\t\t\t\tname: string;\n\t\t\t\tusername: string;\n\t\t\t\tavatarETag?: string;\n\t\t\t}): {",
            "onChange": "\t\t\tconst resultsFromServer: resultsFromServerType = [];\n\t\t\tconst resultsFromServer: resultsFromServerType = [];\n\t\t\tresultsFromServer.push(...spotlight.users.filter(filterUsersUnique).filter(usersFilter).map(userMap));\n\t\t\tresultsFromServer.push(...spotlight.rooms.filter(roomFilter));\n\n\t\t\tconst exact = resultsFromServer?.filter((item) => [item.name, item.fname].includes(name));\n\t\t\tconst exact = resultsFromServer?.filter((item) => [item.name, item.fname].includes(name));\n\t\t\treturn Array.from(new Set([...exact, ...localRooms, ...resultsFromServer]));\n\t\t},\n\t\t{\n\t\t\tstaleTime: 60_000,\n\t\t\tkeepPreviousData: true,\n\t\t\tplaceholderData: localRooms,\n\t\t},\n\t);\n};\n\nconst useInput = (initial: string): { value: string; onChange: FormEventHandler; setValue: Dispatch<SetStateAction<string>> } => {\nconst useInput = (initial: string): { value: string; onChange: FormEventHandler; setValue: Dispatch<SetStateAction<string>> } => {\n\tconst [value, setValue] = useState(initial);\n\tconst [value, setValue] = useState(initial);\n\tconst onChange = useMutableCallback((e) => {\n\tconst onChange = useMutableCallback((e) => {\n\t\tsetValue(e.currentTarget.value);\n\t});\n\treturn { value, onChange, setValue };",
            "t": "const SearchList = forwardRef(function SearchList({ onClose }: SearchListProps, ref): ReactElement {\nconst SearchList = forwardRef(function SearchList({ onClose }: SearchListProps, ref): ReactElement {\n\tconst listId = useUniqueId();\n\tconst listId = useUniqueId();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { setValue: setFilterValue, ...filter } = useInput('');\n\tconst { setValue: setFilterValue, ...filter } = useInput('');",
            "placeholder": "\tconst cursorRef = useRef<HTMLInputElement>(null);\n\tconst cursorRef = useRef<HTMLInputElement>(null);\n\tconst autofocus: Ref<HTMLInputElement> = useMergedRefs(useAutoFocus<HTMLInputElement>(), cursorRef);\n\tconst autofocus: Ref<HTMLInputElement> = useMergedRefs(useAutoFocus<HTMLInputElement>(), cursorRef);\n\n\tconst listRef = useRef<VirtuosoHandle>(null);\n\tconst listRef = useRef<VirtuosoHandle>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\n\tconst selectedElement: MutableRefObject<HTMLElement | null | undefined> = useRef(null);\n\tconst selectedElement: MutableRefObject<HTMLElement | null | undefined> = useRef(null);\n\tconst itemIndexRef = useRef(0);\n\tconst itemIndexRef = useRef(0);\n\n\tconst sidebarViewMode = useUserPreference('sidebarViewMode');\n\tconst sidebarViewMode = useUserPreference('sidebarViewMode');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst avatarTemplate = useAvatarTemplate();\n\n\tconst extended = sidebarViewMode === 'extended';\n\tconst extended = sidebarViewMode === 'extended';\n\n\tconst filterText = useDebouncedValue(filter.value, 100);\n\tconst filterText = useDebouncedValue(filter.value, 100);\n\n\tconst placeholder = [t('Search'), shortcut].filter(Boolean).join(' ');\n\tconst placeholder = [t('Search'), shortcut].filter(Boolean).join(' ');\n\n\tconst { data: items = [], isLoading } = useSearchItems(filterText);\n\tconst { data: items = [], isLoading } = useSearchItems(filterText);",
            "potentialElement": "\tconst itemData = useMemo(\n\tconst itemData = useMemo(\n\t\t() => ({\n\t\t\titems,\n\t\t\tt,\n\t\t\tSideBarItemTemplate: sideBarItemTemplate,\n\t\t\tavatarTemplate,\n\t\t\tuseRealName,\n\t\t\textended,\n\t\t\tsidebarViewMode,\n\t\t}),\n\t\t[avatarTemplate, extended, items, useRealName, sideBarItemTemplate, sidebarViewMode, t],\n\t);\n\n\tconst changeSelection = useMutableCallback((dir) => {\n\tconst changeSelection = useMutableCallback((dir) => {\n\t\tlet nextSelectedElement = null;\n\n\t\tif (dir === 'up') {\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.previousSibling as HTMLElement;\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.previousSibling as HTMLElement;\n\t\t\tif (potentialElement) {\n\t\t\t\tnextSelectedElement = potentialElement.querySelector('a');\n\t\t\t}\n\t\t} else {",
            "resetCursor": "\t\t\tconst potentialElement = selectedElement.current?.parentElement?.nextSibling as HTMLElement;\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.nextSibling as HTMLElement;\n\t\t\tif (potentialElement) {\n\t\t\t\tnextSelectedElement = potentialElement.querySelector('a');\n\t\t\t}\n\t\t}\n\n\t\tif (nextSelectedElement) {\n\t\t\ttoggleSelectionState(nextSelectedElement, selectedElement.current || undefined, cursorRef?.current || undefined);\n\t\t\treturn nextSelectedElement;\n\t\t}\n\t\treturn selectedElement.current;\n\t});\n\n\tconst resetCursor = useMutableCallback(() => {\n\tconst resetCursor = useMutableCallback(() => {\n\t\titemIndexRef.current = 0;\n\t\tlistRef.current?.scrollToIndex({ index: itemIndexRef.current });"
        },
        "depth_rank": 6
    },
    {
        "file": "StatusDisabledSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/sections/StatusDisabledSection.tsx",
        "code": {
            "handleStatusDisabledModal": "const StatusDisabledSection = ({ onDismiss }: { onDismiss: () => void }) => {\nconst StatusDisabledSection = ({ onDismiss }: { onDismiss: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleStatusDisabledModal = useStatusDisabledModal();\n\tconst handleStatusDisabledModal = useStatusDisabledModal();\n\n\treturn (\n\t\t<SidebarBanner\n\t\t\ttext={t('User_status_temporarily_disabled')}"
        },
        "depth_rank": 6
    },
    {
        "file": "OmnichannelSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/sections/OmnichannelSection.tsx",
        "code": {
            "showOmnichannelQueueLink": "\tconst showOmnichannelQueueLink = useOmnichannelShowQueueLink();\n\tconst showOmnichannelQueueLink = useOmnichannelShowQueueLink();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleRoute": "\tconst handleRoute = useMutableCallback((route) => {\n\tconst handleRoute = useMutableCallback((route) => {\n\t\tsidebar.toggle();\n\n\t\tswitch (route) {\n\t\t\tcase 'directory':\n\t\t\t\tdirectoryRoute.push({});"
        },
        "depth_rank": 6
    },
    {
        "file": "OmnichannelCallToggle.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelCallToggle.tsx",
        "code": {
            "isCallError": "\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallError = useIsCallError();\n\tconst isCallError = useIsCallError();\n\tif (isCallError) {\n\t\treturn <OmnichannelCallToggleError {...props} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "OmnichannelLivechatToggle.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelLivechatToggle.tsx",
        "code": {
            "handleAvailableStatusChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst agentAvailable = useOmnichannelAgentAvailable();\n\tconst agentAvailable = useOmnichannelAgentAvailable();\n\tconst changeAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst changeAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleAvailableStatusChange = useMutableCallback(async () => {\n\tconst handleAvailableStatusChange = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait changeAgentStatus({});"
        },
        "depth_rank": 7
    },
    {
        "file": "OmnichannelCallDialPad.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelCallDialPad.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { openDialModal } = useDialModal();\n\tconst { openDialModal } = useDialModal();"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomListRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/RoomList/RoomListRow.tsx",
        "code": {
            "RoomListRow": "const RoomListRow = ({ data, item }: { data: RoomListRowProps; item: ISubscription & IRoom }): ReactElement => {\nconst RoomListRow = ({ data, item }: { data: RoomListRowProps; item: ISubscription & IRoom }): ReactElement => {\n\tconst { extended, t, SideBarItemTemplate, AvatarTemplate, openedRoom, sidebarViewMode } = data;\n\tconst { extended, t, SideBarItemTemplate, AvatarTemplate, openedRoom, sidebarViewMode } = data;"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/RoomList/RoomList.tsx",
        "code": {
            "sideBarItemTemplate": "\tconst roomsList = useRoomList();\n\tconst roomsList = useRoomList();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst { ref } = useResizeObserver({ debounceDelay: 100 });\n\tconst { ref } = useResizeObserver({ debounceDelay: 100 });"
        },
        "depth_rank": 6
    },
    {
        "file": "SideBarItemTemplateWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/sidebar/RoomList/SideBarItemTemplateWithData.tsx",
        "code": {
            "SideBarItemTemplateWithData": "function SideBarItemTemplateWithData({\nfunction SideBarItemTemplateWithData({\n\troom,\n\tid,\n\tselected,\n\tstyle,\n\textended,\n\tSideBarItemTemplate,\n\tAvatarTemplate,\n\tt,\n\tisAnonymous,\n\tvideoConfActions,\n}: RoomListRowProps): ReactElement {",
            "icon": "\tconst icon = (\n\tconst icon = (\n\t\t// TODO: Remove icon='at'\n\t\t<Sidebar.Item.Icon highlighted={highlighted} icon='at'>",
            "actions": "\tconst actions = useMemo(\n\tconst actions = useMemo(\n\t\t() =>\n\t\t\tvideoConfActions && (\n\t\t\t\t<SidebarItemActions>\n\t\t\t\t\t<SidebarItemAction onClick={videoConfActions.acceptCall} secondary success icon='phone' />",
            "isQueued": "\tconst isQueued = isOmnichannelRoom(room) && room.status === 'queued';\n\tconst isQueued = isOmnichannelRoom(room) && room.status === 'queued';\n\tconst { enabled: isPriorityEnabled } = useOmnichannelPriorities();\n\tconst { enabled: isPriorityEnabled } = useOmnichannelPriorities();",
            "badges": "\tconst badges = (\n\tconst badges = (\n\t\t<Margins inlineStart={8}>"
        },
        "depth_rank": 6
    },
    {
        "file": "InfiniteListAnchor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/InfiniteListAnchor.tsx",
        "code": {
            "observer": "\t\tconst observer = new IntersectionObserver(\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(e) => {\n\t\t\t\tif (e[0].isIntersecting) {\n\t\t\t\t\tloadMore();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\troot: null,\n\t\t\t\tthreshold: 0.1,\n\t\t\t},\n\t\t);\n\n\t\tobserver.observe(target);\n\n\t\treturn () => observer.disconnect();\n\t}, [loadMore]);\n\n\treturn <Box width={5} height={5} ref={ref} {...props} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "LocalTime.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/LocalTime.tsx",
        "code": {
            "t": "const LocalTime = ({ utcOffset }: LocalTimeProps): ReactElement => {\nconst LocalTime = ({ utcOffset }: LocalTimeProps): ReactElement => {\n\tconst time = useUTCClock(utcOffset);\n\tconst time = useUTCClock(utcOffset);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <>{t('Local_Time_time', { time })}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "RawText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RawText.tsx",
        "code": {
            "RawText": "const RawText = ({ children }: { children: string }): ReactElement => <span dangerouslySetInnerHTML={{ __html: children }} />;\nconst RawText = ({ children }: { children: string }): ReactElement => <span dangerouslySetInnerHTML={{ __html: children }} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "ConfirmOwnerChangeModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/ConfirmOwnerChangeModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tlet changeOwnerRooms = '';\n\tif (shouldChangeOwner.length > 0) {\n\t\tif (shouldChangeOwner.length === 1) {\n\t\t\tchangeOwnerRooms = t('A_new_owner_will_be_assigned_automatically_to_the__roomName__room', {\n\t\t\t\troomName: shouldChangeOwner.pop(),\n\t\t\t});\n\t\t} else if (shouldChangeOwner.length <= 5) {"
        },
        "depth_rank": 5
    },
    {
        "file": "AutoCompleteDepartment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/AutoCompleteDepartment.tsx",
        "code": {
            "AutoCompleteDepartment": "const AutoCompleteDepartment = ({\nconst AutoCompleteDepartment = ({\n\tvalue,\n\texcludeDepartmentId,\n\tonlyMyDepartments,\n\tonChange,\n\thaveAll,\n\thaveNone,\n\tshowArchived = false,\n}: AutoCompleteDepartmentProps): ReactElement | null => {",
            "debouncedDepartmentsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string>('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string>('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 5
    },
    {
        "file": "UrlChangeModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UrlChangeModal.tsx",
        "code": {
            "t": "const UrlChangeModal = ({ onConfirm, siteUrl, currentUrl, onClose }: UrlChangeModalProps): ReactElement => {\nconst UrlChangeModal = ({ onConfirm, siteUrl, currentUrl, onClose }: UrlChangeModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<GenericModal variant='warning' title={t('Warning')} onConfirm={onConfirm} onClose={onClose} onCancel={onClose} confirmText={t('Yes')}>"
        },
        "depth_rank": 5
    },
    {
        "file": "WarningModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/WarningModal.tsx",
        "code": {
            "t": "const WarningModal = ({ text, confirmText, close, cancel, cancelText, confirm, ...props }: WarningModalProps): ReactElement => {\nconst WarningModal = ({ text, confirmText, close, cancel, cancelText, confirm, ...props }: WarningModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 5
    },
    {
        "file": "AutoCompleteAgentWithoutExtension.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/AutoCompleteAgentWithoutExtension.tsx",
        "code": {
            "debouncedAgentsFilter": "\tconst [agentsFilter, setAgentsFilter] = useState<string | number | undefined>('');\n\tconst [agentsFilter, setAgentsFilter] = useState<string | number | undefined>('');\n\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter as string, 500);\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter as string, 500);\n\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAvailableAgentsList(\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAvailableAgentsList("
        },
        "depth_rank": 5
    },
    {
        "file": "MarkdownText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/MarkdownText.tsx",
        "code": {
            "markedHtml": "\tconst sanitizer = dompurify.sanitize;\n\tconst sanitizer = dompurify.sanitize;\n\n\tlet markedOptions: marked.MarkedOptions;\n\n\tconst schemes = 'http,https';\n\tconst schemes = 'http,https';\n\n\tswitch (variant) {\n\t\tcase 'inline':\n\t\t\tmarkedOptions = inlineOptions;\n\t\t\tbreak;\n\t\tcase 'inlineWithoutBreaks':\n\t\t\tmarkedOptions = inlineWithoutBreaksOptions;\n\t\t\tbreak;\n\t\tcase 'document':\n\t\tdefault:\n\t\t\tmarkedOptions = options;\n\t}\n\n\tconst __html = useMemo(() => {\n\tconst __html = useMemo(() => {\n\t\tconst html = ((): any => {\n\t\tconst html = ((): any => {\n\t\t\tif (content && typeof content === 'string') {\n\t\t\t\tconst markedHtml = /inline/.test(variant)\n\t\t\t\tconst markedHtml = /inline/.test(variant)\n\t\t\t\t\t? marked.parseInline(new Option(content).innerHTML, markedOptions)\n\t\t\t\t\t: marked.parse(new Option(content).innerHTML, markedOptions);\n\n\t\t\t\tif (parseEmoji) {\n\t\t\t\t\t// We are using the old emoji parser here. This could come\n\t\t\t\t\t// with additional processing use, but is the workaround available right now.\n\t\t\t\t\t// Should be replaced in the future with the new parser.\n\t\t\t\t\treturn renderMessageEmoji({ html: markedHtml });"
        },
        "depth_rank": 5
    },
    {
        "file": "AutoCompleteAgent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/AutoCompleteAgent.tsx",
        "code": {
            "AutoCompleteAgent": "const AutoCompleteAgent = ({\nconst AutoCompleteAgent = ({\n\tvalue,\n\terror,\n\tplaceholder,\n\tonChange,\n\thaveAll = false,\n\thaveNoAgentsSelectedOption = false,\n}: AutoCompleteAgentProps): ReactElement => {",
            "debouncedAgentsFilter": "\tconst [agentsFilter, setAgentsFilter] = useState<string>('');\n\tconst [agentsFilter, setAgentsFilter] = useState<string>('');\n\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter, 500);\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter, 500);\n\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAgentsList(\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAgentsList("
        },
        "depth_rank": 5
    },
    {
        "file": "UserStatusMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserStatusMenu.tsx",
        "code": {
            "renderOption": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [status, setStatus] = useState(initialStatus);\n\tconst [status, setStatus] = useState(initialStatus);\n\tconst allowInvisibleStatus = useSetting('Accounts_AllowInvisibleStatusOption') as boolean;\n\tconst allowInvisibleStatus = useSetting('Accounts_AllowInvisibleStatusOption') as boolean;\n\n\tconst options = useMemo(() => {\n\tconst options = useMemo(() => {\n\t\tconst renderOption = (status: UserStatusType, label: string): ReactElement => (\n\t\tconst renderOption = (status: UserStatusType, label: string): ReactElement => (\n\t\t\t<Box display='flex' flexDirection='row' alignItems='center'>\n\t\t\t\t<Box marginInlineEnd='x8'>\n\t\t\t\t\t<UserStatus status={status} />",
            "handleSelection": "\tconst handleSelection = useCallback(\n\tconst handleSelection = useCallback(\n\t\t([selected]) => {\n\t\t\tsetStatus(selected);\n\t\t\treset();\n\t\t\thide();\n\t\t},\n\t\t[hide, reset],\n\t);\n\n\tuseEffect(() => onChange(status), [status, onChange]);\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tref={ref}"
        },
        "depth_rank": 5
    },
    {
        "file": "ScrollableContentWrapper.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/ScrollableContentWrapper.tsx",
        "code": {
            "ScrollableContentWrapper": "const ScrollableContentWrapper = forwardRef<HTMLElement, CustomScrollbarsProps>(function ScrollableContentWrapper(\nconst ScrollableContentWrapper = forwardRef<HTMLElement, CustomScrollbarsProps>(function ScrollableContentWrapper(\n\t{ children, style, onScroll, overflowX, renderView, ...props },",
            "scrollbarsStyle": "\tconst scrollbarsStyle = useMemo((): CSSProperties => ({ ...style, ...styleDefault }), [style]);\n\tconst scrollbarsStyle = useMemo((): CSSProperties => ({ ...style, ...styleDefault }), [style]);"
        },
        "depth_rank": 5
    },
    {
        "file": "FilterByText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/FilterByText.tsx",
        "code": {
            "handleInputChange": "const isFilterByTextPropsWithButton = (props: any): props is FilterByTextPropsWithButton =>\nconst isFilterByTextPropsWithButton = (props: any): props is FilterByTextPropsWithButton =>\n\t'displayButton' in props && props.displayButton === true;\n\nconst FilterByText = ({ placeholder, onChange: setFilter, inputRef, children, autoFocus, ...props }: FilterByTextProps): ReactElement => {\nconst FilterByText = ({ placeholder, onChange: setFilter, inputRef, children, autoFocus, ...props }: FilterByTextProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n\tconst handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetFilter({ text });"
        },
        "depth_rank": 5
    },
    {
        "file": "UTCClock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UTCClock.tsx",
        "code": {
            "time": "const UTCClock = ({ utcOffset }: UTCClockProps): ReactElement => {\nconst UTCClock = ({ utcOffset }: UTCClockProps): ReactElement => {\n\tconst time = useUTCClock(utcOffset);\n\tconst time = useUTCClock(utcOffset);\n\n\treturn <>{time}</>;"
        },
        "depth_rank": 5
    },
    {
        "file": "Emoji.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Emoji.tsx",
        "code": {
            "EmojiComponent": "const EmojiComponent = styled('span', ({ fillContainer: _fillContainer, ...props }: { fillContainer?: boolean }) => props)`\nconst EmojiComponent = styled('span', ({ fillContainer: _fillContainer, ...props }: { fillContainer?: boolean }) => props)`",
            "Emoji": "function Emoji({ emojiHandle, className = undefined, fillContainer }: EmojiProps): ReactElement {\nfunction Emoji({ emojiHandle, className = undefined, fillContainer }: EmojiProps): ReactElement {\n\tconst { className: emojiClassName, image, ...props } = getEmojiClassNameAndDataTitle(emojiHandle);\n\tconst { className: emojiClassName, image, ...props } = getEmojiClassNameAndDataTitle(emojiHandle);"
        },
        "depth_rank": 5
    },
    {
        "file": "TextCopy.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/TextCopy.tsx",
        "code": {
            "onClick": "const TextCopy = ({ text, wrapper = defaultWrapperRenderer, ...props }: TextCopyProps): ReactElement => {\nconst TextCopy = ({ text, wrapper = defaultWrapperRenderer, ...props }: TextCopyProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst onClick = useCallback(() => {\n\tconst onClick = useCallback(() => {\n\t\ttry {\n\t\t\tnavigator.clipboard.writeText(text);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 5
    },
    {
        "file": "AutoCompleteDepartmentMultiple.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/AutoCompleteDepartmentMultiple.tsx",
        "code": {
            "AutoCompleteDepartmentMultiple": "const AutoCompleteDepartmentMultiple = ({\nconst AutoCompleteDepartmentMultiple = ({\n\tvalue,\n\tonlyMyDepartments = false,\n\tshowArchived = false,\n\tenabled = false,\n\tonChange = () => undefined,\n}: AutoCompleteDepartmentMultipleProps) => {",
            "debouncedDepartmentsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 5
    },
    {
        "file": "NotFoundState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/NotFoundState.tsx",
        "code": {
            "handleGoHomeClick": "const NotFoundState = ({ title, subtitle }: NotFoundProps): ReactElement => {\nconst NotFoundState = ({ title, subtitle }: NotFoundProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleGoHomeClick = () => {\n\tconst handleGoHomeClick = () => {\n\t\trouter.navigate('/home');\n\t};\n\n\treturn (\n\t\t<Box display='flex' justifyContent='center' height='full'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='magnifier' />\n\t\t\t\t<StatesTitle>{title}</StatesTitle>"
        },
        "depth_rank": 5
    },
    {
        "file": "PlanTag.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/PlanTag.tsx",
        "code": {
            "PlanTag": "function PlanTag(): ReactElement {\nfunction PlanTag(): ReactElement {\n\tconst [plans, setPlans] = useState<string[]>([]);\n\tconst [plans, setPlans] = useState<string[]>([]);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 5
    },
    {
        "file": "GazzodownText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GazzodownText.tsx",
        "code": {
            "alternatives": "\t\tconst alternatives = highlights.map(({ highlight }) => escapeRegExp(highlight)).join('|');\n\t\tconst alternatives = highlights.map(({ highlight }) => escapeRegExp(highlight)).join('|');",
            "filterTeam": "\t\t\tconst filterTeam = ({ name, type }: UserMention) => type === 'team' && name === mention;\n\t\t\tconst filterTeam = ({ name, type }: UserMention) => type === 'team' && name === mention;",
            "goToRoom": "\tconst goToRoom = useGoToRoom();\n\tconst goToRoom = useGoToRoom();\n\n\tconst { isEmbedded, isMobile } = useLayout();\n\tconst { isEmbedded, isMobile } = useLayout();",
            "resolveChannelMention": "\tconst resolveChannelMention = useCallback((mention: string) => channels?.find(({ name }) => name === mention), [channels]);\n\tconst resolveChannelMention = useCallback((mention: string) => channels?.find(({ name }) => name === mention), [channels]);",
            "onChannelMentionClick": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst onChannelMentionClick = useCallback(\n\tconst onChannelMentionClick = useCallback(\n\t\t({ _id: rid }: ChannelMention) =>"
        },
        "depth_rank": 5
    },
    {
        "file": "GenericUpsellModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericUpsellModal.tsx",
        "code": {
            "GenericUpsellModal": "const GenericUpsellModal = ({\nconst GenericUpsellModal = ({\n\ttagline,\n\ttitle,\n\tsubtitle,\n\timg,\n\tcancelText,\n\tconfirmText,\n\ticon,\n\tdescription,\n\tonCancel,\n\tonConfirm,\n\tonClose = onCancel,\n\tonCloseEffect,\n}: UpsellModalProps) => {",
            "onClose": "\tconst handleCancelModal = useCallback(() => {\n\tconst handleCancelModal = useCallback(() => {\n\t\thandleModalClose();\n\t\twindow.open(talkToSales, '_blank');\n\t}, [handleModalClose]);\n\n\tconst onCloseRef = useRef(onCloseEffect ?? handleModalClose);\n\tconst onCloseRef = useRef(onCloseEffect ?? handleModalClose);\n\tonCloseRef.current = onCloseEffect ?? handleModalClose;\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tconst onClose = onCloseRef.current;\n\t\t\tconst onClose = onCloseRef.current;\n\t\t\tonClose?.();\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t{icon && <Modal.Icon name={icon} />}"
        },
        "depth_rank": 5
    },
    {
        "file": "PageSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/PageSkeleton.tsx",
        "code": {
            "PageSkeleton": "const PageSkeleton = (): ReactElement => (\nconst PageSkeleton = (): ReactElement => (\n\t<Page>\n\t\t<Page.Header title={<Skeleton width='x320' maxWidth='full' />}>"
        },
        "depth_rank": 5
    },
    {
        "file": "Tags.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/Tags.tsx",
        "code": {
            "forms": "const Tags = ({ tags = [], handler, error, tagRequired, department }: TagsProps): ReactElement => {\nconst Tags = ({ tags = [], handler, error, tagRequired, department }: TagsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst forms = useFormsSubscription() as any;\n\tconst forms = useFormsSubscription() as any;\n\n\t// TODO: Refactor the formsSubscription to use components instead of hooks (since the only thing the hook does is return a component)\n\tconst { useCurrentChatTags } = forms;\n\tconst { useCurrentChatTags } = forms;",
            "paginatedTagValue": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [tagValue, handleTagValue] = useState('');\n\tconst [tagValue, handleTagValue] = useState('');\n\n\tconst paginatedTagValue = useMemo(() => tags.map((tag) => ({ label: tag, value: tag })), [tags]);\n\tconst paginatedTagValue = useMemo(() => tags.map((tag) => ({ label: tag, value: tag })), [tags]);"
        },
        "depth_rank": 6
    },
    {
        "file": "useLivechatTags.ts",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useLivechatTags.ts",
        "code": {
            "getTags": "\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\n\tconst { department, text } = options;\n\tconst { department, text } = options;"
        },
        "depth_rank": 7
    },
    {
        "file": "useAgentsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useAgentsList.ts",
        "code": {
            "fetchData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<AgentOption>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<AgentOption>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<AgentOption>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<AgentOption>()), []);\n\n\tconst getAgents = useEndpoint('GET', '/v1/livechat/users/agent');\n\tconst getAgents = useEndpoint('GET', '/v1/livechat/users/agent');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { users: agents, total } = await getAgents({\n\t\t\tconst { users: agents, total } = await getAgents({\n\t\t\t\t...(options.text && { text: options.text }),"
        },
        "depth_rank": 7
    },
    {
        "file": "useAvailableAgentsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useAvailableAgentsList.ts",
        "code": {
            "fetchData": "\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgent>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgent>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgent>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgent>()), []);\n\n\tconst getAgents = useEndpoint('GET', '/v1/omnichannel/agents/available');\n\tconst getAgents = useEndpoint('GET', '/v1/omnichannel/agents/available');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { agents, total } = await getAgents({\n\t\t\tconst { agents, total } = await getAgents({\n\t\t\t\t...(options.text && { text: options.text }),",
            "items": "\t\t\tconst items = agents.map((agent: any) => {\n\t\t\tconst items = agents.map((agent: any) => {\n\t\t\t\tagent._updatedAt = new Date(agent._updatedAt);\n\t\t\t\tagent.label = agent.username;\n\t\t\t\tagent.value = agent._id;\n\t\t\t\treturn agent;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getAgents, options.includeExtension, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);"
        },
        "depth_rank": 7
    },
    {
        "file": "ReturnChatQueueModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/ReturnChatQueueModal.tsx",
        "code": {
            "t": "const ReturnChatQueueModal: FC<ReturnChatQueueModalProps> = ({ onCancel, onMoveChat, ...props }) => {\nconst ReturnChatQueueModal: FC<ReturnChatQueueModalProps> = ({ onCancel, onMoveChat, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "EnterpriseDepartmentsModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/EnterpriseDepartmentsModal.tsx",
        "code": {
            "upgradeNowClick": "\tconst ref = useRef<HTMLDivElement>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst upgradeNowClick = (): void => {\n\tconst upgradeNowClick = (): void => {\n\t\ttabType && upgradeRoute.push({ type: tabType }, trialEndDate ? { trialEndDate } : undefined);",
            "onClose": "\tconst onClose = (): void => {\n\tconst onClose = (): void => {\n\t\tdepartmentsRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "CloseChatModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/CloseChatModal.tsx",
        "code": {
            "CloseChatModal": "const CloseChatModal = ({\nconst CloseChatModal = ({\n\tdepartment,\n\tvisitorEmail,\n\tonCancel,\n\tonConfirm,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tformState: { errors },",
            "requestData": "\t\t\tconst requestData = transcriptEmail && visitorEmail ? { email: visitorEmail, subject } : undefined;\n\t\t\tconst requestData = transcriptEmail && visitorEmail ? { email: visitorEmail, subject } : undefined;"
        },
        "depth_rank": 7
    },
    {
        "file": "ForwardChatModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/ForwardChatModal.tsx",
        "code": {
            "ForwardChatModal": "const ForwardChatModal = ({\nconst ForwardChatModal = ({\n\tonForward,\n\tonCancel,\n\troom,\n\t...props\n}: {",
            "idleAgentsAllowedForForwarding": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst idleAgentsAllowedForForwarding = useSetting('Livechat_enabled_when_agent_idle') as boolean;\n\tconst idleAgentsAllowedForForwarding = useSetting('Livechat_enabled_when_agent_idle') as boolean;\n\n\tconst { getValues, handleSubmit, register, setFocus, setValue, watch } = useForm();\n\tconst { getValues, handleSubmit, register, setFocus, setValue, watch } = useForm();",
            "debouncedDepartmentsFilter": "\tconst department = watch('department');\n\tconst department = watch('department');\n\tconst username = watch('username');\n\tconst username = watch('username');\n\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string | number | undefined>('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string | number | undefined>('');\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(",
            "onSubmit": "\tconst endReached = useCallback(\n\tconst endReached = useCallback(\n\t\t(start) => {\n\t\t\tif (departmentsPhase === AsyncStatePhase.LOADING) {\n\t\t\t\tloadMoreDepartments(start, Math.min(50, departmentsTotal));\n\t\t\t}\n\t\t},\n\t\t[departmentsPhase, departmentsTotal, loadMoreDepartments],\n\t);\n\n\tconst onSubmit = useCallback(\n\tconst onSubmit = useCallback(\n\t\tasync ({ department: departmentId, username, comment }) => {\n\t\t\tlet uid;\n\n\t\t\tif (username) {\n\t\t\t\tconst { user } = await getUserData({ username });\n\t\t\t\tconst { user } = await getUserData({ username });"
        },
        "depth_rank": 7
    },
    {
        "file": "CloseChatModalData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/CloseChatModalData.tsx",
        "code": {
            "CloseChatModalData": "const CloseChatModalData = ({\nconst CloseChatModalData = ({\n\tdepartmentId,\n\tvisitorEmail,\n\tonCancel,\n\tonConfirm,\n}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "TranscriptModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/TranscriptModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetValue,\n\t\tsetFocus,\n\t\twatch,\n\t\tformState: { errors, isValid },",
            "canSubmit": "\tconst canSubmit = isValid && Boolean(watch('subject'));\n\tconst canSubmit = isValid && Boolean(watch('subject'));\n\n\treturn (\n\t\t<Modal wrapperFunction={(props) => <Box is='form' onSubmit={handleSubmit(submit)} {...props} />} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "BurgerIcon.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerIcon.stories.tsx",
        "code": {
            "open": "\tconst open = useAutoSequence([false, true]);\n\tconst open = useAutoSequence([false, true]);\n\n\treturn <BurgerIcon open={open} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "BurgerMenuButton.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerMenuButton.stories.tsx",
        "code": {
            "as": "\t] as const);\n\t] as const);\n\n\treturn <BurgerMenuButton open={open} badge={badge} onClick={action('onClick')} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Wrapper.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/BurgerMenu/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "BurgerBadge.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerBadge.tsx",
        "code": {
            "BurgerBadge": "const BurgerBadge = ({ children }: { children?: unknown }): ReactElement => (\nconst BurgerBadge = ({ children }: { children?: unknown }): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "BurgerMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerMenu.tsx",
        "code": {
            "BurgerMenu": "const BurgerMenu = (): ReactElement => {\nconst BurgerMenu = (): ReactElement => {\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageCollapsible.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/MessageCollapsible.tsx",
        "code": {
            "MessageCollapsible": "const MessageCollapsible = ({ children, title, hasDownload, link, size, isCollapsed }: MessageCollapsibleProps): ReactElement => {\nconst MessageCollapsible = ({ children, title, hasDownload, link, size, isCollapsed }: MessageCollapsibleProps): ReactElement => {\n\tconst [collapsed, collapse] = useCollapse(isCollapsed);\n\tconst [collapsed, collapse] = useCollapse(isCollapsed);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='row' color='hint' fontScale='c1' alignItems='center'>\n\t\t\t\t<Box withTruncatedText title={title}>"
        },
        "depth_rank": 6
    },
    {
        "file": "ToolboxHolder.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/ToolboxHolder.tsx",
        "code": {
            "subscription": "const ToolboxHolder = ({ message, context }: ToolboxHolderProps): ReactElement => {\nconst ToolboxHolder = ({ message, context }: ToolboxHolderProps): ReactElement => {\n\tconst ref = useRef(null);\n\tconst ref = useRef(null);\n\n\tconst [visible] = useIsVisible(ref);\n\tconst [visible] = useIsVisible(ref);\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst depsQueryResult = useQuery(['toolbox', message._id, context], async () => {\n\tconst depsQueryResult = useQuery(['toolbox', message._id, context], async () => {\n\t\tconst room = await chat?.data.findRoom();\n\t\tconst room = await chat?.data.findRoom();\n\t\tconst subscription = await chat?.data.findSubscription();\n\t\tconst subscription = await chat?.data.findSubscription();\n\t\treturn {\n\t\t\troom,\n\t\t\tsubscription,\n\t\t};\n\t});\n\n\treturn (\n\t\t<MessageToolboxWrapper ref={ref}>"
        },
        "depth_rank": 6
    },
    {
        "file": "ReadReceiptIndicator.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/ReadReceiptIndicator.tsx",
        "code": {
            "ReadReceiptIndicator": "const ReadReceiptIndicator = ({ unread }: ReadReceiptIndicatorProps): ReactElement | null => (\nconst ReadReceiptIndicator = ({ unread }: ReadReceiptIndicatorProps): ReactElement | null => ("
        },
        "depth_rank": 6
    },
    {
        "file": "StatusIndicators.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/StatusIndicators.tsx",
        "code": {
            "starred": "const StatusIndicators = ({ message }: StatusIndicatorsProps): ReactElement => {\nconst StatusIndicators = ({ message }: StatusIndicatorsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst translated = useShowTranslated(message);\n\tconst translated = useShowTranslated(message);\n\tconst starred = useShowStarred({ message });\n\tconst starred = useShowStarred({ message });",
            "following": "\tconst following = useShowFollowing({ message });\n\tconst following = useShowFollowing({ message });",
            "formatter": "\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isOtrMessage = isOTRMessage(message);\n\tconst isOtrMessage = isOTRMessage(message);\n\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst formatter = useMessageDateFormatter();\n\tconst formatter = useMessageDateFormatter();\n\n\treturn (\n\t\t<MessageStatusIndicator>\n\t\t\t{translated && <MessageStatusIndicatorItem name='language' title={t('Translated')} />}"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/MessageHeader.tsx",
        "code": {
            "showRealName": "const MessageHeader = ({ message }: MessageHeaderProps): ReactElement => {\nconst MessageHeader = ({ message }: MessageHeaderProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst showRealName = useMessageListShowRealName();\n\tconst showRealName = useMessageListShowRealName();\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 6
    },
    {
        "file": "useOembedLayout.ts",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/hooks/useOembedLayout.ts",
        "code": {
            "enabled": "\tconst enabled = useSetting<boolean>('API_Embed', false);\n\tconst enabled = useSetting<boolean>('API_Embed', false);\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "maxHeight": "\tconst maxWidth = isMobile ? ('100%' as const) : 368;\n\tconst maxWidth = isMobile ? ('100%' as const) : 368;\n\tconst maxHeight = 368;\n\tconst maxHeight = 368;\n\n\treturn { enabled, maxWidth, maxHeight };"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageRoles.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/header/MessageRoles.tsx",
        "code": {
            "t": "const MessageRoles = ({ roles, isBot }: MessageRolesProps): ReactElement | null => {\nconst MessageRoles = ({ roles, isBot }: MessageRolesProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<FuselageMessageRoles>\n\t\t\t{roles.map((role, index) => (\n\t\t\t\t<MessageRole key={index}>{role}</MessageRole>"
        },
        "depth_rank": 7
    },
    {
        "file": "Reactions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/Reactions.tsx",
        "code": {
            "toggleReactionMutation": "const Reactions = ({ message }: ReactionsProps): ReactElement => {\nconst Reactions = ({ message }: ReactionsProps): ReactElement => {\n\tconst hasReacted = useUserHasReacted(message);\n\tconst hasReacted = useUserHasReacted(message);\n\tconst filterReactions = useReactionsFilter(message);\n\tconst filterReactions = useReactionsFilter(message);\n\tconst openEmojiPicker = useOpenEmojiPicker(message);\n\tconst openEmojiPicker = useOpenEmojiPicker(message);\n\n\tconst toggleReactionMutation = useToggleReactionMutation();\n\tconst toggleReactionMutation = useToggleReactionMutation();\n\n\treturn (\n\t\t<MessageReactions>\n\t\t\t{message.reactions &&\n\t\t\t\tObject.entries(message.reactions).map(([name, reactions]) => (\n\t\t\t\t\t<Reaction\n\t\t\t\t\t\tkey={name}"
        },
        "depth_rank": 7
    },
    {
        "file": "UiKitSurface.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/UiKitSurface.tsx",
        "code": {
            "handleOpenVideoConf": "const patchMessageParser = () => {\nconst patchMessageParser = () => {\n\tif (patched) {\n\t\treturn;\n\t}\n\n\tpatched = true;\n};\n\ntype UiKitSurfaceProps = {\n\tmid: IMessage['_id'];\n\tblocks: MessageSurfaceLayout;\n\trid: IRoom['_id'];\n\tappId?: string | boolean; // TODO: this is a hack while the context value is not properly typed\n};\n\nconst UiKitSurface = ({ mid: _mid, blocks, rid, appId }: UiKitSurfaceProps): ReactElement => {\nconst UiKitSurface = ({ mid: _mid, blocks, rid, appId }: UiKitSurfaceProps): ReactElement => {\n\tconst joinCall = useVideoConfJoinCall();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isRinging = useVideoConfIsRinging();\n\tconst isRinging = useVideoConfIsRinging();\n\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\n\tconst videoConfManager = useVideoConfManager();\n\tconst videoConfManager = useVideoConfManager();\n\n\tconst handleOpenVideoConf = useMutableCallback(async (rid: IRoom['_id']) => {\n\tconst handleOpenVideoConf = useMutableCallback(async (rid: IRoom['_id']) => {\n\t\tif (isCalling || isRinging) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait videoConfManager?.loadCapabilities();\n\t\t\tdispatchPopup({ rid });"
        },
        "depth_rank": 7
    },
    {
        "file": "UrlPreviews.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/UrlPreviews.tsx",
        "code": {
            "imageWidth": "const normalizeMeta = ({ url, meta }: { url: string; meta: Record<string, string> }): OEmbedPreviewMetadata => {\nconst normalizeMeta = ({ url, meta }: { url: string; meta: Record<string, string> }): OEmbedPreviewMetadata => {\n\tconst image = meta.ogImage || meta.twitterImage || meta.msapplicationTileImage || meta.oembedThumbnailUrl || meta.oembedThumbnailUrl;\n\tconst image = meta.ogImage || meta.twitterImage || meta.msapplicationTileImage || meta.oembedThumbnailUrl || meta.oembedThumbnailUrl;\n\n\tconst imageHeight = meta.ogImageHeight || meta.oembedHeight || meta.oembedThumbnailHeight;\n\tconst imageHeight = meta.ogImageHeight || meta.oembedHeight || meta.oembedThumbnailHeight;\n\tconst imageWidth = meta.ogImageWidth || meta.oembedWidth || meta.oembedThumbnailWidth;\n\tconst imageWidth = meta.ogImageWidth || meta.oembedWidth || meta.oembedThumbnailWidth;\n\n\treturn Object.fromEntries(\n\t\tObject.entries({\n\t\t\tsiteName: meta.ogSiteName || meta.oembedProviderName,\n\t\t\tsiteUrl: meta.ogUrl || meta.oembedProviderUrl,\n\t\t\ttitle: meta.ogTitle || meta.twitterTitle || meta.title || meta.pageTitle || meta.oembedTitle,\n\t\t\tdescription: meta.ogDescription || meta.twitterDescription || meta.description,\n\t\t\tauthorName: meta.oembedAuthorName,\n\t\t\tauthorUrl: meta.oembedAuthorUrl,\n\t\t\t...(image && {\n\t\t\t\timage: {\n\t\t\t\t\turl: buildImageURL(url, image),\n\t\t\t\t\tdimensions: {\n\t\t\t\t\t\t...(imageHeight && { height: imageHeight }),",
            "hasContentType": "const hasContentType = (headers: OembedUrlLegacy['headers']): headers is { contentType: string } =>\nconst hasContentType = (headers: OembedUrlLegacy['headers']): headers is { contentType: string } =>",
            "data": "\tconst data = hasMeta(url) ? normalizeMeta(url) : undefined;\n\tconst data = hasMeta(url) ? normalizeMeta(url) : undefined;\n\tif (data && isValidPreviewMeta(data)) {\n\t\treturn { type: 'oembed', data };",
            "isMetaPreview": "const isMetaPreview = (_data: PreviewData['data'], type: PreviewTypes): _data is OEmbedPreviewMetadata => type === 'oembed';\nconst isMetaPreview = (_data: PreviewData['data'], type: PreviewTypes): _data is OEmbedPreviewMetadata => type === 'oembed';\n\ntype UrlPreviewsProps = { urls: OembedUrlLegacy[] };",
            "UrlPreviews": "const UrlPreviews = ({ urls }: UrlPreviewsProps): ReactElement | null => {\nconst UrlPreviews = ({ urls }: UrlPreviewsProps): ReactElement | null => {\n\tconst { maxWidth: oembedMaxWidth } = useOembedLayout();\n\tconst { maxWidth: oembedMaxWidth } = useOembedLayout();",
            "metaAndHeaders": "\tconst metaAndHeaders = urls.map(processMetaAndHeaders).filter(isPreviewData);\n\tconst metaAndHeaders = urls.map(processMetaAndHeaders).filter(isPreviewData);\n\n\treturn (\n\t\t<>\n\t\t\t{metaAndHeaders.map(({ type, data }, index) => {\n\t\t\t\tif (isMetaPreview(data, type)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MessageBlock width='100%' maxWidth={oembedMaxWidth} key={index}>"
        },
        "depth_rank": 7
    },
    {
        "file": "Action.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/Action.tsx",
        "code": {
            "Action": "const Action = (props: ActionProps): ReactElement => <IconButton mi={2} mini {...props} />;\nconst Action = (props: ActionProps): ReactElement => <IconButton mi={2} mini {...props} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "Attachments.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/Attachments.tsx",
        "code": {
            "Attachments": "const Attachments = ({ attachments, collapsed }: AttachmentsProps): ReactElement => {\nconst Attachments = ({ attachments, collapsed }: AttachmentsProps): ReactElement => {\n\treturn (\n\t\t<>\n\t\t\t{attachments?.map((attachment, index) => (\n\t\t\t\t<AttachmentsItem key={index} attachment={{ ...attachment, collapsed }} />"
        },
        "depth_rank": 7
    },
    {
        "file": "ThreadMetrics.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/ThreadMetrics.tsx",
        "code": {
            "toggleFollowingThreadMutation": "const ThreadMetrics = ({ unread, mention, all, rid, mid, counter, participants, following, lm }: ThreadMetricsProps): ReactElement => {\nconst ThreadMetrics = ({ unread, mention, all, rid, mid, counter, participants, following, lm }: ThreadMetricsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst format = useTimeAgo();\n\tconst format = useTimeAgo();\n\n\tconst goToThread = useGoToThread();\n\tconst goToThread = useGoToThread();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst toggleFollowingThreadMutation = useToggleFollowingThreadMutation({\n\tconst toggleFollowingThreadMutation = useToggleFollowingThreadMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 7
    },
    {
        "file": "QuoteAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/QuoteAttachment.tsx",
        "code": {
            "formatTime": "\tconst formatTime = useTimeAgo();\n\tconst formatTime = useTimeAgo();\n\n\treturn (\n\t\t<>\n\t\t\t<AttachmentContent className={quoteStyles} width='full'>"
        },
        "depth_rank": 8
    },
    {
        "file": "DefaultAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/DefaultAttachment.tsx",
        "code": {
            "applyMarkdownIfRequires": "const applyMarkdownIfRequires = (\nconst applyMarkdownIfRequires = (\n\tlist: MessageAttachmentDefault['mrkdwn_in'] = ['text', 'pretext'],\n\tkey: MarkdownFields,\n\ttext: string,\n\tvariant: ComponentProps<typeof MarkdownText>['variant'] = 'inline',\n): ReactNode => (list?.includes(key) ? <MarkdownText parseEmoji variant={variant} content={text} /> : text);"
        },
        "depth_rank": 8
    },
    {
        "file": "AttachmentsItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/AttachmentsItem.tsx",
        "code": {
            "AttachmentsItem": "const AttachmentsItem = ({ attachment }: AttachmentsItemProps): ReactElement => {\nconst AttachmentsItem = ({ attachment }: AttachmentsItemProps): ReactElement => {\n\tif (isFileAttachment(attachment)) {\n\t\treturn <FileAttachment {...attachment} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ActionAttachmentButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/default/ActionAttachmentButton.tsx",
        "code": {
            "performActionMutation": "const ActionAttachmentButton = ({ children, processingType, msg, mid }: ActionAttachmentButtonProps): ReactElement => {\nconst ActionAttachmentButton = ({ children, processingType, msg, mid }: ActionAttachmentButtonProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst performActionMutation = usePerformActionMutation({\n\tconst performActionMutation = usePerformActionMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionAttachtment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/default/ActionAttachtment.tsx",
        "code": {
            "handleLinkClick": "\tconst handleLinkClick = useExternalLink();\n\tconst handleLinkClick = useExternalLink();\n\n\treturn (\n\t\t<ButtonGroup mb='x4' small>\n\t\t\t{actions\n\t\t\t\t.filter(\n\t\t\t\t\t({ type, msg_in_chat_window: msgInChatWindow, url, image_url: image, text }) =>",
            "content": "\t\t\t\t\tconst content = image ? <Box is='img' src={image} maxHeight={200} /> : text;\n\t\t\t\t\tconst content = image ? <Box is='img' src={image} maxHeight={200} /> : text;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/ImageAttachment.tsx",
        "code": {
            "getURL": "\tconst [loadImage, setLoadImage] = useLoadImage();\n\tconst [loadImage, setLoadImage] = useLoadImage();\n\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericFileAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/GenericFileAttachment.tsx",
        "code": {
            "getURL": "\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "AudioAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/AudioAttachment.tsx",
        "code": {
            "getURL": "\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoAttachment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/VideoAttachment.tsx",
        "code": {
            "getURL": "\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "AttachmentAuthorAvatar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/structure/AttachmentAuthorAvatar.tsx",
        "code": {
            "AttachmentAuthorAvatar": "const AttachmentAuthorAvatar = ({ url }: { url: string }): ReactElement => <BaseAvatar url={url} size='x24' />;\nconst AttachmentAuthorAvatar = ({ url }: { url: string }): ReactElement => <BaseAvatar url={url} size='x24' />;"
        },
        "depth_rank": 9
    },
    {
        "file": "AttachmentImage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/attachments/structure/AttachmentImage.tsx",
        "code": {
            "getDimensions": "const getDimensions = (\nconst getDimensions = (\n\toriginalWidth: Dimensions['width'],\n\toriginalHeight: Dimensions['height'],\n\tlimits: { width: number; height: number },",
            "limits": "const AttachmentImage: FC<AttachmentImageProps> = ({ previewUrl, dataSrc, loadImage = true, setLoadImage, src, ...size }) => {\nconst AttachmentImage: FC<AttachmentImageProps> = ({ previewUrl, dataSrc, loadImage = true, setLoadImage, src, ...size }) => {\n\tconst limits = useAttachmentDimensions();\n\tconst limits = useAttachmentDimensions();\n\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\n\tconst { width = limits.width, height = limits.height } = size;\n\tconst { width = limits.width, height = limits.height } = size;"
        },
        "depth_rank": 9
    },
    {
        "file": "UrlAudioPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlAudioPreview.tsx",
        "code": {
            "UrlAudioPreview": "const UrlAudioPreview = ({ url }: UrlAudioPreviewProps): ReactElement => <AudioPlayer src={url} />;\nconst UrlAudioPreview = ({ url }: UrlAudioPreviewProps): ReactElement => <AudioPlayer src={url} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "UrlPreviewResolver.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlPreviewResolver.tsx",
        "code": {
            "UrlPreviewResolver": "const UrlPreviewResolver = ({ url, type, originalType }: UrlPreviewMetadata): ReactElement | null => {\nconst UrlPreviewResolver = ({ url, type, originalType }: UrlPreviewMetadata): ReactElement | null => {\n\tswitch (type) {\n\t\tcase 'audio':\n\t\t\treturn <UrlAudioPreview url={url} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "UrlPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlPreview.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='row' color='hint' fontScale='c1' alignItems='center'>\n\t\t\t\t{t('Link_Preview')} {collapse}"
        },
        "depth_rank": 8
    },
    {
        "file": "UrlImagePreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlImagePreview.tsx",
        "code": {
            "UrlImagePreview": "const UrlImagePreview = ({ url }: Pick<UrlPreviewMetadata, 'url'>): ReactElement => {\nconst UrlImagePreview = ({ url }: Pick<UrlPreviewMetadata, 'url'>): ReactElement => {\n\tconst { maxHeight: oembedMaxHeight } = useOembedLayout();\n\tconst { maxHeight: oembedMaxHeight } = useOembedLayout();"
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedImagePreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedImagePreview.tsx",
        "code": {
            "OEmbedImagePreview": "const OEmbedImagePreview = ({ image, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedImagePreview = ({ image, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "UrlVideoPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlVideoPreview.tsx",
        "code": {
            "style": "const style = { maxWidth: '100%' };\nconst style = { maxWidth: '100%' };",
            "UrlVideoPreview": "const UrlVideoPreview = ({ url, originalType }: Omit<UrlPreviewMetadata, 'type'>): ReactElement => (\nconst UrlVideoPreview = ({ url, originalType }: Omit<UrlPreviewMetadata, 'type'>): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedCollapsible.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedCollapsible.tsx",
        "code": {
            "t": "const OEmbedCollapsible = ({ children, ...props }: OEmbedCollapsibleProps): ReactElement => {\nconst OEmbedCollapsible = ({ children, ...props }: OEmbedCollapsibleProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageCollapsible title={t('Link_Preview')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedResolver.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedResolver.tsx",
        "code": {
            "OEmbedResolver": "const OEmbedResolver = ({ meta }: OEmbedResolverProps): ReactElement | null => {\nconst OEmbedResolver = ({ meta }: OEmbedResolverProps): ReactElement | null => {\n\tswitch (meta.type) {\n\t\tcase 'rich':\n\t\tcase 'video':\n\t\t\treturn <OEmbedHtmlPreview {...meta} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedPreviewContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedPreviewContent.tsx",
        "code": {
            "OEmbedPreviewContent": "const OEmbedPreviewContent = ({\nconst OEmbedPreviewContent = ({\n\ttitle,\n\tdescription,\n\turl,\n\tthumb,\n\tauthorName,\n\tauthorUrl,\n\tsiteName,\n\tsiteUrl,\n}: OEmbedPreviewContentProps): ReactElement => {",
            "showFooterSeparator": "\tconst showSiteName = siteName && siteUrl;\n\tconst showSiteName = siteName && siteUrl;\n\tconst showAuthorName = authorName && authorUrl;\n\tconst showAuthorName = authorName && authorUrl;\n\tconst showFooterSeparator = showSiteName && showAuthorName;\n\tconst showFooterSeparator = showSiteName && showAuthorName;\n\n\treturn (\n\t\t<MessageGenericPreviewContent thumb={thumb}>"
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedHtmlPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedHtmlPreview.tsx",
        "code": {
            "OEmbedHtmlPreview": "const OEmbedHtmlPreview = ({ html, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedHtmlPreview = ({ html, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "OEmbedLinkPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedLinkPreview.tsx",
        "code": {
            "OEmbedLinkPreview": "const OEmbedLinkPreview = ({ image, url, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedLinkPreview = ({ image, url, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "MapViewImage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/location/MapViewImage.tsx",
        "code": {
            "t": "const MapViewImage: FC<MapViewImageProps> = ({ linkUrl, imageUrl }) => {\nconst MapViewImage: FC<MapViewImageProps> = ({ linkUrl, imageUrl }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ExternalLink to={linkUrl}>"
        },
        "depth_rank": 8
    },
    {
        "file": "useToggleReactionMutation.spec.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/reactions/useToggleReactionMutation.spec.tsx",
        "code": {
            "fn": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\tconst { result, waitForValueToChange } = renderHook(() => useToggleReactionMutation(), {\n\tconst { result, waitForValueToChange } = renderHook(() => useToggleReactionMutation(), {\n\t\twrapper: ({ children }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "Reaction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/content/reactions/Reaction.tsx",
        "code": {
            "emojiProps": "const getTranslationKey = (users: string[], mine: boolean): TranslationKey => {\nconst getTranslationKey = (users: string[], mine: boolean): TranslationKey => {\n\tif (users.length === 0) {\n\t\tif (mine) {\n\t\t\treturn 'You_reacted_with';\n\t\t}\n\t}\n\n\tif (users.length > 10) {\n\t\tif (mine) {\n\t\t\treturn 'You_users_and_more_Reacted_with';\n\t\t}\n\t\treturn 'Users_and_more_reacted_with';\n\t}\n\n\tif (mine) {\n\t\treturn 'You_and_users_Reacted_with';\n\t}\n\treturn 'Users_reacted_with';\n};\n\ntype ReactionProps = {\n\thasReacted: (name: string) => boolean;\n\tcounter: number;\n\tname: string;\n\tnames: string[];\n\tonClick: () => void;\n};\n\nconst Reaction = ({ hasReacted, counter, name, names, ...props }: ReactionProps): ReactElement => {\nconst Reaction = ({ hasReacted, counter, name, names, ...props }: ReactionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst openTooltip = useTooltipOpen();\n\tconst openTooltip = useTooltipOpen();\n\tconst closeTooltip = useTooltipClose();\n\tconst closeTooltip = useTooltipClose();\n\n\tconst mine = hasReacted(name);\n\tconst mine = hasReacted(name);\n\n\tconst key = getTranslationKey(names, mine);\n\tconst key = getTranslationKey(names, mine);\n\n\tconst emojiProps = getEmojiClassNameAndDataTitle(name);\n\tconst emojiProps = getEmojiClassNameAndDataTitle(name);\n\n\treturn (\n\t\t<MessageReactionTemplate\n\t\t\tref={ref}"
        },
        "depth_rank": 8
    },
    {
        "file": "ThreadMessagePreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/ThreadMessagePreview.tsx",
        "code": {
            "previewMessage": "const ThreadMessagePreview = ({ message, showUserAvatar, sequential, ...props }: ThreadMessagePreviewProps): ReactElement => {\nconst ThreadMessagePreview = ({ message, showUserAvatar, sequential, ...props }: ThreadMessagePreviewProps): ReactElement => {\n\tconst parentMessage = useParentMessage(message.tmid);\n\tconst parentMessage = useParentMessage(message.tmid);\n\n\tconst translated = useShowTranslated(message);\n\tconst translated = useShowTranslated(message);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isSelecting = useIsSelecting();\n\tconst isSelecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tuseCountSelected();\n\n\tconst messageType = parentMessage.isSuccess ? MessageTypes.getType(parentMessage.data) : null;\n\tconst messageType = parentMessage.isSuccess ? MessageTypes.getType(parentMessage.data) : null;\n\tconst messageBody = useMessageBody(parentMessage.data, message.rid);\n\tconst messageBody = useMessageBody(parentMessage.data, message.rid);\n\n\tconst previewMessage = isParsedMessage(messageBody) ? { md: messageBody } : { msg: messageBody };\n\tconst previewMessage = isParsedMessage(messageBody) ? { md: messageBody } : { msg: messageBody };",
            "goToThread": "\tconst goToThread = useGoToThread();\n\tconst goToThread = useGoToThread();\n\n\treturn (\n\t\t<ThreadMessage\n\t\t\t{...props}"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/RoomMessage.tsx",
        "code": {
            "RoomMessage": "const RoomMessage = ({\nconst RoomMessage = ({\n\tmessage,\n\tshowUserAvatar,\n\tsequential,\n\tall,\n\tmention,\n\tunread,\n\tcontext,\n\tignoredUser,\n\tsearchText,\n}: RoomMessageProps): ReactElement => {",
            "selected": "\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst messageRef = useRef(null);\n\tconst messageRef = useRef(null);\n\n\tconst selecting = useIsSelecting();\n\tconst selecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst selected = useIsSelectedMessage(message._id);\n\tconst selected = useIsSelectedMessage(message._id);\n\n\tuseCountSelected();\n\n\tuseJumpToMessage(message._id, messageRef);\n\treturn (\n\t\t<Message\n\t\t\tref={messageRef}"
        },
        "depth_rank": 7
    },
    {
        "file": "ThreadMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/ThreadMessage.tsx",
        "code": {
            "editing": "const ThreadMessage = ({ message, sequential, unread, showUserAvatar }: ThreadMessageProps): ReactElement => {\nconst ThreadMessage = ({ message, sequential, unread, showUserAvatar }: ThreadMessageProps): ReactElement => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst editing = useIsMessageHighlight(message._id);\n\tconst editing = useIsMessageHighlight(message._id);\n\tconst [ignored, toggleIgnoring] = useToggle((message as { ignored?: boolean }).ignored);\n\tconst [ignored, toggleIgnoring] = useToggle((message as { ignored?: boolean }).ignored);",
            "messageRef": "\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst messageRef = useRef(null);\n\tconst messageRef = useRef(null);\n\n\tuseJumpToMessage(message._id, messageRef);\n\n\treturn (\n\t\t<Message\n\t\t\tid={message._id}"
        },
        "depth_rank": 7
    },
    {
        "file": "SystemMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/SystemMessage.tsx",
        "code": {
            "showRealName": "const SystemMessage = ({ message, showUserAvatar }: SystemMessageProps): ReactElement => {\nconst SystemMessage = ({ message, showUserAvatar }: SystemMessageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst showRealName = useMessageListShowRealName();\n\tconst showRealName = useMessageListShowRealName();\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };",
            "isSelected": "\tconst messageType = MessageTypes.getType(message);\n\tconst messageType = MessageTypes.getType(message);\n\n\tconst isSelecting = useIsSelecting();\n\tconst isSelecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tuseCountSelected();\n\n\treturn (\n\t\t<MessageSystem\n\t\t\tonClick={isSelecting ? toggleSelected : undefined}"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomMessageContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/room/RoomMessageContent.tsx",
        "code": {
            "encrypted": "const RoomMessageContent = ({ message, unread, all, mention, searchText }: RoomMessageContentProps): ReactElement => {\nconst RoomMessageContent = ({ message, unread, all, mention, searchText }: RoomMessageContentProps): ReactElement => {\n\tconst encrypted = isE2EEMessage(message);\n\tconst encrypted = isE2EEMessage(message);\n\tconst { enabled: oembedEnabled } = useOembedLayout();\n\tconst { enabled: oembedEnabled } = useOembedLayout();",
            "uid": "\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 8
    },
    {
        "file": "ThreadMessagePreviewBody.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/threadPreview/ThreadMessagePreviewBody.tsx",
        "code": {
            "getMessage": "const ThreadMessagePreviewBody = ({ message }: ThreadMessagePreviewBodyProps): ReactElement => {\nconst ThreadMessagePreviewBody = ({ message }: ThreadMessagePreviewBodyProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\n\tconst getMessage = () => {\n\tconst getMessage = () => {\n\t\tconst mdTokens: Root | undefined = message.md && [...message.md];\n\t\tconst mdTokens: Root | undefined = message.md && [...message.md];\n\t\tif (\n\t\t\tmessage.attachments &&\n\t\t\tArray.isArray(message.attachments) &&\n\t\t\tmessage.attachments.length > 0 &&\n\t\t\tisQuoteAttachment(message.attachments[0])\n\t\t) {\n\t\t\tmdTokens?.shift();\n\t\t}\n\t\tif (message.attachments && message.msg === '') {\n\t\t\treturn <>{t('Message_with_attachment')}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "ThreadMessageContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/variants/thread/ThreadMessageContent.tsx",
        "code": {
            "encrypted": "const ThreadMessageContent = ({ message }: ThreadMessageContentProps): ReactElement => {\nconst ThreadMessageContent = ({ message }: ThreadMessageContentProps): ReactElement => {\n\tconst encrypted = isE2EEMessage(message);\n\tconst encrypted = isE2EEMessage(message);\n\tconst { enabled: oembedEnabled } = useOembedLayout();\n\tconst { enabled: oembedEnabled } = useOembedLayout();",
            "uid": "\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 8
    },
    {
        "file": "Toolbox.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/toolbox/Toolbox.tsx",
        "code": {
            "chat": "const getMessageContext = (message: IMessage, room: IRoom, context?: MessageActionContext): MessageActionContext => {\nconst getMessageContext = (message: IMessage, room: IRoom, context?: MessageActionContext): MessageActionContext => {\n\tif (context) {\n\t\treturn context;\n\t}\n\n\tif (message.t === 'videoconf') {\n\t\treturn 'videoconf';\n\t}\n\n\tif (isRoomFederated(room)) {\n\t\treturn 'federated';\n\t}\n\n\tif (isThreadMessage(message)) {\n\t\treturn 'threads';\n\t}\n\n\treturn 'message';\n};\n\ntype ToolboxProps = {\n\tmessage: IMessage & Partial<ITranslatedMessage>;\n\tmessageContext?: MessageActionContext;\n\troom: IRoom;\n\tsubscription?: ISubscription;\n};\n\nconst Toolbox = ({ message, messageContext, room, subscription }: ToolboxProps): ReactElement | null => {\nconst Toolbox = ({ message, messageContext, room, subscription }: ToolboxProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst settings = useSettings();\n\tconst settings = useSettings();\n\n\tconst quickReactionsEnabled = useFeaturePreview('quickReactions');\n\tconst quickReactionsEnabled = useFeaturePreview('quickReactions');\n\n\tconst setReaction = useMethod('setReaction');\n\tconst setReaction = useMethod('setReaction');\n\n\tconst context = getMessageContext(message, room, messageContext);\n\tconst context = getMessageContext(message, room, messageContext);\n\n\tconst mapSettings = useMemo(() => Object.fromEntries(settings.map((setting) => [setting._id, setting.value])), [settings]);\n\tconst mapSettings = useMemo(() => Object.fromEntries(settings.map((setting) => [setting._id, setting.value])), [settings]);\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst { quickReactions, addRecentEmoji } = useEmojiPickerData();\n\tconst { quickReactions, addRecentEmoji } = useEmojiPickerData();",
            "messageActions": "\tconst actionButtonApps = useMessageActionAppsActionButtons(context);\n\tconst actionButtonApps = useMessageActionAppsActionButtons(context);\n\n\tconst actionsQueryResult = useQuery(['rooms', room._id, 'messages', message._id, 'actions'] as const, async () => {\n\tconst actionsQueryResult = useQuery(['rooms', room._id, 'messages', message._id, 'actions'] as const, async () => {\n\t\tconst messageActions = await MessageAction.getButtons(\n\t\tconst messageActions = await MessageAction.getButtons(\n\t\t\t{ message, room, user: user ?? undefined, subscription, settings: mapSettings, chat },",
            "menuActions": "\t\tconst menuActions = await MessageAction.getButtons(\n\t\tconst menuActions = await MessageAction.getButtons(\n\t\t\t{ message, room, user: user ?? undefined, subscription, settings: mapSettings, chat },"
        },
        "depth_rank": 7
    },
    {
        "file": "MobileToolboxDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/toolbox/MobileToolboxDropdown.tsx",
        "code": {
            "MobileToolboxDropdown": "const MobileToolboxDropdown = forwardRef(function MobileToolboxDropdown(\nconst MobileToolboxDropdown = forwardRef(function MobileToolboxDropdown(\n\t{ children, ...props }: MobileToolboxDropdownProps,"
        },
        "depth_rank": 7
    },
    {
        "file": "ToolboxDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/toolbox/ToolboxDropdown.tsx",
        "code": {
            "ToolboxDropdown": "const ToolboxDropdown = <TReferenceElement extends HTMLElement>({\nconst ToolboxDropdown = <TReferenceElement extends HTMLElement>({\n\tchildren,\n\treference,\n}: ToolboxDropdownProps<TReferenceElement>): ReactElement => {",
            "Dropdown": "\tconst target = useRef<HTMLButtonElement>(null);\n\tconst target = useRef<HTMLButtonElement>(null);\n\n\tconst Dropdown = isMobile ? MobileToolboxDropdown : DesktopToolboxDropdown;\n\tconst Dropdown = isMobile ? MobileToolboxDropdown : DesktopToolboxDropdown;\n\n\treturn (\n\t\t<Dropdown ref={target} reference={reference}>"
        },
        "depth_rank": 7
    },
    {
        "file": "DesktopToolboxDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/toolbox/DesktopToolboxDropdown.tsx",
        "code": {
            "DesktopToolboxDropdown": "const DesktopToolboxDropdown = forwardRef(function ToolboxDropdownDesktop(\nconst DesktopToolboxDropdown = forwardRef(function ToolboxDropdownDesktop(\n\t{ reference, children }: DesktopToolboxDropdownProps,",
            "style": "\tconst targetRef = useRef<HTMLElement>(null);\n\tconst targetRef = useRef<HTMLElement>(null);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\n\tconst style = useDropdownPosition(reference, targetRef);\n\tconst style = useDropdownPosition(reference, targetRef);\n\n\treturn (\n\t\t<Tile is='ul' padding={0} paddingBlock={12} paddingInline={0} elevation='2' ref={mergedRef} style={style}>"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageListSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/message/list/MessageListSkeleton.tsx",
        "code": {
            "widths": "const availablePercentualWidths = [47, 68, 75, 82];\nconst availablePercentualWidths = [47, 68, 75, 82];\n\ntype MessageListSkeletonProps = {\n\tmessageCount?: number;\n};\n\nconst MessageListSkeleton = ({ messageCount = 2 }: MessageListSkeletonProps): ReactElement => {\nconst MessageListSkeleton = ({ messageCount = 2 }: MessageListSkeletonProps): ReactElement => {\n\tconst widths = useMemo(\n\tconst widths = useMemo(\n\t\t() =>\n\t\t\tArray.from(\n\t\t\t\t{ length: messageCount },"
        },
        "depth_rank": 7
    },
    {
        "file": "UserAutoComplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAutoComplete/UserAutoComplete.tsx",
        "code": {
            "query": "const query = (\nconst query = (\n\tterm = '',\n\tconditions = {},",
            "UserAutoComplete": "const UserAutoComplete = ({ value, onChange, ...props }: UserAutoCompleteProps): ReactElement => {\nconst UserAutoComplete = ({ value, onChange, ...props }: UserAutoCompleteProps): ReactElement => {\n\tconst { conditions = {} } = props;\n\tconst { conditions = {} } = props;",
            "usersAutoCompleteEndpoint": "\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter, conditions], async () =>\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter, conditions], async () =>",
            "options": "\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name || user.username })) || [], [data]);\n\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name || user.username })) || [], [data]);"
        },
        "depth_rank": 6
    },
    {
        "file": "UserCardInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCardInfo.tsx",
        "code": {
            "UserCardInfo": "const UserCardInfo = (props: ComponentProps<typeof Box>): ReactElement => (\nconst UserCardInfo = (props: ComponentProps<typeof Box>): ReactElement => (\n\t<Box mbe='x8' is='span' fontScale='p2' color='hint' withTruncatedText {...props} />"
        },
        "depth_rank": 6
    },
    {
        "file": "UserCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCard.tsx",
        "code": {
            "UserCard": "const UserCard = forwardRef(function UserCard(\nconst UserCard = forwardRef(function UserCard(\n\t{\n\t\tclassName,\n\t\tstyle,\n\t\topen,\n\t\tname,\n\t\tusername,\n\t\tetag,\n\t\tcustomStatus = <Skeleton width='100%' />,\n\t\troles = (\n\t\t\t<>\n\t\t\t\t<Skeleton flexGrow={1} mi='x2' />"
        },
        "depth_rank": 6
    },
    {
        "file": "UserCardUsername.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCardUsername.tsx",
        "code": {
            "UserCardUsername": "const UserCardUsername = ({ name, status = <UserStatus.Offline />, ...props }: UserCardUsernameProps): ReactElement => (\nconst UserCardUsername = ({ name, status = <UserStatus.Offline />, ...props }: UserCardUsernameProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserCardAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCardAction.tsx",
        "code": {
            "UserCardAction": "const UserCardAction = ({ label, icon, ...props }: UserCardActionProps): ReactElement => (\nconst UserCardAction = ({ label, icon, ...props }: UserCardActionProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserCardRole.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCardRole.tsx",
        "code": {
            "UserCardRole": "const UserCardRole = ({ children }: { children: ReactNode }): ReactElement => (\nconst UserCardRole = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserCardRoles.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserCard/UserCardRoles.tsx",
        "code": {
            "UserCardRoles": "const UserCardRoles = ({ children }: { children: ReactNode }): ReactElement => (\nconst UserCardRoles = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "RoomIcon.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RoomIcon/RoomIcon.tsx",
        "code": {
            "iconPropsOrReactNode": "\tconst iconPropsOrReactNode = useRoomIcon(room);\n\tconst iconPropsOrReactNode = useRoomIcon(room);\n\n\tif (isIncomingCall) {\n\t\treturn <Icon name='phone' size={size} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "OmnichannelCoreSourceRoomIcon.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelCoreSourceRoomIcon.tsx",
        "code": {
            "icon": "\tconst icon = iconMap[room.source?.type || 'other'] || 'headset';\n\tconst icon = iconMap[room.source?.type || 'other'] || 'headset';\n\treturn <Icon name={icon} size={size} color={colors[room.v?.status || 'offline']} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "OmnichannelAppSourceRoomIcon.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelAppSourceRoomIcon.tsx",
        "code": {
            "icon": "\tconst color = colors[room.v.status || 'offline'];\n\tconst color = colors[room.v.status || 'offline'];\n\tconst icon = (placement === 'sidebar' && room.source.sidebarIcon) || room.source.defaultIcon;\n\tconst icon = (placement === 'sidebar' && room.source.sidebarIcon) || room.source.defaultIcon;\n\tconst { phase, value } = useOmnichannelRoomIcon(room.source.id, icon || '');\n\tconst { phase, value } = useOmnichannelRoomIcon(room.source.id, icon || '');",
            "fontSize": "\tconst fontSize = convertBoxSizeToNumber(size);\n\tconst fontSize = convertBoxSizeToNumber(size);\n\tif ([AsyncStatePhase.REJECTED, AsyncStatePhase.LOADING].includes(phase)) {\n\t\treturn <Icon name='headset' size={size} color={color} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "PageBlockWithBorder.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/PageBlockWithBorder.tsx",
        "code": {
            "PageBlockWithBorder": "const PageBlockWithBorder = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageBlockWithBorder(props, ref) {\nconst PageBlockWithBorder = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageBlockWithBorder(props, ref) {\n\tconst [border] = useContext(PageContext);\n\tconst [border] = useContext(PageContext);\n\treturn (\n\t\t<PageContent\n\t\t\t{...props}"
        },
        "depth_rank": 6
    },
    {
        "file": "PageScrollableContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/PageScrollableContent.tsx",
        "code": {
            "PageScrollableContent": "const PageScrollableContent = forwardRef<HTMLElement, PageScrollableContentProps>(function PageScrollableContent(\nconst PageScrollableContent = forwardRef<HTMLElement, PageScrollableContentProps>(function PageScrollableContent(\n\t{ onScrollContent, borderBlockEndColor, ...props },"
        },
        "depth_rank": 6
    },
    {
        "file": "Page.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/Page.tsx",
        "code": {
            "Page": "const Page = ({ background = 'light', ...props }: PageProps): ReactElement => {\nconst Page = ({ background = 'light', ...props }: PageProps): ReactElement => {\n\tconst [border, setBorder] = useState(false);\n\tconst [border, setBorder] = useState(false);\n\treturn (\n\t\t<PageContext.Provider value={[border, setBorder]}>"
        },
        "depth_rank": 6
    },
    {
        "file": "PageContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/PageContent.tsx",
        "code": {
            "PageContent": "const PageContent = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageContent(props, ref) {\nconst PageContent = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageContent(props, ref) {\n\treturn <Box ref={ref} paddingInline='x24' display='flex' flexDirection='column' overflowY='hidden' height='full' {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "Page.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/Page.stories.tsx",
        "code": {
            "DummyContent": "const DummyContent = ({ rows = 10 }: { rows?: number }) => (\nconst DummyContent = ({ rows = 10 }: { rows?: number }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "PageHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Page/PageHeader.tsx",
        "code": {
            "t": "const PageHeader: FC<PageHeaderProps> = ({ children = undefined, title, onClickBack, borderBlockEndColor, ...props }) => {\nconst PageHeader: FC<PageHeaderProps> = ({ children = undefined, title, onClickBack, borderBlockEndColor, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [border] = useContext(PageContext);\n\tconst [border] = useContext(PageContext);\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 6
    },
    {
        "file": "withDoNotAskAgain.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericModal/withDoNotAskAgain.tsx",
        "code": {
            "dontAskAgainList": "function withDoNotAskAgain<T extends RequiredModalProps>(\nfunction withDoNotAskAgain<T extends RequiredModalProps>(\n\tComponent: ComponentType<any>,\n): FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> {\n\tconst WrappedComponent: FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> = function ({ onConfirm, dontAskAgain, ...props }) {\n\tconst WrappedComponent: FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> = function ({ onConfirm, dontAskAgain, ...props }) {\n\t\tconst t = useTranslation();\n\t\tconst t = useTranslation();\n\t\tconst dontAskAgainList = useUserPreference<DontAskAgainList>('dontAskAgainList');\n\t\tconst dontAskAgainList = useUserPreference<DontAskAgainList>('dontAskAgainList');\n\t\tconst { action, label } = dontAskAgain;\n\t\tconst { action, label } = dontAskAgain;",
            "handleConfirm": "\t\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\t\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\t\tconst [state, setState] = useState<boolean>(false);\n\t\tconst [state, setState] = useState<boolean>(false);\n\n\t\tconst handleConfirm = async (): Promise<void> => {\n\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tif (state) {\n\t\t\t\t\tawait saveFn({ data: { dontAskAgainList: [...(dontAskAgainList || []), { action, label }] } });"
        },
        "depth_rank": 6
    },
    {
        "file": "GenericModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericModal/GenericModal.tsx",
        "code": {
            "getButtonProps": "const getButtonProps = (variant: VariantType): ComponentProps<typeof Button> => {\nconst getButtonProps = (variant: VariantType): ComponentProps<typeof Button> => {\n\tswitch (variant) {\n\t\tcase 'danger':\n\t\t\treturn { danger: true };",
            "renderIcon": "const renderIcon = (icon: GenericModalProps['icon'], variant: VariantType): ReactNode => {\nconst renderIcon = (icon: GenericModalProps['icon'], variant: VariantType): ReactNode => {\n\tif (icon === null) {\n\t\treturn null;\n\t}\n\n\tif (icon === undefined) {\n\t\treturn <Modal.Icon color={variant} name={iconMap[variant]} />;",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal wrapperFunction={wrapperFunction} {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "GenericModalSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericModal/GenericModalSkeleton.tsx",
        "code": {
            "t": "const GenericModalSkeleton = ({ onClose, ...props }: ComponentProps<typeof GenericModal>) => {\nconst GenericModalSkeleton = ({ onClose, ...props }: ComponentProps<typeof GenericModal>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\t{...props}"
        },
        "depth_rank": 6
    },
    {
        "file": "GenericNoResults.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericNoResults/GenericNoResults.tsx",
        "code": {
            "t": "const GenericNoResults = ({ icon = 'magnifier', title, description, buttonTitle, buttonAction }: GenericNoResultsProps) => {\nconst GenericNoResults = ({ icon = 'magnifier', title, description, buttonTitle, buttonAction }: GenericNoResultsProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<States>\n\t\t\t<StatesIcon name={icon} />"
        },
        "depth_rank": 6
    },
    {
        "file": "GenericTable.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericTable/GenericTable.stories.tsx",
        "code": {
            "filter": "const filter = (\nconst filter = (\n\t<>\n\t\t<Box mb='x16' is='form' display='flex' flexDirection='column'>\n\t\t\t<TextInput flexShrink={0} placeholder='Search...' addon={<Icon name='magnifier' size='x20' />} />"
        },
        "depth_rank": 6
    },
    {
        "file": "InfoPanelTitle.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/InfoPanel/InfoPanelTitle.tsx",
        "code": {
            "isValidIcon": "const isValidIcon = (icon: ReactNode): icon is IconName => typeof icon === 'string';\nconst isValidIcon = (icon: ReactNode): icon is IconName => typeof icon === 'string';\n\nconst InfoPanelTitle: FC<InfoPanelTitleProps> = ({ title, icon }) => (\nconst InfoPanelTitle: FC<InfoPanelTitleProps> = ({ title, icon }) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "InfoPanelAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/InfoPanel/InfoPanelAction.tsx",
        "code": {
            "InfoPanelAction": "const InfoPanelAction = ({ label, icon, ...props }: InfoPanelActionProps): ReactElement => (\nconst InfoPanelAction = ({ label, icon, ...props }: InfoPanelActionProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "RetentionPolicyCallout.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/InfoPanel/RetentionPolicyCallout.tsx",
        "code": {
            "time": "const RetentionPolicyCallout: FC<RetentionPolicyCalloutProps> = ({ filesOnlyDefault, excludePinnedDefault, maxAgeDefault }) => {\nconst RetentionPolicyCallout: FC<RetentionPolicyCalloutProps> = ({ filesOnlyDefault, excludePinnedDefault, maxAgeDefault }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst time = useFormattedRelativeTime(maxAgeDefault);\n\tconst time = useFormattedRelativeTime(maxAgeDefault);\n\n\treturn (\n\t\t<Callout type='warning'>\n\t\t\t{filesOnlyDefault && excludePinnedDefault && <p>{t('RetentionPolicy_RoomWarning_FilesOnly', { time })}</p>}"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAndRoomAutoCompleteMultiple.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAndRoomAutoCompleteMultiple.tsx/UserAndRoomAutoCompleteMultiple.tsx",
        "code": {
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\trooms.map(({ rid, fname, name, avatarETag, t }) => ({\n\t\t\t\tvalue: rid,\n\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 6
    },
    {
        "file": "ReactiveUserStatus.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserStatus/ReactiveUserStatus.tsx",
        "code": {
            "status": "const ReactiveUserStatus = ({ uid, ...props }: ReactiveUserStatusProps): ReactElement => {\nconst ReactiveUserStatus = ({ uid, ...props }: ReactiveUserStatusProps): ReactElement => {\n\tconst status = usePresence(uid)?.status;\n\tconst status = usePresence(uid)?.status;\n\treturn <UserStatus.UserStatus status={status} {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserInfoUsername.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoUsername.tsx",
        "code": {
            "UserInfoUsername": "const UserInfoUsername = ({ username, status, ...props }: UserInfoUsernameProps): ReactElement => (\nconst UserInfoUsername = ({ username, status, ...props }: UserInfoUsernameProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserInfoAvatar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoAvatar.tsx",
        "code": {
            "UserInfoAvatar": "const UserInfoAvatar = ({ username, ...props }: ComponentProps<typeof UserAvatar>): ReactElement => (\nconst UserInfoAvatar = ({ username, ...props }: ComponentProps<typeof UserAvatar>): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserInfoAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoAction.tsx",
        "code": {
            "UserInfoAction": "const UserInfoAction = ({ icon, label, ...props }: UserInfoActionProps): ReactElement => (\nconst UserInfoAction = ({ icon, label, ...props }: UserInfoActionProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "UserInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfo.tsx",
        "code": {
            "UserInfo": "const UserInfo = ({\nconst UserInfo = ({\n\tusername,\n\tname,\n\tlastLogin,\n\tnickname,\n\tbio,\n\tavatarETag,\n\troles,\n\tutcOffset,\n\tphone,\n\temail,\n\tverified,\n\tcreatedAt,\n\tstatus,\n\tstatusText,\n\tcustomFields,\n\tcanViewAllInfo,\n\tactions,\n\t...props\n}: UserInfoProps): ReactElement => {",
            "userDisplayName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst timeAgo = useTimeAgo();\n\tconst timeAgo = useTimeAgo();\n\tconst userDisplayName = useUserDisplayName({ name, username });\n\tconst userDisplayName = useUserDisplayName({ name, username });",
            "userCustomFields": "\tconst userCustomFields = useUserCustomFields(customFields);\n\tconst userCustomFields = useUserCustomFields(customFields);\n\n\treturn (\n\t\t<ContextualbarScrollableContent p='x24' {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAutoCompleteMultiple.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultiple.tsx",
        "code": {
            "usersAutoCompleteEndpoint": "const query = (\nconst query = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ term }) });\n\ntype UserAutoCompleteMultipleProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'>;\n\n// TODO: useDisplayUsername\nconst UserAutoCompleteMultiple = ({ onChange, ...props }: UserAutoCompleteMultipleProps): ReactElement => {\nconst UserAutoCompleteMultiple = ({ onChange, ...props }: UserAutoCompleteMultipleProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter], async () => usersAutoCompleteEndpoint(query(debouncedFilter)));\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter], async () => usersAutoCompleteEndpoint(query(debouncedFilter)));",
            "options": "\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name })) || [], [data]);\n\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name })) || [], [data]);"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAutoCompleteMultipleOption.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleOption.tsx",
        "code": {
            "UserAutoCompleteMultipleOption": "const UserAutoCompleteMultipleOption = ({ label, ...props }: UserAutoCompleteMultipleOptionProps): ReactElement => {\nconst UserAutoCompleteMultipleOption = ({ label, ...props }: UserAutoCompleteMultipleOptionProps): ReactElement => {\n\tconst { name, username, _federated } = label;\n\tconst { name, username, _federated } = label;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAutoCompleteMultipleFederated.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleFederated.tsx",
        "code": {
            "UserAutoCompleteMultipleFederated": "const UserAutoCompleteMultipleFederated = ({\nconst UserAutoCompleteMultipleFederated = ({\n\tonChange,\n\tvalue,\n\tplaceholder,\n\t...props\n}: UserAutoCompleteMultipleFederatedProps): ReactElement => {",
            "getUsers": "\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst getUsers = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst getUsers = useEndpoint('GET', '/v1/users.autocomplete');\n\n\tconst { data } = useQuery(\n\tconst { data } = useQuery(",
            "users": "\tconst onRemoveUser = useCallback(\n\tconst onRemoveUser = useCallback(\n\t\t(username: string): void =>\n\t\t\tsetSelectedCache((selectedCache) => {\n\t\t\t\tconst users = { ...selectedCache };\n\t\t\t\tconst users = { ...selectedCache };",
            "options": "\t\t\tconst options = users.items.map((item): [string, UserAutoCompleteOptionType] => [item.username, item]);\n\t\t\tconst options = users.items.map((item): [string, UserAutoCompleteOptionType] => [item.username, item]);\n\n\t\t\t// Add extra option if filter text matches `username:server`\n\t\t\t// Used to add federated users that do not exist yet\n\t\t\tif (matrixRegex.test(debouncedFilter)) {\n\t\t\t\toptions.unshift([debouncedFilter, { name: debouncedFilter, username: debouncedFilter, _federated: true }]);",
            "currentCachedOption": "\t\t\t\t\tconst currentCachedOption = selectedCache[value] || {};\n\t\t\t\t\tconst currentCachedOption = selectedCache[value] || {};"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAutoCompleteMultipleOptions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleOptions.tsx",
        "code": {
            "UserAutoCompleteMultipleOptions": "const UserAutoCompleteMultipleOptions = forwardRef(function UserAutoCompleteMultipleOptions(\nconst UserAutoCompleteMultipleOptions = forwardRef(function UserAutoCompleteMultipleOptions(\n\t{ onSelect, ...props }: ComponentProps<typeof Options>,"
        },
        "depth_rank": 6
    },
    {
        "file": "TwoFactorEmailModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorEmailModal.tsx",
        "code": {
            "onClickResendCode": "const TwoFactorEmailModal = ({ onConfirm, onClose, emailOrUsername, invalidAttempt }: TwoFactorEmailModalProps): ReactElement => {\nconst TwoFactorEmailModal = ({ onConfirm, onClose, emailOrUsername, invalidAttempt }: TwoFactorEmailModalProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\n\tconst sendEmailCode = useEndpoint('POST', '/v1/users.2fa.sendEmailCode');\n\tconst sendEmailCode = useEndpoint('POST', '/v1/users.2fa.sendEmailCode');\n\n\tconst onClickResendCode = async (): Promise<void> => {\n\tconst onClickResendCode = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait sendEmailCode({ emailOrUsername });",
            "id": "\tconst onConfirmEmailCode = (e: SyntheticEvent): void => {\n\tconst onConfirmEmailCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.EMAIL);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmEmailCode} {...props} />}"
        },
        "depth_rank": 6
    },
    {
        "file": "TwoFactorPasswordModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorPasswordModal.tsx",
        "code": {
            "id": "const TwoFactorPasswordModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorPasswordModalProps): ReactElement => {\nconst TwoFactorPasswordModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorPasswordModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus();\n\tconst ref = useAutoFocus();\n\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.PASSWORD);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmTotpCode} {...props} />}"
        },
        "depth_rank": 6
    },
    {
        "file": "TwoFactorTotpModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorTotpModal.tsx",
        "code": {
            "id": "const TwoFactorTotpModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorTotpModalProps): ReactElement => {\nconst TwoFactorTotpModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorTotpModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.TOTP);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmTotpCode} {...props} />}"
        },
        "depth_rank": 6
    },
    {
        "file": "TwoFactorModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorModal.tsx",
        "code": {
            "confirm": "const TwoFactorModal = ({ onConfirm, onClose, invalidAttempt, ...props }: TwoFactorModalProps): ReactElement => {\nconst TwoFactorModal = ({ onConfirm, onClose, invalidAttempt, ...props }: TwoFactorModalProps): ReactElement => {\n\tconst logoutOtherSessions = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\tconst logoutOtherSessions = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\n\tconst confirm = (code: any, method: Method): void => {\n\tconst confirm = (code: any, method: Method): void => {\n\t\tonConfirm(code, method);\n\t\tlogoutOtherSessions();\n\t};\n\tif (props.method === Method.TOTP) {\n\t\treturn <TwoFactorTotp onConfirm={confirm} onClose={onClose} invalidAttempt={invalidAttempt} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "GenericMenuItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericMenu/GenericMenuItem.tsx",
        "code": {
            "GenericMenuItem": "const GenericMenuItem = ({ icon, content, addon, status, gap }: GenericMenuItemProps) => (\nconst GenericMenuItem = ({ icon, content, addon, status, gap }: GenericMenuItemProps) => ("
        },
        "depth_rank": 6
    },
    {
        "file": "GenericMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericMenu/GenericMenu.tsx",
        "code": {
            "itemsList": "const GenericMenu = ({ title, icon = 'menu', onAction, ...props }: GenericMenuProps) => {\nconst GenericMenu = ({ title, icon = 'menu', onAction, ...props }: GenericMenuProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = 'sections' in props && props.sections;\n\tconst sections = 'sections' in props && props.sections;\n\tconst items = 'items' in props && props.items;\n\tconst items = 'items' in props && props.items;\n\n\tconst itemsList = sections ? sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]) : items || [];\n\tconst itemsList = sections ? sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]) : items || [];",
            "disabledKeys": "\tconst disabledKeys = itemsList.filter(({ disabled }) => disabled).map(({ id }) => id);\n\tconst disabledKeys = itemsList.filter(({ disabled }) => disabled).map(({ id }) => id);",
            "hasIcon": "\tconst handleAction = useHandleMenuAction(itemsList || []);\n\tconst handleAction = useHandleMenuAction(itemsList || []);\n\n\tconst hasIcon = itemsList.some(({ icon }) => icon);\n\tconst hasIcon = itemsList.some(({ icon }) => icon);"
        },
        "depth_rank": 6
    },
    {
        "file": "CreateDiscussion.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/CreateDiscussion/CreateDiscussion.tsx",
        "code": {
            "t": "const CreateDiscussion = ({ onClose, defaultParentRoom, parentMessageId, nameSuggestion }: CreateDiscussionProps): ReactElement => {\nconst CreateDiscussion = ({ onClose, defaultParentRoom, parentMessageId, nameSuggestion }: CreateDiscussionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\tformState: { isDirty, errors },",
            "handleCreate": "\tconst createDiscussion = useEndpoint('POST', '/v1/rooms.createDiscussion');\n\tconst createDiscussion = useEndpoint('POST', '/v1/rooms.createDiscussion');\n\n\tconst createDiscussionMutation = useMutation({\n\tconst createDiscussionMutation = useMutation({\n\t\tmutationFn: createDiscussion,\n\t\tonSuccess: ({ discussion }) => {\n\t\t\tgoToRoomById(discussion._id);\n\t\t\tonClose();\n\t\t},\n\t});\n\n\tconst handleCreate = async ({ name, parentRoom, encrypted, usernames, firstMessage }: CreateDiscussionFormValues) => {\n\tconst handleCreate = async ({ name, parentRoom, encrypted, usernames, firstMessage }: CreateDiscussionFormValues) => {\n\t\tcreateDiscussionMutation.mutate({\n\t\t\tprid: defaultParentRoom || parentRoom,\n\t\t\tt_name: name,\n\t\t\tusers: usernames,\n\t\t\treply: encrypted ? undefined : firstMessage,\n\t\t\t...(parentMessageId && { pmid: parentMessageId }),"
        },
        "depth_rank": 6
    },
    {
        "file": "ContextualbarScrollableContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Contextualbar/ContextualbarScrollableContent.tsx",
        "code": {
            "ContextualbarScrollableContent": "const ContextualbarScrollableContent = forwardRef<HTMLElement, ComponentProps<typeof Page.ScrollableContent>>(\nconst ContextualbarScrollableContent = forwardRef<HTMLElement, ComponentProps<typeof Page.ScrollableContent>>(\n\tfunction ContextualbarScrollableContent({ children, ...props }, ref) {\n\tfunction ContextualbarScrollableContent({ children, ...props }, ref) {\n\t\treturn (\n\t\t\t<Page.ScrollableContent p='x24' {...props} ref={ref}>"
        },
        "depth_rank": 6
    },
    {
        "file": "Contextualbar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Contextualbar/Contextualbar.tsx",
        "code": {
            "position": "const Contextualbar: FC<ComponentProps<typeof ContextualbarComponent>> = ({ children, bg = 'room', ...props }) => {\nconst Contextualbar: FC<ComponentProps<typeof ContextualbarComponent>> = ({ children, bg = 'room', ...props }) => {\n\tconst sizes = useLayoutSizes();\n\tconst sizes = useLayoutSizes();\n\tconst position = useLayoutContextualBarPosition();\n\tconst position = useLayoutContextualBarPosition();\n\n\treturn (\n\t\t<ContextualbarComponent bg={bg} width={sizes.contextualBar} position={position} {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomAutoComplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RoomAutoComplete/RoomAutoComplete.tsx",
        "code": {
            "options": "const generateQuery = (\nconst generateQuery = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ name: term }) });\n\ntype RoomAutoCompleteProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'>;\n\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\t\tkeepPreviousData: true,\n\t});\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tresult.isSuccess\n\t\t\t\t? result.data.items.map(({ name, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: _id,\n\t\t\t\t\t\tlabel: { name, avatarETag, type: t },"
        },
        "depth_rank": 6
    },
    {
        "file": "CounterSet.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/dataView/CounterSet.tsx",
        "code": {
            "CounterSet": "const CounterSet = ({ counters = [] }: CounterSetProps): ReactElement => (\nconst CounterSet = ({ counters = [] }: CounterSetProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "Counter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/dataView/Counter.tsx",
        "code": {
            "Counter": "const Counter = ({ count, variation = 0, description }: CounterProps): ReactElement => (\nconst Counter = ({ count, variation = 0, description }: CounterProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "NegativeGrowthSymbol.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/dataView/NegativeGrowthSymbol.tsx",
        "code": {
            "NegativeGrowthSymbol": "const NegativeGrowthSymbol = (props: NegativeGrowthSymbolProps): ReactElement => (\nconst NegativeGrowthSymbol = (props: NegativeGrowthSymbolProps): ReactElement => (\n\t<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 25 24' style={style} {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "PositiveGrowthSymbol.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/dataView/PositiveGrowthSymbol.tsx",
        "code": {
            "PositiveGrowthSymbol": "const PositiveGrowthSymbol = (props: PositiveGrowthSymbolProps): ReactElement => (\nconst PositiveGrowthSymbol = (props: PositiveGrowthSymbolProps): ReactElement => (\n\t<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' style={style} {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "VoipRoomForeword.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/voip/room/VoipRoomForeword.tsx",
        "code": {
            "roomName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst avatarUrl = getUserAvatarURL(room.name) as string;\n\tconst avatarUrl = getUserAvatarURL(room.name) as string;\n\n\tconst roomName = room.fname;\n\tconst roomName = room.fname;\n\n\treturn (\n\t\t<Box is='div' flexGrow={1} display='flex' justifyContent='center' flexDirection='column'>"
        },
        "depth_rank": 7
    },
    {
        "file": "ConnectionStatusBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/connectionStatus/ConnectionStatusBar.tsx",
        "code": {
            "reconnectionTimerRef": "const useReconnectCountdown = (\nconst useReconnectCountdown = (\n\tretryTime: number | undefined,\n\tstatus: 'connected' | 'connecting' | 'failed' | 'waiting' | 'offline',\n): number => {\n\tconst reconnectionTimerRef = useRef<ReturnType<typeof setInterval>>();\n\tconst reconnectionTimerRef = useRef<ReturnType<typeof setInterval>>();\n\tconst [reconnectCountdown, setReconnectCountdown] = useState(() => (retryTime ? getReconnectCountdown(retryTime) : 0));\n\tconst [reconnectCountdown, setReconnectCountdown] = useState(() => (retryTime ? getReconnectCountdown(retryTime) : 0));\n\n\tuseEffect(() => {\n\t\tif (status === 'waiting') {\n\t\t\tif (reconnectionTimerRef.current) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treconnectionTimerRef.current = setInterval(() => {\n\t\t\t\tretryTime && setReconnectCountdown(getReconnectCountdown(retryTime));\n\t\t\t}, 500);\n\t\t\treturn;\n\t\t}\n\n\t\treconnectionTimerRef.current && clearInterval(reconnectionTimerRef.current);\n\t\treconnectionTimerRef.current = undefined;\n\t}, [retryTime, status]);\n\n\tuseEffect(\n\t\t() => (): void => {\n\t\t\treconnectionTimerRef.current && clearInterval(reconnectionTimerRef.current);\n\t\t},\n\t\t[],\n\t);\n\n\treturn reconnectCountdown;\n};\n\nconst ConnectionStatusBar: FC = function ConnectionStatusBar() {\nconst ConnectionStatusBar: FC = function ConnectionStatusBar() {\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();",
            "t": "\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (connected) {\n\t\treturn null;\n\t}\n\n\tconst handleRetryClick: MouseEventHandler<HTMLAnchorElement> = (event) => {\n\tconst handleRetryClick: MouseEventHandler<HTMLAnchorElement> = (event) => {\n\t\tevent.preventDefault();\n\t\treconnect?.();\n\t};\n\n\treturn (\n\t\t<div className='ConnectionStatusBar' role='alert'>\n\t\t\t<strong>\n\t\t\t\t<Icon name='warning' /> {t('meteor_status' as Parameters<typeof t>[0], { context: status })}"
        },
        "depth_rank": 6
    },
    {
        "file": "ConnectionStatusBar.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/connectionStatus/ConnectionStatusBar.stories.tsx",
        "code": {
            "stateDecorator": "const stateDecorator = (value: ContextType<typeof ConnectionStatusContext>) => (fn: () => ReactElement) =>\nconst stateDecorator = (value: ContextType<typeof ConnectionStatusContext>) => (fn: () => ReactElement) =>\n\t<ConnectionStatusContext.Provider value={value}>{fn()}</ConnectionStatusContext.Provider>;"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalBackdrop.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/modal/ModalBackdrop.tsx",
        "code": {
            "backdrop": "const isAtBackdropChildren = (e: MouseEvent, ref: RefObject<HTMLElement>): boolean => {\nconst isAtBackdropChildren = (e: MouseEvent, ref: RefObject<HTMLElement>): boolean => {\n\tconst backdrop = ref.current;\n\tconst backdrop = ref.current;\n\tconst { parentElement } = e.target as HTMLElement;\n\tconst { parentElement } = e.target as HTMLElement;",
            "useOutsideClick": "const useOutsideClick = (\nconst useOutsideClick = (\n\tref: RefObject<HTMLElement>,\n\tonDismiss: (() => void) | undefined,\n): {\n\tonMouseDown: (e: MouseEvent) => void;\n\tonMouseUp: (e: MouseEvent) => void;\n} => {",
            "ref": "const ModalBackdrop = ({ children, onDismiss }: ModalBackdropProps): ReactElement => {\nconst ModalBackdrop = ({ children, onDismiss }: ModalBackdropProps): ReactElement => {\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tuseEscapeKey(onDismiss);\n\tconst { onMouseDown, onMouseUp } = useOutsideClick(ref, onDismiss);\n\tconst { onMouseDown, onMouseUp } = useOutsideClick(ref, onDismiss);"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomAutoCompleteMultiple.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/RoomAutoCompleteMultiple/RoomAutoCompleteMultiple.tsx",
        "code": {
            "options": "const generateQuery = (\nconst generateQuery = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ name: term }) });\n\ntype RoomAutoCompleteProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'> & {\n\treadOnly?: boolean;\n};\n\nconst RoomAutoCompleteMultiple = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\nconst RoomAutoCompleteMultiple = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\t\tkeepPreviousData: true,\n\t});\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tresult.isSuccess\n\t\t\t\t? result.data.items.map(({ fname, name, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: _id,\n\t\t\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 6
    },
    {
        "file": "SidebarItemsAssembler.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Sidebar/SidebarItemsAssembler.tsx",
        "code": {
            "t": "const SidebarItemsAssembler: FC<SidebarItemsAssemblerProps> = ({ items, currentPath }) => {\nconst SidebarItemsAssembler: FC<SidebarItemsAssemblerProps> = ({ items, currentPath }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t{items.map((props) => (\n\t\t\t\t<Fragment key={props.i18nLabel}>"
        },
        "depth_rank": 6
    },
    {
        "file": "SidebarGenericItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Sidebar/SidebarGenericItem.tsx",
        "code": {
            "SidebarGenericItem": "const SidebarGenericItem = ({ href, active, externalUrl, children, ...props }: SidebarGenericItemProps): ReactElement => (\nconst SidebarGenericItem = ({ href, active, externalUrl, children, ...props }: SidebarGenericItemProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "Header.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Sidebar/Header.tsx",
        "code": {
            "t": "const Header: FC<HeaderProps> = ({ title, onClose, children, ...props }) => {\nconst Header: FC<HeaderProps> = ({ title, onClose, children, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box is='header' display='flex' flexDirection='column' pb='x16' {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "ListItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/Sidebar/ListItem.tsx",
        "code": {
            "ListItem": "const ListItem = ({ icon, text, input, children, gap, ...props }: ListItemProps): ReactElement => (\nconst ListItem = ({ icon, text, input, children, gap, ...props }: ListItemProps): ReactElement => ("
        },
        "depth_rank": 6
    },
    {
        "file": "GenericResourceUsage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/GenericResourceUsage/GenericResourceUsage.tsx",
        "code": {
            "GenericResourceUsage": "const GenericResourceUsage = ({\nconst GenericResourceUsage = ({\n\ttitle,\n\tvalue,\n\tmax,\n\tpercentage,\n\tthreshold = 80,\n\tvariant = percentage < threshold ? 'success' : 'danger',\n\tsubTitle,\n\t...props\n}: {"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomAvatar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/avatar/RoomAvatar.tsx",
        "code": {
            "getRoomPathAvatar": "const RoomAvatar = function RoomAvatar({ room, ...rest }: RoomAvatarProps): ReactElement {\nconst RoomAvatar = function RoomAvatar({ room, ...rest }: RoomAvatarProps): ReactElement {\n\tconst getRoomPathAvatar = useRoomAvatarPath();\n\tconst getRoomPathAvatar = useRoomAvatarPath();\n\tconst { url = getRoomPathAvatar(room), ...props } = rest;\n\tconst { url = getRoomPathAvatar(room), ...props } = rest;"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomAvatarEditor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/avatar/RoomAvatarEditor.tsx",
        "code": {
            "reader": "const RoomAvatarEditor = ({ disabled = false, room, roomAvatar, onChangeAvatar }: RoomAvatarEditorProps): ReactElement => {\nconst RoomAvatarEditor = ({ disabled = false, room, roomAvatar, onChangeAvatar }: RoomAvatarEditorProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleChangeAvatar = useMutableCallback(async (file) => {\n\tconst handleChangeAvatar = useMutableCallback(async (file) => {\n\t\tconst reader = new FileReader();\n\t\tconst reader = new FileReader();\n\t\treader.readAsDataURL(file);\n\t\treader.onloadend = async (): Promise<void> => {\n\t\t\tconst { result } = reader;\n\t\t\tconst { result } = reader;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAvatar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/avatar/UserAvatar.tsx",
        "code": {
            "getUserAvatarPath": "const UserAvatar: FC<UserAvatarProps> = ({ username, etag, ...rest }) => {\nconst UserAvatar: FC<UserAvatarProps> = ({ username, etag, ...rest }) => {\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst { url = getUserAvatarPath(username, etag), ...props } = rest;\n\tconst { url = getUserAvatarPath(username, etag), ...props } = rest;"
        },
        "depth_rank": 6
    },
    {
        "file": "UserAvatarEditor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/components/avatar/UserAvatarEditor/UserAvatarEditor.tsx",
        "code": {
            "setUploadedPreview": "const toDataURL = (file: File, callback: (result: FileReader['result']) => void): void => {\nconst toDataURL = (file: File, callback: (result: FileReader['result']) => void): void => {\n\tconst reader = new FileReader();\n\tconst reader = new FileReader();\n\treader.onloadend = function (e): void {\n\treader.onloadend = function (e): void {\n\t\tcallback(e?.target?.result || null);\n\t};\n\treader.readAsDataURL(file);\n};\n\ntype AvatarSuggestion = {\n\tservice: string;\n\turl: string;\n};\n\ntype UserAvatarEditorType = {\n\tcurrentUsername: IUser['username'];\n\tusername: IUser['username'];\n\tsetAvatarObj: (obj: AvatarObject) => void;\n\tsuggestions: AvatarSuggestion[] | undefined;\n\tdisabled: boolean;\n\tetag: IUser['avatarETag'];\n};\n\nfunction UserAvatarEditor({ currentUsername, username, setAvatarObj, suggestions, disabled, etag }: UserAvatarEditorType): ReactElement {\nfunction UserAvatarEditor({ currentUsername, username, setAvatarObj, suggestions, disabled, etag }: UserAvatarEditorType): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst rotateImages = useSetting('FileUpload_RotateImages');\n\tconst rotateImages = useSetting('FileUpload_RotateImages');\n\tconst [avatarFromUrl, setAvatarFromUrl] = useState('');\n\tconst [avatarFromUrl, setAvatarFromUrl] = useState('');\n\tconst [newAvatarSource, setNewAvatarSource] = useState<string>();\n\tconst [newAvatarSource, setNewAvatarSource] = useState<string>();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst setUploadedPreview = useCallback(\n\tconst setUploadedPreview = useCallback(\n\t\tasync (file, avatarObj) => {\n\t\t\tsetAvatarObj(avatarObj);\n\t\t\ttoDataURL(file, async (dataURL) => {\n\t\t\t\tif (typeof dataURL === 'string' && (await isValidImageFormat(dataURL))) {\n\t\t\t\t\tsetNewAvatarSource(dataURL);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdispatchToastMessage({ type: 'error', message: t('Avatar_format_invalid') });",
            "clickUrl": "\tconst [clickUpload] = useFileInput(setUploadedPreview);\n\tconst [clickUpload] = useFileInput(setUploadedPreview);\n\n\tconst clickUrl = (): void => {\n\tconst clickUrl = (): void => {\n\t\tsetNewAvatarSource(avatarFromUrl);\n\t\tsetAvatarObj({ avatarUrl: avatarFromUrl });",
            "handleAvatarFromUrlChange": "\tconst url = newAvatarSource;\n\tconst url = newAvatarSource;\n\n\tconst handleAvatarFromUrlChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleAvatarFromUrlChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetAvatarFromUrl(event.currentTarget.value);\n\t};\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' fontScale='p2m' color='default'>\n\t\t\t{t('Profile_picture')}"
        },
        "depth_rank": 7
    },
    {
        "file": "UserAvatarSuggestions.js",
        "path": "../Rocket.Chat/apps/meteor/client/components/avatar/UserAvatarEditor/UserAvatarSuggestions.js",
        "code": {
            "handleClick": "function UserAvatarSuggestions({ suggestions, setAvatarObj, setNewAvatarSource, disabled, ...props }) {\nfunction UserAvatarSuggestions({ suggestions, setAvatarObj, setNewAvatarSource, disabled, ...props }) {\n\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\t(suggestion) => () => {\n\t\t\tsetAvatarObj(suggestion);\n\t\t\tsetNewAvatarSource(suggestion.blob);\n\t\t},\n\t\t[setAvatarObj, setNewAvatarSource],\n\t);\n\n\treturn (\n\t\t<Margins inline='x4' {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "otr.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/otr.ts",
        "code": {
            "msg": "\t\tconst instanceByRoomId = OTR.getInstanceByRoomId(message.rid);\n\t\tconst instanceByRoomId = OTR.getInstanceByRoomId(message.rid);\n\n\t\tif (message.rid && instanceByRoomId && instanceByRoomId.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst msg = await instanceByRoomId.encrypt(message);\n\t\t\tconst msg = await instanceByRoomId.encrypt(message);\n\t\t\treturn { ...message, msg, t: 'otr' };",
            "decrypted": "\t\t\tconst decrypted = await instanceByRoomId.decrypt(message.msg);\n\t\t\tconst decrypted = await instanceByRoomId.decrypt(message.msg);\n\t\t\tif (typeof decrypted === 'string') {\n\t\t\t\treturn { ...message, msg: decrypted };",
            "otrAck": "\t\t\t\tconst otrAck = await instanceByRoomId.decrypt(message.otrAck);\n\t\t\t\tconst otrAck = await instanceByRoomId.decrypt(message.otrAck);\n\t\t\t\tif (typeof otrAck === 'string') {\n\t\t\t\t\treturn { ...message, msg: otrAck };",
            "encryptedAck": "\t\t\t\tconst encryptedAck = await instanceByRoomId.encryptText(ack);\n\t\t\t\tconst encryptedAck = await instanceByRoomId.encryptText(ack);\n\n\t\t\t\tvoid sdk.call('updateOTRAck', { message, ack: encryptedAck });"
        },
        "depth_rank": 5
    },
    {
        "file": "ldap.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/ldap.ts",
        "code": {
            "as": "(Meteor as any).loginWithLDAP = function (username: string, password: string, callback?: (err?: any) => void): void {\n(Meteor as any).loginWithLDAP = function (username: string, password: string, callback?: (err?: any) => void): void {\n\tAccounts.callLoginMethod({\n\t\tmethodArguments: [\n\t\t\t{\n\t\t\t\tldap: true,\n\t\t\t\tusername,\n\t\t\t\tldapPass: password,\n\t\t\t\tldapOptions: {},"
        },
        "depth_rank": 5
    },
    {
        "file": "iframeCommands.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/iframeCommands.ts",
        "code": {
            "customOauth": "\t\t\tconst customOauth = ServiceConfiguration.configurations.findOne({ service: data.service });\n\t\t\tconst customOauth = ServiceConfiguration.configurations.findOne({ service: data.service });",
            "customRedirectUri": "\t\t\t\tconst customRedirectUri = data.redirectUrl || siteUrl;\n\t\t\t\tconst customRedirectUri = data.redirectUrl || siteUrl;\n\t\t\t\tcustomLoginWith.call(Meteor, { redirectUrl: customRedirectUri }, customOAuthCallback);"
        },
        "depth_rank": 5
    },
    {
        "file": "loadMissedMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/loadMissedMessages.ts",
        "code": {
            "subscription": "\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tif (result) {\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });"
        },
        "depth_rank": 5
    },
    {
        "file": "e2e.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/e2e.ts",
        "code": {
            "subscription": "\t\t\tconst subscription = await waitUntilFind(() => ChatRoom.findOne({ _id: message.rid }));\n\t\t\tconst subscription = await waitUntilFind(() => ChatRoom.findOne({ _id: message.rid }));"
        },
        "depth_rank": 5
    },
    {
        "file": "unread.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/unread.ts",
        "code": {
            "room": "\t\tconst userUnreadAlert = getUserPreference(Meteor.userId(), 'unreadAlert');\n\t\tconst userUnreadAlert = getUserPreference(Meteor.userId(), 'unreadAlert');\n\n\t\tlet unreadAlert: false | '\u2022' = false;\n\n\t\tconst unreadCount = fetchSubscriptions().reduce(\n\t\tconst unreadCount = fetchSubscriptions().reduce(\n\t\t\t(ret, subscription) =>\n\t\t\t\tTracker.nonreactive(() => {\n\t\t\t\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, { fields: { usersCount: 1 } });\n\t\t\t\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, { fields: { usersCount: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "rootUrlChange.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/rootUrlChange.ts",
        "code": {
            "confirm": "\t\t\tconst confirm = (): void => {\n\t\t\tconst confirm = (): void => {\n\t\t\t\timperativeModal.close();\n\t\t\t\tvoid sdk.call('saveSetting', 'Site_Url', currentUrl).then(() => {\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });"
        },
        "depth_rank": 5
    },
    {
        "file": "permalinkStar.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/actionButtons/permalinkStar.ts",
        "code": {
            "permalink": "\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tnavigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 6
    },
    {
        "file": "permalinkPinned.ts",
        "path": "../Rocket.Chat/apps/meteor/client/startup/actionButtons/permalinkPinned.ts",
        "code": {
            "permalink": "\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tnavigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 6
    },
    {
        "file": "RouterContextMock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/stories/contexts/RouterContextMock.tsx",
        "code": {
            "value": "const logAction = action('RouterContext');\nconst logAction = action('RouterContext');\n\ntype RouterContextMockProps = {\n\tchildren: ReactNode;\n};\n\nconst RouterContextMock = ({ children }: RouterContextMockProps): ReactElement => {\nconst RouterContextMock = ({ children }: RouterContextMockProps): ReactElement => {\n\tconst parent = useContext(RouterContext);\n\tconst parent = useContext(RouterContext);\n\n\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t(): ContextType<typeof RouterContext> => ({\n\t\t\t...parent,\n\t\t\tnavigate: (...args): void => {\n\t\t\t\tlogAction('navigate', ...args);\n\t\t\t},\n\t\t}),\n\t\t[parent],\n\t);\n\n\treturn <RouterContext.Provider children={children} value={value} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "QueryClientProviderMock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/stories/contexts/QueryClientProviderMock.tsx",
        "code": {
            "queryClient": "const queryCache = new QueryCache();\nconst queryCache = new QueryCache();\n\nconst queryClient = new QueryClient({\nconst queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\tretry: false,\n\t\t\tcacheTime: Infinity,\n\t\t},\n\t},\n\tqueryCache,\n});\n\nconst QueryClientProviderMock: FC = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\nconst QueryClientProviderMock: FC = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;"
        },
        "depth_rank": 6
    },
    {
        "file": "ServerContextMock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/stories/contexts/ServerContextMock.tsx",
        "code": {
            "ServerContextMock": "const ServerContextMock = ({\nconst ServerContextMock = ({\n\tchildren,\n\tbaseURL,\n\tcallEndpoint = {},",
            "mockedEndpoints": "\tconst parent = useContext(ServerContext);\n\tconst parent = useContext(ServerContext);\n\n\tconst value = useMemo((): ContextType<typeof ServerContext> => {\n\tconst value = useMemo((): ContextType<typeof ServerContext> => {\n\t\ttype ServerContextValue = ContextType<typeof ServerContext>;\n\n\t\tconst absoluteURL: ServerContextValue['absoluteUrl'] = (path): string => {\n\t\tconst absoluteURL: ServerContextValue['absoluteUrl'] = (path): string => {\n\t\t\tlogAction('absoluteUrl', path);\n\t\t\treturn new URL(path, baseURL).toString();\n\t\t};\n\n\t\tconst mockedEndpoints = Object.entries(callEndpoint).map(\n\t\tconst mockedEndpoints = Object.entries(callEndpoint).map(\n\t\t\t([operationID, handler]): {\n\t\t\t\tmatch: (method: string, path: string) => boolean;\n\t\t\t\thandler: ((params: any) => Promise<unknown>) | 'infinite' | 'errored' | undefined;\n\t\t\t} => {"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalContextMock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/stories/contexts/ModalContextMock.tsx",
        "code": {
            "value": "const logAction = action('ModalContext');\nconst logAction = action('ModalContext');\n\ntype ModalContextMockProps = {\n\tchildren: ReactNode;\n};\n\nconst ModalContextMock = ({ children }: ModalContextMockProps): ReactElement => {\nconst ModalContextMock = ({ children }: ModalContextMockProps): ReactElement => {\n\tconst context = useContext(ModalContext);\n\tconst context = useContext(ModalContext);\n\n\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t(): ContextType<typeof ModalContext> =>\n\t\t\tcontext?.modal\n\t\t\t\t? {\n\t\t\t\t\t\tmodal: {\n\t\t\t\t\t\t\t...context.modal,\n\t\t\t\t\t\t\tsetModal: (modal): void => {\n\t\t\t\t\t\t\t\tlogAction('setModal', modal);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentModal: context.currentModal,\n\t\t\t\t  }\n\t\t\t\t: undefined,\n\t\t[context],\n\t);\n\n\treturn <ModalContext.Provider children={children} value={value} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "VideoConfProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/VideoConfProvider.tsx",
        "code": {
            "contextValue": "const VideoConfContextProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst VideoConfContextProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst [outgoing, setOutgoing] = useState<VideoConfPopupPayload | undefined>();\n\tconst [outgoing, setOutgoing] = useState<VideoConfPopupPayload | undefined>();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\n\tuseEffect(\n\t\t() =>\n\t\t\tVideoConfManager.on('call/join', (props) => {\n\t\t\t\thandleOpenCall(props.url);\n\t\t\t}),\n\t\t[handleOpenCall],\n\t);\n\n\tuseEffect(() => {\n\t\tVideoConfManager.on('direct/stopped', () => setOutgoing(undefined));\n\t\tVideoConfManager.on('calling/ended', () => setOutgoing(undefined));\n\t}, []);\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tmanager: VideoConfManager,\n\t\t\tdispatchOutgoing: (option: Omit<VideoConfPopupPayload, 'id'>): void => setOutgoing({ ...option, id: option.rid }),"
        },
        "depth_rank": 5
    },
    {
        "file": "ServerProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/ServerProvider.tsx",
        "code": {
            "callEndpoint": "const absoluteUrl = (path: string): string => Meteor.absoluteUrl(path);\nconst absoluteUrl = (path: string): string => Meteor.absoluteUrl(path);\n\nconst callMethod = <MethodName extends ServerMethodName>(\nconst callMethod = <MethodName extends ServerMethodName>(\n\tmethodName: MethodName,\n\t...args: ServerMethodParameters<MethodName>\n): Promise<ServerMethodReturn<MethodName>> => Meteor.callAsync(methodName, ...args);\n\nconst callEndpoint = <TMethod extends Method, TPathPattern extends PathPattern>({\nconst callEndpoint = <TMethod extends Method, TPathPattern extends PathPattern>({\n\tmethod,\n\tpathPattern,\n\tkeys,\n\tparams,\n}: {",
            "compiledPath": "\tconst compiledPath = compile(pathPattern, { encode: encodeURIComponent })(keys) as any;\n\tconst compiledPath = compile(pathPattern, { encode: encodeURIComponent })(keys) as any;",
            "contextValue": "const contextValue = {\nconst contextValue = {\n\tinfo,\n\tabsoluteUrl,\n\tcallMethod,\n\tcallEndpoint,\n\tuploadToEndpoint,\n\tgetStream,\n\tgetSingleStream,\n};\n\nconst ServerProvider: FC = ({ children }) => <ServerContext.Provider children={children} value={contextValue} />;\nconst ServerProvider: FC = ({ children }) => <ServerContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "AppsProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/AppsProvider.tsx",
        "code": {
            "appIndex": "\t\t\tconst marketplaceApps: App[] = [];\n\t\t\tconst marketplaceApps: App[] = [];\n\t\t\tconst installedApps: App[] = [];\n\t\t\tconst installedApps: App[] = [];\n\t\t\tconst privateApps: App[] = [];\n\t\t\tconst privateApps: App[] = [];\n\t\t\tconst clonedData = [...instance.data];\n\t\t\tconst clonedData = [...instance.data];\n\n\t\t\tsortByName(marketplace.data).forEach((app) => {\n\t\t\t\tconst appIndex = clonedData.findIndex(({ id }) => id === app.id);\n\t\t\t\tconst appIndex = clonedData.findIndex(({ id }) => id === app.id);"
        },
        "depth_rank": 5
    },
    {
        "file": "TranslationProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/TranslationProvider.tsx",
        "code": {
            "parseToJSON": "const namespacesDefault = ['core', 'onboarding', 'registration', 'cloud'] as TranslationNamespace[];\nconst namespacesDefault = ['core', 'onboarding', 'registration', 'cloud'] as TranslationNamespace[];\n\nconst parseToJSON = (customTranslations: string): Record<string, Record<string, string>> | false => {\nconst parseToJSON = (customTranslations: string): Record<string, Record<string, string>> | false => {\n\ttry {\n\t\treturn JSON.parse(customTranslations);\n\t} catch (e) {",
            "extractKeys": "\tconst extractKeys = useMutableCallback(\n\tconst extractKeys = useMutableCallback(\n\t\t(source: Record<string, string>, lngs?: string | string[], namespaces: string | string[] = []): { [key: string]: any } => {\n\t\t\tconst result: { [key: string]: any } = {};\n\t\t\tconst result: { [key: string]: any } = {};",
            "namespace": "\t\t\tconst namespaces = Object.entries(translations).reduce((acc, [key, value]): Record<string, Record<string, string>> => {\n\t\t\tconst namespaces = Object.entries(translations).reduce((acc, [key, value]): Record<string, Record<string, string>> => {\n\t\t\t\tconst namespace = key.split('.')[0];\n\t\t\t\tconst namespace = key.split('.')[0];\n\n\t\t\t\tif (namespacesDefault.includes(namespace as unknown as TranslationNamespace)) {\n\t\t\t\t\tacc[namespace] = acc[namespace] ?? {};",
            "lang": "\tconst [language] = useLocalStorage('userLanguage', suggestedLanguage);\n\tconst [language] = useLocalStorage('userLanguage', suggestedLanguage);\n\n\tdocument.documentElement.classList[isRTLScriptLanguage(language) ? 'add' : 'remove']('rtl');\n\tdocument.documentElement.setAttribute('dir', isRTLScriptLanguage(language) ? 'rtl' : 'ltr');\n\tdocument.documentElement.lang = language;\n\n\t// if user has no language set, we should set it to the default language\n\treturn language || suggestedLanguage;\n};\n\nconst getLanguageName = (code: string, lng: string): string => {\nconst getLanguageName = (code: string, lng: string): string => {\n\ttry {\n\t\tconst lang = new Intl.DisplayNames([lng], { type: 'language' });\n\t\tconst lang = new Intl.DisplayNames([lng], { type: 'language' });",
            "cb": "\t\tconst cb = () => {\n\t\tconst cb = () => {\n\t\t\tAppClientOrchestratorInstance.getAppClientManager().initialize();\n\t\t\tAppClientOrchestratorInstance.load();\n\t\t};\n\t\tCachedCollectionManager.onLogin(cb);\n\t\treturn () => CachedCollectionManager.off('login', cb);\n\t}, []);\n\n\treturn (\n\t\t<I18nextProvider i18n={i18nextInstance}>",
            "TranslationProviderInner": "const TranslationProviderInner = ({\nconst TranslationProviderInner = ({\n\tchildren,\n\tavailableLanguages,\n}: {"
        },
        "depth_rank": 5
    },
    {
        "file": "TooltipProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/TooltipProvider.tsx",
        "code": {
            "previousAnchor": "\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\topen: (tooltip: ReactNode, anchor: HTMLElement): void => {\n\t\t\t\tconst previousAnchor = lastAnchor.current;\n\t\t\t\tconst previousAnchor = lastAnchor.current;\n\t\t\t\tsetTooltip(<TooltipComponent key={new Date().toISOString()} title={tooltip} anchor={anchor} />);",
            "dismissOnClick": "\t\tconst dismissOnClick = (): void => {\n\t\tconst dismissOnClick = (): void => {\n\t\t\tcontextValue.dismiss();\n\t\t};\n\n\t\tdocument.body.addEventListener('mouseover', handleMouseOver, {\n\t\t\tpassive: true,\n\t\t});\n\t\tdocument.body.addEventListener('click', dismissOnClick, { capture: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "SettingsProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/SettingsProvider.tsx",
        "code": {
            "subscription": "\tconst querySetting = useMemo(\n\tconst querySetting = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((_id): ISetting | undefined => {\n\t\t\t\tconst subscription = cachedCollection.collection.findOne(_id);\n\t\t\t\tconst subscription = cachedCollection.collection.findOne(_id);\n\t\t\t\treturn subscription ? { ...subscription } : undefined;",
            "querySettings": "\tconst querySettings = useMemo(\n\tconst querySettings = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((query = {}) =>",
            "contextValue": "\tconst settingsChangeCallback = (changes: { _id: string }[]): void => {\n\tconst settingsChangeCallback = (changes: { _id: string }[]): void => {\n\t\tchanges.forEach((val) => {\n\t\t\tswitch (val._id) {\n\t\t\t\tcase 'Enterprise_License':\n\t\t\t\t\tqueryClient.invalidateQueries(['licenses']);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t};\n\n\tconst saveSettings = useMethod('saveSettings');\n\tconst saveSettings = useMethod('saveSettings');\n\tconst dispatch = useCallback(\n\tconst dispatch = useCallback(\n\t\tasync (changes) => {\n\t\t\tsettingsChangeCallback(changes);\n\t\t\tawait saveSettings(changes);\n\t\t},\n\t\t[saveSettings],\n\t);\n\n\tconst contextValue = useMemo<SettingsContextValue>(\n\tconst contextValue = useMemo<SettingsContextValue>(\n\t\t() => ({\n\t\t\thasPrivateAccess,\n\t\t\tisLoading,\n\t\t\tquerySetting,\n\t\t\tquerySettings,\n\t\t\tdispatch,\n\t\t}),\n\t\t[hasPrivateAccess, isLoading, querySetting, querySettings, dispatch],\n\t);\n\n\treturn <SettingsContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "SessionProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/SessionProvider.tsx",
        "code": {
            "contextValue": "const contextValue = {\nconst contextValue = {\n\tquery: createReactiveSubscriptionFactory<unknown>((name) => Session.get(name)),\n\tdispatch: (name: string, value: unknown): void => {\n\t\tSession.set(name, value);\n\t},\n};\n\nconst SessionProvider: FC = ({ children }) => <SessionContext.Provider children={children} value={contextValue} />;\nconst SessionProvider: FC = ({ children }) => <SessionContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "ActionManagerProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/ActionManagerProvider.tsx",
        "code": {
            "ActionManagerProvider": "const ActionManagerProvider = ({ children }: ActionManagerProviderProps): ReactElement => {\nconst ActionManagerProvider = ({ children }: ActionManagerProviderProps): ReactElement => {\n\tuseAppActionButtons();\n\tuseAppSlashCommands();\n\tuseAppUiKitInteraction(ActionManager.handlePayloadUserInteraction);\n\n\treturn <ActionManagerContext.Provider value={ActionManager}>{children}</ActionManagerContext.Provider>;"
        },
        "depth_rank": 5
    },
    {
        "file": "LayoutProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/LayoutProvider.tsx",
        "code": {
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\treturn (\n\t\t<LayoutContext.Provider\n\t\t\tchildren={children}"
        },
        "depth_rank": 5
    },
    {
        "file": "EmojiPickerProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/EmojiPickerProvider.tsx",
        "code": {
            "EmojiPickerProvider": "const DEFAULT_ITEMS_LIMIT = 90;\nconst DEFAULT_ITEMS_LIMIT = 90;\n\nconst EmojiPickerProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst EmojiPickerProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst [emojiPicker, setEmojiPicker] = useState<ReactElement | null>(null);\n\tconst [emojiPicker, setEmojiPicker] = useState<ReactElement | null>(null);\n\tconst [emojiToPreview, setEmojiToPreview] = useDebouncedState<{ emoji: string; name: string } | null>(null, 100);\n\tconst [emojiToPreview, setEmojiToPreview] = useDebouncedState<{ emoji: string; name: string } | null>(null, 100);",
            "open": "\tconst open = useCallback((ref: Element, callback: (emoji: string) => void) => {\n\tconst open = useCallback((ref: Element, callback: (emoji: string) => void) => {\n\t\treturn setEmojiPicker(<EmojiPicker reference={ref} onClose={() => setEmojiPicker(null)} onPickEmoji={(emoji) => callback(emoji)} />);"
        },
        "depth_rank": 5
    },
    {
        "file": "AuthorizationProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/AuthorizationProvider.tsx",
        "code": {
            "roles": "const AuthorizationProvider: FC = ({ children }) => {\nconst AuthorizationProvider: FC = ({ children }) => {\n\tconst roles = useReactiveValue(\n\tconst roles = useReactiveValue(\n\t\tuseCallback(\n\t\t\t() =>\n\t\t\t\tRoles.find()\n\t\t\t\t\t.fetch()\n\t\t\t\t\t.reduce((ret, obj) => {\n\t\t\t\t\t\tret[obj._id] = obj;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}, {} as Record<string, IRole>),\n\t\t\t[],\n\t\t),\n\t);\n\n\tuseEffect(() => {\n\t\tcontextValue.roleStore.roles = roles;\n\t\tcontextValue.roleStore.emit('change', roles);\n\t}, [roles]);\n\n\treturn <AuthorizationContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "RouterProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/RouterProvider.tsx",
        "code": {
            "getRouteParameters": "const subscribers = new Set<() => void>();\nconst subscribers = new Set<() => void>();\n\nconst listenToRouteChange = () => {\nconst listenToRouteChange = () => {\n\tFlowRouter.watchPathChange();\n\tsubscribers.forEach((onRouteChange) => onRouteChange());\n};\n\nlet computation: Tracker.Computation | undefined;\n\nqueueMicrotask(() => {\n\tcomputation = Tracker.autorun(listenToRouteChange);\n});\n\nconst subscribeToRouteChange = (onRouteChange: () => void): (() => void) => {\nconst subscribeToRouteChange = (onRouteChange: () => void): (() => void) => {\n\tsubscribers.add(onRouteChange);\n\n\tcomputation?.invalidate();\n\n\treturn () => {\n\t\tsubscribers.delete(onRouteChange);\n\n\t\tif (subscribers.size === 0) {\n\t\t\tqueueMicrotask(() => computation?.stop());\n\t\t}\n\t};\n};\n\nconst getLocationPathname = () => FlowRouter.current().path as LocationPathname;\nconst getLocationPathname = () => FlowRouter.current().path as LocationPathname;\n\nconst getLocationSearch = () => location.search as LocationSearch;\nconst getLocationSearch = () => location.search as LocationSearch;\n\nconst getRouteParameters = () => (FlowRouter.current().params ?? {}) as RouteParameters;\nconst getRouteParameters = () => (FlowRouter.current().params ?? {}) as RouteParameters;",
            "getSearchParameters": "const getSearchParameters = () => (FlowRouter.current().queryParams ?? {}) as SearchParameters;\nconst getSearchParameters = () => (FlowRouter.current().queryParams ?? {}) as SearchParameters;",
            "state": "const navigate = (\nconst navigate = (\n\ttoOrDelta: To | number,\n\toptions?: {\n\t\treplace?: boolean;\n\t},\n) => {\n\tif (typeof toOrDelta === 'number') {\n\t\thistory.go(toOrDelta);\n\t\treturn;\n\t}\n\n\tconst path = buildRoutePath(toOrDelta);\n\tconst path = buildRoutePath(toOrDelta);\n\tconst state = { path };\n\tconst state = { path };"
        },
        "depth_rank": 5
    },
    {
        "file": "ConnectionStatusProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/ConnectionStatusProvider.tsx",
        "code": {
            "status": "const getValue = (): ConnectionStatusContextValue => ({\nconst getValue = (): ConnectionStatusContextValue => ({\n\t...Meteor.status(),\n\treconnect: Meteor.reconnect,\n});\n\nconst ConnectionStatusProvider: FC = ({ children }) => {\nconst ConnectionStatusProvider: FC = ({ children }) => {\n\tconst status = useReactiveValue(getValue);\n\tconst status = useReactiveValue(getValue);\n\n\treturn <ConnectionStatusContext.Provider children={children} value={status} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "UserPresenceProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/UserPresenceProvider.tsx",
        "code": {
            "get": "const UserPresenceProvider = ({ children }: UserPresenceProviderProps): ReactElement => {\nconst UserPresenceProvider = ({ children }: UserPresenceProviderProps): ReactElement => {\n\tconst usePresenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst usePresenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\n\tuseEffect(() => {\n\t\tPresence.setStatus(usePresenceDisabled ? 'disabled' : 'enabled');\n\t}, [usePresenceDisabled]);\n\n\treturn (\n\t\t<UserPresenceContext.Provider\n\t\t\tvalue={useMemo(\n\t\t\t\t() => ({\n\t\t\t\t\tqueryUserData: (uid) => {\n\t\t\t\t\t\tconst subscribe = (callback: () => void) => {\n\t\t\t\t\t\tconst subscribe = (callback: () => void) => {\n\t\t\t\t\t\t\tPresence.listen(uid, callback);\n\n\t\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\t\tPresence.stop(uid, callback);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst get = () => Presence.store.get(uid);\n\t\t\t\t\t\tconst get = () => Presence.store.get(uid);\n\n\t\t\t\t\t\treturn { subscribe, get };"
        },
        "depth_rank": 5
    },
    {
        "file": "OmnichannelProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/OmnichannelProvider.tsx",
        "code": {
            "isPrioritiesEnabled": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst isPrioritiesEnabled = isEnterprise && accessible;\n\tconst isPrioritiesEnabled = isEnterprise && accessible;\n\n\tconst {\n\tconst {\n\t\tdata: { priorities = [] } = {},",
            "routeConfig": "\t\tconst update = async (): Promise<void> => {\n\t\tconst update = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst routeConfig = await getRoutingConfig();\n\t\t\t\tconst routeConfig = await getRoutingConfig();\n\t\t\t\tsetRouteConfig(routeConfig);\n\t\t\t} catch (error) {"
        },
        "depth_rank": 5
    },
    {
        "file": "ModalProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/ModalProvider.tsx",
        "code": {
            "contextValue": "const ModalProvider = ({ children }: ModalProviderProps): ReactElement => {\nconst ModalProvider = ({ children }: ModalProviderProps): ReactElement => {\n\tconst [currentModal, setCurrentModal] = useState<ReactNode>(null);\n\tconst [currentModal, setCurrentModal] = useState<ReactNode>(null);\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tmodal: {\n\t\t\t\tsetModal: setCurrentModal,\n\t\t\t},\n\t\t\tcurrentModal,\n\t\t}),\n\t\t[currentModal],\n\t);\n\n\tuseImperativeModal(setCurrentModal);\n\n\treturn <ModalContext.Provider value={contextValue} children={children} />;"
        },
        "depth_rank": 5
    },
    {
        "file": "ToastMessagesProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/ToastMessagesProvider.tsx",
        "code": {
            "dispatchToastBar": "const contextValue = {\nconst contextValue = {\n\tdispatch: dispatchToastMessage,\n};\n\nconst ToastMessageInnerProvider: FC = ({ children }) => {\nconst ToastMessageInnerProvider: FC = ({ children }) => {\n\tconst dispatchToastBar = useToastBarDispatch();\n\tconst dispatchToastBar = useToastBarDispatch();\n\n\tuseEffect(\n\t\t() =>\n\t\t\tsubscribeToToastMessages(({ type, message, title = '' }) => {\n\t\t\t\tif (type === 'error' && typeof message === 'object') {\n\t\t\t\t\tdispatchToastBar({ type, message: getErrorMessage(message) });"
        },
        "depth_rank": 5
    },
    {
        "file": "CallProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/CallProvider/CallProvider.tsx",
        "code": {
            "remoteAudioMediaRef": "\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\tconst visitorEndpoint = useEndpoint('POST', '/v1/livechat/visitor');\n\tconst visitorEndpoint = useEndpoint('POST', '/v1/livechat/visitor');\n\tconst voipEndpoint = useEndpoint('GET', '/v1/voip/room');\n\tconst voipEndpoint = useEndpoint('GET', '/v1/voip/room');\n\tconst voipCloseRoomEndpoint = useEndpoint('POST', '/v1/voip/room.close');\n\tconst voipCloseRoomEndpoint = useEndpoint('POST', '/v1/voip/room.close');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst result = useVoipClient();\n\tconst result = useVoipClient();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst setOutputMediaDevice = useSetOutputMediaDevice();\n\tconst setOutputMediaDevice = useSetOutputMediaDevice();\n\tconst setInputMediaDevice = useSetInputMediaDevice();\n\tconst setInputMediaDevice = useSetInputMediaDevice();\n\n\tconst hasVoIPEnterpriseLicense = useIsVoipEnterprise();\n\tconst hasVoIPEnterpriseLicense = useIsVoipEnterprise();\n\n\tconst remoteAudioMediaRef = useRef<IExperimentalHTMLAudioElement>(null); // TODO: Create a dedicated file for the AUDIO and make the controls accessible\n\tconst remoteAudioMediaRef = useRef<IExperimentalHTMLAudioElement>(null); // TODO: Create a dedicated file for the AUDIO and make the controls accessible\n\n\tconst [queueCounter, setQueueCounter] = useState(0);\n\tconst [queueCounter, setQueueCounter] = useState(0);\n\tconst [queueName, setQueueName] = useState('');\n\tconst [queueName, setQueueName] = useState('');\n\tconst [roomInfo, setRoomInfo] = useState<{ v: { token?: string }; rid: string }>({ v: {}, rid: '' });\n\tconst [roomInfo, setRoomInfo] = useState<{ v: { token?: string }; rid: string }>({ v: {}, rid: '' });",
            "closeRoom": "\tconst voipSounds = useVoipSounds();\n\tconst voipSounds = useVoipSounds();\n\n\tconst closeRoom = useCallback(\n\tconst closeRoom = useCallback(\n\t\tasync (data = {}): Promise<void> => {\n\t\t\troomInfo &&\n\t\t\t\t(await voipCloseRoomEndpoint({\n\t\t\t\t\trid: roomInfo.rid,\n\t\t\t\t\ttoken: roomInfo.v.token || '',\n\t\t\t\t\toptions: { comment: data?.comment, tags: data?.tags },",
            "openWrapUpModal": "\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\tif (queueAggregator) {\n\t\t\t\tqueueAggregator.callEnded();\n\t\t\t}\n\t\t},\n\t\t[router, result?.voipClient, roomInfo, voipCloseRoomEndpoint],\n\t);\n\n\tconst openWrapUpModal = useCallback((): void => {\n\tconst openWrapUpModal = useCallback((): void => {\n\t\tsetModal(() => <WrapUpCallModal closeRoom={closeRoom} />);",
            "changeAudioOutputDevice": "\tconst changeAudioOutputDevice = useMutableCallback((selectedAudioDevice: Device): void => {\n\tconst changeAudioOutputDevice = useMutableCallback((selectedAudioDevice: Device): void => {\n\t\tremoteAudioMediaRef?.current &&\n\t\t\tsetOutputMediaDevice({ outputDevice: selectedAudioDevice, HTMLAudioElement: remoteAudioMediaRef.current });",
            "constraints": "\t\tconst constraints = { audio: { deviceId: { exact: selectedAudioDevice.id } } };\n\t\tconst constraints = { audio: { deviceId: { exact: selectedAudioDevice.id } } };",
            "openRoom": "\tconst openRoom = useCallback((rid: IVoipRoom['_id']): void => {\n\tconst openRoom = useCallback((rid: IVoipRoom['_id']): void => {\n\t\troomCoordinator.openRouteLink('v', { rid });",
            "phone": "\tconst findOrCreateVisitor = useCallback(\n\tconst findOrCreateVisitor = useCallback(\n\t\tasync (caller: ICallerInfo): Promise<Serialized<ILivechatVisitor>> => {\n\t\t\tconst phone = parseOutboundPhoneNumber(caller.callerId);\n\t\t\tconst phone = parseOutboundPhoneNumber(caller.callerId);\n\n\t\t\tconst { contact } = await getContactBy({ phone });\n\t\t\tconst { contact } = await getContactBy({ phone });",
            "voipRoom": "\t\t\t\tconst visitor = await findOrCreateVisitor(caller);\n\t\t\t\tconst visitor = await findOrCreateVisitor(caller);\n\t\t\t\tconst voipRoom = await voipEndpoint({ token: visitor.token, agentId: user._id, direction });\n\t\t\t\tconst voipRoom = await voipEndpoint({ token: visitor.token, agentId: user._id, direction });",
            "queueAggregator": "\t\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\t\tif (queueAggregator) {\n\t\t\t\t\tqueueAggregator.callStarted();\n\t\t\t\t}\n\t\t\t\treturn voipRoom.room._id;\n\t\t\t} catch (error) {",
            "handleEventReceived": "\t\tconst handleEventReceived = async (event: VoipEventDataSignature): Promise<void> => {\n\t\tconst handleEventReceived = async (event: VoipEventDataSignature): Promise<void> => {\n\t\t\tif (isVoipEventAgentCalled(event)) {\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst { data } = event;",
            "onCallFailed": "\t\tconst onCallFailed = (reason: 'Not Found' | 'Address Incomplete' | 'Request Terminated' | string): void => {\n\t\tconst onCallFailed = (reason: 'Not Found' | 'Address Incomplete' | 'Request Terminated' | string): void => {\n\t\t\tswitch (reason) {\n\t\t\t\tcase 'Not Found':\n\t\t\t\t\t// This happens when the call matches dialplan and goes to the world, but the trunk doesnt find the number.\n\t\t\t\t\topenDialModal({ errorMessage: t('Dialed_number_doesnt_exist') });"
        },
        "depth_rank": 6
    },
    {
        "file": "UserProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/UserProvider/UserProvider.tsx",
        "code": {
            "contextValue": "const UserProvider = ({ children }: UserProviderProps): ReactElement => {\nconst UserProvider = ({ children }: UserProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\n\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\n\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\n\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\n\n\tconst userId = useReactiveValue(getUserId);\n\tconst userId = useReactiveValue(getUserId);\n\tconst user = useReactiveValue(getUser);\n\tconst user = useReactiveValue(getUser);\n\tconst [language, setLanguage] = useLocalStorage('userLanguage', user?.language ?? 'en');\n\tconst [language, setLanguage] = useLocalStorage('userLanguage', user?.language ?? 'en');\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\tuseEmailVerificationWarning(user ?? undefined);\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof UserContext> => ({\n\t\t\tuserId,\n\t\t\tuser,\n\t\t\tqueryPreference: createReactiveSubscriptionFactory(\n\t\t\t\t<T,>(key: string, defaultValue?: T) => getUserPreference(userId, key, defaultValue) as T,\n\t\t\t),\n\t\t\tquerySubscription: createReactiveSubscriptionFactory<ISubscription | undefined>((query, fields, sort) =>\n\t\t\t\tSubscriptions.findOne(query, { fields, sort }),"
        },
        "depth_rank": 6
    },
    {
        "file": "useEmailVerificationWarning.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/UserProvider/hooks/useEmailVerificationWarning.tsx",
        "code": {
            "dispatchToastMessage": "\tconst emailVerificationEnabled = useSetting<boolean>('Accounts_EmailVerification') === true;\n\tconst emailVerificationEnabled = useSetting<boolean>('Accounts_EmailVerification') === true;\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "warnedRef": "\tconst mainEmail = user?.emails?.[0];\n\tconst mainEmail = user?.emails?.[0];\n\tconst warnedRef = useRef(false);\n\tconst warnedRef = useRef(false);\n\n\tuseEffect(() => {\n\t\tconst { current: warned } = warnedRef;\n\t\tconst { current: warned } = warnedRef;"
        },
        "depth_rank": 7
    },
    {
        "file": "DeviceProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/providers/DeviceProvider/DeviceProvider.tsx",
        "code": {
            "setMediaDevices": "\t\tconst setMediaDevices = (): void => {\n\t\tconst setMediaDevices = (): void => {\n\t\t\tnavigator.mediaDevices?.enumerateDevices().then((devices) => {\n\t\t\t\tconst audioInput: Device[] = [];\n\t\t\t\tconst audioInput: Device[] = [];\n\t\t\t\tconst audioOutput: Device[] = [];\n\t\t\t\tconst audioOutput: Device[] = [];\n\t\t\t\tdevices.forEach((device) => {\n\t\t\t\t\tconst mediaDevice: Device = {\n\t\t\t\t\tconst mediaDevice: Device = {\n\t\t\t\t\t\tid: device.deviceId,\n\t\t\t\t\t\tlabel: device.label,\n\t\t\t\t\t\ttype: device.kind,\n\t\t\t\t\t};\n\t\t\t\t\tif (device.kind === 'audioinput') {\n\t\t\t\t\t\taudioInput.push(mediaDevice);\n\t\t\t\t\t} else if (device.kind === 'audiooutput') {"
        },
        "depth_rank": 6
    },
    {
        "file": "pinMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/client/methods/pinMessage.ts",
        "code": {
            "msg": "\t\tconst msg = ChatMessage.findOne({ _id: message._id });\n\t\tconst msg = ChatMessage.findOne({ _id: message._id });"
        },
        "depth_rank": 5
    },
    {
        "file": "useUpgradeTabParams.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/hooks/useUpgradeTabParams.ts",
        "code": {
            "cloudWorkspaceHadTrial": "\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\n\tconst { data: licensesData, isSuccess: isSuccessLicense } = useLicense();\n\tconst { data: licensesData, isSuccess: isSuccessLicense } = useLicense();",
            "trialLicense": "\tconst registered = registrationStatusData?.registrationStatus?.workspaceRegistered ?? false;\n\tconst registered = registrationStatusData?.registrationStatus?.workspaceRegistered ?? false;\n\tconst hasValidLicense = licensesData?.licenses.some((license) => license.modules.length > 0) ?? false;\n\tconst hasValidLicense = licensesData?.licenses.some((license) => license.modules.length > 0) ?? false;\n\tconst hadExpiredTrials = cloudWorkspaceHadTrial ?? false;\n\tconst hadExpiredTrials = cloudWorkspaceHadTrial ?? false;\n\n\tconst trialLicense = licensesData?.licenses?.find(({ meta }) => meta?.trial);\n\tconst trialLicense = licensesData?.licenses?.find(({ meta }) => meta?.trial);",
            "isTrial": "\tconst isTrial = licensesData?.licenses?.every(({ meta }) => meta?.trial) ?? false;\n\tconst isTrial = licensesData?.licenses?.every(({ meta }) => meta?.trial) ?? false;"
        },
        "depth_rank": 6
    },
    {
        "file": "useMembersList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/hooks/useMembersList.ts",
        "code": {
            "start": "\tconst getMembers = useEndpoint('GET', endpointsByRoomType[options.roomType]);\n\tconst getMembers = useEndpoint('GET', endpointsByRoomType[options.roomType]);\n\n\treturn useInfiniteQuery(\n\t\t[options.roomType, 'members', options.rid, options.type, options.debouncedText],\n\t\tasync ({ pageParam }) => {\n\t\t\tconst start = pageParam ?? 0;\n\t\t\tconst start = pageParam ?? 0;\n\n\t\t\treturn getMembers({\n\t\t\t\troomId: options.rid,\n\t\t\t\toffset: start,\n\t\t\t\tcount: 20,\n\t\t\t\t...(options.debouncedText && { filter: options.debouncedText }),"
        },
        "depth_rank": 6
    },
    {
        "file": "useDepartmentsByUnitsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/hooks/useDepartmentsByUnitsList.ts",
        "code": {
            "getDepartments": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatDepartment>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatDepartment>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatDepartment>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatDepartment>()), []);\n\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/units/:unitId/departments/available', { unitId: options.unitId || 'none' });\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/units/:unitId/departments/available', { unitId: options.unitId || 'none' });"
        },
        "depth_rank": 6
    },
    {
        "file": "useActionSpread.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/hooks/useActionSpread.ts",
        "code": {
            "mapOptions": "const mapOptions = ([key, { action, label, icon }]: [string, Action]): [string, MenuOption] => [\nconst mapOptions = ([key, { action, label, icon }]: [string, Action]): [string, MenuOption] => [",
            "menu": "\t\tconst entries = Object.entries(actions);\n\t\tconst entries = Object.entries(actions);\n\n\t\tconst options = entries.slice(0, size);\n\t\tconst options = entries.slice(0, size);\n\t\tconst menuOptions = entries.slice(size, entries.length).map(mapOptions);\n\t\tconst menuOptions = entries.slice(size, entries.length).map(mapOptions);\n\t\tconst menu = menuOptions.length ? Object.fromEntries(menuOptions) : undefined;\n\t\tconst menu = menuOptions.length ? Object.fromEntries(menuOptions) : undefined;\n\n\t\treturn { actions: options, menu };"
        },
        "depth_rank": 6
    },
    {
        "file": "MailerUnsubscriptionPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/mailer/MailerUnsubscriptionPage.tsx",
        "code": {
            "useMailerUnsubscriptionState": "const useMailerUnsubscriptionState = (): AsyncState<boolean> => {\nconst useMailerUnsubscriptionState = (): AsyncState<boolean> => {\n\tconst { resolve, reject, ...unsubscribedState } = useAsyncState<boolean>();\n\tconst { resolve, reject, ...unsubscribedState } = useAsyncState<boolean>();",
            "doUnsubscribe": "\tconst unsubscribe = useEndpoint('POST', '/v1/mailer.unsubscribe');\n\tconst unsubscribe = useEndpoint('POST', '/v1/mailer.unsubscribe');\n\tconst _id = useRouteParameter('_id');\n\tconst _id = useRouteParameter('_id');\n\tconst createdAt = useRouteParameter('createdAt');\n\tconst createdAt = useRouteParameter('createdAt');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tuseEffect(() => {\n\t\tconst doUnsubscribe = async (_id: string, createdAt: string): Promise<void> => {\n\t\tconst doUnsubscribe = async (_id: string, createdAt: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait unsubscribe({ _id, createdAt });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<HeroLayout>\n\t\t\t<Box color='default' marginInline='auto' marginBlock={16} maxWidth={800}>"
        },
        "depth_rank": 6
    },
    {
        "file": "NotAuthorizedPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/notAuthorized/NotAuthorizedPage.tsx",
        "code": {
            "t": "const NotAuthorizedPage = (): ReactElement => {\nconst NotAuthorizedPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Content pb='x24'>\n\t\t\t\t<Box is='p' fontScale='p2' color='default'>\n\t\t\t\t\t{t('You_are_not_authorized_to_view_this_page')}"
        },
        "depth_rank": 6
    },
    {
        "file": "CallPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/meet/CallPage.tsx",
        "code": {
            "isMobileDevice": "\tconst [isAgentActive, setIsAgentActive] = useState(false);\n\tconst [isAgentActive, setIsAgentActive] = useState(false);\n\tconst [isMicOn, setIsMicOn] = useState(false);\n\tconst [isMicOn, setIsMicOn] = useState(false);\n\tconst [isCameraOn, setIsCameraOn] = useState(false);\n\tconst [isCameraOn, setIsCameraOn] = useState(false);\n\tconst [isRemoteMobileDevice, setIsRemoteMobileDevice] = useState(false);\n\tconst [isRemoteMobileDevice, setIsRemoteMobileDevice] = useState(false);\n\tconst [callInIframe, setCallInIframe] = useState(false);\n\tconst [callInIframe, setCallInIframe] = useState(false);\n\tconst [isRemoteCameraOn, setIsRemoteCameraOn] = useState(false);\n\tconst [isRemoteCameraOn, setIsRemoteCameraOn] = useState(false);\n\tconst [isLocalMobileDevice, setIsLocalMobileDevice] = useState(false);\n\tconst [isLocalMobileDevice, setIsLocalMobileDevice] = useState(false);\n\n\tlet iconSize = 'x21';\n\tlet buttonSize = 'x40';\n\tconst avatarSize = 'x48';\n\tconst avatarSize = 'x48';\n\tif (layout === 'embedded') {\n\t\ticonSize = 'x19';\n\t\tbuttonSize = 'x35';\n\t}\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tuseEffect(() => {\n\t\tif (visitorToken) {\n\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId, visitorId);\n\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId, visitorId);\n\t\t\tconst isMobileDevice = (): boolean => {\n\t\t\tconst isMobileDevice = (): boolean => {\n\t\t\t\tif (layout === 'embedded') {\n\t\t\t\t\tsetCallInIframe(true);\n\t\t\t\t}\n\t\t\t\tif (window.innerWidth <= 450 && window.innerHeight >= 629 && window.innerHeight <= 900) {\n\t\t\t\t\tsetIsLocalMobileDevice(true);\n\t\t\t\t\twebrtcInstance.media = {\n\t\t\t\t\t\taudio: true,\n\t\t\t\t\t\tvideo: {\n\t\t\t\t\t\t\twidth: { ideal: 440 },",
            "webrtcInstance": "\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId);\n\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId);\n\t\t\tif (status === 'inProgress') {\n\t\t\t\tNotifications.notifyRoom(roomId, 'webrtc' as any, 'getDeviceType');\n\t\t\t\twebrtcInstance.startCall({\n\t\t\t\t\taudio: true,\n\t\t\t\t\tvideo: {\n\t\t\t\t\t\twidth: { ideal: 1920 },",
            "showCallPage": "\tconst closeWindow = (): void => {\n\tconst closeWindow = (): void => {\n\t\tif (layout === 'embedded') {\n\t\t\treturn (parent as any)?.handleIframeClose();\n\t\t}\n\t\treturn window.close();\n\t};\n\n\tconst getCallDuration = (callStartTime: any): any => moment.duration(moment(new Date()).diff(moment(callStartTime))).asSeconds();\n\tconst getCallDuration = (callStartTime: any): any => moment.duration(moment(new Date()).diff(moment(callStartTime))).asSeconds();\n\n\tconst showCallPage = (localAvatar: any, remoteAvatar: any): any => (\n\tconst showCallPage = (localAvatar: any, remoteAvatar: any): any => (\n\t\t<Flex.Container direction='column' justifyContent='center'>\n\t\t\t<Box width='full' minHeight='sh' alignItems='center' backgroundColor='dark' overflow='hidden' position='relative'>\n\t\t\t\t<Box\n\t\t\t\t\tposition='absolute'\n\t\t\t\t\tzIndex={1}"
        },
        "depth_rank": 6
    },
    {
        "file": "MeetRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/meet/MeetRoute.tsx",
        "code": {
            "dispatchToastMessage": "const MeetRoute = () => {\nconst MeetRoute = () => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "getVisitorByToken": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst token = useSearchParameter('token') ?? '';\n\tconst token = useSearchParameter('token') ?? '';\n\tconst getVisitorByToken = useEndpoint('GET', '/v1/livechat/visitor/:token', { token });\n\tconst getVisitorByToken = useEndpoint('GET', '/v1/livechat/visitor/:token', { token });"
        },
        "depth_rank": 6
    },
    {
        "file": "MeetPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/meet/MeetPage.tsx",
        "code": {
            "room": "\t\tconst room = (await sdk.rest.get('/v1/rooms.info', { roomId })) as any;\n\t\tconst room = (await sdk.rest.get('/v1/rooms.info', { roomId })) as any;"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomTags.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/RoomTags.tsx",
        "code": {
            "t": "const RoomTags = ({ room }: { room: IRoom }): ReactElement => {\nconst RoomTags = ({ room }: { room: IRoom }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mi='x4' alignItems='center' display='flex' withTruncatedText>\n\t\t\t<Margins inline='x2'>\n\t\t\t\t{room.default && <Tag variant='secondary'>{t('default')}</Tag>}"
        },
        "depth_rank": 6
    },
    {
        "file": "UsersTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/users/UsersTable/UsersTableRow.tsx",
        "code": {
            "UsersTableRow": "const UsersTableRow = ({\nconst UsersTableRow = ({\n\tuser: { createdAt, emails, domain, _id, username, name, bio, avatarETag, nickname },",
            "formatDate": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(username)} onClick={onClick(username)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/users/UsersTable/UsersTable.tsx",
        "code": {
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'users', workspace);\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'users', workspace);",
            "getDirectoryData": "\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\n\tconst { data, isFetched, isLoading, isError, refetch } = useQuery(['getDirectoryData', query], () => getDirectoryData(query));\n\tconst { data, isFetched, isLoading, isError, refetch } = useQuery(['getDirectoryData', query], () => getDirectoryData(query));",
            "handleClick": "\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\t(username) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter') {\n\t\t\t\tdirectRoute.push({ rid: username });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/channels/ChannelsTable/ChannelsTable.tsx",
        "code": {
            "groupsRoute": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst channelRoute = useRoute('channel');\n\tconst channelRoute = useRoute('channel');\n\tconst groupsRoute = useRoute('group');\n\tconst groupsRoute = useRoute('group');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'channels');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'channels');",
            "onClick": "\tconst onClick = useMemo(\n\tconst onClick = useMemo(\n\t\t() => (name: IRoom['name'], type: IRoom['t']) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (name && (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter')) {\n\t\t\t\ttype === 'c' ? channelRoute.push({ name }) : groupsRoute.push({ name });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/channels/ChannelsTable/ChannelsTableRow.tsx",
        "code": {
            "formatDate": "const ChannelsTableRow = ({ onClick, room, mediaQuery }: ChannelsTableRowProps) => {\nconst ChannelsTableRow = ({ onClick, room, mediaQuery }: ChannelsTableRowProps) => {\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst { _id, ts, t, name, fname, usersCount, lastMessage, topic, belongsTo } = room;\n\tconst { _id, ts, t, name, fname, usersCount, lastMessage, topic, belongsTo } = room;",
            "avatarUrl": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(room);\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(room);\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(name, t)} onClick={onClick(name, t)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 9
    },
    {
        "file": "TeamsTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/teams/TeamsTable/TeamsTableRow.tsx",
        "code": {
            "formatDate": "const TeamsTableRow = ({ onClick, team, mediaQuery }: TeamsTableRowProps) => {\nconst TeamsTableRow = ({ onClick, team, mediaQuery }: TeamsTableRowProps) => {\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst { _id, ts, t, name, fname, topic, roomsCount } = team;\n\tconst { _id, ts, t, name, fname, topic, roomsCount } = team;",
            "avatarUrl": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(team);\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(team);\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(name, t)} onClick={onClick(name, t)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 9
    },
    {
        "file": "TeamsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/directory/tabs/teams/TeamsTable/TeamsTable.tsx",
        "code": {
            "debouncedText": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst channelsRoute = useRoute('channel');\n\tconst channelsRoute = useRoute('channel');\n\tconst groupsRoute = useRoute('group');\n\tconst groupsRoute = useRoute('group');\n\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'teams');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'teams');",
            "onClick": "\tconst onClick = useMemo(\n\tconst onClick = useMemo(\n\t\t() => (name: IRoom['name'], type: IRoom['t']) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (name && (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter')) {\n\t\t\t\ttype === 'c' ? channelsRoute.push({ name }) : groupsRoute.push({ name });"
        },
        "depth_rank": 9
    },
    {
        "file": "AdministrationRouter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/AdministrationRouter.tsx",
        "code": {
            "router": "const isSidebarDivider = (sidebarItem: SidebarItem): sidebarItem is SidebarDivider => {\nconst isSidebarDivider = (sidebarItem: SidebarItem): sidebarItem is SidebarDivider => {\n\treturn (sidebarItem as SidebarDivider).divider === true;\n};\n\nconst firstSidebarPage = (sidebarItem: SidebarItem): sidebarItem is Item => {\nconst firstSidebarPage = (sidebarItem: SidebarItem): sidebarItem is Item => {\n\tif (isSidebarDivider(sidebarItem)) {\n\t\treturn false;\n\t}\n\n\treturn Boolean(sidebarItem.permissionGranted?.());\n};\n\ntype AdministrationRouterProps = {\n\tchildren?: ReactNode;\n};\n\nconst AdministrationRouter = ({ children }: AdministrationRouterProps): ReactElement => {\nconst AdministrationRouter = ({ children }: AdministrationRouterProps): ReactElement => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();",
            "defaultRoutePath": "\t\t\t\tconst defaultRoutePath = getAdminSidebarItems().find(firstSidebarPage)?.href ?? '/admin/workspace';\n\t\t\t\tconst defaultRoutePath = getAdminSidebarItems().find(firstSidebarPage)?.href ?? '/admin/workspace';\n\n\t\t\t\tif (isGoRocketChatLink(defaultRoutePath)) {\n\t\t\t\t\twindow.open(defaultRoutePath, '_blank');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trouter.navigate(defaultRoutePath, { replace: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "InviteRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/invites/InviteRow.tsx",
        "code": {
            "removeInvite": "const isExpired = (expires: IInvite['expires']): boolean => {\nconst isExpired = (expires: IInvite['expires']): boolean => {\n\tif (expires && expires.getTime() < new Date().getTime()) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\ntype InviteRowProps = Omit<IInvite, 'createdAt' | 'expires' | '_updatedAt'> & {\n\tonRemove: (removeInvite: () => Promise<boolean>) => void;\n\t_updatedAt: string;\n\tcreatedAt: string;\n\texpires: string | null;\n};\n\nconst InviteRow = ({ _id, createdAt, expires, uses, maxUses, onRemove }: InviteRowProps): ReactElement => {\nconst InviteRow = ({ _id, createdAt, expires, uses, maxUses, onRemove }: InviteRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst removeInvite = useEndpoint('DELETE', '/v1/removeInvite/:_id', { _id });\n\tconst removeInvite = useEndpoint('DELETE', '/v1/removeInvite/:_id', { _id });"
        },
        "depth_rank": 7
    },
    {
        "file": "InvitesPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/invites/InvitesPage.tsx",
        "code": {
            "getInvites": "const InvitesPage = (): ReactElement => {\nconst InvitesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst getInvites = useEndpoint('GET', '/v1/listInvites');\n\tconst getInvites = useEndpoint('GET', '/v1/listInvites');\n\n\tconst { data, isLoading, refetch, isSuccess, isError } = useQuery(\n\tconst { data, isLoading, refetch, isSuccess, isError } = useQuery(",
            "invites": "\t\t\tconst invites = await getInvites();\n\t\t\tconst invites = await getInvites();\n\t\t\treturn invites;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "confirmRemove": "\tconst onRemove = (removeInvite: () => Promise<boolean>): void => {\n\tconst onRemove = (removeInvite: () => Promise<boolean>): void => {\n\t\tconst confirmRemove = async (): Promise<void> => {\n\t\tconst confirmRemove = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeInvite();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Invite_removed') });",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => (\n\t\t\t<>\n\t\t\t\t<GenericTableHeaderCell w={notSmall ? '20%' : '80%'}>{t('Token')}</GenericTableHeaderCell>"
        },
        "depth_rank": 7
    },
    {
        "file": "MailerPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/mailer/MailerPage.tsx",
        "code": {
            "sendMail": "const MailerPage = () => {\nconst MailerPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst sendMail = useSendMail();\n\tconst sendMail = useSendMail();\n\n\tconst [fromEmail, setFromEmail] = useState<{ value: string; error?: string }>({ value: '' });\n\tconst [fromEmail, setFromEmail] = useState<{ value: string; error?: string }>({ value: '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "InviteUsers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/InviteUsers.tsx",
        "code": {
            "handleClick": "\tconst sendInvitationMutation = useSendInvitationEmailMutation();\n\tconst sendInvitationMutation = useSendInvitationEmailMutation();\n\tconst isSmtpEnabled = useSmtpConfig();\n\tconst isSmtpEnabled = useSmtpConfig();\n\n\tconst handleClick = () => {\n\tconst handleClick = () => {\n\t\tsendInvitationMutation.mutate({ emails: getEmails(text) });"
        },
        "depth_rank": 7
    },
    {
        "file": "UsersPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/UsersPage.tsx",
        "code": {
            "handleCloseContextualbar": "\tconst handleCloseContextualbar = (): void => {\n\tconst handleCloseContextualbar = (): void => {\n\t\tusersRoute.push({});",
            "handleNewUser": "\tconst handleNewUser = (): void => {\n\tconst handleNewUser = (): void => {\n\t\tusersRoute.push({ context: 'new' });",
            "handleInviteUser": "\tconst handleInviteUser = (): void => {\n\tconst handleInviteUser = (): void => {\n\t\tusersRoute.push({ context: 'invite' });",
            "handleReload": "\tconst handleReload = (): void => {\n\tconst handleReload = (): void => {\n\t\tseatsCap?.reload();\n\t\treload.current();\n\t};\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Users')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AdminUserInfoWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserInfoWithData.tsx",
        "code": {
            "query": "const AdminUserInfoWithData = ({ uid, onReload }: AdminUserInfoWithDataProps): ReactElement => {\nconst AdminUserInfoWithData = ({ uid, onReload }: AdminUserInfoWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\tconst approveManuallyUsers = useSetting('Accounts_ManuallyApproveNewUsers');\n\tconst approveManuallyUsers = useSetting('Accounts_ManuallyApproveNewUsers');\n\n\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);",
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "usersInfo": "\t\t\tconst usersInfo = await getUsersInfo(query);\n\t\t\tconst usersInfo = await getUsersInfo(query);\n\t\t\treturn usersInfo;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 7
    },
    {
        "file": "EditUserWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/EditUserWithData.tsx",
        "code": {
            "query": "const EditUserWithData = ({ uid, onReload, ...props }: EditUserWithDataProps): ReactElement => {\nconst EditUserWithData = ({ uid, onReload, ...props }: EditUserWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getRoles = useEndpoint('GET', '/v1/roles.list');\n\tconst getRoles = useEndpoint('GET', '/v1/roles.list');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);",
            "roles": "\tconst {\n\tconst {\n\t\tdata: roleData,\n\t\tisLoading: roleState,\n\t\terror: roleError,\n\t} = useQuery(\n\t\t['roles'],\n\t\tasync () => {\n\t\t\tconst roles = await getRoles();\n\t\t\tconst roles = await getRoles();\n\t\t\treturn roles;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "getUsersInfo": "\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\n\tconst {\n\tconst {\n\t\tdata,\n\t\tisLoading: state,\n\t\terror,\n\t} = useQuery(['users', query, 'admin'], async () => {",
            "usersInfo": "\t\tconst usersInfo = await getUsersInfo(query);\n\t\tconst usersInfo = await getUsersInfo(query);\n\t\treturn usersInfo;\n\t});\n\n\tif (state || roleState) {\n\t\treturn (\n\t\t\t<Box p='x24'>\n\t\t\t\t<FormSkeleton />\n\t\t\t</Box>\n\t\t);\n\t}\n\n\tif (error || roleError) {\n\t\treturn (\n\t\t\t<Callout m='x16' type='danger'>\n\t\t\t\t{t('User_not_found')}"
        },
        "depth_rank": 7
    },
    {
        "file": "EditUser.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/EditUser.js",
        "code": {
            "t": "function EditUser({ data, roles, onReload, ...props }) {\nfunction EditUser({ data, roles, onReload, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [avatarObj, setAvatarObj] = useState();\n\tconst [avatarObj, setAvatarObj] = useState();\n\tconst [errors, setErrors] = useState({});\n\tconst [errors, setErrors] = useState({});",
            "validateForm": "\tconst validateForm = ({ key, value }) => {\n\tconst validateForm = ({ key, value }) => {\n\t\tvalidationKeys[key] && validationKeys[key](value);\n\t};\n\n\tconst { values, handlers, reset, hasUnsavedChanges } = useForm(getInitialValue(data), validateForm);\n\tconst { values, handlers, reset, hasUnsavedChanges } = useForm(getInitialValue(data), validateForm);",
            "saveAction": "\tconst goToUser = useCallback(\n\tconst goToUser = useCallback(\n\t\t(id) =>\n\t\t\trouter.push({\n\t\t\t\tcontext: 'info',\n\t\t\t\tid,\n\t\t\t}),\n\t\t[router],\n\t);\n\n\tconst saveAction = useEndpointAction('POST', '/v1/users.update', { successMessage: t('User_updated_successfully') });\n\tconst saveAction = useEndpointAction('POST', '/v1/users.update', { successMessage: t('User_updated_successfully') });",
            "saveAvatarUrlAction": "\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', t('Avatar_changed_successfully'));\n\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', t('Avatar_changed_successfully'));\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage: t('Avatar_changed_successfully') });\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage: t('Avatar_changed_successfully') });",
            "resetAvatarAction": "\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage: t('Avatar_changed_successfully') });\n\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage: t('Avatar_changed_successfully') });",
            "handleSave": "\tconst updateAvatar = useCallback(async () => {\n\tconst updateAvatar = useCallback(async () => {\n\t\tif (avatarObj === 'reset') {\n\t\t\treturn resetAvatarAction({\n\t\t\t\tuserId: data._id,\n\t\t\t});\n\t\t}\n\t\tif (avatarObj.avatarUrl) {\n\t\t\treturn saveAvatarUrlAction({\n\t\t\t\tuserId: data._id,\n\t\t\t\tavatarUrl: avatarObj && avatarObj.avatarUrl,\n\t\t\t});\n\t\t}\n\t\tavatarObj.set('userId', data._id);\n\t\treturn saveAvatarAction(avatarObj);\n\t}, [avatarObj, resetAvatarAction, saveAvatarAction, saveAvatarUrlAction, data._id]);\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tObject.entries(values).forEach(([key, value]) => {\n\t\t\tvalidationKeys[key] && validationKeys[key](value);\n\t\t});\n\n\t\tconst { name, username, email } = values;\n\t\tconst { name, username, email } = values;",
            "result": "\t\t\tconst result = await saveAction({\n\t\t\tconst result = await saveAction({\n\t\t\t\tuserId: data._id,\n\t\t\t\tdata: values,\n\t\t\t});\n\t\t\tif (result.success && avatarObj) {\n\t\t\t\tawait updateAvatar();\n\t\t\t}\n\t\t} else {",
            "availableRoles": "\tconst availableRoles = roles.map(({ _id, name, description }) => [_id, description || name]);\n\tconst availableRoles = roles.map(({ _id, name, description }) => [_id, description || name]);",
            "prepend": "\tconst canSaveOrReset = hasUnsavedChanges || avatarObj;\n\tconst canSaveOrReset = hasUnsavedChanges || avatarObj;\n\n\tconst prepend = useMemo(\n\tconst prepend = useMemo(\n\t\t() => (\n\t\t\t<UserAvatarEditor currentUsername={data.username} username={values.username} etag={data.avatarETag} setAvatarObj={setAvatarObj} />"
        },
        "depth_rank": 7
    },
    {
        "file": "UserForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/UserForm.js",
        "code": {
            "customFieldsMetadata": "\tconst {\n\tconst {\n\t\thandleName,\n\t\thandleUsername,\n\t\thandleEmail,\n\t\thandleVerified,\n\t\thandleStatusText,\n\t\thandleBio,\n\t\thandleNickname,\n\t\thandlePassword,\n\t\thandleSetRandomPassword,\n\t\thandleRequirePasswordChange,\n\t\thandleRoles,\n\t\thandleCustomFields,\n\t\thandleJoinDefaultChannels,\n\t\thandleSendWelcomeEmail,\n\t} = formHandlers;\n\n\tconst customFieldsMetadata = useAccountsCustomFields();\n\tconst customFieldsMetadata = useAccountsCustomFields();\n\n\tconst { control, watch } = useForm({\n\tconst { control, watch } = useForm({\n\t\tdefaultValues: { customFields: { ...customFields } },",
            "subscription": "\t\tconst subscription = watch((value) => handleCustomFields({ ...value.customFields }));\n\t\tconst subscription = watch((value) => handleCustomFields({ ...value.customFields }));"
        },
        "depth_rank": 7
    },
    {
        "file": "AddUser.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/AddUser.js",
        "code": {
            "isSmtpEnabled": "\tconst getRoleData = useEndpoint('GET', '/v1/roles.list');\n\tconst getRoleData = useEndpoint('GET', '/v1/roles.list');\n\n\tconst { data } = useQuery(['roles'], async () => {\n\tconst { data } = useQuery(['roles'], async () => {\n\t\tconst roles = await getRoleData();\n\t\tconst roles = await getRoleData();\n\t\treturn roles;\n\t});\n\n\tconst isSmtpEnabled = useSmtpConfig();\n\tconst isSmtpEnabled = useSmtpConfig();\n\n\tconst [errors, setErrors] = useState({});\n\tconst [errors, setErrors] = useState({});",
            "defaultUserRoles": "\tconst validateForm = ({ key, value, values }) => {\n\tconst validateForm = ({ key, value, values }) => {\n\t\tvalidationKeys[key] && validationKeys[key](value, values);\n\t};\n\n\tconst defaultUserRoles = parseCSV(String(useSetting('Accounts_Registration_Users_Default_Roles')));\n\tconst defaultUserRoles = parseCSV(String(useSetting('Accounts_Registration_Users_Default_Roles')));\n\n\tconst { values, handlers, reset, hasUnsavedChanges } = useForm(\n\tconst { values, handlers, reset, hasUnsavedChanges } = useForm(",
            "handleSave": "\tconst eventStats = useEndpointAction('POST', '/v1/statistics.telemetry');\n\tconst eventStats = useEndpointAction('POST', '/v1/statistics.telemetry');\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tObject.entries(values).forEach(([key, value]) => {\n\t\t\tvalidateForm({ key, value, values });",
            "result": "\t\tconst result = await saveAction(values);\n\t\tconst result = await saveAction(values);\n\t\tif (result.success) {\n\t\t\teventStats({\n\t\t\t\tparams: [{ eventName: 'updateCounter', settingsId: 'Manual_Entry_User_Count' }],",
            "availableRoles": "\tconst availableRoles = useMemo(() => data?.roles?.map(({ _id, description, name }) => [_id, description || name]) ?? [], [data]);\n\tconst availableRoles = useMemo(() => data?.roles?.map(({ _id, description, name }) => [_id, description || name]) ?? [], [data]);"
        },
        "depth_rank": 7
    },
    {
        "file": "AdminUserInfoActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserInfoActions.tsx",
        "code": {
            "AdminUserInfoActions": "const AdminUserInfoActions = ({\nconst AdminUserInfoActions = ({\n\tusername,\n\tuserId,\n\tisFederatedUser,\n\tisActive,\n\tisAdmin,\n\tonChange,\n\tonReload,\n}: AdminUserInfoActionsProps): ReactElement => {",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action, disabled, title }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action, disabled, title }]: any): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "useDeleteUserAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useDeleteUserAction.tsx",
        "code": {
            "handleDeletedUser": "\tconst erasureType = useSetting('Message_ErasureType');\n\tconst erasureType = useSetting('Message_ErasureType');\n\tconst confirmOwnerChanges = useConfirmOwnerChanges();\n\tconst confirmOwnerChanges = useConfirmOwnerChanges();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleDeletedUser = (): void => {\n\tconst handleDeletedUser = (): void => {\n\t\tsetModal();\n\t\tuserRoute.push({});",
            "deleteUserQuery": "\tconst deleteUserQuery = useMemo(() => ({ userId, confirmRelinquish: false }), [userId]);\n\tconst deleteUserQuery = useMemo(() => ({ userId, confirmRelinquish: false }), [userId]);",
            "deleteUser": "\tconst deleteUserEndpoint = useEndpoint('POST', '/v1/users.delete');\n\tconst deleteUserEndpoint = useEndpoint('POST', '/v1/users.delete');\n\n\tconst deleteUser = (): Promise<void> =>\n\tconst deleteUser = (): Promise<void> =>\n\t\tconfirmOwnerChanges(\n\t\t\tasync (confirm = false) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\tdeleteUserQuery.confirmRelinquish = confirm;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait deleteUserEndpoint(deleteUserQuery);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('User_has_been_deleted') });",
            "confirmDeleteUser": "\tconst confirmDeleteUser = useMutableCallback(() => {\n\tconst confirmDeleteUser = useMutableCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={deleteUser} onCancel={(): void => setModal()} confirmText={t('Delete')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "useResetE2EEKeyAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useResetE2EEKeyAction.tsx",
        "code": {
            "resetE2EEKey": "\tconst enforcePassword = useSetting('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback');\n\tconst enforcePassword = useSetting('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback');\n\tconst resetE2EEKeyRequest = useEndpoint('POST', '/v1/users.resetE2EKey');\n\tconst resetE2EEKeyRequest = useEndpoint('POST', '/v1/users.resetE2EKey');\n\n\tconst resetE2EEKey = useCallback(async () => {\n\tconst resetE2EEKey = useCallback(async () => {\n\t\ttry {\n\t\t\tawait resetE2EEKeyRequest({ userId });",
            "confirmResetE2EEKey": "\tconst confirmResetE2EEKey = useCallback(() => {\n\tconst confirmResetE2EEKey = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={resetE2EEKey} onCancel={(): void => setModal()} confirmText={t('Reset')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "useChangeAdminStatusAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useChangeAdminStatusAction.ts",
        "code": {
            "message": "\t\t\tconst message = isAdmin ? 'User_is_no_longer_an_admin' : 'User_is_now_an_admin';\n\t\t\tconst message = isAdmin ? 'User_is_no_longer_an_admin' : 'User_is_now_an_admin';\n\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });"
        },
        "depth_rank": 8
    },
    {
        "file": "useChangeUserStatusAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useChangeUserStatusAction.ts",
        "code": {
            "changeActiveStatus": "\tconst changeActiveStatus = (): Promise<void> =>\n\tconst changeActiveStatus = (): Promise<void> =>\n\t\tconfirmOwnerChanges(\n\t\t\tasync (confirm = false) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\tactiveStatusQuery.confirmRelinquish = confirm;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait changeActiveStatusRequest(activeStatusQuery);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(changeActiveStatusMessage) });"
        },
        "depth_rank": 8
    },
    {
        "file": "useConfirmOwnerChanges.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useConfirmOwnerChanges.tsx",
        "code": {
            "dispatchToastMessage": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn async (action, modalProps, onChange): Promise<void> => {\n\t\ttry {\n\t\t\treturn await action();\n\t\t} catch (error: any) {",
            "handleConfirm": "\t\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\t\tawait action(true);\n\t\t\t\t\tsetModal();\n\t\t\t\t\tonChange();\n\t\t\t\t};\n\n\t\t\t\treturn setModal(\n\t\t\t\t\t<ConfirmOwnerChangeWarningModal\n\t\t\t\t\t\t{...modalProps}"
        },
        "depth_rank": 8
    },
    {
        "file": "useSendInvitationEmailMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useSendInvitationEmailMutation.ts",
        "code": {
            "result": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst sendInvites = useEndpoint('POST', '/v1/sendInvitationEmail');\n\tconst sendInvites = useEndpoint('POST', '/v1/sendInvitationEmail');\n\n\treturn useMutation(\n\t\tasync ({ emails }) => {\n\t\t\tconst result = await sendInvites({ emails });\n\t\t\tconst result = await sendInvites({ emails });"
        },
        "depth_rank": 8
    },
    {
        "file": "useResetTOTPAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useResetTOTPAction.tsx",
        "code": {
            "resetTOTP": "\tconst resetTOTPRequest = useEndpoint('POST', '/v1/users.resetTOTP');\n\tconst resetTOTPRequest = useEndpoint('POST', '/v1/users.resetTOTP');\n\tconst enforcePassword = useSetting('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback');\n\tconst enforcePassword = useSetting('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback');\n\n\tconst resetTOTP = useCallback(async () => {\n\tconst resetTOTP = useCallback(async () => {\n\t\ttry {\n\t\t\tawait resetTOTPRequest({ userId });",
            "confirmResetTOTP": "\tconst confirmResetTOTP = useCallback(() => {\n\tconst confirmResetTOTP = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={resetTOTP} onCancel={(): void => setModal()} confirmText={t('Reset')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "UsersTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/UsersTable/UsersTableRow.tsx",
        "code": {
            "t": "const UsersTableRow = ({ user, onClick, mediaQuery }: UsersTableRowProps): ReactElement => {\nconst UsersTableRow = ({ user, onClick, mediaQuery }: UsersTableRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, emails, username, name, roles, status, active, avatarETag } = user;\n\tconst { _id, emails, username, name, roles, status, active, avatarETag } = user;",
            "roleNames": "\tconst statusText = active ? t(capitalize(status as string) as TranslationKey) : t('Disabled');\n\tconst statusText = active ? t(capitalize(status as string) as TranslationKey) : t('Disabled');\n\n\tconst roleNames = (roles || [])\n\tconst roleNames = (roles || [])\n\t\t.map((roleId) => (Roles.findOne(roleId, { fields: { name: 1 } }) as IRole | undefined)?.name)"
        },
        "depth_rank": 8
    },
    {
        "file": "UsersTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/users/UsersTable/UsersTable.tsx",
        "code": {
            "dispatchToastMessage": "\tconst getUsers = useEndpoint('GET', '/v1/users.list');\n\tconst getUsers = useEndpoint('GET', '/v1/users.list');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, isSuccess, refetch } = useQuery(\n\tconst { data, isLoading, error, isSuccess, refetch } = useQuery(",
            "users": "\t\t\tconst users = await getUsers(query);\n\t\t\tconst users = await getUsers(query);\n\t\t\treturn users;\n\t\t},\n\t\t{\n\t\t\trefetchOnWindowFocus: false,\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "headers": "\tconst handleClick = useMutableCallback((id): void =>\n\tconst handleClick = useMutableCallback((id): void =>\n\t\tusersRoute.push({\n\t\t\tcontext: 'info',\n\t\t\tid,\n\t\t}),\n\t);\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell w='x200' key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 8
    },
    {
        "file": "AdminSidebarPages.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/sidebar/AdminSidebarPages.tsx",
        "code": {
            "items": "const AdminSidebarPages: FC<AdminSidebarPagesProps> = ({ currentPath }) => {\nconst AdminSidebarPages: FC<AdminSidebarPagesProps> = ({ currentPath }) => {\n\tconst items = useSyncExternalStore(subscribeToAdminSidebarItems, getAdminSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToAdminSidebarItems, getAdminSidebarItems);\n\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();\n\tconst { tabType, trialEndDate, isLoading } = useUpgradeTabParams();"
        },
        "depth_rank": 7
    },
    {
        "file": "AdminSidebar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/sidebar/AdminSidebar.tsx",
        "code": {
            "t": "const AdminSidebar: FC = () => {\nconst AdminSidebar: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\t// TODO: uplift this provider\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header\n\t\t\t\t\tonClose={sidebar.close}"
        },
        "depth_rank": 7
    },
    {
        "file": "UpgradeTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/sidebar/UpgradeTab.tsx",
        "code": {
            "path": "const UpgradeTab = ({ type, currentPath, trialEndDate }: UpgradeTabProps): ReactElement => {\nconst UpgradeTab = ({ type, currentPath, trialEndDate }: UpgradeTabProps): ReactElement => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst path = router.buildRoutePath({\n\tconst path = router.buildRoutePath({\n\t\tname: 'upgrade',\n\t\tparams: { type },",
            "displayEmoji": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst label = getUpgradeTabLabel(type);\n\tconst label = getUpgradeTabLabel(type);\n\tconst displayEmoji = isFullyFeature(type);\n\tconst displayEmoji = isFullyFeature(type);\n\n\treturn (\n\t\t<Sidebar.GenericItem active={currentPath === path} href={path} featured>"
        },
        "depth_rank": 7
    },
    {
        "file": "ViewLogsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/viewLogs/ViewLogsPage.tsx",
        "code": {
            "t": "const ViewLogsPage = (): ReactElement => {\nconst ViewLogsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Logs')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "ServerLogs.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/viewLogs/ServerLogs.tsx",
        "code": {
            "fetchLines": "const unserializeEntry = ({ ts, ...entry }: Serialized<StdOutLogEntry>): StdOutLogEntry => ({\nconst unserializeEntry = ({ ts, ...entry }: Serialized<StdOutLogEntry>): StdOutLogEntry => ({\n\tts: new Date(ts),\n\t...entry,\n});\n\nconst ServerLogs = (): ReactElement => {\nconst ServerLogs = (): ReactElement => {\n\tconst [entries, setEntries] = useState<StdOutLogEntry[]>([]);\n\tconst [entries, setEntries] = useState<StdOutLogEntry[]>([]);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getStdoutQueue = useEndpoint('GET', '/v1/stdout.queue');\n\tconst getStdoutQueue = useEndpoint('GET', '/v1/stdout.queue');\n\tconst subscribeToStdout = useStream('stdout');\n\tconst subscribeToStdout = useStream('stdout');\n\n\tuseEffect(() => {\n\t\tconst fetchLines = async (): Promise<void> => {\n\t\tconst fetchLines = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst { queue } = await getStdoutQueue(undefined);\n\t\t\t\tconst { queue } = await getStdoutQueue(undefined);",
            "observer": "\t\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\t\tmutations.forEach(() => {\n\t\t\t\t\tsendToBottomIfNecessary();\n\t\t\t\t});\n\t\t\t});\n\t\t\tobserver.observe(wrapper, { childList: true });",
            "handleClick": "\t\tconst handleSubtreeModified = (): void => {\n\t\tconst handleSubtreeModified = (): void => {\n\t\t\tsendToBottomIfNecessary();\n\t\t};\n\t\twrapper.addEventListener('DOMSubtreeModified', handleSubtreeModified);\n\n\t\treturn (): void => {\n\t\t\twrapper.removeEventListener('DOMSubtreeModified', handleSubtreeModified);\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\tuseEffect(() => {\n\t\tconst handleWindowResize = (): void => {\n\t\tconst handleWindowResize = (): void => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsendToBottomIfNecessary();\n\t\t\t}, 100);\n\t\t};\n\n\t\twindow.addEventListener('resize', handleWindowResize);\n\n\t\treturn (): void => {\n\t\t\twindow.removeEventListener('resize', handleWindowResize);\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\tconst handleWheel = useCallback(() => {\n\tconst handleWheel = useCallback(() => {\n\t\tatBottomRef.current = false;\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleTouchStart = (): void => {\n\tconst handleTouchStart = (): void => {\n\t\tatBottomRef.current = false;\n\t};\n\n\tconst handleTouchEnd = useCallback(() => {\n\tconst handleTouchEnd = useCallback(() => {\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleScroll = useCallback(() => {\n\tconst handleScroll = useCallback(() => {\n\t\tatBottomRef.current = false;\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleClick = useCallback(() => {\n\tconst handleClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tsendToBottomIfNecessary();\n\t}, [sendToBottomIfNecessary]);\n\n\treturn (\n\t\t<Box width='full' height='full' overflow='hidden' position='relative' display='flex' marginBlock='x8'>\n\t\t\t<Scrollable vertical>\n\t\t\t\t<Box\n\t\t\t\t\tref={wrapperRef}"
        },
        "depth_rank": 7
    },
    {
        "file": "PermissionsContextBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsContextBar.tsx",
        "code": {
            "setModal": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "handleCloseContextualbar": "\tconst handleCloseContextualbar = useMutableCallback(() => {\n\tconst handleCloseContextualbar = useMutableCallback(() => {\n\t\trouter.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "EditRolePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/EditRolePage.tsx",
        "code": {
            "handleSave": "\tconst handleSave = useMutableCallback(async (data) => {\n\tconst handleSave = useMutableCallback(async (data) => {\n\t\ttry {\n\t\t\tif (data.roleId) {\n\t\t\t\tawait updateRole(data);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "deleteRoleAction": "\t\tconst deleteRoleAction = async (): Promise<void> => {\n\t\tconst deleteRoleAction = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteRole({ roleId: role._id });",
            "deleteRoleMessage": "\t\tconst deleteRoleMessage = isEnterprise ? t('Delete_Role_Warning') : t('Delete_Role_Warning_Community_Edition');\n\t\tconst deleteRoleMessage = isEnterprise ? t('Delete_Role_Warning') : t('Delete_Role_Warning_Community_Edition');\n\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tvariant='danger'\n\t\t\t\tonConfirm={deleteRoleAction}"
        },
        "depth_rank": 7
    },
    {
        "file": "PermissionsRouter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsRouter.tsx",
        "code": {
            "context": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst { data, isLoading } = useIsEnterprise();\n\tconst { data, isLoading } = useIsEnterprise();"
        },
        "depth_rank": 7
    },
    {
        "file": "EditRolePageWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/EditRolePageWithData.tsx",
        "code": {
            "context": "const EditRolePageWithData = ({ roleId }: { roleId?: IRole['_id'] }): ReactElement => {\nconst EditRolePageWithData = ({ roleId }: { roleId?: IRole['_id'] }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst role = useRole(roleId);\n\tconst role = useRole(roleId);\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst { data, isLoading } = useIsEnterprise();\n\tconst { data, isLoading } = useIsEnterprise();"
        },
        "depth_rank": 7
    },
    {
        "file": "RoleForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/RoleForm.tsx",
        "code": {
            "t": "const RoleForm = ({ className, editing = false, isProtected = false, isDisabled = false }: RoleFormProps): ReactElement => {\nconst RoleForm = ({ className, editing = false, isProtected = false, isDisabled = false }: RoleFormProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tregister,\n\t\tcontrol,\n\t\tformState: { errors },"
        },
        "depth_rank": 7
    },
    {
        "file": "usePermissionsAndRoles.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/hooks/usePermissionsAndRoles.ts",
        "code": {
            "roles": "\tconst getPermissions = useCallback(\n\tconst getPermissions = useCallback(\n\t\t() =>\n\t\t\tChatPermissions.find(getFilter(), {\n\t\t\t\tsort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t}),\n\t\t[limit, skip, getFilter],\n\t);\n\tconst getTotalPermissions = useCallback(() => ChatPermissions.find(getFilter()).count(), [getFilter]);\n\tconst getTotalPermissions = useCallback(() => ChatPermissions.find(getFilter()).count(), [getFilter]);\n\n\tconst permissions = useReactiveValue(getPermissions);\n\tconst permissions = useReactiveValue(getPermissions);\n\tconst permissionsTotal = useReactiveValue(getTotalPermissions);\n\tconst permissionsTotal = useReactiveValue(getTotalPermissions);\n\tconst getRoles = useMutableCallback(() => Roles.find().fetch());\n\tconst getRoles = useMutableCallback(() => Roles.find().fetch());\n\tconst roles = useReactiveValue(getRoles);\n\tconst roles = useReactiveValue(getRoles);\n\n\treturn { permissions: permissions.fetch(), total: permissionsTotal, roleList: roles, reload: getRoles };"
        },
        "depth_rank": 8
    },
    {
        "file": "useChangeRole.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/hooks/useChangeRole.ts",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutableCallback(async (roleId, granted) => {\n\t\ttry {\n\t\t\tif (granted) {\n\t\t\t\tawait onRemove(permissionId, roleId);\n\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "PermissionsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/PermissionsTable.tsx",
        "code": {
            "removeRole": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst grantRole = useMethod('authorization:addPermissionToRole');\n\tconst grantRole = useMethod('authorization:addPermissionToRole');\n\tconst removeRole = useMethod('authorization:removeRoleFromPermission');\n\tconst removeRole = useMethod('authorization:removeRoleFromPermission');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();"
        },
        "depth_rank": 8
    },
    {
        "file": "RoleHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/RoleHeader.tsx",
        "code": {
            "handleEditRole": "\tconst handleEditRole = useMutableCallback(() => {\n\tconst handleEditRole = useMutableCallback(() => {\n\t\trouter.push({\n\t\t\tcontext: 'edit',\n\t\t\t_id,\n\t\t});\n\t});\n\n\treturn (\n\t\t<GenericTableHeaderCell pi='x4' p='x8'>\n\t\t\t<Button icon='edit' secondary onClick={handleEditRole}>"
        },
        "depth_rank": 8
    },
    {
        "file": "PermissionRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/PermissionRow.tsx",
        "code": {
            "t": "const PermissionRow = ({ permission, roleList, onGrant, onRemove }: PermissionRowProps): ReactElement => {\nconst PermissionRow = ({ permission, roleList, onGrant, onRemove }: PermissionRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, roles } = permission;\n\tconst { _id, roles } = permission;",
            "changeRole": "\tconst [hovered, setHovered] = useState(false);\n\tconst [hovered, setHovered] = useState(false);\n\tconst changeRole = useChangeRole({ onGrant, onRemove, permissionId: _id });\n\tconst changeRole = useChangeRole({ onGrant, onRemove, permissionId: _id });",
            "onMouseLeave": "\tconst onMouseEnter = useMutableCallback(() => setHovered(true));\n\tconst onMouseEnter = useMutableCallback(() => setHovered(true));\n\tconst onMouseLeave = useMutableCallback(() => setHovered(false));\n\tconst onMouseLeave = useMutableCallback(() => setHovered(false));\n\n\treturn (\n\t\t<GenericTableRow key={_id} role='link' action tabIndex={0} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>"
        },
        "depth_rank": 8
    },
    {
        "file": "UsersInRolePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRolePage.tsx",
        "code": {
            "dispatchToastMessage": "const UsersInRolePage = ({ role }: { role: IRole }): ReactElement => {\nconst UsersInRolePage = ({ role }: { role: IRole }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reload = useRef<() => void>(() => undefined);\n\tconst reload = useRef<() => void>(() => undefined);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty },",
            "handleAdd": "\tconst addUser = useEndpoint('POST', '/v1/roles.addUserToRole');\n\tconst addUser = useEndpoint('POST', '/v1/roles.addUserToRole');\n\n\tconst rid = getValues('rid');\n\tconst rid = getValues('rid');\n\n\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\trouter.push({\n\t\t\tcontext: 'edit',\n\t\t\t_id,\n\t\t});\n\t});\n\n\tconst handleAdd = useMutableCallback(async ({ users, rid }: UsersInRolePayload) => {\n\tconst handleAdd = useMutableCallback(async ({ users, rid }: UsersInRolePayload) => {\n\t\ttry {\n\t\t\tawait Promise.all(\n\t\t\t\tusers.map(async (user) => {\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tawait addUser({ roleName: _id, username: user, roomId: rid });"
        },
        "depth_rank": 8
    },
    {
        "file": "UsersInRoleTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTable.tsx",
        "code": {
            "UsersInRoleTable": "const UsersInRoleTable = ({\nconst UsersInRoleTable = ({\n\tusers,\n\treload,\n\troleName,\n\troleId,\n\tdescription,\n\ttotal,\n\trid,\n\tpaginationData,\n}: UsersInRoleTableProps): ReactElement => {",
            "removeUser": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeUser = useEndpoint('POST', '/v1/roles.removeUserFromRole');\n\tconst removeUser = useEndpoint('POST', '/v1/roles.removeUserFromRole');\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = paginationData;\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = paginationData;",
            "remove": "\tconst closeModal = (): void => setModal();\n\tconst closeModal = (): void => setModal();\n\n\tconst handleRemove = useMutableCallback((username) => {\n\tconst handleRemove = useMutableCallback((username) => {\n\t\tconst remove = async (): Promise<void> => {\n\t\tconst remove = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeUser({ roleId, username, scope: rid });"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersInRoleTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTableRow.tsx",
        "code": {
            "UsersInRoleTableRow": "const UsersInRoleTableRow = ({ user, onRemove }: UsersInRoleTableRowProps): ReactElement => {\nconst UsersInRoleTableRow = ({ user, onRemove }: UsersInRoleTableRowProps): ReactElement => {\n\tconst { _id, name, username, avatarETag } = user;\n\tconst { _id, name, username, avatarETag } = user;",
            "handleRemove": "\tconst email = getUserEmailAddress(user);\n\tconst email = getUserEmailAddress(user);\n\n\tconst handleRemove = useMutableCallback(() => {\n\tconst handleRemove = useMutableCallback(() => {\n\t\tonRemove(username);\n\t});\n\n\treturn (\n\t\t<GenericTableRow key={_id} tabIndex={0} role='link'>"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersInRoleTableWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTableWithData.tsx",
        "code": {
            "UsersInRoleTableWithData": "const UsersInRoleTableWithData = ({\nconst UsersInRoleTableWithData = ({\n\trid,\n\troleId,\n\troleName,\n\tdescription,\n\treloadRef,\n}: UsersInRoleTableWithDataProps): ReactElement | null => {",
            "query": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\trole: roleId,\n\t\t\t...(rid && { roomId: rid }),",
            "dispatchToastMessage": "\tconst getUsersInRole = useEndpoint('GET', '/v1/roles.getUsersInRole');\n\tconst getUsersInRole = useEndpoint('GET', '/v1/roles.getUsersInRole');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { refetch, ...result } = useQuery(\n\tconst { refetch, ...result } = useQuery("
        },
        "depth_rank": 9
    },
    {
        "file": "EmailInboxForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/emailInbox/EmailInboxForm.tsx",
        "code": {
            "handleBack": "\tconst handleBack = useCallback(() => router.push({}), [router]);\n\tconst handleBack = useCallback(() => router.push({}), [router]);",
            "deleteInbox": "\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst deleteInbox = async (): Promise<void> => {\n\t\tconst deleteInbox = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteInboxAction();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Email_Inbox_has_been_removed') });",
            "handleSave": "\tconst handleSave = useMutableCallback(\n\tconst handleSave = useMutableCallback(\n\t\tasync ({\n\t\t\tactive,\n\t\t\tname,\n\t\t\temail,\n\t\t\tdescription,\n\t\t\tsenderInfo,\n\t\t\tdepartment,\n\t\t\tsmtpServer,\n\t\t\tsmtpPort,\n\t\t\tsmtpUsername,\n\t\t\tsmtpPassword,\n\t\t\tsmtpSecure,\n\t\t\timapServer,\n\t\t\timapPort,\n\t\t\timapUsername,\n\t\t\timapPassword,\n\t\t\timapSecure,\n\t\t\timapRetries,\n\t\t}) => {",
            "payload": "\t\t\tconst smtp = {\n\t\t\tconst smtp = {\n\t\t\t\tserver: smtpServer,\n\t\t\t\tport: parseInt(smtpPort),\n\t\t\t\tusername: smtpUsername,\n\t\t\t\tpassword: smtpPassword,\n\t\t\t\tsecure: smtpSecure,\n\t\t\t};\n\n\t\t\tconst imap = {\n\t\t\tconst imap = {\n\t\t\t\tserver: imapServer,\n\t\t\t\tport: parseInt(imapPort),\n\t\t\t\tusername: imapUsername,\n\t\t\t\tpassword: imapPassword,\n\t\t\t\tsecure: imapSecure,\n\t\t\t\tmaxRetries: parseInt(imapRetries),\n\t\t\t};\n\n\t\t\tconst payload = {\n\t\t\tconst payload = {\n\t\t\t\t...(inboxData?._id && { _id: inboxData?._id }),"
        },
        "depth_rank": 7
    },
    {
        "file": "SendTestButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/emailInbox/SendTestButton.tsx",
        "code": {
            "handleOnClick": "\tconst handleOnClick = async (e: React.MouseEvent<HTMLElement, MouseEvent>): Promise<void> => {\n\tconst handleOnClick = async (e: React.MouseEvent<HTMLElement, MouseEvent>): Promise<void> => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\ttry {\n\t\t\tawait sendTest();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Email_sent'),\n\t\t\t});\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "EmailInboxTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/emailInbox/EmailInboxTable.tsx",
        "code": {
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort}>"
        },
        "depth_rank": 7
    },
    {
        "file": "EditCustomEmoji.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customEmoji/EditCustomEmoji.tsx",
        "code": {
            "absoluteUrl": "const EditCustomEmoji: FC<EditCustomEmojiProps> = ({ close, onChange, data, ...props }) => {\nconst EditCustomEmoji: FC<EditCustomEmojiProps> = ({ close, onChange, data, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst [errors, setErrors] = useState({ name: false, aliases: false });\n\tconst [errors, setErrors] = useState({ name: false, aliases: false });",
            "result": "\t\tconst formData = new FormData();\n\t\tconst formData = new FormData();\n\t\temojiFile && formData.append('emoji', emojiFile);\n\t\tformData.append('_id', _id);\n\t\tformData.append('name', name);\n\t\tformData.append('aliases', aliases);\n\t\tconst result = (await saveAction(formData)) as { success: boolean };\n\t\tconst result = (await saveAction(formData)) as { success: boolean };",
            "handleDelete": "\tconst handleDeleteButtonClick = useCallback(() => {\n\tconst handleDeleteButtonClick = useCallback(() => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteAction({ emojiId: _id });",
            "handleCancel": "\t\tconst handleCancel = (): void => {\n\t\tconst handleCancel = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => (\n\t\t\t<GenericModal variant='danger' onConfirm={handleDelete} onCancel={handleCancel} onClose={handleCancel} confirmText={t('Delete')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomEmoji.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customEmoji/CustomEmoji.tsx",
        "code": {
            "t": "const CustomEmoji: FC<CustomEmojiProps> = ({ onClick, reload }) => {\nconst CustomEmoji: FC<CustomEmojiProps> = ({ onClick, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name' w='x200'>"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomEmojiRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customEmoji/CustomEmojiRoute.tsx",
        "code": {
            "handleAddEmoji": "\tconst handleItemClick = (_id: string) => (): void => {\n\tconst handleItemClick = (_id: string) => (): void => {\n\t\troute.push({\n\t\t\tcontext: 'edit',\n\t\t\tid: _id,\n\t\t});\n\t};\n\n\tconst handleAddEmoji = useCallback(() => {\n\tconst handleAddEmoji = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = (): void => {\n\tconst handleClose = (): void => {\n\t\troute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "EditCustomEmojiWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customEmoji/EditCustomEmojiWithData.tsx",
        "code": {
            "query": "const EditCustomEmojiWithData: FC<EditCustomEmojiWithDataProps> = ({ _id, onChange, close, ...props }) => {\nconst EditCustomEmojiWithData: FC<EditCustomEmojiWithDataProps> = ({ _id, onChange, close, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);",
            "handleChange": "\tconst handleChange = (): void => {\n\tconst handleChange = (): void => {\n\t\tonChange?.();\n\t\trefetch?.();\n\t};\n\n\treturn <EditCustomEmoji data={data.emojis.update[0]} close={close} onChange={handleChange} {...props} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "AddCustomEmoji.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customEmoji/AddCustomEmoji.tsx",
        "code": {
            "t": "const AddCustomEmoji = ({ close, onChange, ...props }: AddCustomEmojiProps): ReactElement => {\nconst AddCustomEmoji = ({ close, onChange, ...props }: AddCustomEmojiProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [name, setName] = useState('');\n\tconst [name, setName] = useState('');\n\tconst [aliases, setAliases] = useState('');\n\tconst [aliases, setAliases] = useState('');\n\tconst [emojiFile, setEmojiFile] = useState<Blob>();\n\tconst [emojiFile, setEmojiFile] = useState<Blob>();\n\tconst [newEmojiPreview, setNewEmojiPreview] = useState('');\n\tconst [newEmojiPreview, setNewEmojiPreview] = useState('');\n\tconst [errors, setErrors] = useState({ name: false, emoji: false, aliases: false });\n\tconst [errors, setErrors] = useState({ name: false, emoji: false, aliases: false });",
            "setEmojiPreview": "\tconst setEmojiPreview = useCallback(\n\tconst setEmojiPreview = useCallback(\n\t\tasync (file) => {\n\t\t\tsetEmojiFile(file);\n\t\t\tsetNewEmojiPreview(URL.createObjectURL(file));\n\t\t\tsetErrors((prevState) => ({ ...prevState, emoji: false }));",
            "result": "\t\tconst formData = new FormData();\n\t\tconst formData = new FormData();\n\t\tformData.append('emoji', emojiFile);\n\t\tformData.append('name', name);\n\t\tformData.append('aliases', aliases);\n\t\tconst result = (await saveAction(formData)) as { success: boolean };\n\t\tconst result = (await saveAction(formData)) as { success: boolean };"
        },
        "depth_rank": 7
    },
    {
        "file": "OAuthAppsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/oauthApps/OAuthAppsTable.tsx",
        "code": {
            "uid": "const OAuthAppsTable = (): ReactElement => {\nconst OAuthAppsTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst uid = { uid: useUserId() || '' };\n\tconst uid = { uid: useUserId() || '' };",
            "headers": "\tconst onClick = useCallback(\n\tconst onClick = useCallback(\n\t\t(_id) => (): void =>\n\t\t\trouter.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid: _id,\n\t\t\t}),\n\t\t[router],\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name'>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 7
    },
    {
        "file": "OAuthAddApp.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/oauthApps/OAuthAddApp.tsx",
        "code": {
            "dispatchToastMessage": "const OAuthAddApp = (): ReactElement => {\nconst OAuthAddApp = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "close": "\tconst close = useCallback(() => router.push({}), [router]);\n\tconst close = useCallback(() => router.push({}), [router]);"
        },
        "depth_rank": 7
    },
    {
        "file": "EditOauthApp.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/oauthApps/EditOauthApp.tsx",
        "code": {
            "dispatchToastMessage": "const EditOauthApp = ({ onChange, data, ...props }: EditOauthAppProps): ReactElement => {\nconst EditOauthApp = ({ onChange, data, ...props }: EditOauthAppProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "close": "\tconst close = useCallback(() => router.push({}), [router]);\n\tconst close = useCallback(() => router.push({}), [router]);",
            "onDeleteConfirm": "\tconst onDeleteConfirm = useCallback(async () => {\n\tconst onDeleteConfirm = useCallback(async () => {\n\t\ttry {\n\t\t\tawait deleteApp({ appId: data._id });",
            "openConfirmDelete": "\tconst openConfirmDelete = (): void =>\n\tconst openConfirmDelete = (): void =>\n\t\tsetModal(() => (\n\t\t\t<GenericModal\n\t\t\t\tvariant='danger'\n\t\t\t\tonConfirm={onDeleteConfirm}"
        },
        "depth_rank": 7
    },
    {
        "file": "EditOauthAppWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/oauthApps/EditOauthAppWithData.tsx",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "oauthApps": "\t\t\tconst oauthApps = await getOauthApps({ _id });\n\t\t\tconst oauthApps = await getOauthApps({ _id });"
        },
        "depth_rank": 7
    },
    {
        "file": "OAuthAppsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/oauthApps/OAuthAppsPage.tsx",
        "code": {
            "id": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Third_party_login')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "UpgradePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/upgrade/UpgradePage/UpgradePage.tsx",
        "code": {
            "urlParams": "const getUrl = (type: UpgradeTabVariant, date: string | undefined, language: string): string => {\nconst getUrl = (type: UpgradeTabVariant, date: string | undefined, language: string): string => {\n\tconst urlParams = new URLSearchParams({ lang: language.toLowerCase() });\n\tconst urlParams = new URLSearchParams({ lang: language.toLowerCase() });",
            "getWindowMessagePath": "const getWindowMessagePath = (e: MessageEvent<string>): string | undefined => {\nconst getWindowMessagePath = (e: MessageEvent<string>): string | undefined => {\n\tlet parsedMessage = {};",
            "getAbsoluteUrl": "const UpgradePage = (): ReactElement => {\nconst UpgradePage = (): ReactElement => {\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tconst type = useRouteParameter('type') as UpgradeTabVariant;\n\tconst type = useRouteParameter('type') as UpgradeTabVariant;\n\tconst trialEndDate = useSearchParameter('trialEndDate');\n\tconst trialEndDate = useSearchParameter('trialEndDate');\n\tconst language = useLanguage();\n\tconst language = useLanguage();\n\tconst pageUrl = getUrl(type, trialEndDate, language);\n\tconst pageUrl = getUrl(type, trialEndDate, language);\n\n\tconst getAbsoluteUrl = useAbsoluteUrl();\n\tconst getAbsoluteUrl = useAbsoluteUrl();\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 8
    },
    {
        "file": "EditSound.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customSounds/EditSound.tsx",
        "code": {
            "setModal": "function EditSound({ close, onChange, data, ...props }: EditSoundProps): ReactElement {\nfunction EditSound({ close, onChange, data, ...props }: EditSoundProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { _id, name: previousName } = data || {};\n\tconst { _id, name: previousName } = data || {};",
            "previousSound": "\tconst previousSound = useMemo(() => data || {}, [data]);\n\tconst previousSound = useMemo(() => data || {}, [data]);",
            "soundData": "\tconst saveAction = useCallback(\n\tconst saveAction = useCallback(\n\t\tasync (sound) => {\n\t\t\tconst soundData = createSoundData(sound, name, { previousName, previousSound, _id, extension: sound.extension });\n\t\t\tconst soundData = createSoundData(sound, name, { previousName, previousSound, _id, extension: sound.extension });",
            "validation": "\t\t\tconst validation = validate(soundData, sound);\n\t\t\tconst validation = validate(soundData, sound);\n\t\t\tif (validation.length === 0) {\n\t\t\t\tlet soundId: string;\n\t\t\t\ttry {\n\t\t\t\t\tsoundId = await insertOrUpdateSound(soundData);\n\t\t\t\t} catch (error) {",
            "reader": "\t\t\t\t\tconst reader = new FileReader();\n\t\t\t\t\tconst reader = new FileReader();\n\t\t\t\t\treader.readAsBinaryString(sound);\n\t\t\t\t\treader.onloadend = (): void => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tuploadCustomSound(reader.result as string, sound.type, { ...soundData, _id: soundId });",
            "handleDelete": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\tsaveAction(sound);\n\t\tonChange();\n\t}, [saveAction, sound, onChange]);\n\n\tconst handleDeleteButtonClick = useCallback(() => {\n\tconst handleDeleteButtonClick = useCallback(() => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteCustomSound(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Sound_Has_Been_Deleted') });",
            "handleCancel": "\t\tconst handleCancel = (): void => setModal(null);\n\t\tconst handleCancel = (): void => setModal(null);\n\n\t\tsetModal(() => (\n\t\t\t<GenericModal variant='danger' onConfirm={handleDelete} onCancel={handleCancel} onClose={handleCancel} confirmText={t('Delete')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AddCustomSound.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customSounds/AddCustomSound.tsx",
        "code": {
            "dispatchToastMessage": "const AddCustomSound = ({ goToNew, close, onChange, ...props }: AddCustomSoundProps): ReactElement => {\nconst AddCustomSound = ({ goToNew, close, onChange, ...props }: AddCustomSoundProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [name, setName] = useState('');\n\tconst [name, setName] = useState('');\n\tconst [sound, setSound] = useState<{ name: string }>();\n\tconst [sound, setSound] = useState<{ name: string }>();",
            "result": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await saveAction(name, sound);\n\t\t\tconst result = await saveAction(name, sound);\n\t\t\tif (result) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Sound_Saved_Successfully') });"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomSoundsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customSounds/CustomSoundsPage.tsx",
        "code": {
            "handleNewButtonClick": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst reload = useRef(() => null);\n\tconst reload = useRef(() => null);\n\n\tconst handleItemClick = useCallback(\n\tconst handleItemClick = useCallback(\n\t\t(_id) => (): void => {\n\t\t\troute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid: _id,\n\t\t\t});\n\t\t},\n\t\t[route],\n\t);\n\n\tconst handleNewButtonClick = useCallback(() => {\n\tconst handleNewButtonClick = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\troute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "EditCustomSound.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customSounds/EditCustomSound.tsx",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery("
        },
        "depth_rank": 7
    },
    {
        "file": "CustomSoundsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customSounds/CustomSoundsTable/CustomSoundsTable.tsx",
        "code": {
            "t": "const CustomSoundsTable = ({ reload, onClick }: CustomSoundsTableProps) => {\nconst CustomSoundsTable = ({ reload, onClick }: CustomSoundsTableProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 8
    },
    {
        "file": "OutgoiongWebhookForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/OutgoiongWebhookForm.js",
        "code": {
            "additionalFields": "\tconst eventOptions = useMemo(() => Object.entries(outgoingEvents).map(([key, val]) => [key, t(val.label)]), [t]);\n\tconst eventOptions = useMemo(() => Object.entries(outgoingEvents).map(([key, val]) => [key, t(val.label)]), [t]);\n\n\tconst showChannel = useMemo(() => outgoingEvents[event].use.channel, [event]);\n\tconst showChannel = useMemo(() => outgoingEvents[event].use.channel, [event]);\n\tconst showTriggerWords = useMemo(() => outgoingEvents[event].use.triggerWords, [event]);\n\tconst showTriggerWords = useMemo(() => outgoingEvents[event].use.triggerWords, [event]);\n\tconst showTargetRoom = useMemo(() => outgoingEvents[event].use.targetRoom, [event]);\n\tconst showTargetRoom = useMemo(() => outgoingEvents[event].use.targetRoom, [event]);\n\n\tconst additionalFields = useMemo(\n\tconst additionalFields = useMemo(\n\t\t() => ({\n\t\t\t...(alias && { alias }),"
        },
        "depth_rank": 7
    },
    {
        "file": "IncomingWebhookForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/IncomingWebhookForm.js",
        "code": {
            "absoluteUrl": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\n\tconst { enabled, channel, username, name, alias, avatar, emoji, scriptEnabled, script, overrideDestinationChannelEnabled } = formValues;\n\tconst { enabled, channel, username, name, alias, avatar, emoji, scriptEnabled, script, overrideDestinationChannelEnabled } = formValues;",
            "additionalFields": "\tconst additionalFields = useMemo(\n\tconst additionalFields = useMemo(\n\t\t() => ({\n\t\t\t...(alias && { alias }),"
        },
        "depth_rank": 7
    },
    {
        "file": "IntegrationsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/IntegrationsTable.tsx",
        "code": {
            "t": "const IntegrationsTable = ({ type }: { type?: string }) => {\nconst IntegrationsTable = ({ type }: { type?: string }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "getIntegrations": "\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.list');\n\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.list');\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(['integrations', query], async () => getIntegrations(query));\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(['integrations', query], async () => getIntegrations(query));",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell\n\t\t\t\tkey='name'\n\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 7
    },
    {
        "file": "IntegrationRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/IntegrationRow.tsx",
        "code": {
            "formatDateAndTime": "const IntegrationRow = ({ integration, onClick, isMobile }: IntegrationRowProps) => {\nconst IntegrationRow = ({ integration, onClick, isMobile }: IntegrationRowProps) => {\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst { _id, name, type, username, _createdAt, _createdBy, channel } = integration;\n\tconst { _id, name, type, username, _createdAt, _createdBy, channel } = integration;"
        },
        "depth_rank": 7
    },
    {
        "file": "IntegrationsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/IntegrationsPage.tsx",
        "code": {
            "handleNewButtonClick": "\tconst handleNewButtonClick = useCallback(() => {\n\tconst handleNewButtonClick = useCallback(() => {\n\t\trouter.push({ context: 'new', type: 'incoming' });",
            "goToAll": "\tconst goToAll = useCallback(() => router.push({ context: '' }), [router]);\n\tconst goToAll = useCallback(() => router.push({ context: '' }), [router]);",
            "goToZapier": "\tconst goToZapier = useCallback(() => router.push({ context: 'zapier' }), [router]);\n\tconst goToZapier = useCallback(() => router.push({ context: 'zapier' }), [router]);",
            "goToBots": "\tconst goToBots = useCallback(() => router.push({ context: 'bots' }), [router]);\n\tconst goToBots = useCallback(() => router.push({ context: 'bots' }), [router]);"
        },
        "depth_rank": 7
    },
    {
        "file": "NewOutgoingWebhook.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/new/NewOutgoingWebhook.js",
        "code": {
            "saveIntegration": "\tconst saveIntegration = useEndpointAction('POST', '/v1/integrations.create', { successMessage: t('Integration_added') });\n\tconst saveIntegration = useEndpointAction('POST', '/v1/integrations.create', { successMessage: t('Integration_added') });",
            "result": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\tconst result = await saveIntegration({\n\t\tconst result = await saveIntegration({\n\t\t\t...formValues,\n\t\t\turls: urls.split('\\n'),\n\t\t\ttriggerWords: triggerWordsToArray(triggerWords),\n\t\t});\n\t\tif (result.success) {\n\t\t\trouter.push({ id: result.integration._id, context: 'edit', type: 'outgoing' });",
            "saveButton": "\tconst saveButton = useMemo(\n\tconst saveButton = useMemo(\n\t\t() => (\n\t\t\t<Field>\n\t\t\t\t<Field.Row>\n\t\t\t\t\t<Button w='full' mie='none' flexGrow={1} onClick={handleSave}>"
        },
        "depth_rank": 8
    },
    {
        "file": "NewBot.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/new/NewBot.js",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <Box pb='x20' fontScale='h4' key='bots' dangerouslySetInnerHTML={{ __html: t('additional_integrations_Bots') }} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "NewIntegrationsPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/new/NewIntegrationsPage.js",
        "code": {
            "handleClickTab": "\tconst handleClickTab = useCallback(\n\tconst handleClickTab = useCallback(\n\t\t(type) => () => {\n\t\t\trouter.push({ context: 'new', type });",
            "handleClickReturn": "\tconst handleClickReturn = useCallback(() => {\n\tconst handleClickReturn = useCallback(() => {\n\t\trouter.push({});",
            "tab": "\tconst tab = useRouteParameter('type');\n\tconst tab = useRouteParameter('type');\n\n\treturn (\n\t\t<Page flexDirection='column' {...props}>"
        },
        "depth_rank": 8
    },
    {
        "file": "NewIncomingWebhook.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/new/NewIncomingWebhook.js",
        "code": {
            "saveAction": "\tconst saveAction = useEndpointAction('POST', '/v1/integrations.create', { successMessage: t('Integration_added') });\n\tconst saveAction = useEndpointAction('POST', '/v1/integrations.create', { successMessage: t('Integration_added') });"
        },
        "depth_rank": 8
    },
    {
        "file": "EditOutgoingWebhookWithData.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/EditOutgoingWebhookWithData.js",
        "code": {
            "params": "function EditOutgoingWebhookWithData({ integrationId, ...props }) {\nfunction EditOutgoingWebhookWithData({ integrationId, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);",
            "dispatchToastMessage": "\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "integrations": "\t\t\tconst integrations = await getIntegrations(params);\n\t\t\tconst integrations = await getIntegrations(params);\n\t\t\treturn integrations;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onChange": "\tconst onChange = () => {\n\tconst onChange = () => {\n\t\trefetch();\n\t};\n\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<Box w='full' pb='x24' {...props}>"
        },
        "depth_rank": 8
    },
    {
        "file": "OutgoingWebhookHistoryPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/OutgoingWebhookHistoryPage.tsx",
        "code": {
            "t": "function OutgoingWebhookHistoryPage(props: ComponentProps<typeof Page>): ReactElement {\nfunction OutgoingWebhookHistoryPage(props: ComponentProps<typeof Page>): ReactElement {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { itemsPerPage, setItemsPerPage, current, setCurrent, itemsPerPageLabel, showingResultsLabel } = usePagination();\n\tconst { itemsPerPage, setItemsPerPage, current, setCurrent, itemsPerPageLabel, showingResultsLabel } = usePagination();",
            "queryClient": "\tconst clearIntegrationHistory = useMethod('clearIntegrationHistory');\n\tconst clearIntegrationHistory = useMethod('clearIntegrationHistory');\n\n\tconst id = useRouteParameter('id') as string;\n\tconst id = useRouteParameter('id') as string;\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tid,\n\t\t\tcount: itemsPerPage,\n\t\t\toffset: current,\n\t\t}),\n\t\t[id, itemsPerPage, current],\n\t);\n\n\tconst fetchHistory = useEndpoint('GET', '/v1/integrations.history');\n\tconst fetchHistory = useEndpoint('GET', '/v1/integrations.history');\n\n\tconst queryKey = useMemo(() => ['integrations/history', id, itemsPerPage, current], [id, itemsPerPage, current]);\n\tconst queryKey = useMemo(() => ['integrations/history', id, itemsPerPage, current], [id, itemsPerPage, current]);\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\ttype HistoryData = Awaited<ReturnType<typeof fetchHistory>>;\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery(",
            "handleClearHistory": "\t\t\tconst result = fetchHistory(query);\n\t\t\tconst result = fetchHistory(query);\n\t\t\tsetMounted(true);\n\t\t\treturn result;\n\t\t},\n\t\t{\n\t\t\tcacheTime: 99999,\n\t\t\tstaleTime: 99999,\n\t\t\trefetchOnWindowFocus: false,\n\t\t},\n\t);\n\n\tconst handleClearHistory = async (): Promise<void> => {\n\tconst handleClearHistory = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait clearIntegrationHistory(id);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Integration_History_Cleared') });",
            "handleClickReturn": "\tconst handleClickReturn = (): void => {\n\tconst handleClickReturn = (): void => {\n\t\trouter.push({});",
            "index": "\t\t\t\t\t\tconst index = oldData.history.findIndex(({ _id }) => _id === id);\n\t\t\t\t\t\tconst index = oldData.history.findIndex(({ _id }) => _id === id);"
        },
        "depth_rank": 8
    },
    {
        "file": "EditIncomingWebhookWithData.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/EditIncomingWebhookWithData.js",
        "code": {
            "params": "function EditIncomingWebhookWithData({ integrationId, ...props }) {\nfunction EditIncomingWebhookWithData({ integrationId, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);",
            "dispatchToastMessage": "\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "integrations": "\t\t\tconst integrations = await getIntegrations(params);\n\t\t\tconst integrations = await getIntegrations(params);\n\t\t\treturn integrations;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onChange": "\tconst onChange = () => {\n\tconst onChange = () => {\n\t\trefetch();\n\t};\n\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<Box w='full' pb='x24' {...props}>"
        },
        "depth_rank": 8
    },
    {
        "file": "EditOutgoingWebhook.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/EditOutgoingWebhook.js",
        "code": {
            "dispatchToastMessage": "function EditOutgoingWebhook({ data, onChange, setSaveAction, ...props }) {\nfunction EditOutgoingWebhook({ data, onChange, setSaveAction, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { handlers: formHandlers, values: formValues, reset } = useForm(getInitialValue(data));\n\tconst { handlers: formHandlers, values: formValues, reset } = useForm(getInitialValue(data));",
            "handleClose": "\tconst deleteIntegration = useEndpointAction('POST', '/v1/integrations.remove');\n\tconst deleteIntegration = useEndpointAction('POST', '/v1/integrations.remove');\n\n\tconst handleDeleteIntegration = useCallback(() => {\n\tconst handleDeleteIntegration = useCallback(() => {\n\t\tconst closeModal = () => setModal();\n\t\tconst closeModal = () => setModal();\n\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tcloseModal();\n\t\t\trouter.push({});",
            "handleSave": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\ttry {\n\t\t\tawait saveIntegration(data._id, {\n\t\t\t\t...formValues,\n\t\t\t\ttriggerWords: triggerWordsToArray(triggerWords),\n\t\t\t\turls: urls.split('\\n'),\n\t\t\t});\n\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Integration_updated') });"
        },
        "depth_rank": 8
    },
    {
        "file": "EditIncomingWebhook.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/EditIncomingWebhook.js",
        "code": {
            "dispatchToastMessage": "const getInitialValue = (data) => {\nconst getInitialValue = (data) => {\n\tconst initialValue = {\n\tconst initialValue = {\n\t\tenabled: data.enabled,\n\t\tchannel: data.channel.join(', ') ?? '',\n\t\tusername: data.username ?? '',\n\t\tname: data.name ?? '',\n\t\talias: data.alias ?? '',\n\t\tavatar: data.avatar ?? '',\n\t\temoji: data.emoji ?? '',\n\t\tscriptEnabled: data.scriptEnabled,\n\t\toverrideDestinationChannelEnabled: data.overrideDestinationChannelEnabled,\n\t\tscript: data.script,\n\t};\n\treturn initialValue;\n};\n\nfunction EditIncomingWebhook({ data, onChange, ...props }) {\nfunction EditIncomingWebhook({ data, onChange, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { values: formValues, handlers: formHandlers, reset } = useForm(getInitialValue(data));\n\tconst { values: formValues, handlers: formHandlers, reset } = useForm(getInitialValue(data));",
            "handleClose": "\tconst handleDeleteIntegration = useCallback(() => {\n\tconst handleDeleteIntegration = useCallback(() => {\n\t\tconst closeModal = () => setModal();\n\t\tconst closeModal = () => setModal();\n\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tcloseModal();\n\t\t\trouter.push({});",
            "handleSave": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\ttry {\n\t\t\tawait saveIntegration(data._id, { ...formValues });"
        },
        "depth_rank": 8
    },
    {
        "file": "HistoryItem.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/HistoryItem.js",
        "code": {
            "replayOutgoingIntegration": "function HistoryItem({ data, ...props }) {\nfunction HistoryItem({ data, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst replayOutgoingIntegration = useMethod('replayOutgoingIntegration');\n\tconst replayOutgoingIntegration = useMethod('replayOutgoingIntegration');\n\n\tconst {\n\tconst {\n\t\t_id,\n\t\t_createdAt,\n\t\t_updatedAt,\n\t\thttpResult,\n\t\tevent,\n\t\tstep,\n\t\thttpCallData,\n\t\tdata: dataSentToTrigger,\n\t\tprepareSentMessage,\n\t\tprocessSentMessage,\n\t\turl,\n\t\thttpError,\n\t\terrorStack,\n\t\terror,\n\t\tintegration: { _id: integrationId },",
            "handleClickReplay": "\tconst createdAt = typeof _createdAt === 'string' ? _createdAt : _createdAt.toISOString();\n\tconst createdAt = typeof _createdAt === 'string' ? _createdAt : _createdAt.toISOString();\n\tconst updatedAt = typeof _updatedAt === 'string' ? _updatedAt : _updatedAt.toISOString();\n\tconst updatedAt = typeof _updatedAt === 'string' ? _updatedAt : _updatedAt.toISOString();\n\n\tconst handleClickReplay = useMutableCallback((e) => {\n\tconst handleClickReplay = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\treplayOutgoingIntegration({ integrationId, historyId: _id });"
        },
        "depth_rank": 8
    },
    {
        "file": "HistoryContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/HistoryContent.tsx",
        "code": {
            "t": "function HistoryContent({ data, isLoading }: { data: Serialized<IIntegrationHistory>[]; isLoading: boolean }): ReactElement {\nfunction HistoryContent({ data, isLoading }: { data: Serialized<IIntegrationHistory>[]; isLoading: boolean }): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<Box w='full' pb='x24'>\n\t\t\t\t<Skeleton mbe='x4' />\n\t\t\t\t<Skeleton mbe='x8' />\n\t\t\t\t<Skeleton mbe='x4' />\n\t\t\t\t<Skeleton mbe='x8' />\n\t\t\t\t<Skeleton mbe='x4' />\n\t\t\t\t<Skeleton mbe='x8' />\n\t\t\t</Box>\n\t\t);\n\t}\n\n\tif (data.length < 1) {\n\t\treturn <Box mbs='x16'>{t('Integration_Outgoing_WebHook_No_History')}</Box>;"
        },
        "depth_rank": 8
    },
    {
        "file": "EditIntegrationsPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/integrations/edit/EditIntegrationsPage.js",
        "code": {
            "handleClickReturn": "\tconst type = useRouteParameter('type');\n\tconst type = useRouteParameter('type');\n\tconst integrationId = useRouteParameter('id');\n\tconst integrationId = useRouteParameter('id');\n\n\tconst handleClickReturn = useCallback(() => {\n\tconst handleClickReturn = useCallback(() => {\n\t\trouter.push({});",
            "handleClickHistory": "\tconst handleClickHistory = useCallback(() => {\n\tconst handleClickHistory = useCallback(() => {\n\t\trouter.push({ context: 'history', type: 'outgoing', id: integrationId });"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageContextFooter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/MessageContextFooter.tsx",
        "code": {
            "t": "const MessageContextFooter: FC<{ userId: string }> = ({ userId }) => {\nconst MessageContextFooter: FC<{ userId: string }> = ({ userId }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { action } = useDeleteMessagesAction(userId);\n\tconst { action } = useDeleteMessagesAction(userId);"
        },
        "depth_rank": 7
    },
    {
        "file": "ModerationConsoleTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleTable.tsx",
        "code": {
            "dispatchToastMessage": "\tconst getReports = useEndpoint('GET', '/v1/moderation.reportsByUsers');\n\tconst getReports = useEndpoint('GET', '/v1/moderation.reportsByUsers');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, isSuccess } = useQuery(['moderation.reports', query], async () => getReports(query), {\n\tconst { data, isLoading, isSuccess } = useQuery(['moderation.reports', query], async () => getReports(query), {\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "headers": "\tconst handleClick = useMutableCallback((id): void => {\n\tconst handleClick = useMutableCallback((id): void => {\n\t\tmoderationRoute.push({\n\t\t\tcontext: 'info',\n\t\t\tid,\n\t\t});\n\t});\n\n\t// header sequence would be: name, reportedMessage, room, postdate, reports, actions\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell\n\t\t\t\tkey='name'\n\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 7
    },
    {
        "file": "ModerationConsoleTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleTableRow.tsx",
        "code": {
            "ModerationConsoleTableRow": "const ModerationConsoleTableRow = ({ report, onClick, isDesktopOrLarger }: ModerationConsoleRowProps): JSX.Element => {\nconst ModerationConsoleTableRow = ({ report, onClick, isDesktopOrLarger }: ModerationConsoleRowProps): JSX.Element => {\n\tconst { userId: _id, rooms, name, count, message, username, ts } = report;\n\tconst { userId: _id, rooms, name, count, message, username, ts } = report;",
            "concatenatedRoomNames": "\tconst roomNames = rooms.map((room) => {\n\tconst roomNames = rooms.map((room) => {\n\t\tif (room.t === 'd') {\n\t\t\treturn room.name || 'Private';\n\t\t}\n\t\treturn room.fname || room.name;\n\t});\n\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst concatenatedRoomNames = roomNames.join(', ');\n\tconst concatenatedRoomNames = roomNames.join(', ');\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={(): void => onClick(_id)} onClick={(): void => onClick(_id)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 7
    },
    {
        "file": "ModerationConsolePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsolePage.tsx",
        "code": {
            "permalink": "const ModerationConsolePage = () => {\nconst ModerationConsolePage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleRedirect = async (mid: string) => {\n\tconst handleRedirect = async (mid: string) => {\n\t\ttry {\n\t\t\tconst permalink = await MessageAction.getPermaLink(mid);\n\t\t\tconst permalink = await MessageAction.getPermaLink(mid);\n\t\t\t// open the permalink in same tab\n\t\t\twindow.open(permalink, '_self');\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "UserMessages.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/UserMessages.tsx",
        "code": {
            "getUserMessages": "\tconst getUserMessages = useEndpoint('GET', '/v1/moderation.user.reportedMessages');\n\tconst getUserMessages = useEndpoint('GET', '/v1/moderation.user.reportedMessages');\n\n\tconst {\n\tconst {\n\t\tdata: userMessages,\n\t\trefetch: reloadUserMessages,\n\t\tisLoading: isLoadingUserMessages,\n\t\tisSuccess: isSuccessUserMessages,\n\t} = useQuery(\n\t\t['moderation.userMessages', { userId }],",
            "messages": "\t\t\tconst messages = await getUserMessages({ userId });\n\t\t\tconst messages = await getUserMessages({ userId });",
            "displayName": "\tconst handleClick = useMutableCallback((id): void => {\n\tconst handleClick = useMutableCallback((id): void => {\n\t\tmoderationRoute.push({\n\t\t\tcontext: 'reports',\n\t\t\tid,\n\t\t});\n\t});\n\n\tconst handleChange = useMutableCallback(() => {\n\tconst handleChange = useMutableCallback(() => {\n\t\treloadUserMessages();\n\t});\n\n\tconst username = useMemo(() => {\n\tconst username = useMemo(() => {\n\t\tif (userMessages?.messages[0]?.message?.u?.username) {\n\t\t\treturn userMessages?.messages[0].message.u.username;\n\t\t}\n\t\treturn '';\n\t}, [userMessages?.messages]);\n\n\tconst name = useMemo(() => {\n\tconst name = useMemo(() => {\n\t\tif (userMessages?.messages[0]?.message?.u?.name) {\n\t\t\treturn userMessages?.messages[0].message.u.name;\n\t\t}\n\t\treturn '';\n\t}, [userMessages?.messages]);\n\n\tconst displayName =\n\tconst displayName =\n\t\tuseUserDisplayName({\n\t\t\tname,\n\t\t\tusername,\n\t\t}) || userId;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Moderation_Message_context_header', { displayName })}</ContextualbarTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageReportInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/MessageReportInfo.tsx",
        "code": {
            "useRealName": "\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst {\n\tconst {\n\t\tdata: reportsByMessage,\n\t\tisLoading: isLoadingReportsByMessage,\n\t\tisSuccess: isSuccessReportsByMessage,\n\t\tisError: isErrorReportsByMessage,\n\t} = useQuery(\n\t\t['moderation.reports', { msgId }],",
            "reports": "\t\t\tconst reports = await getReportsByMessage({ msgId });\n\t\t\tconst reports = await getReportsByMessage({ msgId });"
        },
        "depth_rank": 7
    },
    {
        "file": "ModerationConsoleActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleActions.tsx",
        "code": {
            "t": "const ModerationConsoleActions = ({ report, onClick }: Omit<ModerationConsoleRowProps, 'isDesktopOrLarger'>): JSX.Element => {\nconst ModerationConsoleActions = ({ report, onClick }: Omit<ModerationConsoleRowProps, 'isDesktopOrLarger'>): JSX.Element => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { userId: uid } = report;\n\tconst { userId: uid } = report;"
        },
        "depth_rank": 7
    },
    {
        "file": "useResetAvatarAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useResetAvatarAction.tsx",
        "code": {
            "handleResetAvatar": "const useResetAvatarAction = (userId: string) => {\nconst useResetAvatarAction = (userId: string) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst resetAvatar = useEndpoint('POST', '/v1/users.resetAvatar');\n\tconst resetAvatar = useEndpoint('POST', '/v1/users.resetAvatar');\n\n\tconst handleResetAvatar = useMutation({\n\tconst handleResetAvatar = useMutation({\n\t\tmutationFn: resetAvatar,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onResetAvatar": "\tconst onResetAvatar = async () => {\n\tconst onResetAvatar = async () => {\n\t\tsetModal();\n\t\thandleResetAvatar.mutateAsync({ userId });",
            "confirmResetAvatar": "\tconst confirmResetAvatar = (): void => {\n\tconst confirmResetAvatar = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Reset_user_avatar')}"
        },
        "depth_rank": 8
    },
    {
        "file": "useDismissUserAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDismissUserAction.tsx",
        "code": {
            "handleDismissUser": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst dismissUser = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dismissUser = useEndpoint('POST', '/v1/moderation.dismissReports');\n\n\tconst handleDismissUser = useMutation({\n\tconst handleDismissUser = useMutation({\n\t\tmutationFn: dismissUser,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDismissUser": "\tconst onDismissUser = async () => {\n\tconst onDismissUser = async () => {\n\t\tawait handleDismissUser.mutateAsync({ userId });",
            "confirmDismissUser": "\tconst confirmDismissUser = (): void => {\n\tconst confirmDismissUser = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Dismiss_and_delete')}"
        },
        "depth_rank": 8
    },
    {
        "file": "useDeactivateUserAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeactivateUserAction.tsx",
        "code": {
            "handleDeactivateUser": "\tconst handleDeactivateUser = useMutation({\n\tconst handleDeactivateUser = useMutation({\n\t\tmutationFn: deactiveUser,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleDeleteMessages": "\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessages,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDeactivateUser": "\tconst onDeactivateUser = async () => {\n\tconst onDeactivateUser = async () => {\n\t\tsetModal();\n\t\tawait handleDeleteMessages.mutateAsync({ userId });",
            "confirmDeactivateUser": "\tconst confirmDeactivateUser = (): void => {\n\tconst confirmDeactivateUser = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Deactivate_User')}"
        },
        "depth_rank": 8
    },
    {
        "file": "useDeleteMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeleteMessage.tsx",
        "code": {
            "handleDeleteMessages": "const useDeleteMessage = (mid: string, rid: string, onChange: () => void) => {\nconst useDeleteMessage = (mid: string, rid: string, onChange: () => void) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst deleteMessage = useEndpoint('POST', '/v1/chat.delete');\n\tconst deleteMessage = useEndpoint('POST', '/v1/chat.delete');\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessage,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleDismissMessage": "\tconst handleDismissMessage = useMutation({\n\tconst handleDismissMessage = useMutation({\n\t\tmutationFn: dismissMessage,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDeleteAll": "\tconst onDeleteAll = async () => {\n\tconst onDeleteAll = async () => {\n\t\tawait handleDeleteMessages.mutateAsync({ msgId: mid, roomId: rid, asUser: true });",
            "confirmDeletMessage": "\tconst confirmDeletMessage = (): void => {\n\tconst confirmDeletMessage = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tconfirmText={t('Moderation_Dismiss_and_delete')}"
        },
        "depth_rank": 8
    },
    {
        "file": "useDeleteMessagesAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeleteMessagesAction.tsx",
        "code": {
            "handleDeleteMessages": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessages,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDeleteAll": "\tconst onDeleteAll = async () => {\n\tconst onDeleteAll = async () => {\n\t\tawait handleDeleteMessages.mutateAsync({ userId });",
            "confirmDeletMessages": "\tconst confirmDeletMessages = (): void => {\n\tconst confirmDeletMessages = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tconfirmText={t('Moderation_Dismiss_and_delete')}"
        },
        "depth_rank": 8
    },
    {
        "file": "ContextMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/ContextMessage.tsx",
        "code": {
            "ContextMessage": "const ContextMessage = ({\nconst ContextMessage = ({\n\tmessage,\n\troom,\n\thandleClick,\n\tonRedirect,\n\tonChange,\n}: {",
            "displayName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\n\tconst deleteMessage = useDeleteMessage(message._id, message.rid, onChange);\n\tconst deleteMessage = useDeleteMessage(message._id, message.rid, onChange);\n\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst name = message.u.name || '';\n\tconst name = message.u.name || '';\n\tconst username = message.u.username || '';\n\tconst username = message.u.username || '';\n\n\tconst displayName = useUserDisplayName({ name, username });\n\tconst displayName = useUserDisplayName({ name, username });"
        },
        "depth_rank": 8
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/DateRangePicker.tsx",
        "code": {
            "t": "const todayDate = formatToDateInput(moment());\nconst todayDate = formatToDateInput(moment());\n\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\n\tstart: formatToDateInput(moment().subtract(monthsToSubtractFromToday, 'month').date(1)),\n\tend: formatToDateInput(monthsToSubtractFromToday === 0 ? moment() : moment().subtract(monthsToSubtractFromToday).date(0)),\n});\n\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\n\tstart: formatToDateInput(moment().subtract(daysToSubtractFromStart, 'day')),\n\tend: formatToDateInput(moment().subtract(daysToSubtractFromEnd, 'day')),\n});\n\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [range, setRange] = useState({ start: '', end: '' });\n\tconst [range, setRange] = useState({ start: '', end: '' });"
        },
        "depth_rank": 8
    },
    {
        "file": "CopyStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/CopyStep.tsx",
        "code": {
            "clipboard": "\t\tconst clipboard = new Clipboard(copyRef.current);\n\t\tconst clipboard = new Clipboard(copyRef.current);\n\t\tclipboard.on('success', () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 7
    },
    {
        "file": "ManualWorkspaceRegistrationModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/ManualWorkspaceRegistrationModal.tsx",
        "code": {
            "handleBackButtonClick": "const Steps = {\nconst Steps = {\n\tCOPY: 'copy',\n\tPASTE: 'paste',\n};\n\ntype ManualWorkspaceRegistrationModalProps = {\n\tonClose: () => void;\n};\n\nconst ManualWorkspaceRegistrationModal = ({ onClose, ...props }: ManualWorkspaceRegistrationModalProps) => {\nconst ManualWorkspaceRegistrationModal = ({ onClose, ...props }: ManualWorkspaceRegistrationModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [step, setStep] = useState(Steps.COPY);\n\tconst [step, setStep] = useState(Steps.COPY);\n\n\tconst handleNextButtonClick = () => {\n\tconst handleNextButtonClick = () => {\n\t\tsetStep(Steps.PASTE);\n\t};\n\n\tconst handleBackButtonClick = () => {\n\tconst handleBackButtonClick = () => {\n\t\tsetStep(Steps.COPY);\n\t};\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterWorkspace.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/RegisterWorkspace.tsx",
        "code": {
            "setModal": "const RegisterWorkspace = () => {\nconst RegisterWorkspace = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { data: registrationStatusData, isLoading, isError, refetch } = useRegistrationStatus();\n\tconst { data: registrationStatusData, isLoading, isError, refetch } = useRegistrationStatus();",
            "handleModalClose": "\tconst handleManualWorkspaceRegistrationButton = (): void => {\n\tconst handleManualWorkspaceRegistrationButton = (): void => {\n\t\tconst handleModalClose = (): void => {\n\t\tconst handleModalClose = (): void => {\n\t\t\tsetModal(null);\n\t\t\trefetch();\n\t\t};\n\t\tsetModal(<ManualWorkspaceRegistrationModal onClose={handleModalClose} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "PasteStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/PasteStep.tsx",
        "code": {
            "handleFinishButtonClick": "const PasteStep: FC<PasteStepProps> = ({ onBackButtonClick, onFinish }) => {\nconst PasteStep: FC<PasteStepProps> = ({ onBackButtonClick, onFinish }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [isLoading, setLoading] = useState(false);\n\tconst [isLoading, setLoading] = useState(false);\n\tconst [cloudKey, setCloudKey] = useState('');\n\tconst [cloudKey, setCloudKey] = useState('');\n\n\tconst handleCloudKeyChange = (e: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleCloudKeyChange = (e: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCloudKey(e.currentTarget.value);\n\t};\n\n\tconst registerManually = useEndpoint('POST', '/v1/cloud.manualRegister');\n\tconst registerManually = useEndpoint('POST', '/v1/cloud.manualRegister');\n\n\tconst handleFinishButtonClick = async (): Promise<void> => {\n\tconst handleFinishButtonClick = async (): Promise<void> => {\n\t\tsetLoading(true);\n\n\t\ttry {\n\t\t\tawait registerManually({ cloudBlob: cloudKey });"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterWorkspaceCards.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/components/RegisterWorkspaceCards.tsx",
        "code": {
            "bulletFeatures": "const RegisterWorkspaceCards = () => {\nconst RegisterWorkspaceCards = () => {\n\tconst bulletFeatures = useFeatureBullets();\n\tconst bulletFeatures = useFeatureBullets();\n\n\treturn (\n\t\t<Grid mbs={16}>"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterWorkspaceMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/components/RegisterWorkspaceMenu.tsx",
        "code": {
            "RegisterWorkspaceMenu": "const RegisterWorkspaceMenu = ({\nconst RegisterWorkspaceMenu = ({\n\tisWorkspaceRegistered,\n\tisConnectedToCloud,\n\tonClick,\n\tonClickOfflineRegistration,\n\tonStatusChange,\n}: RegisterWorkspaceMenuProps) => {",
            "handleModalClose": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst handleManageButton = () => {\n\tconst handleManageButton = () => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisteredWorkspaceModal onClose={handleModalClose} onStatusChange={onStatusChange} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "DisconnectWorkspaceModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/DisconnectWorkspaceModal.tsx",
        "code": {
            "handleModalClose": "const DisconnectWorkspaceModal = ({ onClose, onStatusChange, ...props }: DisconnectWorkspaceModalProps) => {\nconst DisconnectWorkspaceModal = ({ onClose, onStatusChange, ...props }: DisconnectWorkspaceModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst disconnectWorkspace = useMethod('cloud:disconnectWorkspace');\n\tconst disconnectWorkspace = useMethod('cloud:disconnectWorkspace');\n\n\tconst handleCancelAction = (): void => {\n\tconst handleCancelAction = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisteredWorkspaceModal onClose={handleModalClose} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterWorkspaceTokenModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisterWorkspaceTokenModal.tsx",
        "code": {
            "handleModalClose": "const RegisterWorkspaceTokenModal = ({ onClose, onStatusChange, ...props }: RegisterWorkspaceTokenModalProps) => {\nconst RegisterWorkspaceTokenModal = ({ onClose, onStatusChange, ...props }: RegisterWorkspaceTokenModalProps) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst connectWorkspace = useMethod('cloud:connectWorkspace');\n\tconst connectWorkspace = useMethod('cloud:connectWorkspace');\n\n\tconst [token, setToken] = useState('');\n\tconst [token, setToken] = useState('');\n\tconst [processing, setProcessing] = useState(false);\n\tconst [processing, setProcessing] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\n\tconst handleBackAction = (): void => {\n\tconst handleBackAction = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<WorkspaceRegistrationModal onClose={handleModalClose} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterWorkspaceModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisterWorkspaceModal.tsx",
        "code": {
            "handleModalClose": "\tconst handleSetupModal = (): void => {\n\tconst handleSetupModal = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisterWorkspaceSetupModal onClose={handleModalClose} onStatusChange={onStatusChange} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisteredWorkspaceModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisteredWorkspaceModal.tsx",
        "code": {
            "handleModalClose": "const RegisteredWorkspaceModal = ({ onClose, onStatusChange, ...props }: RegisteredWorkspaceModalProps) => {\nconst RegisteredWorkspaceModal = ({ onClose, onStatusChange, ...props }: RegisteredWorkspaceModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst [isSyncing, setSyncing] = useSafely(useState(false));\n\tconst [isSyncing, setSyncing] = useSafely(useState(false));\n\n\tconst syncWorkspace = useMethod('cloud:syncWorkspace');\n\tconst syncWorkspace = useMethod('cloud:syncWorkspace');\n\n\tconst handleDisconnect = (): void => {\n\tconst handleDisconnect = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<DisconnectWorkspaceModal onClose={handleModalClose} onStatusChange={onStatusChange} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "ConnectWorkspaceModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/ConnectWorkspaceModal.tsx",
        "code": {
            "handleConnectWorkspace": "const ConnectWorkspaceModal = ({ onClose, onStatusChange, ...props }: ConnectWorkspaceModalProps) => {\nconst ConnectWorkspaceModal = ({ onClose, onStatusChange, ...props }: ConnectWorkspaceModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst bulletFeatures = useFeatureBullets();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst connectWorkspace = useMethod('cloud:reconnectWorkspace');\n\tconst connectWorkspace = useMethod('cloud:reconnectWorkspace');\n\n\tconst handleConnectWorkspace = async () => {\n\tconst handleConnectWorkspace = async () => {\n\t\ttry {\n\t\t\tawait connectWorkspace();\n\t\t\tsetModal(null);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Connected') });"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterWorkspaceSetupStepTwoModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupStepTwoModal.tsx",
        "code": {
            "handleResendRegistrationEmail": "\tconst handleResendRegistrationEmail = async () => {\n\tconst handleResendRegistrationEmail = async () => {\n\t\ttry {\n\t\t\tawait createRegistrationIntent({ resend: true, email });",
            "getConfirmation": "\tconst getConfirmation = useCallback(async () => {\n\tconst getConfirmation = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\tdeviceCode: intentData.device_code,\n\t\t\t});\n\n\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Workspace_registered') });",
            "pollInterval": "\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(intentData.interval));\n\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(intentData.interval));\n\n\t\treturn (): void => clearInterval(pollInterval);\n\t}, [getConfirmation, intentData]);\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "RegisterWorkspaceSetupModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupModal.tsx",
        "code": {
            "handleModalClose": "const RegisterWorkspaceSetupModal = ({ onClose }: RegisterWorkspaceSetupModalProps) => {\nconst RegisterWorkspaceSetupModal = ({ onClose }: RegisterWorkspaceSetupModalProps) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [step, setStep] = useState(1);\n\tconst [step, setStep] = useState(1);\n\tconst [email, setEmail] = useState('');\n\tconst [email, setEmail] = useState('');\n\tconst [terms, setTerms] = useState(false);\n\tconst [terms, setTerms] = useState(false);\n\tconst [validInfo, setValidInfo] = useState(false);\n\tconst [validInfo, setValidInfo] = useState(false);\n\tconst [intentData, setIntentData] = useState({\n\tconst [intentData, setIntentData] = useState({\n\t\tdevice_code: '',\n\t\tinterval: 0,\n\t\tuser_code: '',\n\t});\n\n\t// reset validInfo when users go back to step 1\n\tuseEffect(() => {\n\t\tsetValidInfo(false);\n\t}, [step]);\n\n\tuseEffect(() => {\n\t\tif (step === 1) {\n\t\t\tsetValidInfo(validateEmail(email) && terms);\n\t\t}\n\t}, [email, terms]);\n\n\tconst onSuccess = () => {\n\tconst onSuccess = () => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisteredWorkspaceModal onClose={handleModalClose} />);"
        },
        "depth_rank": 9
    },
    {
        "file": "RegisterWorkspaceSetupStepOneModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/cloud/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupStepOneModal.tsx",
        "code": {
            "RegisterWorkspaceSetupStepOneModal": "const RegisterWorkspaceSetupStepOneModal = ({\nconst RegisterWorkspaceSetupStepOneModal = ({\n\temail,\n\tsetEmail,\n\tstep,\n\tsetStep,\n\tterms,\n\tsetTerms,\n\tonClose,\n\tvalidInfo,\n\tsetIntentData,\n\t...props\n}: Props) => {",
            "handleModalClose": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst createRegistrationIntent = useEndpoint('POST', '/v1/cloud.createRegistrationIntent');\n\tconst createRegistrationIntent = useEndpoint('POST', '/v1/cloud.createRegistrationIntent');\n\n\tconst handleBack = (): void => {\n\tconst handleBack = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<WorkspaceRegistrationModal onClose={handleModalClose} />);",
            "handleRegisterWorkspace": "\tconst handleRegisterWorkspace = async () => {\n\tconst handleRegisterWorkspace = async () => {\n\t\ttry {\n\t\t\tconst { intentData } = await createRegistrationIntent({ resend: false, email });\n\t\t\tconst { intentData } = await createRegistrationIntent({ resend: false, email });"
        },
        "depth_rank": 9
    },
    {
        "file": "NewImportPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/NewImportPage.js",
        "code": {
            "handleImportFileChange": "\tconst handleFileTypeChange = (fileType) => {\n\tconst handleFileTypeChange = (fileType) => {\n\t\tsetFileType(fileType);\n\t};\n\n\tconst [files, setFiles] = useState([]);\n\tconst [files, setFiles] = useState([]);\n\n\tconst handleImportFileChange = async (event) => {\n\tconst handleImportFileChange = async (event) => {\n\t\tevent = event.originalEvent || event;\n\t\tlet { files } = event.target;"
        },
        "depth_rank": 7
    },
    {
        "file": "ImportProgressPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/ImportProgressPage.tsx",
        "code": {
            "currentOperation": "\tconst currentOperation = useQuery(\n\tconst currentOperation = useQuery(\n\t\t['ImportProgressPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation } = await getCurrentImportOperation();\n\t\t\tconst { operation } = await getCurrentImportOperation();"
        },
        "depth_rank": 7
    },
    {
        "file": "PrepareUsers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/PrepareUsers.tsx",
        "code": {
            "itemsPerPageLabel": "\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\n\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\n\n\treturn (\n\t\t<>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell width='x36'>\n\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\tchecked={usersCount > 0}"
        },
        "depth_rank": 7
    },
    {
        "file": "PrepareImportPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/PrepareImportPage.js",
        "code": {
            "loadCurrentOperation": "\t\tconst loadCurrentOperation = async () => {\n\t\tconst loadCurrentOperation = async () => {\n\t\t\ttry {\n\t\t\t\tconst { operation } = await waitFor(\n\t\t\t\tconst { operation } = await waitFor(",
            "handleStartButtonClick": "\tconst handleStartButtonClick = async () => {\n\tconst handleStartButtonClick = async () => {\n\t\tsetImporting(true);\n\n\t\ttry {\n\t\t\tawait startImport({ input: { users, channels } });"
        },
        "depth_rank": 7
    },
    {
        "file": "useErrorHandler.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/useErrorHandler.js",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutableCallback((error, defaultMessage) => {\n\t\tconsole.error(error);\n\n\t\tif (typeof error === 'string') {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "errorType": "\t\tconst errorType = error?.xhr?.responseJSON?.errorType;\n\t\tconst errorType = error?.xhr?.responseJSON?.errorType;\n\n\t\tif (typeof errorType === 'string' && t.has(errorType)) {\n\t\t\tdispatchToastMessage({ type: 'error', message: t(errorType) });"
        },
        "depth_rank": 7
    },
    {
        "file": "ImportHistoryPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/ImportHistoryPage.tsx",
        "code": {
            "currentOperation": "function ImportHistoryPage() {\nfunction ImportHistoryPage() {\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst downloadPendingFiles = useEndpoint('POST', '/v1/downloadPendingFiles');\n\tconst downloadPendingFiles = useEndpoint('POST', '/v1/downloadPendingFiles');\n\tconst downloadPendingAvatars = useEndpoint('POST', '/v1/downloadPendingAvatars');\n\tconst downloadPendingAvatars = useEndpoint('POST', '/v1/downloadPendingAvatars');\n\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getLatestImportOperations = useEndpoint('GET', '/v1/getLatestImportOperations');\n\tconst getLatestImportOperations = useEndpoint('GET', '/v1/getLatestImportOperations');\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentOperation = useQuery(\n\tconst currentOperation = useQuery(\n\t\t['ImportHistoryPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation = { valid: false } } = await getCurrentImportOperation();\n\t\t\tconst { operation = { valid: false } } = await getCurrentImportOperation();",
            "operations": "\tconst latestOperations = useQuery(\n\tconst latestOperations = useQuery(\n\t\t['ImportHistoryPage', 'latestOperations'],\n\t\tasync () => {\n\t\t\tconst operations = await getLatestImportOperations();\n\t\t\tconst operations = await getLatestImportOperations();\n\t\t\treturn operations;\n\t\t},\n\t\t{\n\t\t\tonError: () => dispatchToastMessage({ type: 'error', message: t('Failed_To_Load_Import_History') }),",
            "hasAnySuccessfulImport": "\tconst isLoading = currentOperation.isLoading || latestOperations.isLoading;\n\tconst isLoading = currentOperation.isLoading || latestOperations.isLoading;\n\n\tconst hasAnySuccessfulImport = useMemo(() => {\n\tconst hasAnySuccessfulImport = useMemo(() => {\n\t\treturn latestOperations.isSuccess && latestOperations.data.some(({ status }) => status === ProgressStep.DONE);",
            "downloadPendingFilesResult": "\tconst downloadPendingFilesResult = useMutation({\n\tconst downloadPendingFilesResult = useMutation({\n\t\tmutationFn: async () => downloadPendingFiles(),\n\t\tonError: (error) => {\n\t\t\tconsole.error(error);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Failed_To_Download_Files') });",
            "downloadPendingAvatarsResult": "\tconst downloadPendingAvatarsResult = useMutation({\n\tconst downloadPendingAvatarsResult = useMutation({\n\t\tmutationFn: async () => downloadPendingAvatars(),\n\t\tonError: (error) => {\n\t\t\tconsole.error(error);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Failed_To_Download_Files') });"
        },
        "depth_rank": 7
    },
    {
        "file": "ImportOperationSummary.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/import/ImportOperationSummary.js",
        "code": {
            "ImportOperationSummary": "function ImportOperationSummary({\nfunction ImportOperationSummary({\n\ttype,\n\t_updatedAt,\n\tstatus,\n\tfile = '',\n\tuser,\n\tsmall,\n\tcount: { users = 0, channels = 0, messages = 0, total = 0 } = {\n\t\tusers: null,\n\t\tchannels: null,\n\t\tmessages: null,\n\t\ttotal: null,\n\t},\n\tvalid,\n}) {",
            "props": "\tconst hasAction = canContinue || canCheckProgress;\n\tconst hasAction = canContinue || canCheckProgress;\n\n\tconst props = hasAction\n\tconst props = hasAction\n\t\t? {\n\t\t\t\ttabIndex: 0,\n\t\t\t\trole: 'link',\n\t\t\t\taction: true,\n\t\t\t\tonClick: handleClick,\n\t\t  }\n\t\t: {};"
        },
        "depth_rank": 7
    },
    {
        "file": "EditableSettingsProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/EditableSettingsProvider.tsx",
        "code": {
            "queryEditableSettings": "\tconst queryEditableSettings = useMemo(\n\tconst queryEditableSettings = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((query = {}) =>",
            "queryGroupTabs": "\tconst queryGroupTabs = useMemo(\n\tconst queryGroupTabs = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((_id: GroupId) =>\n\t\t\t\tArray.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tgetSettingsCollection()\n\t\t\t\t\t\t\t.find(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgroup: _id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\ttab: 1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\t\t\tsorter: 1,\n\t\t\t\t\t\t\t\t\t\ttab: 1,\n\t\t\t\t\t\t\t\t\t\ti18nLabel: 1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.fetch()\n\t\t\t\t\t\t\t.map(({ tab }) => tab || ''),",
            "contextValue": "\tconst isEnterprise = data?.isEnterprise ?? false;\n\tconst isEnterprise = data?.isEnterprise ?? false;\n\n\tconst contextValue = useMemo<EditableSettingsContextValue>(\n\tconst contextValue = useMemo<EditableSettingsContextValue>(\n\t\t() => ({\n\t\t\tqueryEditableSetting,\n\t\t\tqueryEditableSettings,\n\t\t\tqueryGroupSections,\n\t\t\tqueryGroupTabs,\n\t\t\tdispatch,\n\t\t\tisEnterprise,\n\t\t}),\n\t\t[queryEditableSetting, queryEditableSettings, queryGroupSections, queryGroupTabs, dispatch, isEnterprise],\n\t);\n\n\treturn <EditableSettingsContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "Setting.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/Setting.tsx",
        "code": {
            "onChangeValue": "\tconst onChangeValue = useCallback(\n\tconst onChangeValue = useCallback(\n\t\t(value) => {\n\t\t\tsetValue(value);\n\t\t\tupdate({ value });",
            "onChangeEditor": "\tconst onChangeEditor = useCallback(\n\tconst onChangeEditor = useCallback(\n\t\t(editor) => {\n\t\t\tsetEditor(editor);\n\t\t\tupdate({ editor });",
            "onResetButtonClick": "\tconst onResetButtonClick = useCallback(() => {\n\tconst onResetButtonClick = useCallback(() => {\n\t\tsetValue(setting.value);\n\t\tsetEditor(isSettingColor(setting) ? setting.editor : undefined);\n\t\tupdate({\n\t\t\tvalue: persistedSetting.packageValue,\n\t\t\t...(isSettingColor(persistedSetting) && { editor: persistedSetting.packageEditor }),",
            "hint": "\tconst label = (t.has(i18nLabel) && t(i18nLabel)) || (t.has(_id) && t(_id)) || i18nLabel || _id;\n\tconst label = (t.has(i18nLabel) && t(i18nLabel)) || (t.has(_id) && t(_id)) || i18nLabel || _id;\n\n\tconst hint = useMemo(\n\tconst hint = useMemo(\n\t\t() =>\n\t\t\ti18nDescription && t.has(i18nDescription) ? <MarkdownText variant='inline' preserveHtml content={t(i18nDescription)} /> : undefined,",
            "callout": "\tconst callout = useMemo(() => alert && <span dangerouslySetInnerHTML={{ __html: t.has(alert) ? t(alert) : alert }} />, [alert, t]);\n\tconst callout = useMemo(() => alert && <span dangerouslySetInnerHTML={{ __html: t.has(alert) ? t(alert) : alert }} />, [alert, t]);",
            "showUpgradeButton": "\tconst showUpgradeButton = useMemo(\n\tconst showUpgradeButton = useMemo(\n\t\t() =>\n\t\t\tshouldDisableEnterprise ? (\n\t\t\t\t<ExternalLink to={PRICING_URL}>"
        },
        "depth_rank": 7
    },
    {
        "file": "GroupPageSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/GroupPageSkeleton.tsx",
        "code": {
            "t": "function GroupPageSkeleton(): ReactElement {\nfunction GroupPageSkeleton(): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={<Skeleton style={{ width: '20rem' }} />}>"
        },
        "depth_rank": 7
    },
    {
        "file": "SectionSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/SectionSkeleton.tsx",
        "code": {
            "SectionSkeleton": "function SectionSkeleton(): ReactElement {\nfunction SectionSkeleton(): ReactElement {\n\treturn (\n\t\t<Accordion.Item noncollapsible title={<Skeleton />}>"
        },
        "depth_rank": 7
    },
    {
        "file": "Section.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/Section.tsx",
        "code": {
            "changed": "function Section({ groupId, hasReset = true, sectionName, tabName = '', solo, help, children }: SectionProps): ReactElement {\nfunction Section({ groupId, hasReset = true, sectionName, tabName = '', solo, help, children }: SectionProps): ReactElement {\n\tconst editableSettings = useEditableSettings(\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: groupId,\n\t\t\t\tsection: sectionName,\n\t\t\t\ttab: tabName,\n\t\t\t}),\n\t\t\t[groupId, sectionName, tabName],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);"
        },
        "depth_rank": 7
    },
    {
        "file": "SettingsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/SettingsPage.tsx",
        "code": {
            "isLoadingGroups": "const SettingsPage = (): ReactElement => {\nconst SettingsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst handleChange = useCallback((e) => setFilter(e.currentTarget.value), []);\n\tconst handleChange = useCallback((e) => setFilter(e.currentTarget.value), []);\n\n\tconst groups = useSettingsGroups(useDebouncedValue(filter, 400));\n\tconst groups = useSettingsGroups(useDebouncedValue(filter, 400));\n\tconst isLoadingGroups = useIsSettingsContextLoading();\n\tconst isLoadingGroups = useIsSettingsContextLoading();\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<Page.Header title={t('Settings')} borderBlockEndColor='' />"
        },
        "depth_rank": 7
    },
    {
        "file": "MemoizedSetting.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/MemoizedSetting.tsx",
        "code": {
            "MemoizedSetting": "const inputsByType: Record<ISettingBase['type'], ElementType<any>> = {\nconst inputsByType: Record<ISettingBase['type'], ElementType<any>> = {\n\tboolean: BooleanSettingInput,\n\tstring: StringSettingInput,\n\trelativeUrl: RelativeUrlSettingInput,\n\tpassword: PasswordSettingInput,\n\tint: IntSettingInput,\n\tselect: SelectSettingInput,\n\tmultiSelect: MultiSelectSettingInput,\n\tlanguage: LanguageSettingInput,\n\tcolor: ColorSettingInput,\n\tfont: FontSettingInput,\n\tcode: CodeSettingInput,\n\taction: ActionSettingInput,\n\tasset: AssetSettingInput,\n\troomPick: RoomPickSettingInput,\n\ttimezone: SelectTimezoneSettingInput,\n\tlookup: LookupSettingInput,\n\tdate: GenericSettingInput, // @todo: implement\n\tgroup: GenericSettingInput, // @todo: implement\n};\n\ntype MemoizedSettingProps = {\n\t_id?: string;\n\ttype: ISettingBase['type'];\n\thint?: ReactNode;\n\tcallout?: ReactNode;\n\tvalue?: SettingValue;\n\teditor?: SettingEditor;\n\tonChangeValue?: (value: SettingValue) => void;\n\tonChangeEditor?: (value: unknown) => void;\n\tonResetButtonClick?: () => void;\n\tclassName?: string;\n\tinvisible?: boolean;\n\tlabel?: string;\n\tsectionChanged?: boolean;\n\thasResetButton?: boolean;\n\tdisabled?: boolean;\n\tshowUpgradeButton?: ReactNode;\n\tactionText?: string;\n};\n\nconst MemoizedSetting = ({\nconst MemoizedSetting = ({\n\ttype,\n\thint = undefined,\n\tcallout = undefined,\n\tvalue = undefined,\n\teditor = undefined,\n\tonChangeValue,\n\tonChangeEditor,\n\tdisabled,\n\tshowUpgradeButton,\n\tclassName = undefined,\n\tinvisible = undefined,\n\t...inputProps\n}: MemoizedSettingProps): ReactElement | null => {"
        },
        "depth_rank": 7
    },
    {
        "file": "GroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/GroupPage.tsx",
        "code": {
            "originalSettings": "\tconst dispatch = useSettingsDispatch();\n\tconst dispatch = useSettingsDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst loadLanguage = useLoadLanguage();\n\tconst loadLanguage = useLoadLanguage();\n\n\tconst changedEditableSettings = useEditableSettings(\n\tconst changedEditableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t\tchanged: true,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst originalSettings = useSettings(\n\tconst originalSettings = useSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\t_id: changedEditableSettings.map(({ _id }) => _id),",
            "lng": "\tconst isColorSetting = (setting: ISetting): setting is ISettingColor => setting.type === 'color';\n\tconst isColorSetting = (setting: ISetting): setting is ISettingColor => setting.type === 'color';\n\n\tconst save = useMutableCallback(async () => {\n\tconst save = useMutableCallback(async () => {\n\t\tconst changes = changedEditableSettings.map((setting) => {\n\t\tconst changes = changedEditableSettings.map((setting) => {\n\t\t\tif (isColorSetting(setting)) {\n\t\t\t\treturn {\n\t\t\t\t\t_id: setting._id,\n\t\t\t\t\tvalue: setting.value,\n\t\t\t\t\teditor: setting.editor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t};\n\t\t});\n\n\t\tif (changes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait dispatch(changes);\n\n\t\t\tif (changes.some(({ _id }) => _id === 'Language')) {\n\t\t\t\tconst lng = user?.language || changes.filter(({ _id }) => _id === 'Language').shift()?.value || 'en';\n\t\t\t\tconst lng = user?.language || changes.filter(({ _id }) => _id === 'Language').shift()?.value || 'en';",
            "settingsToDispatch": "\tconst dispatchToEditing = useEditableSettingsDispatch();\n\tconst dispatchToEditing = useEditableSettingsDispatch();\n\n\tconst cancel = useMutableCallback(() => {\n\tconst cancel = useMutableCallback(() => {\n\t\tconst settingsToDispatch = changedEditableSettings\n\t\tconst settingsToDispatch = changedEditableSettings\n\t\t\t.map(({ _id }) => originalSettings.find((setting) => setting._id === _id))",
            "handleBack": "\tconst handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n\tconst handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n\t\tevent.preventDefault();\n\t\tsave();\n\t};\n\n\tconst handleBack = useMutableCallback(() => router.push({}));\n\tconst handleBack = useMutableCallback(() => router.push({}));"
        },
        "depth_rank": 7
    },
    {
        "file": "useSettingsGroups.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/hooks/useSettingsGroups.ts",
        "code": {
            "filterRegex": "\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\t\t[setting.i18nLabel && t(setting.i18nLabel as TranslationKey), t(setting._id as TranslationKey), setting._id].filter(Boolean);\n\n\t\ttry {\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => filterRegex.test(text));\n\t\t} catch (e) {",
            "groupIds": "\t\tconst groupIds = Array.from(\n\t\tconst groupIds = Array.from(\n\t\t\tnew Set(\n\t\t\t\tsettings.filter(filterPredicate).map((setting) => {\n\t\t\t\t\tif (setting.type === 'group') {\n\t\t\t\t\t\treturn setting._id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn setting.group;\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\treturn settings\n\t\t\t.filter(({ type, group, _id }) => type === 'group' && groupIds.includes(group || _id))"
        },
        "depth_rank": 8
    },
    {
        "file": "TabbedGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/TabbedGroupPage.tsx",
        "code": {
            "tabsComponent": "\tconst tabsComponent = (\n\tconst tabsComponent = (\n\t\t<Tabs>\n\t\t\t{tabs.map((tabName) => (\n\t\t\t\t<Tabs.Item key={tabName || ''} selected={tab === tabName} onClick={handleTabClick(tabName)}>"
        },
        "depth_rank": 8
    },
    {
        "file": "LDAPGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/LDAPGroupPage.tsx",
        "code": {
            "changed": "function LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\nfunction LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst testConnection = useEndpoint('POST', '/v1/ldap.testConnection');\n\tconst testConnection = useEndpoint('POST', '/v1/ldap.testConnection');\n\tconst syncNow = useEndpoint('POST', '/v1/ldap.syncNow');\n\tconst syncNow = useEndpoint('POST', '/v1/ldap.syncNow');\n\tconst testSearch = useEndpoint('POST', '/v1/ldap.testSearch');\n\tconst testSearch = useEndpoint('POST', '/v1/ldap.testSearch');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal());\n\tconst closeModal = useMutableCallback(() => setModal());\n\n\tconst handleLinkClick = useExternalLink();\n\tconst handleLinkClick = useExternalLink();\n\n\tconst editableSettings = useEditableSettings(\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);",
            "handleTestConnectionButtonClick": "\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { message } = await testConnection();\n\t\t\tconst { message } = await testConnection();",
            "confirmSync": "\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\t\tcloseModal();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await syncNow();\n\t\t\t\t\tconst { message } = await syncNow();",
            "confirmSearch": "\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tlet username = '';\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\t\tusername = event.currentTarget.value;\n\t\t\t};\n\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await testSearch({ username });\n\t\t\t\t\tconst { message } = await testSearch({ username });"
        },
        "depth_rank": 8
    },
    {
        "file": "AssetsGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/AssetsGroupPage.tsx",
        "code": {
            "solo": "function AssetsGroupPage({ _id, ...group }: AssetsGroupPageProps): ReactElement {\nfunction AssetsGroupPage({ _id, ...group }: AssetsGroupPageProps): ReactElement {\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst solo = sections.length === 1;\n\tconst solo = sections.length === 1;\n\n\treturn (\n\t\t<GroupPage _id={_id} {...group}>"
        },
        "depth_rank": 8
    },
    {
        "file": "GenericGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/GenericGroupPage.tsx",
        "code": {
            "solo": "function GenericGroupPage({ _id, ...group }: GenericGroupPageProps): ReactElement {\nfunction GenericGroupPage({ _id, ...group }: GenericGroupPageProps): ReactElement {\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst solo = sections.length === 1;\n\tconst solo = sections.length === 1;\n\n\treturn (\n\t\t<GroupPage _id={_id} {...group}>"
        },
        "depth_rank": 8
    },
    {
        "file": "VoipGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/VoipGroupPage.tsx",
        "code": {
            "tabsComponent": "\tconst tabsComponent = (\n\tconst tabsComponent = (\n\t\t<Tabs>\n\t\t\t{tabs.map((tabName) => (\n\t\t\t\t<Tabs.Item key={tabName || ''} selected={tab === tabName} onClick={handleTabClick(tabName)}>",
            "ExtensionsPageComponent": "\tconst ExtensionsPageComponent = useMemo(\n\tconst ExtensionsPageComponent = useMemo(\n\t\t() =>\n\t\t\tvoipEnabled ? (\n\t\t\t\t<VoipExtensionsPage />\n\t\t\t) : (\n\t\t\t\t<GenericNoResults icon='warning' title={t('Voip_is_disabled')} description={t('Voip_is_disabled_description')}></GenericNoResults>"
        },
        "depth_rank": 8
    },
    {
        "file": "OAuthGroupPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/OAuthGroupPage.tsx",
        "code": {
            "handleRefreshOAuthServicesButtonClick": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst refreshOAuthService = useMethod('refreshOAuthService');\n\tconst refreshOAuthService = useMethod('refreshOAuthService');\n\tconst addOAuthService = useMethod('addOAuthService');\n\tconst addOAuthService = useMethod('addOAuthService');\n\tconst removeOAuthService = useMethod('removeOAuthService');\n\tconst removeOAuthService = useMethod('removeOAuthService');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst handleRefreshOAuthServicesButtonClick = async (): Promise<void> => {\n\tconst handleRefreshOAuthServicesButtonClick = async (): Promise<void> => {\n\t\tdispatchToastMessage({ type: 'info', message: t('Refreshing') });",
            "onConfirm": "\tconst handleAddCustomOAuthButtonClick = (): void => {\n\tconst handleAddCustomOAuthButtonClick = (): void => {\n\t\tconst onConfirm = async (text: string): Promise<void> => {\n\t\tconst onConfirm = async (text: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait addOAuthService(text);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_OAuth_has_been_added') });",
            "handleConfirm": "\tconst removeCustomOauthFactory =\n\tconst removeCustomOauthFactory =\n\t\t(id: string): (() => void) =>\n\t\t(): void => {\n\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait removeOAuthService(id);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_OAuth_has_been_removed') });",
            "handleRemoveCustomOAuthButtonClick": "\t\t\t\t\tconst id = strRight(sectionName, 'Custom OAuth: ').toLowerCase();\n\t\t\t\t\tconst id = strRight(sectionName, 'Custom OAuth: ').toLowerCase();\n\n\t\t\t\t\tconst handleRemoveCustomOAuthButtonClick = removeCustomOauthFactory(id);\n\t\t\t\t\tconst handleRemoveCustomOAuthButtonClick = removeCustomOauthFactory(id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Section\n\t\t\t\t\t\t\tkey={sectionName}"
        },
        "depth_rank": 8
    },
    {
        "file": "AssignAgentModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/AssignAgentModal.tsx",
        "code": {
            "query": "const AssignAgentModal: FC<AssignAgentModalParams> = ({ existingExtension, closeModal, reload }) => {\nconst AssignAgentModal: FC<AssignAgentModalParams> = ({ existingExtension, closeModal, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [agent, setAgent] = useState('');\n\tconst [agent, setAgent] = useState('');\n\tconst [extension, setExtension] = useState(existingExtension || '');\n\tconst [extension, setExtension] = useState(existingExtension || '');\n\tconst query = useMemo(() => ({ type: 'available' as const, userId: agent }), [agent]);\n\tconst query = useMemo(() => ({ type: 'available' as const, userId: agent }), [agent]);",
            "handleAssignment": "\tconst assignAgent = useEndpoint('POST', '/v1/omnichannel/agent/extension');\n\tconst assignAgent = useEndpoint('POST', '/v1/omnichannel/agent/extension');\n\n\tconst handleAssignment = useMutableCallback(async (e) => {\n\tconst handleAssignment = useMutableCallback(async (e) => {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait assignAgent({ username: agent, extension });",
            "handleAgentChange": "\tconst handleAgentChange = useMutableCallback((e) => setAgent(e));\n\tconst handleAgentChange = useMutableCallback((e) => setAgent(e));\n\n\tconst { value: availableExtensions, phase: state } = useEndpointData('/v1/omnichannel/extension', { params: query });\n\tconst { value: availableExtensions, phase: state } = useEndpointData('/v1/omnichannel/extension', { params: query });"
        },
        "depth_rank": 9
    },
    {
        "file": "AssignAgentButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/AssignAgentButton.tsx",
        "code": {
            "handleAssociation": "const AssignAgentButton: FC<{ extension: string; reload: () => void }> = ({ extension, reload }) => {\nconst AssignAgentButton: FC<{ extension: string; reload: () => void }> = ({ extension, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst handleAssociation = useMutableCallback((e) => {\n\tconst handleAssociation = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tsetModal(<AssignAgentModal existingExtension={extension} closeModal={(): void => setModal()} reload={reload} />);"
        },
        "depth_rank": 9
    },
    {
        "file": "RemoveAgentButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/RemoveAgentButton.tsx",
        "code": {
            "removeAgent": "const RemoveAgentButton: FC<{ username: string; reload: () => void }> = ({ username, reload }) => {\nconst RemoveAgentButton: FC<{ username: string; reload: () => void }> = ({ username, reload }) => {\n\tconst removeAgent = useEndpoint('DELETE', '/v1/omnichannel/agent/extension/:username', { username });\n\tconst removeAgent = useEndpoint('DELETE', '/v1/omnichannel/agent/extension/:username', { username });",
            "handleRemoveClick": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait removeAgent();\n\t\t} catch (error: unknown) {",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 9
    },
    {
        "file": "VoipExtensionsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/VoipExtensionsPage.tsx",
        "code": {
            "setModal": "const VoipExtensionsPage = () => {\nconst VoipExtensionsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\t...(itemsPerPage && { count: itemsPerPage }),"
        },
        "depth_rank": 9
    },
    {
        "file": "IntSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/IntSettingInput.tsx",
        "code": {
            "IntSettingInput": "function IntSettingInput({\nfunction IntSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\tonChangeValue,\n\thasResetButton,\n\tonResetButtonClick,\n}: IntSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "SelectTimezoneSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/SelectTimezoneSettingInput.tsx",
        "code": {
            "SelectTimezoneSettingInput": "function SelectTimezoneSettingInput({\nfunction SelectTimezoneSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: SelectTimezoneSettingInputProps): ReactElement {",
            "handleChange": "\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue?.(value);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "RelativeUrlSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/RelativeUrlSettingInput.tsx",
        "code": {
            "RelativeUrlSettingInput": "function RelativeUrlSettingInput({\nfunction RelativeUrlSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: RelativeUrlSettingInputProps): ReactElement {",
            "getAbsoluteUrl": "\tconst getAbsoluteUrl = useAbsoluteUrl();\n\tconst getAbsoluteUrl = useAbsoluteUrl();\n\n\tconst handleChange: EventHandler<SyntheticEvent<HTMLInputElement>> = (event) => {\n\tconst handleChange: EventHandler<SyntheticEvent<HTMLInputElement>> = (event) => {\n\t\tonChangeValue?.(event.currentTarget.value);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomPickSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/RoomPickSettingInput.tsx",
        "code": {
            "RoomPickSettingInput": "function RoomPickSettingInput({\nfunction RoomPickSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: RoomPickSettingInputProps): ReactElement {",
            "parsedValue": "\tconst parsedValue = (value || []).map(({ _id }) => _id);\n\tconst parsedValue = (value || []).map(({ _id }) => _id);",
            "newValue": "\tconst handleChange = (value: string | string[]) => {\n\tconst handleChange = (value: string | string[]) => {\n\t\tif (typeof value === 'object') {\n\t\t\tconst newValue = value.map((currentValue: string) => ({ _id: currentValue }));\n\t\t\tconst newValue = value.map((currentValue: string) => ({ _id: currentValue }));"
        },
        "depth_rank": 8
    },
    {
        "file": "PasswordSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/PasswordSettingInput.tsx",
        "code": {
            "PasswordSettingInput": "function PasswordSettingInput({\nfunction PasswordSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: PasswordSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "FontSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/FontSettingInput.tsx",
        "code": {
            "FontSettingInput": "function FontSettingInput({\nfunction FontSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: FontSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "ColorSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/ColorSettingInput.tsx",
        "code": {
            "ColorSettingInput": "function ColorSettingInput({\nfunction ColorSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\teditor,\n\tallowedTypes = [],\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonChangeEditor,\n\tonResetButtonClick,\n}: ColorSettingInputProps): ReactElement {",
            "handleEditorTypeChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleChange = useCallback(\n\tconst handleChange = useCallback(\n\t\t(event) => {\n\t\t\tonChangeValue?.(event.currentTarget.value);\n\t\t},\n\t\t[onChangeValue],\n\t);\n\n\tconst handleEditorTypeChange = useCallback(\n\tconst handleEditorTypeChange = useCallback(\n\t\t(value) => {\n\t\t\tonChangeEditor?.(value);\n\t\t},\n\t\t[onChangeEditor],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "MultiSelectSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/MultiSelectSettingInput.tsx",
        "code": {
            "MultiSelectSettingInput": "function MultiSelectSettingInput({\nfunction MultiSelectSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tdisabled,\n\tvalues = [],\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n\tautocomplete,\n}: MultiSelectSettingInputProps): ReactElement {",
            "Component": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleChange = (value: string[]): void => {\n\tconst handleChange = (value: string[]): void => {\n\t\tonChangeValue?.(value);\n\t\t// onChangeValue && onChangeValue([...event.currentTarget.querySelectorAll('option')].filter((e) => e.selected).map((el) => el.value));\n\t};\n\tconst Component = autocomplete ? MultiSelectFiltered : MultiSelect;\n\tconst Component = autocomplete ? MultiSelectFiltered : MultiSelect;\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "LookupSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/LookupSettingInput.tsx",
        "code": {
            "LookupSettingInput": "function LookupSettingInput({\nfunction LookupSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\tlookupEndpoint,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: LookupSettingInputProps): ReactElement {",
            "handleChange": "\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue?.(value);\n\t};\n\n\tconst { value: options } = useEndpointData(lookupEndpoint) as AsyncState<{ data: { key: string; label: string }[] }>;\n\tconst { value: options } = useEndpointData(lookupEndpoint) as AsyncState<{ data: { key: string; label: string }[] }>;",
            "values": "\tconst values = options?.data || [];\n\tconst values = options?.data || [];\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "AssetSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/AssetSettingInput.tsx",
        "code": {
            "isDataTransferEvent": "function AssetSettingInput({ _id, label, value, asset, fileConstraints }: AssetSettingInputProps): ReactElement {\nfunction AssetSettingInput({ _id, label, value, asset, fileConstraints }: AssetSettingInputProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setAsset = useUpload('/v1/assets.setAsset');\n\tconst setAsset = useUpload('/v1/assets.setAsset');\n\tconst unsetAsset = useEndpoint('POST', '/v1/assets.unsetAsset');\n\tconst unsetAsset = useEndpoint('POST', '/v1/assets.unsetAsset');\n\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\t\tBoolean('dataTransfer' in event && (event as any).dataTransfer.files);\n\n\tconst handleUpload: ChangeEventHandler<HTMLInputElement> = (event): void => {\n\tconst handleUpload: ChangeEventHandler<HTMLInputElement> = (event): void => {\n\t\tlet { files } = event.target;",
            "fileData": "\t\t\tconst fileData = new FormData();\n\t\t\tconst fileData = new FormData();\n\t\t\tfileData.append('asset', blob, asset);\n\t\t\tfileData.append('assetName', asset);\n\n\t\t\ttry {\n\t\t\t\tawait setAsset(fileData);\n\t\t\t} catch (e) {",
            "handleDeleteButtonClick": "\tconst handleDeleteButtonClick = async (): Promise<void> => {\n\tconst handleDeleteButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait unsetAsset({ assetName: asset });"
        },
        "depth_rank": 8
    },
    {
        "file": "ActionSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/ActionSettingInput.tsx",
        "code": {
            "handleClick": "function ActionSettingInput({ _id, actionText, value, disabled, sectionChanged }: ActionSettingInputProps): ReactElement {\nfunction ActionSettingInput({ _id, actionText, value, disabled, sectionChanged }: ActionSettingInputProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst actionMethod = useMethod(value);\n\tconst actionMethod = useMethod(value);\n\n\tconst handleClick = async (): Promise<void> => {\n\tconst handleClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst data: { message: TranslationKey; params: string[] } = await actionMethod();\n\t\t\tconst data: { message: TranslationKey; params: string[] } = await actionMethod();"
        },
        "depth_rank": 8
    },
    {
        "file": "BooleanSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/BooleanSettingInput.tsx",
        "code": {
            "BooleanSettingInput": "function BooleanSettingInput({\nfunction BooleanSettingInput({\n\t_id,\n\tlabel,\n\tdisabled,\n\treadonly,\n\tvalue,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: BooleanSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "StringSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/StringSettingInput.tsx",
        "code": {
            "StringSettingInput": "function StringSettingInput({\nfunction StringSettingInput({\n\t_id,\n\tlabel,\n\tname,\n\tdisabled,\n\tmultiline,\n\tplaceholder,\n\treadonly,\n\terror,\n\tautocomplete,\n\tvalue,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: StringSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "GenericSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/GenericSettingInput.tsx",
        "code": {
            "GenericSettingInput": "function GenericSettingInput({\nfunction GenericSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: GenericSettingInputProps): ReactElement {"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/CodeSettingInput.tsx",
        "code": {
            "CodeSettingInput": "function CodeSettingInput({\nfunction CodeSettingInput({\n\t_id,\n\tlabel,\n\thint,\n\tvalue = '',\n\tcode,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: CodeSettingInputProps): ReactElement {",
            "handleChange": "\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue(value);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "SelectSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/SelectSettingInput.tsx",
        "code": {
            "SelectSettingInput": "function SelectSettingInput({\nfunction SelectSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\tvalues = [],\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: SelectSettingInputProps): ReactElement {",
            "handleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue?.(value);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "LanguageSettingInput.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/LanguageSettingInput.tsx",
        "code": {
            "LanguageSettingInput": "function LanguageSettingInput({\nfunction LanguageSettingInput({\n\t_id,\n\tlabel,\n\tvalue,\n\tplaceholder,\n\treadonly,\n\tautocomplete,\n\tdisabled,\n\thasResetButton,\n\tonChangeValue,\n\tonResetButtonClick,\n}: LanguageSettingInputProps): ReactElement {",
            "handleChange": "\tconst languages = useLanguages();\n\tconst languages = useLanguages();\n\n\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue?.(value);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Flex.Container>\n\t\t\t\t<Box>\n\t\t\t\t\t<Field.Label htmlFor={_id} title={_id}>"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeMirror.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/CodeMirror/CodeMirror.tsx",
        "code": {
            "CodeMirror": "function CodeMirror({\nfunction CodeMirror({\n\tlineNumbers = true,\n\tlineWrapping = true,\n\tmode = 'javascript',\n\tgutters = defaultGutters,\n\tfoldGutter = true,\n\tmatchBrackets = true,\n\tautoCloseBrackets = true,\n\tmatchTags = true,\n\tshowTrailingSpace = true,\n\thighlightSelectionMatches = true,\n\treadOnly,\n\tvalue: valueProp,\n\tdefaultValue,\n\tonChange,\n\t...props\n}: CodeMirrorProps): ReactElement {"
        },
        "depth_rank": 9
    },
    {
        "file": "FederationDashboardPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/federationDashboard/FederationDashboardPage.tsx",
        "code": {
            "t": "function FederationDashboardPage(): ReactElement {\nfunction FederationDashboardPage(): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Federation')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "ServersSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/federationDashboard/ServersSection.tsx",
        "code": {
            "servers": "\tconst servers = result.data.data;\n\tconst servers = result.data.data;\n\n\treturn (\n\t\t<Box withRichContent>\n\t\t\t<ul>\n\t\t\t\t{servers.map(({ domain }) => (\n\t\t\t\t\t<li key={domain}>{domain}</li>"
        },
        "depth_rank": 7
    },
    {
        "file": "OfflineLicenseModal.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/OfflineLicenseModal.stories.tsx",
        "code": {
            "applyButton": "\tconst applyButton = screen.getByRole('button', { name: 'Apply license' });\n\tconst applyButton = screen.getByRole('button', { name: 'Apply license' });"
        },
        "depth_rank": 7
    },
    {
        "file": "InformationPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/InformationPage.tsx",
        "code": {
            "InformationPage": "const InformationPage = memo(function InformationPage({\nconst InformationPage = memo(function InformationPage({\n\tcanViewStatistics,\n\tinfo,\n\tstatistics,\n\tinstances,\n\tonClickRefreshButton,\n\tonClickDownloadInfo,\n}: InformationPageProps) {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 7
    },
    {
        "file": "OfflineLicenseModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/OfflineLicenseModal.tsx",
        "code": {
            "text": "\tconst handlePaste = useMutableCallback(async () => {\n\tconst handlePaste = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tconst text = await navigator.clipboard.readText();\n\t\t\tconst text = await navigator.clipboard.readText();\n\t\t\tsetNewLicense(text);\n\t\t} catch (error) {",
            "handleApplyLicense": "\tconst addLicense = useEndpoint('POST', '/v1/licenses.add');\n\tconst addLicense = useEndpoint('POST', '/v1/licenses.add');\n\n\tconst handleApplyLicense = useMutableCallback(async (e) => {\n\tconst handleApplyLicense = useMutableCallback(async (e) => {\n\t\te.preventDefault();\n\t\tsetLastSetLicense(newLicense);\n\t\ttry {\n\t\t\tsetIsUpdating(true);\n\t\t\tawait addLicense({ license: newLicense });"
        },
        "depth_rank": 7
    },
    {
        "file": "Feature.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/Feature.js",
        "code": {
            "Feature": "const Feature = ({ label, enabled }) => (\nconst Feature = ({ label, enabled }) => ("
        },
        "depth_rank": 7
    },
    {
        "file": "DeploymentCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/DeploymentCard.tsx",
        "code": {
            "setModal": "const DeploymentCard = ({ info, statistics, instances }: DeploymentCardProps): ReactElement => {\nconst DeploymentCard = ({ info, statistics, instances }: DeploymentCardProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { commit = {} } = info;\n\tconst { commit = {} } = info;",
            "handleInstancesModal": "\tconst appsEngineVersion = info?.marketplaceApiVersion;\n\tconst appsEngineVersion = info?.marketplaceApiVersion;\n\n\tconst handleInstancesModal = useMutableCallback(() => {\n\tconst handleInstancesModal = useMutableCallback(() => {\n\t\tsetModal(<InstancesModal instances={instances} onClose={(): void => setModal()} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "UsagePieGraph.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/UsagePieGraph.tsx",
        "code": {
            "localePercentage": "\tconst unlimited = total === 0;\n\tconst unlimited = total === 0;\n\n\tconst localePercentage = useLocalePercentage(total, used, 0);\n\tconst localePercentage = useLocalePercentage(total, used, 0);\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' alignItems='center'>\n\t\t\t<Box size={size}>"
        },
        "depth_rank": 7
    },
    {
        "file": "InformationRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/InformationRoute.tsx",
        "code": {
            "fetchStatistics": "\tconst [isLoading, setLoading] = useState(true);\n\tconst [isLoading, setLoading] = useState(true);\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [statistics, setStatistics] = useState<IStats>();\n\tconst [statistics, setStatistics] = useState<IStats>();\n\tconst [instances, setInstances] = useState<Serialized<IInstance[]>>([]);\n\tconst [instances, setInstances] = useState<Serialized<IInstance[]>>([]);\n\tconst [fetchStatistics, setFetchStatistics] = useState<fetchStatisticsCallback>(() => (): void => undefined);\n\tconst [fetchStatistics, setFetchStatistics] = useState<fetchStatisticsCallback>(() => (): void => undefined);\n\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\n\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\n\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\n\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\n\n\tuseEffect(() => {\n\t\tlet didCancel = false;\n\n\t\tconst fetchStatistics = async ({ refresh = false } = {}): Promise<void> => {\n\t\tconst fetchStatistics = async ({ refresh = false } = {}): Promise<void> => {\n\t\t\tsetLoading(true);\n\t\t\tsetError(false);\n\n\t\t\ttry {\n\t\t\t\tconst [statistics, instancesData] = await Promise.all([getStatistics({ refresh: refresh ? 'true' : 'false' }), getInstances()]);\n\t\t\t\tconst [statistics, instancesData] = await Promise.all([getStatistics({ refresh: refresh ? 'true' : 'false' }), getInstances()]);",
            "handleClickRefreshButton": "\tconst info = useServerInformation();\n\tconst info = useServerInformation();\n\n\tconst handleClickRefreshButton = (): void => {\n\tconst handleClickRefreshButton = (): void => {\n\t\tif (isLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tfetchStatistics({ refresh: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "LicenseCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/LicenseCard.tsx",
        "code": {
            "isAirGapped": "const LicenseCard = (): ReactElement => {\nconst LicenseCard = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst currentLicense = useSetting('Enterprise_License') as string;\n\tconst currentLicense = useSetting('Enterprise_License') as string;\n\tconst licenseStatus = useSetting('Enterprise_License_Status') as string;\n\tconst licenseStatus = useSetting('Enterprise_License_Status') as string;\n\n\tconst isAirGapped = true;\n\tconst isAirGapped = true;\n\n\tconst { data, isError, isLoading } = useLicense();\n\tconst { data, isError, isLoading } = useLicense();",
            "handleApplyLicense": "\tconst handleApplyLicense = useMutableCallback(() =>\n\tconst handleApplyLicense = useMutableCallback(() =>\n\t\tsetModal(\n\t\t\t<OfflineLicenseModal\n\t\t\t\tonClose={(): void => {\n\t\t\t\t\tsetModal();\n\t\t\t\t}}\n\t\t\t\tlicense={currentLicense}"
        },
        "depth_rank": 7
    },
    {
        "file": "InviteUsers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/FederationCard/components/FederationModal/InviteUsers.tsx",
        "code": {
            "handleDirectory": "const InviteUsers: FC<{ onClose: () => void }> = ({ onClose }): ReactElement => {\nconst InviteUsers: FC<{ onClose: () => void }> = ({ onClose }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst handleDirectory = (): void => {\n\tconst handleDirectory = (): void => {\n\t\tonClose();\n\t\trouter.navigate('/directory/users');\n\t};\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' alignItems='stretch' flexGrow={1}>"
        },
        "depth_rank": 10
    },
    {
        "file": "FederationModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/FederationCard/components/FederationModal/FederationModal.tsx",
        "code": {
            "siteUrl": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\t// State\n\tconst [currentStep, setCurrentStep] = useState(1);\n\tconst [currentStep, setCurrentStep] = useState(1);\n\tconst [currentTab, setCurrentTab] = useState(1);\n\tconst [currentTab, setCurrentTab] = useState(1);\n\n\t// Settings\n\tconst siteUrl = useSetting('Site_Url') as string;\n\tconst siteUrl = useSetting('Site_Url') as string;\n\tconst { protocol, hostname: rocketChatDomain, port: rocketChatPort } = new URL(siteUrl);\n\tconst { protocol, hostname: rocketChatDomain, port: rocketChatPort } = new URL(siteUrl);",
            "initialValues": "\tconst federationDomain = useSetting('FEDERATION_Domain') as string;\n\tconst federationDomain = useSetting('FEDERATION_Domain') as string;\n\tconst setFederationDomain = useSettingSetValue('FEDERATION_Domain');\n\tconst setFederationDomain = useSettingSetValue('FEDERATION_Domain');\n\n\tlet federationSubdomain = '';\n\tconst parsedDomain = parseDomain(federationDomain);\n\tconst parsedDomain = parseDomain(federationDomain);\n\tif ((parsedDomain as ParsedDomain)?.subdomain) {\n\t\tfederationSubdomain = (parsedDomain as ParsedDomain).subdomain || '';\n\t}\n\n\tconst federationDiscoveryMethod = useSetting('FEDERATION_Discovery_Method') as string;\n\tconst federationDiscoveryMethod = useSetting('FEDERATION_Discovery_Method') as string;\n\tconst setFederationDiscoveryMethod = useSettingSetValue('FEDERATION_Discovery_Method');\n\tconst setFederationDiscoveryMethod = useSettingSetValue('FEDERATION_Discovery_Method');\n\n\tconst federationPublicKey = useSetting('FEDERATION_Public_Key') as string;\n\tconst federationPublicKey = useSetting('FEDERATION_Public_Key') as string;\n\n\t// Form\n\tconst discoveryOptions: SelectOption[] = [\n\tconst discoveryOptions: SelectOption[] = [\n\t\t['dns', 'DNS (recommended)'],\n\t\t['hub', 'HUB'],\n\t];\n\n\tconst initialValues = {\n\tconst initialValues = {\n\t\tdomain: federationDomain,\n\t\tdiscoveryMethod: federationDiscoveryMethod,\n\t};\n\tconst { values, handlers, hasUnsavedChanges, commit } = useForm(initialValues);\n\tconst { values, handlers, hasUnsavedChanges, commit } = useForm(initialValues);",
            "nextStep": "\tconst onChangeDomain = useMutableCallback((value) => {\n\tconst onChangeDomain = useMutableCallback((value) => {\n\t\thandleDomain(value);\n\t});\n\n\tconst onChangeDiscoveryMethod = useMutableCallback((value) => {\n\tconst onChangeDiscoveryMethod = useMutableCallback((value) => {\n\t\thandleDiscoveryMethod(value);\n\t});\n\n\t// Wizard\n\tconst nextStep = useCallback(\n\tconst nextStep = useCallback(\n\t\t(e) => {\n\t\t\te.preventDefault();\n\t\t\tif (currentStep === 1 && hasUnsavedChanges) {\n\t\t\t\tsetFederationDomain(domain);\n\t\t\t\tsetFederationDiscoveryMethod(discoveryMethod);\n\t\t\t\tcommit();\n\t\t\t}\n\n\t\t\tif (currentStep === 3) {\n\t\t\t\tonClose();\n\t\t\t} else {",
            "previousStep": "\tconst previousStep = useCallback(() => {\n\tconst previousStep = useCallback(() => {\n\t\tif (currentStep === 1) {\n\t\t\tonClose();\n\t\t} else {",
            "resolvedSRVString": "\tconst resolvedSRVString = useSetting('FEDERATION_ResolvedSRV') as string;\n\tconst resolvedSRVString = useSetting('FEDERATION_ResolvedSRV') as string;\n\tconst resolvedSRV: Record<DNSRecordName, string | number> = JSON.parse(resolvedSRVString || '{}');\n\tconst resolvedSRV: Record<DNSRecordName, string | number> = JSON.parse(resolvedSRVString || '{}');",
            "resolvedProtocolTXT": "\tconst resolvedPublicKeyTXT = useSetting('FEDERATION_ResolvedPublicKeyTXT') as string;\n\tconst resolvedPublicKeyTXT = useSetting('FEDERATION_ResolvedPublicKeyTXT') as string;\n\tconst resolvedProtocolTXT = useSetting('FEDERATION_ResolvedProtocolTXT') as string;\n\tconst resolvedProtocolTXT = useSetting('FEDERATION_ResolvedProtocolTXT') as string;\n\n\tconst resolvedDNS: ResolvedDNS = {\n\tconst resolvedDNS: ResolvedDNS = {\n\t\tsrv: resolvedSRV,\n\t\ttxt: {\n\t\t\t[TXTRecordValue.PUBLIC_KEY]: resolvedPublicKeyTXT,\n\t\t\t[TXTRecordValue.PROTOCOL]: resolvedProtocolTXT,\n\t\t},\n\t};\n\n\treturn (\n\t\t<Modal wrapperFunction={(props) => <Box is='form' onSubmit={nextStep} {...props} />} {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "DNSRecords.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx",
        "code": {
            "buildDNSRecord": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tfunction buildDNSRecord(\n\tfunction buildDNSRecord(\n\t\ttype: DNSRecordType,\n\t\tname: DNSRecordName | TXTRecordValue,\n\t\texpectedValue: string,\n\t\toptions: {\n\t\t\trootLevelEntry: boolean;\n\t\t\tlongValueTitle?: string;\n\t\t\ttitle?: string;\n\t\t} = {"
        },
        "depth_rank": 10
    },
    {
        "file": "InstancesModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/InstancesModal/InstancesModal.tsx",
        "code": {
            "formatDateAndTime": "const InstancesModal = ({ instances = [], onClose }: InstancesModalProps) => {\nconst InstancesModal = ({ instances = [], onClose }: InstancesModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\treturn (\n\t\t<GenericModal onConfirm={onClose} confirmText={t('Close')} icon={null} title={t('Instances')} onClose={onClose}>"
        },
        "depth_rank": 8
    },
    {
        "file": "DescriptionList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/InstancesModal/DescriptionList.tsx",
        "code": {
            "DescriptionList": "const DescriptionList = ({ children, title }: DescriptionListProps) => (\nconst DescriptionList = ({ children, title }: DescriptionListProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "DescriptionListEntry.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/info/InstancesModal/DescriptionListEntry.tsx",
        "code": {
            "DescriptionListEntry": "const DescriptionListEntry = ({ children, label }: DescriptionListEntryProps) => (\nconst DescriptionListEntry = ({ children, label }: DescriptionListEntryProps) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "EditRoom.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/rooms/EditRoom.tsx",
        "code": {
            "dispatchToastMessage": "const EditRoom = ({ room, onChange, onDelete }: EditRoomProps): ReactElement => {\nconst EditRoom = ({ room, onChange, onDelete }: EditRoomProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [deleting, setDeleting] = useState(false);\n\tconst [deleting, setDeleting] = useState(false);\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { values, handlers, hasUnsavedChanges, reset } = useForm(getInitialValues(room));\n\tconst { values, handlers, hasUnsavedChanges, reset } = useForm(getInitialValues(room));",
            "archiveAction": "\tconst archiveSelector = room.archived ? 'unarchive' : 'archive';\n\tconst archiveSelector = room.archived ? 'unarchive' : 'archive';\n\tconst archiveMessage = room.archived ? 'Room_has_been_unarchived' : 'Room_has_been_archived';\n\tconst archiveMessage = room.archived ? 'Room_has_been_unarchived' : 'Room_has_been_archived';\n\n\tconst saveAction = useEndpointAction('POST', '/v1/rooms.saveRoomSettings', {\n\tconst saveAction = useEndpointAction('POST', '/v1/rooms.saveRoomSettings', {\n\t\tsuccessMessage: t('Room_updated_successfully'),\n\t});\n\tconst archiveAction = useEndpointAction('POST', '/v1/rooms.changeArchivationState', { successMessage: t(archiveMessage) });\n\tconst archiveAction = useEndpointAction('POST', '/v1/rooms.changeArchivationState', { successMessage: t(archiveMessage) });",
            "save": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst save = (): Promise<{ success: boolean; rid: string }> =>\n\t\tconst save = (): Promise<{ success: boolean; rid: string }> =>",
            "archive": "\t\tconst archive = (): Promise<{ success: boolean }> => archiveAction({ rid: room._id, action: archiveSelector });\n\t\tconst archive = (): Promise<{ success: boolean }> => archiveAction({ rid: room._id, action: archiveSelector });",
            "roomsToRemove": "\t\tconst promises = [];\n\t\tconst promises = [];\n\t\thasUnsavedChanges && promises.push(save());\n\t\tchangeArchivation && promises.push(archive());\n\t\tawait Promise.all(promises);\n\t\tonChange();\n\t});\n\n\tconst changeRoomType = useMutableCallback(() => {\n\tconst changeRoomType = useMutableCallback(() => {\n\t\thandleRoomType(roomType === 'p' ? 'c' : 'p');\n\t});\n\n\tconst deleteRoom = useEndpoint('POST', '/v1/rooms.delete');\n\tconst deleteRoom = useEndpoint('POST', '/v1/rooms.delete');\n\tconst deleteTeam = useEndpoint('POST', '/v1/teams.delete');\n\tconst deleteTeam = useEndpoint('POST', '/v1/teams.delete');\n\n\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst handleDeleteTeam = async (deletedRooms: IRoom[]): Promise<void> => {\n\t\tconst handleDeleteTeam = async (deletedRooms: IRoom[]): Promise<void> => {\n\t\t\tconst roomsToRemove = Array.isArray(deletedRooms) && deletedRooms.length > 0 ? deletedRooms.map((room) => room._id) : [];\n\t\t\tconst roomsToRemove = Array.isArray(deletedRooms) && deletedRooms.length > 0 ? deletedRooms.map((room) => room._id) : [];\n\n\t\t\ttry {\n\t\t\t\tsetDeleting(true);\n\t\t\t\tsetModal(null);\n\t\t\t\tawait deleteTeam({ teamId: room.teamId as string, ...(roomsToRemove.length && { roomsToRemove }) });",
            "handleDeleteRoom": "\t\tconst handleDeleteRoom = async (): Promise<void> => {\n\t\tconst handleDeleteRoom = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tsetDeleting(true);\n\t\t\t\tsetModal(null);\n\t\t\t\tawait deleteRoom({ roomId: room._id });"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomsPage.tsx",
        "code": {
            "handleContextualbarCloseButtonClick": "\tconst handleContextualbarCloseButtonClick = (): void => {\n\tconst handleContextualbarCloseButtonClick = (): void => {\n\t\troomsRoute.push({});",
            "reloadRef": "\tconst reloadRef = useRef(() => null);\n\tconst reloadRef = useRef(() => null);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={t('Rooms')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "FilterByTypeAndText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/rooms/FilterByTypeAndText.tsx",
        "code": {
            "_types": "\t\tconst _types = Object.entries(types)\n\t\tconst _types = Object.entries(types)\n\t\t\t.filter(([, value]) => Boolean(value))\n\t\t\t.map(([key]) => key);\n\t\tsetFilter?.({ text, types: _types });",
            "idTeam": "\tconst idDirect = useUniqueId();\n\tconst idDirect = useUniqueId();\n\tconst idDPublic = useUniqueId();\n\tconst idDPublic = useUniqueId();\n\tconst idPrivate = useUniqueId();\n\tconst idPrivate = useUniqueId();\n\tconst idOmnichannel = useUniqueId();\n\tconst idOmnichannel = useUniqueId();\n\tconst idDiscussions = useUniqueId();\n\tconst idDiscussions = useUniqueId();\n\tconst idTeam = useUniqueId();\n\tconst idTeam = useUniqueId();\n\n\treturn (\n\t\t<Box mb='x16' is='form' onSubmit={useCallback((e) => e.preventDefault(), [])} display='flex' flexDirection='column' {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "EditRoomWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/rooms/EditRoomWithData.tsx",
        "code": {
            "dispatchToastMessage": "const EditRoomWithData: FC<{ rid?: string; onReload: () => void }> = ({ rid, onReload }) => {\nconst EditRoomWithData: FC<{ rid?: string; onReload: () => void }> = ({ rid, onReload }) => {\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms.getRoom');\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms.getRoom');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery(",
            "rooms": "\t\t\tconst rooms = await getAdminRooms({ rid });\n\t\t\tconst rooms = await getAdminRooms({ rid });",
            "handleDelete": "\tconst handleChange = (): void => {\n\tconst handleChange = (): void => {\n\t\trefetch();\n\t\tonReload();\n\t};\n\n\tconst handleDelete = (): void => {\n\tconst handleDelete = (): void => {\n\t\tonReload();\n\t};\n\n\treturn data ? <EditRoom room={data} onChange={handleChange} onDelete={handleDelete} /> : null;"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomsTable.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [roomFilter, setRoomFilter] = useState<RoomFilters>({ text: '', types: DEFAULT_TYPES });\n\tconst [roomFilter, setRoomFilter] = useState<RoomFilters>({ text: '', types: DEFAULT_TYPES });",
            "prevRoomFilterText": "\tconst prevRoomFilterText = useRef<RoomFilters>(roomFilter);\n\tconst prevRoomFilterText = useRef<RoomFilters>(roomFilter);\n\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 't' | 'usersCount' | 'msgs' | 'default' | 'featured'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 't' | 'usersCount' | 'msgs' | 'default' | 'featured'>('name');",
            "dispatchToastMessage": "\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms');\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, refetch, isSuccess, isLoading, isError } = useQuery(\n\tconst { data, refetch, isSuccess, isLoading, isError } = useQuery(",
            "adminRooms": "\t\t\tconst adminRooms = await getAdminRooms(query);\n\t\t\tconst adminRooms = await getAdminRooms(query);\n\n\t\t\treturn { ...adminRooms, rooms: adminRooms.rooms as IRoom[] };",
            "headers": "\tconst router = useRoute(routeName);\n\tconst router = useRoute(routeName);\n\n\tconst onClick = useCallback(\n\tconst onClick = useCallback(\n\t\t(rid) => (): void =>\n\t\t\trouter.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid: rid,\n\t\t\t}),\n\t\t[router],\n\t);\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name' w='x200'>",
            "renderRow": "\tconst renderRow = useCallback(\n\tconst renderRow = useCallback(\n\t\t(room: IRoom) => {\n\t\t\tconst { _id, t: type, usersCount, msgs, default: isDefault, featured, ...args } = room;\n\t\t\tconst { _id, t: type, usersCount, msgs, default: isDefault, featured, ...args } = room;"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserStatusRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusRoute.tsx",
        "code": {
            "handleNewButtonClick": "\tconst handleItemClick = (id: string): void => {\n\tconst handleItemClick = (id: string): void => {\n\t\troute.push({\n\t\t\tcontext: 'edit',\n\t\t\tid,\n\t\t});\n\t};\n\n\tconst handleNewButtonClick = useCallback(() => {\n\tconst handleNewButtonClick = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\troute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserStatusForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusForm.tsx",
        "code": {
            "t": "const CustomUserStatusForm = ({ onClose, onReload, status }: CustomUserStatusFormProps): ReactElement => {\nconst CustomUserStatusForm = ({ onClose, onReload, status }: CustomUserStatusFormProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, name, statusType } = status || {};\n\tconst { _id, name, statusType } = status || {};",
            "formId": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty, errors },",
            "handleSave": "\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\tasync (data) => {\n\t\t\ttry {\n\t\t\t\tawait saveStatus({ _id, name, statusType, ...data });",
            "handleDelete": "\tconst handleDeleteStatus = useCallback(() => {\n\tconst handleDeleteStatus = useCallback(() => {\n\t\tconst handleCancel = (): void => {\n\t\tconst handleCancel = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteStatus({ customUserStatusId: _id || '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserStatusFormWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusFormWithData.tsx",
        "code": {
            "query": "const CustomUserStatusFormWithData = ({ _id, onReload, onClose }: CustomUserStatusFormWithDataProps): ReactElement => {\nconst CustomUserStatusFormWithData = ({ _id, onReload, onClose }: CustomUserStatusFormWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserActiveConnections.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserActiveConnections.tsx",
        "code": {
            "result": "const CustomUserActiveConnections = () => {\nconst CustomUserActiveConnections = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst result = useActiveConnections();\n\tconst result = useActiveConnections();\n\n\tif (result.isLoading || result.isError) {\n\t\treturn <GenericResourceUsageSkeleton title={t('Active_connections')} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserStatusService.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusService.tsx",
        "code": {
            "disablePresenceService": "const CustomUserStatusService = () => {\nconst CustomUserStatusService = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst result = useActiveConnections();\n\tconst result = useActiveConnections();\n\tconst presenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst presenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst togglePresenceServiceEndpoint = useEndpoint('POST', '/v1/presence.enableBroadcast');\n\tconst togglePresenceServiceEndpoint = useEndpoint('POST', '/v1/presence.enableBroadcast');\n\tconst disablePresenceService = useMutation(() => togglePresenceServiceEndpoint());\n\tconst disablePresenceService = useMutation(() => togglePresenceServiceEndpoint());\n\tconst { data: license, isLoading: licenseIsLoading } = useIsEnterprise();\n\tconst { data: license, isLoading: licenseIsLoading } = useIsEnterprise();"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomUserStatusDisabledModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusDisabledModal.tsx",
        "code": {
            "t": "const CustomUserStatusDisabledModal = ({ isAdmin, onConfirm, onClose }: CustomUserStatusDisabledModalProps) => {\nconst CustomUserStatusDisabledModal = ({ isAdmin, onConfirm, onClose }: CustomUserStatusDisabledModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn isAdmin ? (\n\t\t<GenericModal\n\t\t\ttitle={t('User_status_disabled_learn_more')}"
        },
        "depth_rank": 7
    },
    {
        "file": "useActiveConnections.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/hooks/useActiveConnections.ts",
        "code": {
            "getConnections": "\tconst getConnections = useEndpoint('GET', '/v1/presence.getConnections');\n\tconst getConnections = useEndpoint('GET', '/v1/presence.getConnections');\n\treturn useQuery(\n\t\t['userConnections'],\n\t\tasync () => {\n\t\t\tconst { current, max } = await getConnections();\n\t\t\tconst { current, max } = await getConnections();"
        },
        "depth_rank": 8
    },
    {
        "file": "useStatusDisabledModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/hooks/useStatusDisabledModal.tsx",
        "code": {
            "handleSetModal": "\tconst isAdmin = useRole('admin');\n\tconst isAdmin = useRole('admin');\n\n\tconst handleSetModal = () => {\n\tconst handleSetModal = () => {\n\t\tsetModal(<CustomUserStatusDisabledModal isAdmin={isAdmin} onConfirm={handleGoToSettings} onClose={closeModal} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "CustomUserStatusRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusTable/CustomUserStatusRow.tsx",
        "code": {
            "CustomUserStatusRow": "const CustomUserStatusRow = ({ status, onClick }: CustomUserStatusRowProps): ReactElement => {\nconst CustomUserStatusRow = ({ status, onClick }: CustomUserStatusRowProps): ReactElement => {\n\tconst { _id, name, statusType } = status;\n\tconst { _id, name, statusType } = status;"
        },
        "depth_rank": 8
    },
    {
        "file": "CustomUserStatusTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusTable/CustomUserStatusTable.tsx",
        "code": {
            "t": "const CustomUserStatus = ({ reload, onClick }: CustomUserStatusProps): ReactElement | null => {\nconst CustomUserStatus = ({ reload, onClick }: CustomUserStatusProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, refetch, isFetched } = useQuery(\n\tconst { data, isLoading, refetch, isFetched } = useQuery("
        },
        "depth_rank": 8
    },
    {
        "file": "SaveE2EPasswordModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/e2e/SaveE2EPasswordModal.tsx",
        "code": {
            "SaveE2EPasswordModal": "const SaveE2EPasswordModal = ({\nconst SaveE2EPasswordModal = ({\n\tpasswordRevealText,\n\trandomPassword,\n\tonClose,\n\tonCancel,\n\tonConfirm,\n}: SaveE2EPasswordModalProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { copy, hasCopied } = useClipboard(randomPassword);\n\tconst { copy, hasCopied } = useClipboard(randomPassword);"
        },
        "depth_rank": 6
    },
    {
        "file": "EnterE2EPasswordModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/e2e/EnterE2EPasswordModal.tsx",
        "code": {
            "EnterE2EPasswordModal": "const EnterE2EPasswordModal = ({\nconst EnterE2EPasswordModal = ({\n\tonConfirm,\n\tonClose,\n\tonCancel,\n}: {",
            "handleConfirm": "\tconst handleConfirm = useMutableCallback((e): void => {\n\tconst handleConfirm = useMutableCallback((e): void => {\n\t\te.preventDefault();\n\t\tif (password === '') {\n\t\t\tsetPasswordError(t('Invalid_pass'));\n\t\t\treturn;\n\t\t}\n\n\t\treturn onConfirm(password);\n\t});\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={handleConfirm} {...props} />}"
        },
        "depth_rank": 6
    },
    {
        "file": "OutlookEventsRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsRoute.tsx",
        "code": {
            "closeTabBar": "const CALENDAR_ROUTES: { [key: string]: OutlookCalendarRoutes } = {\nconst CALENDAR_ROUTES: { [key: string]: OutlookCalendarRoutes } = {\n\tLIST: 'list',\n\tSETTINGS: 'settings',\n};\n\nconst OutlookEventsRoute = () => {\nconst OutlookEventsRoute = () => {\n\tconst closeTabBar = useTabBarClose();\n\tconst closeTabBar = useTabBarClose();\n\tconst [calendarRoute, setCalendarRoute] = useState<OutlookCalendarRoutes>('list');\n\tconst [calendarRoute, setCalendarRoute] = useState<OutlookCalendarRoutes>('list');\n\n\tif (calendarRoute === CALENDAR_ROUTES.SETTINGS) {\n\t\treturn <OutlookSettingsList onClose={closeTabBar} changeRoute={() => setCalendarRoute(CALENDAR_ROUTES.LIST)} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "OutlookCalendarEventModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookCalendarEventModal.tsx",
        "code": {
            "event": "\t\t\tconst event = { event: { subject, meetingUrl, description } };\n\t\t\tconst event = { event: { subject, meetingUrl, description } };",
            "openCall": "\tconst openCall = useOutlookOpenCall(data?.event.meetingUrl);\n\tconst openCall = useOutlookOpenCall(data?.event.meetingUrl);\n\n\tif (isLoading) {\n\t\treturn <GenericModalSkeleton {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "useOutlookCalendarList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/hooks/useOutlookCalendarList.ts",
        "code": {
            "syncMutation": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst checkOutlookCredentials = useOutlookAuthenticationMutation();\n\tconst checkOutlookCredentials = useOutlookAuthenticationMutation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst syncMutation = useMutation({\n\tconst syncMutation = useMutation({\n\t\tmutationFn: async () => {\n\t\t\tawait syncOutlookEvents();\n\n\t\t\tawait queryClient.invalidateQueries(['outlook', 'calendar', 'list']);\n\n\t\t\tawait checkOutlookCredentials.mutateAsync();\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Outlook_Sync_Success') });"
        },
        "depth_rank": 7
    },
    {
        "file": "useOutlookOpenCall.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/hooks/useOutlookOpenCall.ts",
        "code": {
            "userDisplayName": "\tconst user = useUser();\n\tconst user = useUser();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });"
        },
        "depth_rank": 7
    },
    {
        "file": "OutlookEventItemContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventItemContent.tsx",
        "code": {
            "sanitize": "const OutlookEventItemContent = ({ html, options }: SanitizeProps) => {\nconst OutlookEventItemContent = ({ html, options }: SanitizeProps) => {\n\tconst defaultOptions = {\n\tconst defaultOptions = {\n\t\tALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'br'],\n\t\tALLOWED_ATTR: ['href'],\n\t};\n\n\tconst sanitize = (dirtyHTML: SanitizeProps['html'], options: SanitizeProps['options']) => ({\n\tconst sanitize = (dirtyHTML: SanitizeProps['html'], options: SanitizeProps['options']) => ({\n\t\t__html: DOMPurify.sanitize(dirtyHTML, { ...defaultOptions, ...options }).toString(),"
        },
        "depth_rank": 7
    },
    {
        "file": "OutlookEventsList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventsList.tsx",
        "code": {
            "outlookUrl": "const OutlookEventsList = ({ onClose, changeRoute }: OutlookEventsListProps): ReactElement => {\nconst OutlookEventsList = ({ onClose, changeRoute }: OutlookEventsListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst outlookUrl = useSetting<string>('Outlook_Calendar_Outlook_Url');\n\tconst outlookUrl = useSetting<string>('Outlook_Calendar_Outlook_Url');\n\tconst { authEnabled, isError, error } = useOutlookAuthentication();\n\tconst { authEnabled, isError, error } = useOutlookAuthentication();",
            "total": "\tconst syncOutlookCalendar = useMutationOutlookCalendarSync();\n\tconst syncOutlookCalendar = useMutationOutlookCalendarSync();\n\n\tconst calendarListResult = useOutlookCalendarListForToday();\n\tconst calendarListResult = useOutlookCalendarListForToday();\n\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\tif (calendarListResult.isLoading) {\n\t\treturn <ContextualbarSkeleton />;\n\t}\n\n\tconst calendarEvents = calendarListResult.data;\n\tconst calendarEvents = calendarListResult.data;\n\tconst total = calendarEvents?.length || 0;\n\tconst total = calendarEvents?.length || 0;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='calendar' />\n\t\t\t\t<ContextualbarTitle>{t('Outlook_calendar')}</ContextualbarTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "OutlookEventItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventItem.tsx",
        "code": {
            "handleOpenEvent": "\tconst handleOpenEvent = () => {\n\tconst handleOpenEvent = () => {\n\t\tsetModal(\n\t\t\t<OutlookCalendarEventModal\n\t\t\t\tonClose={() => setModal(null)}"
        },
        "depth_rank": 7
    },
    {
        "file": "OutlookSettingsList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookSettingsList/OutlookSettingsList.tsx",
        "code": {
            "notifyCalendarEvents": "const OutlookSettingsList = ({ onClose, changeRoute }: OutlookSettingsListProps): ReactElement => {\nconst OutlookSettingsList = ({ onClose, changeRoute }: OutlookSettingsListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst notifyCalendarEvents = useUserPreference('notifyCalendarEvents') as boolean;\n\tconst notifyCalendarEvents = useUserPreference('notifyCalendarEvents') as boolean;\n\tconst { authEnabled } = useOutlookAuthentication();\n\tconst { authEnabled } = useOutlookAuthentication();",
            "handleNotifyCalendarEvents": "\tconst handleDisableAuth = useOutlookAuthenticationMutationLogout();\n\tconst handleDisableAuth = useOutlookAuthenticationMutationLogout();\n\n\tconst handleNotifyCalendarEvents = useCallback(\n\tconst handleNotifyCalendarEvents = useCallback(\n\t\t(value: boolean) => {\n\t\t\ttry {\n\t\t\t\tsaveUserPreferences({ data: { notifyCalendarEvents: value } });",
            "calendarSettings": "\tconst calendarSettings = [\n\tconst calendarSettings = [\n\t\t{\n\t\t\tid: 'notification',\n\t\t\ttitle: t('Event_notifications'),\n\t\t\tsubTitle: t('Event_notifications_description'),\n\t\t\tenabled: notifyCalendarEvents,\n\t\t\thandleEnable: handleNotifyCalendarEvents,\n\t\t},\n\t\t{\n\t\t\tid: 'authentication',\n\t\t\ttitle: t('Outlook_authentication'),\n\t\t\tsubTitle: t('Outlook_authentication_description'),\n\t\t\tenabled: authEnabled,\n\t\t\thandleEnable: () =>\n\t\t\t\thandleDisableAuth.mutate(undefined, {\n\t\t\t\t\tonSuccess: changeRoute,\n\t\t\t\t}),\n\t\t},\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='calendar' />\n\t\t\t\t<ContextualbarTitle>{t('Outlook_calendar_settings')}</ContextualbarTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountSidebar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/AccountSidebar.tsx",
        "code": {
            "items": "const AccountSidebar: FC = () => {\nconst AccountSidebar: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst items = useSyncExternalStore(subscribeToAccountSidebarItems, getAccountSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToAccountSidebarItems, getAccountSidebarItems);\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\t// TODO: uplift this provider\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Account')} />"
        },
        "depth_rank": 6
    },
    {
        "file": "PreferencesSoundSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesSoundSection.tsx",
        "code": {
            "useCustomSoundsOptions": "const useCustomSoundsOptions = (): SelectOption[] => useMemo(() => CustomSounds?.getList?.().map(({ _id, name }) => [_id, name]), []);\nconst useCustomSoundsOptions = (): SelectOption[] => useMemo(() => CustomSounds?.getList?.().map(({ _id, name }) => [_id, name]), []);",
            "settings": "const PreferencesSoundSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesSoundSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst soundsList = useCustomSoundsOptions();\n\tconst soundsList = useCustomSoundsOptions();\n\n\tconst settings = {\n\tconst settings = {\n\t\tnewRoomNotification: useUserPreference('newRoomNotification'),\n\t\tnewMessageNotification: useUserPreference('newMessageNotification'),\n\t\tmuteFocusedConversations: useUserPreference('muteFocusedConversations'),\n\t\tnotificationsSoundVolume: useUserPreference('notificationsSoundVolume'),\n\t};\n\n\tconst { values, handlers, commit } = useForm(settings, onChange);\n\tconst { values, handlers, commit } = useForm(settings, onChange);",
            "onChangeNewRoomNotification": "\tconst onChangeNewRoomNotification = useCallback(\n\tconst onChangeNewRoomNotification = useCallback(\n\t\t(value) => {\n\t\t\thandleNewRoomNotification(value);\n\t\t\tCustomSounds.play(value, { volume: notificationsSoundVolume / 100 });",
            "onChangeNewMessageNotification": "\tconst onChangeNewMessageNotification = useCallback(\n\tconst onChangeNewMessageNotification = useCallback(\n\t\t(value) => {\n\t\t\thandleNewMessageNotification(value);\n\t\t\tCustomSounds.play(value, { volume: notificationsSoundVolume / 100 });",
            "onChangeNotificationsSoundVolume": "\tconst onChangeNotificationsSoundVolume = useCallback(\n\tconst onChangeNotificationsSoundVolume = useCallback(\n\t\t(e) => {\n\t\t\tCustomSounds.play(newMessageNotification, { volume: e.currentTarget.value / 100 });"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesLocalizationSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesLocalizationSection.tsx",
        "code": {
            "PreferencesLocalizationSection": "const PreferencesLocalizationSection = ({\nconst PreferencesLocalizationSection = ({\n\tonChange,\n\tcommitRef,\n\t...props\n}: { defaultExpanded?: boolean } & FormSectionProps): ReactElement => {",
            "languageOptions": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst userLanguage = useUserPreference('language') || '';\n\tconst userLanguage = useUserPreference('language') || '';\n\tconst languages = useLanguages();\n\tconst languages = useLanguages();\n\n\tconst languageOptions = useMemo(() => {\n\tconst languageOptions = useMemo(() => {\n\t\tconst mapOptions: SelectOption[] = languages.map(({ key, name }) => [key, name]);\n\t\tconst mapOptions: SelectOption[] = languages.map(({ key, name }) => [key, name]);"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountPreferencesPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/AccountPreferencesPage.tsx",
        "code": {
            "saveData": "const AccountPreferencesPage = (): ReactElement => {\nconst AccountPreferencesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [hasAnyChange, setHasAnyChange] = useState(false);\n\tconst [hasAnyChange, setHasAnyChange] = useState(false);\n\n\tconst saveData = useRef<Partial<CurrentData>>({});\n\tconst saveData = useRef<Partial<CurrentData>>({});",
            "commitRef": "\tconst commitRef = useRef({});\n\tconst commitRef = useRef({});",
            "onChange": "\tconst dataDownloadEnabled = useSetting('UserData_EnableDownload');\n\tconst dataDownloadEnabled = useSetting('UserData_EnableDownload');\n\n\tconst onChange = useCallback(\n\tconst onChange = useCallback(\n\t\t<K extends keyof CurrentData, I extends CurrentData[K], V extends CurrentData[K]>({\n\t\t\tinitialValue,\n\t\t\tvalue,\n\t\t\tkey,\n\t\t}: {",
            "handleSave": "\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { current: data } = saveData;\n\t\t\tconst { current: data } = saveData;",
            "list": "\t\t\t\tconst list =\n\t\t\t\tconst list =\n\t\t\t\t\tArray.isArray(data.dontAskAgainList) && data.dontAskAgainList.length > 0\n\t\t\t\t\t\t? data.dontAskAgainList.map(([action, label]) => ({ action, label }))"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesNotificationsSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesNotificationsSection.tsx",
        "code": {
            "showCalendarPreference": "const notificationOptionsLabelMap = {\nconst notificationOptionsLabelMap = {\n\tall: 'All_messages',\n\tmentions: 'Mentions',\n\tnothing: 'Nothing',\n};\n\nconst emailNotificationOptionsLabelMap = {\nconst emailNotificationOptionsLabelMap = {\n\tmentions: 'Email_Notification_Mode_All',\n\tnothing: 'Email_Notification_Mode_Disabled',\n};\n\nconst PreferencesNotificationsSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesNotificationsSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [notificationsPermission, setNotificationsPermission] = useState<NotificationPermission>();\n\tconst [notificationsPermission, setNotificationsPermission] = useState<NotificationPermission>();\n\n\tconst userDesktopNotificationRequireInteraction = useUserPreference('desktopNotificationRequireInteraction');\n\tconst userDesktopNotificationRequireInteraction = useUserPreference('desktopNotificationRequireInteraction');\n\tconst userDesktopNotifications = useUserPreference('desktopNotifications');\n\tconst userDesktopNotifications = useUserPreference('desktopNotifications');\n\tconst userMobileNotifications = useUserPreference('pushNotifications');\n\tconst userMobileNotifications = useUserPreference('pushNotifications');\n\tconst userEmailNotificationMode = useUserPreference('emailNotificationMode') as keyof typeof emailNotificationOptionsLabelMap;\n\tconst userEmailNotificationMode = useUserPreference('emailNotificationMode') as keyof typeof emailNotificationOptionsLabelMap;\n\tconst userReceiveLoginDetectionEmail = useUserPreference('receiveLoginDetectionEmail');\n\tconst userReceiveLoginDetectionEmail = useUserPreference('receiveLoginDetectionEmail');\n\tconst userNotifyCalendarEvents = useUserPreference('notifyCalendarEvents');\n\tconst userNotifyCalendarEvents = useUserPreference('notifyCalendarEvents');\n\n\tconst defaultDesktopNotifications = useSetting(\n\tconst defaultDesktopNotifications = useSetting(\n\t\t'Accounts_Default_User_Preferences_desktopNotifications',\n\t) as keyof typeof notificationOptionsLabelMap;\n\tconst defaultMobileNotifications = useSetting(\n\tconst defaultMobileNotifications = useSetting(\n\t\t'Accounts_Default_User_Preferences_pushNotifications',\n\t) as keyof typeof notificationOptionsLabelMap;\n\tconst canChangeEmailNotification = useSetting('Accounts_AllowEmailNotifications');\n\tconst canChangeEmailNotification = useSetting('Accounts_AllowEmailNotifications');\n\n\tconst loginEmailEnabled = useSetting('Device_Management_Enable_Login_Emails');\n\tconst loginEmailEnabled = useSetting('Device_Management_Enable_Login_Emails');\n\tconst allowLoginEmailPreference = useSetting('Device_Management_Allow_Login_Email_preference');\n\tconst allowLoginEmailPreference = useSetting('Device_Management_Allow_Login_Email_preference');\n\tconst showNewLoginEmailPreference = loginEmailEnabled && allowLoginEmailPreference;\n\tconst showNewLoginEmailPreference = loginEmailEnabled && allowLoginEmailPreference;\n\tconst showCalendarPreference = useSetting('Outlook_Calendar_Enabled');\n\tconst showCalendarPreference = useSetting('Outlook_Calendar_Enabled');\n\n\tconst { values, handlers, commit } = useForm(\n\tconst { values, handlers, commit } = useForm(",
            "onSendNotification": "\tconst {\n\tconst {\n\t\thandleDesktopNotificationRequireInteraction,\n\t\thandleDesktopNotifications,\n\t\thandlePushNotifications,\n\t\thandleEmailNotificationMode,\n\t\thandleReceiveLoginDetectionEmail,\n\t\thandleNotifyCalendarEvents,\n\t} = handlers;\n\n\tuseEffect(() => setNotificationsPermission(window.Notification && Notification.permission), []);\n\n\tcommitRef.current.notifications = commit;\n\n\tconst onSendNotification = useCallback(() => {\n\tconst onSendNotification = useCallback(() => {\n\t\tKonchatNotification.notify({\n\t\t\tpayload: { sender: { _id: 'rocket.cat', username: 'rocket.cat' } },"
        },
        "depth_rank": 7
    },
    {
        "file": "MyDataModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/MyDataModal.tsx",
        "code": {
            "t": "const MyDataModal: FC<MyDataModalProps> = ({ onCancel, title, text, ...props }) => {\nconst MyDataModal: FC<MyDataModalProps> = ({ onCancel, title, text, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesUserPresenceSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesUserPresenceSection.tsx",
        "code": {
            "userIdleTimeLimit": "const PreferencesUserPresenceSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesUserPresenceSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst userEnableAutoAway = useUserPreference('enableAutoAway');\n\tconst userEnableAutoAway = useUserPreference('enableAutoAway');\n\tconst userIdleTimeLimit = useUserPreference('idleTimeLimit');\n\tconst userIdleTimeLimit = useUserPreference('idleTimeLimit');\n\n\tconst { values, handlers, commit } = useForm(\n\tconst { values, handlers, commit } = useForm(",
            "onChangeIdleTimeLimit": "\tconst onChangeIdleTimeLimit = useCallback((e) => handleIdleTimeLimit(Number(e.currentTarget.value)), [handleIdleTimeLimit]);\n\tconst onChangeIdleTimeLimit = useCallback((e) => handleIdleTimeLimit(Number(e.currentTarget.value)), [handleIdleTimeLimit]);\n\n\treturn (\n\t\t<Accordion.Item title={t('User_Presence')} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesGlobalSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesGlobalSection.tsx",
        "code": {
            "userDontAskAgainList": "const PreferencesGlobalSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesGlobalSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList');\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList');",
            "options": "\tconst themePreference = useUserPreference<'light' | 'dark' | 'auto'>('themeAppearence');\n\tconst themePreference = useUserPreference<'light' | 'dark' | 'auto'>('themeAppearence');\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => (userDontAskAgainList || []).map(({ action, label }) => [action, label]) as SelectOption[],",
            "selectedOptions": "\tconst selectedOptions = options.map(([action]) => action);\n\tconst selectedOptions = options.map(([action]) => action);\n\n\tconst { values, handlers, commit } = useForm(\n\tconst { values, handlers, commit } = useForm("
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesMyDataSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesMyDataSection.tsx",
        "code": {
            "result": "const PreferencesMyDataSection = ({ ...props }): ReactElement => {\nconst PreferencesMyDataSection = ({ ...props }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst requestDataDownload = useMethod('requestDataDownload');\n\tconst requestDataDownload = useMethod('requestDataDownload');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\n\tconst downloadData = useCallback(\n\tconst downloadData = useCallback(\n\t\tasync (fullExport) => {\n\t\t\ttry {\n\t\t\t\tconst result = await requestDataDownload({ fullExport });\n\t\t\t\tconst result = await requestDataDownload({ fullExport });",
            "text": "\t\t\t\t\tconst text = t('UserDataDownload_RequestExisted_Text', {\n\t\t\t\t\tconst text = t('UserDataDownload_RequestExisted_Text', {\n\t\t\t\t\t\tpending_operations: result.pendingOperationsBeforeMyRequest,\n\t\t\t\t\t});\n\t\t\t\t\tsetModal(\n\t\t\t\t\t\t<MyDataModal\n\t\t\t\t\t\t\ttitle={t('UserDataDownload_Requested')}",
            "handleClickExport": "\tconst handleClickDownload = useCallback(() => downloadData(false), [downloadData]);\n\tconst handleClickDownload = useCallback(() => downloadData(false), [downloadData]);\n\tconst handleClickExport = useCallback(() => downloadData(true), [downloadData]);\n\tconst handleClickExport = useCallback(() => downloadData(true), [downloadData]);\n\n\treturn (\n\t\t<Accordion.Item title={t('My Data')} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesMessagesSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesMessagesSection.tsx",
        "code": {
            "settings": "const PreferencesMessagesSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesMessagesSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst showRoles = useSetting('UI_DisplayRoles');\n\tconst showRoles = useSetting('UI_DisplayRoles');\n\n\tconst settings = {\n\tconst settings = {\n\t\tunreadAlert: useUserPreference('unreadAlert'),\n\t\tshowThreadsInMainChannel: useUserPreference('showThreadsInMainChannel'),\n\t\talsoSendThreadToChannel: useUserPreference('alsoSendThreadToChannel'),\n\t\tuseEmojis: useUserPreference('useEmojis'),\n\t\tconvertAsciiEmoji: useUserPreference('convertAsciiEmoji'),\n\t\tautoImageLoad: useUserPreference('autoImageLoad'),\n\t\tsaveMobileBandwidth: useUserPreference('saveMobileBandwidth'),\n\t\tcollapseMediaByDefault: useUserPreference('collapseMediaByDefault'),\n\t\thideUsernames: useUserPreference('hideUsernames'),\n\t\thideRoles: useUserPreference('hideRoles'),\n\t\thideFlexTab: useUserPreference('hideFlexTab'),\n\t\tclockMode: useUserPreference('clockMode') ?? 0,\n\t\tsendOnEnter: useUserPreference('sendOnEnter'),\n\t\tdisplayAvatars: useUserPreference('displayAvatars'),\n\t};\n\n\tconst { values, handlers, commit } = useForm(settings, onChange);\n\tconst { values, handlers, commit } = useForm(settings, onChange);",
            "sendOnEnterOptions": "\tconst {\n\tconst {\n\t\tunreadAlert,\n\t\tshowThreadsInMainChannel,\n\t\talsoSendThreadToChannel,\n\t\tuseEmojis,\n\t\tconvertAsciiEmoji,\n\t\tautoImageLoad,\n\t\tsaveMobileBandwidth,\n\t\tcollapseMediaByDefault,\n\t\thideUsernames,\n\t\thideRoles,\n\t\thideFlexTab,\n\t\tdisplayAvatars,\n\t\tclockMode,\n\t\tsendOnEnter,\n\t} = values as Values;\n\n\tconst {\n\tconst {\n\t\thandleUnreadAlert,\n\t\thandleShowThreadsInMainChannel,\n\t\thandleAlsoSendThreadToChannel,\n\t\thandleUseEmojis,\n\t\thandleConvertAsciiEmoji,\n\t\thandleAutoImageLoad,\n\t\thandleSaveMobileBandwidth,\n\t\thandleCollapseMediaByDefault,\n\t\thandleHideUsernames,\n\t\thandleHideRoles,\n\t\thandleHideFlexTab,\n\t\thandleDisplayAvatars,\n\t\thandleClockMode,\n\t\thandleSendOnEnter,\n\t} = handlers;\n\n\tconst alsoSendThreadMessageToChannelOptions = useMemo(\n\tconst alsoSendThreadMessageToChannelOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['default', t('Selected_first_reply_unselected_following_replies')],\n\t\t\t['always', t('Selected_by_default')],\n\t\t\t['never', t('Unselected_by_default')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst timeFormatOptions = useMemo(\n\tconst timeFormatOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['0', t('Default')], // TO DO: update SelectOption type to accept number as first item\n\t\t\t['1', t('12_Hour')],\n\t\t\t['2', t('24_Hour')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst sendOnEnterOptions = useMemo(\n\tconst sendOnEnterOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['normal', t('Enter_Normal')],\n\t\t\t['alternative', t('Enter_Alternative')],\n\t\t\t['desktop', t('Only_On_Desktop')],\n\t\t],\n\t\t[t],\n\t);\n\n\tcommitRef.current.messages = commit;\n\n\treturn (\n\t\t<Accordion.Item title={t('Messages')} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "PreferencesHighlightsSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesHighlightsSection.tsx",
        "code": {
            "userHighlights": "const PreferencesHighlightsSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\nconst PreferencesHighlightsSection = ({ onChange, commitRef, ...props }: FormSectionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst userHighlights = useUserPreference<string[]>('highlights')?.join(',\\n') ?? '';\n\tconst userHighlights = useUserPreference<string[]>('highlights')?.join(',\\n') ?? '';\n\n\tconst { values, handlers, commit } = useForm({ highlights: userHighlights }, onChange);\n\tconst { values, handlers, commit } = useForm({ highlights: userHighlights }, onChange);"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountProfilePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/profile/AccountProfilePage.tsx",
        "code": {
            "getInitialValues": "const getInitialValues = (user: IUser | null): AccountFormValues => ({\nconst getInitialValues = (user: IUser | null): AccountFormValues => ({\n\trealname: user?.name ?? '',\n\temail: user ? getUserEmailAddress(user) || '' : '',\n\tusername: user?.username ?? '',\n\tpassword: '',\n\tconfirmationPassword: '',\n\tavatar: '' as AvatarObject,\n\turl: '',\n\tstatusText: user?.statusText ?? '',\n\tstatusType: user?.status ?? '',\n\tbio: user?.bio ?? '',\n\tcustomFields: user?.customFields ?? {},",
            "user": "const AccountProfilePage = (): ReactElement => {\nconst AccountProfilePage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst user = useUser();\n\tconst user = useUser();\n\n\tconst { values, handlers, hasUnsavedChanges, commit, reset } = useForm(getInitialValues(user));\n\tconst { values, handlers, hasUnsavedChanges, commit, reset } = useForm(getInitialValues(user));",
            "avatarResult": "\t\t\t\tconst avatarResult = await updateAvatar();\n\t\t\t\tconst avatarResult = await updateAvatar();\n\t\t\t\tif (avatarResult) {\n\t\t\t\t\thandleAvatar('');\n\t\t\t\t}\n\t\t\t\tcommit();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Profile_saved_successfully') });",
            "handleLogoutOtherLocations": "\tconst handleLogoutOtherLocations = useCallback(async () => {\n\tconst handleLogoutOtherLocations = useCallback(async () => {\n\t\tsetLoggingOut(true);\n\t\ttry {\n\t\t\tawait logoutOtherClients();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Logged_out_of_other_clients_successfully'),\n\t\t\t});\n\t\t} catch (error: unknown) {",
            "handleConfirm": "\tconst handleDeleteOwnAccount = useCallback(async () => {\n\tconst handleDeleteOwnAccount = useCallback(async () => {\n\t\tconst handleConfirm = async (passwordOrUsername: string): Promise<void> => {\n\t\tconst handleConfirm = async (passwordOrUsername: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteOwnAccount(SHA256(passwordOrUsername));\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('User_has_been_deleted') });"
        },
        "depth_rank": 7
    },
    {
        "file": "ActionConfirmModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/profile/ActionConfirmModal.tsx",
        "code": {
            "handleSave": "\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\t(e) => {\n\t\t\te.preventDefault();\n\t\t\tif (inputText === '') {\n\t\t\t\tsetInputError(t('Invalid_field'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonConfirm(inputText);\n\t\t\tonCancel();\n\t\t},\n\t\t[inputText, onConfirm, onCancel, t],\n\t);\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={handleSave} {...props} />}"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountProfileForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/profile/AccountProfileForm.tsx",
        "code": {
            "passwordVerifications": "\tconst passwordVerifications = useVerifyPassword(password);\n\tconst passwordVerifications = useVerifyPassword(password);\n\n\tconst {\n\tconst {\n\t\thandleRealname,\n\t\thandleEmail,\n\t\thandleUsername,\n\t\thandlePassword,\n\t\thandleConfirmationPassword,\n\t\thandleAvatar,\n\t\thandleStatusText,\n\t\thandleStatusType,\n\t\thandleBio,\n\t\thandleNickname,\n\t\thandleCustomFields,\n\t} = handlers;\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\twatch,\n\t\tformState: { errors: customFieldsErrors },",
            "isAvailable": "\t\t\tconst isAvailable = await checkUsernameAvailability({ username });\n\t\t\tconst isAvailable = await checkUsernameAvailability({ username });",
            "subscription": "\t\tconst subscription = watch((value) => handleCustomFields({ ...value.customFields }));\n\t\tconst subscription = watch((value) => handleCustomFields({ ...value.customFields }));",
            "getSuggestions": "\t\tconst getSuggestions = async (): Promise<void> => {\n\t\tconst getSuggestions = async (): Promise<void> => {\n\t\t\tconst { suggestions } = await getAvatarSuggestions();\n\t\t\tconst { suggestions } = await getAvatarSuggestions();",
            "handleSubmit": "\tconst handleSubmit = useCallback((e) => {\n\tconst handleSubmit = useCallback((e) => {\n\t\te.preventDefault();\n\t}, []);\n\n\treturn (\n\t\t<FieldGroup is='form' autoComplete='off' onSubmit={handleSubmit} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "EndToEnd.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/security/EndToEnd.tsx",
        "code": {
            "resetE2eKey": "const EndToEnd = (props: ComponentProps<typeof Box>): ReactElement => {\nconst EndToEnd = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst logout = useLogout();\n\tconst logout = useLogout();\n\n\tconst publicKey = localStorage.getItem('public_key');\n\tconst publicKey = localStorage.getItem('public_key');\n\tconst privateKey = localStorage.getItem('private_key');\n\tconst privateKey = localStorage.getItem('private_key');\n\n\tconst resetE2eKey = useMethod('e2e.resetOwnE2EKey');\n\tconst resetE2eKey = useMethod('e2e.resetOwnE2EKey');\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\twatch,\n\t\tresetField,\n\t\tformState: { errors, isValid },",
            "saveNewPassword": "\tconst keysExist = Boolean(publicKey && privateKey);\n\tconst keysExist = Boolean(publicKey && privateKey);\n\n\tconst hasTypedPassword = Boolean(password?.trim().length);\n\tconst hasTypedPassword = Boolean(password?.trim().length);\n\n\tconst saveNewPassword = async (data: { password: string; passwordConfirm: string }) => {\n\tconst saveNewPassword = async (data: { password: string; passwordConfirm: string }) => {\n\t\ttry {\n\t\t\tawait e2e.changePassword(data.password);\n\t\t\tresetField('password');\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Encryption_key_saved_successfully') });",
            "result": "\tconst handleResetE2eKey = useCallback(async () => {\n\tconst handleResetE2eKey = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await resetE2eKey();\n\t\t\tconst result = await resetE2eKey();\n\t\t\tif (result) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('User_e2e_key_was_reset') });"
        },
        "depth_rank": 7
    },
    {
        "file": "BackupCodesModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/security/BackupCodesModal.tsx",
        "code": {
            "codesText": "const BackupCodesModal: FC<BackupCodesModalProps> = ({ codes, onClose, ...props }) => {\nconst BackupCodesModal: FC<BackupCodesModalProps> = ({ codes, onClose, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst codesText = useMemo(() => codes.join(' '), [codes]);\n\tconst codesText = useMemo(() => codes.join(' '), [codes]);\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "TwoFactorTOTP.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/security/TwoFactorTOTP.tsx",
        "code": {
            "regenerateCodesFn": "const TwoFactorTOTP = (props: ComponentProps<typeof Box>): ReactElement => {\nconst TwoFactorTOTP = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst logoutOtherSessions = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\tconst logoutOtherSessions = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\tconst enableTotpFn = useMethod('2fa:enable');\n\tconst enableTotpFn = useMethod('2fa:enable');\n\tconst disableTotpFn = useMethod('2fa:disable');\n\tconst disableTotpFn = useMethod('2fa:disable');\n\tconst verifyCodeFn = useMethod('2fa:validateTempToken');\n\tconst verifyCodeFn = useMethod('2fa:validateTempToken');\n\tconst checkCodesRemainingFn = useMethod('2fa:checkCodesRemaining');\n\tconst checkCodesRemainingFn = useMethod('2fa:checkCodesRemaining');\n\tconst regenerateCodesFn = useMethod('2fa:regenerateCodes');\n\tconst regenerateCodesFn = useMethod('2fa:regenerateCodes');\n\n\tconst [registeringTotp, setRegisteringTotp] = useSafely(useState(false));\n\tconst [registeringTotp, setRegisteringTotp] = useSafely(useState(false));\n\tconst [qrCode, setQrCode] = useSafely(useState<string>());\n\tconst [qrCode, setQrCode] = useSafely(useState<string>());\n\tconst [totpSecret, setTotpSecret] = useSafely(useState<string>());\n\tconst [totpSecret, setTotpSecret] = useSafely(useState<string>());\n\tconst [codesRemaining, setCodesRemaining] = useSafely(useState(0));\n\tconst [codesRemaining, setCodesRemaining] = useSafely(useState(0));\n\n\tconst { register, handleSubmit } = useForm({ defaultValues: { authCode: '' } });\n\tconst { register, handleSubmit } = useForm({ defaultValues: { authCode: '' } });",
            "result": "\t\t\tconst result = await checkCodesRemainingFn();\n\t\t\tconst result = await checkCodesRemainingFn();\n\t\t\tsetCodesRemaining(result.remaining);\n\t\t};\n\t\tupdateCodesRemaining();\n\t}, [checkCodesRemainingFn, setCodesRemaining, totpEnabled]);\n\n\tconst handleEnableTotp = useCallback(async () => {\n\tconst handleEnableTotp = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await enableTotpFn();\n\t\t\tconst result = await enableTotpFn();\n\n\t\t\tsetTotpSecret(result.secret);\n\t\t\tsetQrCode(qrcode(result.url, { size: 200 }));"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountTokensPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensPage.tsx",
        "code": {
            "t": "const AccountTokensPage = (): ReactElement => {\nconst AccountTokensPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Personal_Access_Tokens')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountTokensTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensTable/AccountTokensTable.tsx",
        "code": {
            "removeToken": "const AccountTokensTable = (): ReactElement => {\nconst AccountTokensTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\n\tconst regenerateToken = useMethod('personalAccessTokens:regenerateToken');\n\tconst regenerateToken = useMethod('personalAccessTokens:regenerateToken');\n\tconst removeToken = useMethod('personalAccessTokens:removeToken');\n\tconst removeToken = useMethod('personalAccessTokens:removeToken');\n\tconst { value: data, phase, error, reload } = useEndpointData('/v1/users.getPersonalAccessTokens');\n\tconst { value: data, phase, error, reload } = useEndpointData('/v1/users.getPersonalAccessTokens');",
            "headers": "\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name'>{t('API_Personal_Access_Token_Name')}</GenericTableHeaderCell>,",
            "token": "\tconst handleRegenerate = useCallback(\n\tconst handleRegenerate = useCallback(\n\t\t(name) => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tsetModal(null);\n\t\t\t\t\tconst token = await regenerateToken({ tokenName: name });\n\t\t\t\t\tconst token = await regenerateToken({ tokenName: name });",
            "handleRemove": "\tconst handleRemove = useCallback(\n\tconst handleRemove = useCallback(\n\t\t(name) => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait removeToken({ tokenName: name });"
        },
        "depth_rank": 8
    },
    {
        "file": "AddToken.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensTable/AddToken.tsx",
        "code": {
            "initialValues": "const AddToken = ({ reload, ...props }: { reload: () => void }): ReactElement => {\nconst AddToken = ({ reload, ...props }: { reload: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst createTokenFn = useMethod('personalAccessTokens:generateToken');\n\tconst createTokenFn = useMethod('personalAccessTokens:generateToken');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst bypassTwoFactorCheckboxId = useUniqueId();\n\tconst bypassTwoFactorCheckboxId = useUniqueId();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst initialValues = useMemo(() => ({ name: '', bypassTwoFactor: false }), []);\n\tconst initialValues = useMemo(() => ({ name: '', bypassTwoFactor: false }), []);",
            "token": "\tconst handleAddToken = useCallback(\n\tconst handleAddToken = useCallback(\n\t\tasync ({ name: tokenName, bypassTwoFactor }: typeof initialValues) => {\n\t\t\ttry {\n\t\t\t\tconst token = await createTokenFn({ tokenName, bypassTwoFactor });\n\t\t\t\tconst token = await createTokenFn({ tokenName, bypassTwoFactor });"
        },
        "depth_rank": 8
    },
    {
        "file": "OmnichannelPreferencesPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/omnichannel/OmnichannelPreferencesPage.tsx",
        "code": {
            "omnichannelTranscriptEmail": "const OmnichannelPreferencesPage = (): ReactElement => {\nconst OmnichannelPreferencesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst omnichannelTranscriptPDF = useUserPreference<boolean>('omnichannelTranscriptPDF') ?? false;\n\tconst omnichannelTranscriptPDF = useUserPreference<boolean>('omnichannelTranscriptPDF') ?? false;\n\tconst omnichannelTranscriptEmail = useUserPreference<boolean>('omnichannelTranscriptEmail') ?? false;\n\tconst omnichannelTranscriptEmail = useUserPreference<boolean>('omnichannelTranscriptEmail') ?? false;\n\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tregister,\n\t\tformState: { isDirty },",
            "handleSave": "\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst handleSave = async (data: CurrentData) => {\n\tconst handleSave = async (data: CurrentData) => {\n\t\ttry {\n\t\t\tawait saveFn({ data });"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountIntegrationsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/integrations/AccountIntegrationsPage.tsx",
        "code": {
            "t": "const getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\nconst getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\n\nconst AccountIntegrationsPage = (): ReactElement => {\nconst AccountIntegrationsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { handleSubmit, control } = useForm();\n\tconst { handleSubmit, control } = useForm();",
            "removeWebdavAccount": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst accounts = useReactiveValue(getWebdavAccounts);\n\tconst accounts = useReactiveValue(getWebdavAccounts);\n\tconst removeWebdavAccount = useEndpoint('POST', '/v1/webdav.removeWebdavAccount');\n\tconst removeWebdavAccount = useEndpoint('POST', '/v1/webdav.removeWebdavAccount');\n\n\tconst options: SelectOption[] = useMemo(() => accounts?.map(({ _id, ...current }) => [_id, getWebdavServerName(current)]), [accounts]);\n\tconst options: SelectOption[] = useMemo(() => accounts?.map(({ _id, ...current }) => [_id, getWebdavServerName(current)]), [accounts]);",
            "handleClickRemove": "\tconst handleClickRemove = useMutableCallback(({ accountSelected }) => {\n\tconst handleClickRemove = useMutableCallback(({ accountSelected }) => {\n\t\ttry {\n\t\t\tremoveWebdavAccount({ accountId: accountSelected });"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountFeaturePreviewPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/featurePreview/AccountFeaturePreviewPage.tsx",
        "code": {
            "dispatchToastMessage": "const AccountFeaturePreviewPage = () => {\nconst AccountFeaturePreviewPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { features, unseenFeatures } = useFeaturePreviewList();\n\tconst { features, unseenFeatures } = useFeaturePreviewList();",
            "featuresPreview": "\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tuseEffect(() => {\n\t\tif (unseenFeatures) {\n\t\t\tconst featuresPreview = features.map((feature) => ({\n\t\t\tconst featuresPreview = features.map((feature) => ({\n\t\t\t\tname: feature.name,\n\t\t\t\tvalue: feature.value,\n\t\t\t}));\n\n\t\t\tvoid setUserPreferences({ data: { featuresPreview } });",
            "handleSave": "\tconst handleSave = async () => {\n\tconst handleSave = async () => {\n\t\ttry {\n\t\t\tawait setUserPreferences({ data: { featuresPreview } });",
            "updated": "\tconst handleFeatures = (e: ChangeEvent<HTMLInputElement>) => {\n\tconst handleFeatures = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tconst updated = featuresPreview.map((item) => (item.name === e.target.name ? { ...item, value: e.target.checked } : item));\n\t\tconst updated = featuresPreview.map((item) => (item.name === e.target.name ? { ...item, value: e.target.checked } : item));",
            "grouppedFeaturesPreview": "\tconst grouppedFeaturesPreview = Object.entries(\n\tconst grouppedFeaturesPreview = Object.entries(\n\t\tfeaturesPreview.reduce((result, currentValue) => {\n\t\t\t(result[currentValue.group] = result[currentValue.group] || []).push(currentValue);\n\t\t\treturn result;\n\t\t}, {} as Record<FeaturePreviewProps['group'], FeaturePreviewProps[]>),\n\t);\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Feature_preview')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AccountFeaturePreviewBadge.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/account/featurePreview/AccountFeaturePreviewBadge.tsx",
        "code": {
            "t": "const AccountFeaturePreviewBadge = () => {\nconst AccountFeaturePreviewBadge = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { unseenFeatures } = useFeaturePreviewList();\n\tconst { unseenFeatures } = useFeaturePreviewList();"
        },
        "depth_rank": 7
    },
    {
        "file": "SetupWizardPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/SetupWizardPage.tsx",
        "code": {
            "SetupWizardPage": "const SetupWizardPage = (): ReactElement => {\nconst SetupWizardPage = (): ReactElement => {\n\tconst { currentStep } = useSetupWizardContext();\n\tconst { currentStep } = useSetupWizardContext();"
        },
        "depth_rank": 6
    },
    {
        "file": "useStepRouting.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/hooks/useStepRouting.ts",
        "code": {
            "step": "\t\tconst step = parseInt(param, 10);\n\t\tconst step = parseInt(param, 10);\n\t\tif (step && Number.isFinite(step) && step >= 1) {\n\t\t\treturn step;\n\t\t}\n\n\t\treturn initialStep;\n\t});\n\n\tuseEffect(() => {\n\t\tif (hasAdminRole && currentStep === 1) {\n\t\t\tsetCurrentStep(2);\n\t\t}\n\n\t\tsetupWizardRoute.replace({ step: String(currentStep) });"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterServerStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/steps/RegisterServerStep.tsx",
        "code": {
            "RegisterServerStep": "const SERVER_OPTIONS = {\nconst SERVER_OPTIONS = {\n\tREGISTERED: 'REGISTERED',\n\tSTANDALONE: 'STANDALONE',\n};\n\nconst RegisterServerStep = (): ReactElement => {\nconst RegisterServerStep = (): ReactElement => {\n\tconst { goToPreviousStep, currentStep, setSetupWizardData, registerServer, maxSteps, offline, completeSetupWizard } =\n\tconst { goToPreviousStep, currentStep, setSetupWizardData, registerServer, maxSteps, offline, completeSetupWizard } =",
            "router": "\tconst [serverOption, setServerOption] = useState(SERVER_OPTIONS.REGISTERED);\n\tconst [serverOption, setServerOption] = useState(SERVER_OPTIONS.REGISTERED);\n\n\tconst router = useRoute('cloud');\n\tconst router = useRoute('cloud');\n\n\tconst handleRegisterOffline: ComponentProps<typeof RegisterServerPage>['onSubmit'] = async () => {\n\tconst handleRegisterOffline: ComponentProps<typeof RegisterServerPage>['onSubmit'] = async () => {\n\t\tawait completeSetupWizard();\n\t\trouter.push({}, { register: 'true' });"
        },
        "depth_rank": 7
    },
    {
        "file": "CloudAccountConfirmation.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/steps/CloudAccountConfirmation.tsx",
        "code": {
            "CloudAccountConfirmation": "const CloudAccountConfirmation = (): ReactElement => {\nconst CloudAccountConfirmation = (): ReactElement => {\n\tconst {\n\tconst {\n\t\tregisterServer,\n\t\tgoToStep,\n\t\tsetupWizardData: { registrationData },",
            "getConfirmation": "\tconst setShowSetupWizard = useSettingSetValue('Show_Setup_Wizard');\n\tconst setShowSetupWizard = useSettingSetValue('Show_Setup_Wizard');\n\tconst cloudConfirmationPoll = useEndpoint('GET', '/v1/cloud.confirmationPoll');\n\tconst cloudConfirmationPoll = useEndpoint('GET', '/v1/cloud.confirmationPoll');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getConfirmation = useCallback(async () => {\n\tconst getConfirmation = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\tdeviceCode: registrationData.device_code,\n\t\t\t});\n\n\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\tawait saveWorkspaceData();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Your_workspace_is_ready') });",
            "pollInterval": "\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(registrationData.interval));\n\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(registrationData.interval));\n\n\t\treturn (): void => clearInterval(pollInterval);\n\t}, [getConfirmation, registrationData.interval]);\n\n\treturn (\n\t\t<AwaitingConfirmationPage\n\t\t\temailAddress={registrationData.cloudEmail}"
        },
        "depth_rank": 7
    },
    {
        "file": "OrganizationInfoStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/steps/OrganizationInfoStep.tsx",
        "code": {
            "setting": "\tconst setting = settings.find(({ _id }) => _id === settingId);\n\tconst setting = settings.find(({ _id }) => _id === settingId);",
            "hasAdminRole": "const OrganizationInfoStep = (): ReactElement => {\nconst OrganizationInfoStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst hasAdminRole = useRole('admin');\n\tconst hasAdminRole = useRole('admin');\n\n\tconst {\n\tconst {\n\t\tsetupWizardData: { organizationData },",
            "organizationSizeOptions": "\tconst countryOptions = getSettingOptions(settings, 'Country', t);\n\tconst countryOptions = getSettingOptions(settings, 'Country', t);\n\tconst organizationIndustryOptions = getSettingOptions(settings, 'Industry', t);\n\tconst organizationIndustryOptions = getSettingOptions(settings, 'Industry', t);\n\tconst organizationSizeOptions = getSettingOptions(settings, 'Size', t);\n\tconst organizationSizeOptions = getSettingOptions(settings, 'Size', t);\n\n\tconst handleSubmit: ComponentProps<typeof OrganizationInfoPage>['onSubmit'] = async (data) => {\n\tconst handleSubmit: ComponentProps<typeof OrganizationInfoPage>['onSubmit'] = async (data) => {\n\t\tif (skipCloudRegistration) {\n\t\t\treturn completeSetupWizard();\n\t\t}\n\t\tsetSetupWizardData((prevState) => ({ ...prevState, organizationData: data }));"
        },
        "depth_rank": 7
    },
    {
        "file": "SetupWizardProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/setupWizard/providers/SetupWizardProvider.tsx",
        "code": {
            "t": "const SetupWizardProvider = ({ children }: { children: ReactElement }): ReactElement => {\nconst SetupWizardProvider = ({ children }: { children: ReactElement }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [setupWizardData, setSetupWizardData] = useState<ContextType<typeof SetupWizardContext>['setupWizardData']>(initialData);\n\tconst [setupWizardData, setSetupWizardData] = useState<ContextType<typeof SetupWizardContext>['setupWizardData']>(initialData);\n\tconst [currentStep, setCurrentStep] = useStepRouting();\n\tconst [currentStep, setCurrentStep] = useStepRouting();\n\tconst { isSuccess, data } = useParameters();\n\tconst { isSuccess, data } = useParameters();",
            "registerAdminUser": "\tconst registerAdminUser = useCallback(\n\tconst registerAdminUser = useCallback(\n\t\tasync ({ fullname, username, email, password }): Promise<void> => {\n\t\t\tawait registerUser({ name: fullname, username, email, pass: password });",
            "saveWorkspaceData": "\tconst saveWorkspaceData = useCallback(async (): Promise<void> => {\n\tconst saveWorkspaceData = useCallback(async (): Promise<void> => {\n\t\tconst {\n\t\tconst {\n\t\t\tserverData: { updates, agreement },",
            "saveOrganizationData": "\tconst saveOrganizationData = useCallback(async (): Promise<void> => {\n\tconst saveOrganizationData = useCallback(async (): Promise<void> => {\n\t\tconst {\n\t\tconst {\n\t\t\torganizationData: { organizationName, organizationIndustry, organizationSize, country },",
            "registerPreIntent": "\tconst registerPreIntent = useMutableCallback(async (): Promise<void> => {\n\tconst registerPreIntent = useMutableCallback(async (): Promise<void> => {\n\t\tawait saveOrganizationData();\n\t\ttry {\n\t\t\tconst { offline } = await registerPreIntentEndpoint();\n\t\t\tconst { offline } = await registerPreIntentEndpoint();",
            "completeSetupWizard": "\tconst completeSetupWizard = useMutableCallback(async (): Promise<void> => {\n\tconst completeSetupWizard = useMutableCallback(async (): Promise<void> => {\n\t\tawait saveOrganizationData();\n\t\tdispatchToastMessage({ type: 'success', message: t('Your_workspace_is_ready') });",
            "value": "\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tsetupWizardData,\n\t\t\tsetSetupWizardData,\n\t\t\tcurrentStep,\n\t\t\tloaded: isSuccess,\n\t\t\tsettings: data.settings,\n\t\t\tskipCloudRegistration: data.serverAlreadyRegistered,\n\t\t\tgoToPreviousStep,\n\t\t\tgoToNextStep,\n\t\t\tgoToStep,\n\t\t\toffline,\n\t\t\tregisterPreIntent,\n\t\t\tregisterAdminUser,\n\t\t\tvalidateEmail: _validateEmail,\n\t\t\tregisterServer,\n\t\t\tsaveWorkspaceData,\n\t\t\tsaveOrganizationData,\n\t\t\tcompleteSetupWizard,\n\t\t\tmaxSteps: data.serverAlreadyRegistered ? 2 : 3,\n\t\t}),\n\t\t[\n\t\t\tsetupWizardData,\n\t\t\tcurrentStep,\n\t\t\tisSuccess,\n\t\t\tdata.settings,\n\t\t\tdata.serverAlreadyRegistered,\n\t\t\tgoToPreviousStep,\n\t\t\tgoToNextStep,\n\t\t\tgoToStep,\n\t\t\toffline,\n\t\t\tregisterAdminUser,\n\t\t\tregisterPreIntent,\n\t\t\t_validateEmail,\n\t\t\tregisterServer,\n\t\t\tsaveWorkspaceData,\n\t\t\tsaveOrganizationData,\n\t\t\tcompleteSetupWizard,\n\t\t],\n\t);\n\n\treturn <SetupWizardContext.Provider value={value}>{children}</SetupWizardContext.Provider>;"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomNotFound.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/RoomNotFound.tsx",
        "code": {
            "t": "const RoomNotFound = (): ReactElement => {\nconst RoomNotFound = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomOpener.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/RoomOpener.tsx",
        "code": {
            "RoomOpener": "const RoomOpener = ({ type, reference }: RoomOpenerProps): ReactElement => {\nconst RoomOpener = ({ type, reference }: RoomOpenerProps): ReactElement => {\n\tconst { data, error, isSuccess, isError, isLoading } = useOpenRoom({ type, reference });\n\tconst { data, error, isSuccess, isError, isLoading } = useOpenRoom({ type, reference });"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/RoomSkeleton.tsx",
        "code": {
            "RoomSkeleton": "const RoomSkeleton = (): ReactElement => (\nconst RoomSkeleton = (): ReactElement => (\n\t<RoomLayout\n\t\theader={\n\t\t\t<Header>\n\t\t\t\t<HeaderAvatar>\n\t\t\t\t\t<Skeleton variant='rect' width={36} height={36} />"
        },
        "depth_rank": 6
    },
    {
        "file": "RoomRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/RoomRoute.tsx",
        "code": {
            "router": "const RoomRoute = ({ extractOpenRoomParams }: RoomRouteProps) => {\nconst RoomRoute = ({ extractOpenRoomParams }: RoomRouteProps) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst [params, setParams] = useState(() => extractOpenRoomParams(router.getRouteParameters()));\n\tconst [params, setParams] = useState(() => extractOpenRoomParams(router.getRouteParameters()));\n\n\tuseEffect(\n\t\t() =>\n\t\t\trouter.subscribeToRouteChange(() => {\n\t\t\t\tsetParams(extractOpenRoomParams(router.getRouteParameters()));\n\t\t\t}),\n\t\t[extractOpenRoomParams, router],\n\t);\n\n\treturn <RoomOpener {...params} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "useGoToRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useGoToRoom.ts",
        "code": {
            "room": "\t\tconst room = await getRoomById(rid);\n\t\tconst room = await getRoomById(rid);\n\t\troomCoordinator.openRouteLink(room.t, { rid: room._id, ...room }, router.getSearchParameters(), { replace });"
        },
        "depth_rank": 7
    },
    {
        "file": "useOpenRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useOpenRoom.ts",
        "code": {
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: roomData._id });\n\t\t\tconst room = ChatRoom.findOne({ _id: roomData._id });",
            "sub": "\t\t\tconst sub = ChatSubscription.findOne({ rid: room._id });\n\t\t\tconst sub = ChatSubscription.findOne({ rid: room._id });"
        },
        "depth_rank": 7
    },
    {
        "file": "useAppsContextualBar.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useAppsContextualBar.ts",
        "code": {
            "actionManager": "\tconst [payload, setPayload] = useState<IUIKitContextualBarInteraction>();\n\tconst [payload, setPayload] = useState<IUIKitContextualBarInteraction>();\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst [appId, setAppId] = useState<string>();\n\tconst [appId, setAppId] = useState<string>();\n\n\tconst { _id: roomId } = useRoom();\n\tconst { _id: roomId } = useRoom();"
        },
        "depth_rank": 7
    },
    {
        "file": "useBlockUserAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useBlockUserAction.ts",
        "code": {
            "ownUserId": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst ownUserId = useUserId();\n\tconst ownUserId = useUserId();\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "toggleBlockUserAction": "\tconst isUserBlocked = currentSubscription?.blocker;\n\tconst isUserBlocked = currentSubscription?.blocker;\n\tconst toggleBlock = useMethod(isUserBlocked ? 'unblockUser' : 'blockUser');\n\tconst toggleBlock = useMethod(isUserBlocked ? 'unblockUser' : 'blockUser');\n\n\tconst toggleBlockUserAction = useMutableCallback(async () => {\n\tconst toggleBlockUserAction = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait toggleBlock({ rid, blocked: uid });"
        },
        "depth_rank": 9
    },
    {
        "file": "useChangeOwnerAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeOwnerAction.tsx",
        "code": {
            "getWarningModalForFederatedRooms": "const getWarningModalForFederatedRooms = (\nconst getWarningModalForFederatedRooms = (\n\tcloseModalFn: () => void,\n\thandleConfirmFn: () => void,\n\ttitle: string,\n\tconfirmText: string,\n\tbodyText: string,\n): ReactElement => (\n\t<GenericModal\n\t\tvariant='warning'\n\t\tonClose={closeModalFn}",
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "setModal": "\tconst isOwner = useUserHasRoomRole(uid, rid, 'owner');\n\tconst isOwner = useUserHasRoomRole(uid, rid, 'owner');\n\tconst userSubscription = useUserSubscription(rid);\n\tconst userSubscription = useUserSubscription(rid);\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst { _id: loggedUserId = '' } = useUser() || {};\n\tconst { _id: loggedUserId = '' } = useUser() || {};",
            "endpointPrefix": "\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst { roomCanSetOwner } = getRoomDirectives({ room, showingUserId: uid, userSubscription });\n\tconst { roomCanSetOwner } = getRoomDirectives({ room, showingUserId: uid, userSubscription });",
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tchangeOwner({ roomId: rid, userId: uid });",
            "changeOwnerAction": "\tconst changeOwnerAction = useMutableCallback(async () => handleChangeOwner({ roomId: rid, userId: uid }));\n\tconst changeOwnerAction = useMutableCallback(async () => handleChangeOwner({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 9
    },
    {
        "file": "useRedirectModerationConsole.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useRedirectModerationConsole.ts",
        "code": {
            "redirectModerationConsoleAction": "\tconst redirectModerationConsoleAction = () => {\n\tconst redirectModerationConsoleAction = () => {\n\t\trouter.push({ uid });"
        },
        "depth_rank": 9
    },
    {
        "file": "useChangeLeaderAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeLeaderAction.ts",
        "code": {
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "endpointPrefix": "\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst { roomCanSetLeader } = getRoomDirectives({ room, showingUserId: uid, userSubscription });\n\tconst { roomCanSetLeader } = getRoomDirectives({ room, showingUserId: uid, userSubscription });",
            "changeLeaderAction": "\tconst changeLeaderAction = useMutableCallback(() => changeLeader({ roomId: rid, userId: uid }));\n\tconst changeLeaderAction = useMutableCallback(() => changeLeader({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 9
    },
    {
        "file": "useChangeModeratorAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeModeratorAction.tsx",
        "code": {
            "getWarningModalForFederatedRooms": "const getWarningModalForFederatedRooms = (\nconst getWarningModalForFederatedRooms = (\n\tcloseModalFn: () => void,\n\thandleConfirmFn: () => void,\n\ttitle: string,\n\tconfirmText: string,\n\tbodyText: string,\n): ReactElement => (\n\t<GenericModal\n\t\tvariant='warning'\n\t\tonClose={closeModalFn}",
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "userSubscription": "\tconst isModerator = useUserHasRoomRole(uid, rid, 'moderator');\n\tconst isModerator = useUserHasRoomRole(uid, rid, 'moderator');\n\tconst userSubscription = useUserSubscription(rid);\n\tconst userSubscription = useUserSubscription(rid);\n\tconst { _id: loggedUserId = '' } = useUser() || {};\n\tconst { _id: loggedUserId = '' } = useUser() || {};",
            "endpointPrefix": "\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst { roomCanSetModerator } = getRoomDirectives({ room, showingUserId: uid, userSubscription });\n\tconst { roomCanSetModerator } = getRoomDirectives({ room, showingUserId: uid, userSubscription });",
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tchangeModerator({ roomId: rid, userId: uid });",
            "changeModeratorAction": "\tconst changeModeratorAction = useMutableCallback(() => handleChangeModerator({ roomId: rid, userId: uid }));\n\tconst changeModeratorAction = useMutableCallback(() => handleChangeModerator({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 9
    },
    {
        "file": "useIgnoreUserAction.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useIgnoreUserAction.ts",
        "code": {
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;"
        },
        "depth_rank": 9
    },
    {
        "file": "useRemoveUserAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useRemoveUserAction.tsx",
        "code": {
            "subscription": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst currentUser = useUser();\n\tconst currentUser = useUser();\n\tconst subscription = useUserSubscription(rid);\n\tconst subscription = useUserSubscription(rid);\n\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "endpointPrefix": "\tconst userCanRemove = isRoomFederated(room)\n\tconst userCanRemove = isRoomFederated(room)\n\t\t? Federation.isEditableByTheUser(currentUser || undefined, room, subscription)\n\t\t: hasPermissionToRemove;\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal(null));\n\tconst closeModal = useMutableCallback(() => setModal(null));\n\tconst roomName = room?.t && escapeHTML(roomCoordinator.getRoomName(room.t, room));\n\tconst roomName = room?.t && escapeHTML(roomCoordinator.getRoomName(room.t, room));\n\n\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst endpointPrefix = room.t === 'p' ? '/v1/groups' : '/v1/channels';\n\tconst { roomCanRemove } = getRoomDirectives({ room, showingUserId: uid, userSubscription: subscription });\n\tconst { roomCanRemove } = getRoomDirectives({ room, showingUserId: uid, userSubscription: subscription });",
            "roomKeys": "\tconst removeUserOptionAction = useMutableCallback(() => {\n\tconst removeUserOptionAction = useMutableCallback(() => {\n\t\tconst handleRemoveFromTeam = async (rooms: IRoom[]): Promise<void> => {\n\t\tconst handleRemoveFromTeam = async (rooms: IRoom[]): Promise<void> => {\n\t\t\tif (room.teamId) {\n\t\t\t\tconst roomKeys = Object.keys(rooms);\n\t\t\t\tconst roomKeys = Object.keys(rooms);\n\t\t\t\tawait removeFromTeam({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\tuserId: uid,\n\t\t\t\t\t...(roomKeys.length && { rooms: roomKeys }),",
            "handleRemoveFromRoom": "\t\tconst handleRemoveFromRoom = async (rid: IRoom['_id'], uid: IUser['_id']): Promise<void> => {\n\t\tconst handleRemoveFromRoom = async (rid: IRoom['_id'], uid: IUser['_id']): Promise<void> => {\n\t\t\tawait removeFromRoom({ roomId: rid, userId: uid });"
        },
        "depth_rank": 9
    },
    {
        "file": "getRoomDirectives.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/lib/getRoomDirectives.ts",
        "code": {
            "roomDirectives": "\tconst roomDirectives = room?.t && roomCoordinator.getRoomDirectives(room.t);\n\tconst roomDirectives = room?.t && roomCoordinator.getRoomDirectives(room.t);\n\n\tconst [roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove] = [\n\tconst [roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove] = [\n\t\t...((roomDirectives && [\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_OWNER, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_LEADER, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_MODERATOR, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.IGNORE, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.BLOCK, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.MUTE, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.REMOVE_USER, showingUserId, userSubscription),\n\t\t]) ??\n\t\t\t[]),\n\t];\n\n\treturn { roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove };"
        },
        "depth_rank": 7
    },
    {
        "file": "PinnedMessagesTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/PinnedMessagesTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='pin'\n\t\t\ttitle={t('Pinned_Messages')}"
        },
        "depth_rank": 7
    },
    {
        "file": "StarredMessagesTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/StarredMessagesTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='star'\n\t\t\ttitle={t('Starred_Messages')}"
        },
        "depth_rank": 7
    },
    {
        "file": "MentionsTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/MentionsTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='at'\n\t\t\ttitle={t('Mentions')}"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageSearchTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/MessageSearchTab.tsx",
        "code": {
            "handleCloseButtonClick": "const MessageSearchTab = () => {\nconst MessageSearchTab = () => {\n\tconst providerQuery = useMessageSearchProviderQuery();\n\tconst providerQuery = useMessageSearchProviderQuery();\n\n\tconst tabBarClose = useTabBarClose();\n\tconst tabBarClose = useTabBarClose();\n\tconst handleCloseButtonClick = useCallback(() => {\n\tconst handleCloseButtonClick = useCallback(() => {\n\t\ttabBarClose();\n\t}, [tabBarClose]);\n\n\tconst [{ searchText, globalSearch }, handleSearch] = useState({ searchText: '', globalSearch: false });\n\tconst [{ searchText, globalSearch }, handleSearch] = useState({ searchText: '', globalSearch: false });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='magnifier' />\n\t\t\t\t<ContextualbarTitle>{t('Search_Messages')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "useMessageSearchQuery.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/hooks/useMessageSearchQuery.ts",
        "code": {
            "result": "\t\t\tconst result = await searchMessages(searchText, { uid, rid: room._id }, { limit, searchAll: globalSearch });\n\t\t\tconst result = await searchMessages(searchText, { uid, rid: room._id }, { limit, searchAll: globalSearch });"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageSearchForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/components/MessageSearchForm.tsx",
        "code": {
            "submitHandler": "const MessageSearchForm = ({ provider, onSearch }: MessageSearchFormProps) => {\nconst MessageSearchForm = ({ provider, onSearch }: MessageSearchFormProps) => {\n\tconst { handleSubmit, register, setFocus, control } = useForm({\n\tconst { handleSubmit, register, setFocus, control } = useForm({\n\t\tdefaultValues: {\n\t\t\tsearchText: '',\n\t\t\tglobalSearch: false,\n\t\t},\n\t});\n\n\tuseEffect(() => {\n\t\tsetFocus('searchText');\n\t}, [setFocus]);\n\n\tconst debouncedOnSearch = useDebouncedCallback(useMutableCallback(onSearch), 300);\n\tconst debouncedOnSearch = useDebouncedCallback(useMutableCallback(onSearch), 300);\n\n\tconst submitHandler = handleSubmit(({ searchText, globalSearch }) => {\n\tconst submitHandler = handleSubmit(({ searchText, globalSearch }) => {\n\t\tdebouncedOnSearch.cancel();\n\t\tonSearch({ searchText, globalSearch });",
            "searchText": "\tconst searchText = useWatch({ control, name: 'searchText' });\n\tconst searchText = useWatch({ control, name: 'searchText' });",
            "globalSearch": "\tconst globalSearch = useWatch({ control, name: 'globalSearch' });\n\tconst globalSearch = useWatch({ control, name: 'globalSearch' });",
            "t": "\tconst globalSearchEnabled = provider.settings.GlobalSearchEnabled;\n\tconst globalSearchEnabled = provider.settings.GlobalSearchEnabled;\n\tconst globalSearchToggleId = useUniqueId();\n\tconst globalSearchToggleId = useUniqueId();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box\n\t\t\tdisplay='flex'\n\t\t\tflexGrow={0}"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageSearch.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/components/MessageSearch.tsx",
        "code": {
            "messageSearchQuery": "\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst messageSearchQuery = useMessageSearchQuery({ searchText, limit, globalSearch });\n\tconst messageSearchQuery = useMessageSearchQuery({ searchText, limit, globalSearch });",
            "all": "\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\tconst firstUnread = isMessageFirstUnread(subscription, message, previous);\n\t\t\t\t\t\t\t\t\t\t\tconst firstUnread = isMessageFirstUnread(subscription, message, previous);\n\t\t\t\t\t\t\t\t\t\t\tconst showDivider = newDay || firstUnread;\n\t\t\t\t\t\t\t\t\t\t\tconst showDivider = newDay || firstUnread;\n\n\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomMembers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembers.tsx",
        "code": {
            "RoomMembers": "const RoomMembers = ({\nconst RoomMembers = ({\n\tloading,\n\tmembers = [],\n\ttext,\n\ttype,\n\tsetText,\n\tsetType,\n\tonClickClose,\n\tonClickView,\n\tonClickAdd,\n\tonClickInvite,\n\ttotal,\n\terror,\n\tloadMoreItems,\n\trenderRow: RowComponent = RoomMembersRow,\n\trid,\n\tisTeam,\n\tisDirect,\n\treload,\n}: RoomMembersProps): ReactElement => {",
            "itemData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst itemData = useMemo(() => ({ onClickView, rid }), [onClickView, rid]);\n\tconst itemData = useMemo(() => ({ onClickView, rid }), [onClickView, rid]);"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomMembersActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembersActions.tsx",
        "code": {
            "RoomMembersActions": "const RoomMembersActions = ({ username, _id, rid, reload }: RoomMembersActionsProps): ReactElement | null => {\nconst RoomMembersActions = ({ username, _id, rid, reload }: RoomMembersActionsProps): ReactElement | null => {\n\tconst { menu: menuOptions } = useActionSpread(useUserInfoActions({ _id, username }, rid, reload), 0);\n\tconst { menu: menuOptions } = useActionSpread(useUserInfoActions({ _id, username }, rid, reload), 0);"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomMembersWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembersWithData.tsx",
        "code": {
            "debouncedText": "\tconst isFederated = room && isRoomFederated(room);\n\tconst isFederated = room && isRoomFederated(room);\n\n\tconst canCreateInviteLinks =\n\tconst canCreateInviteLinks =\n\t\troom && user && isFederated ? Federation.canCreateInviteLinks(user, room, subscription) : hasPermissionToCreateInviteLinks;\n\n\tconst [state, setState] = useState<{ tab: ROOM_MEMBERS_TABS; userId?: IUser['_id'] }>({\n\tconst [state, setState] = useState<{ tab: ROOM_MEMBERS_TABS; userId?: IUser['_id'] }>({\n\t\ttab: ROOM_MEMBERS_TABS.LIST,\n\t\tuserId: undefined,\n\t});\n\n\tconst debouncedText = useDebouncedValue(text, 800);\n\tconst debouncedText = useDebouncedValue(text, 800);\n\n\tconst { data, fetchNextPage, isLoading, refetch, hasNextPage } = useMembersList(\n\tconst { data, fetchNextPage, isLoading, refetch, hasNextPage } = useMembersList(",
            "openUserInfo": "\tconst canAddUsers = room && user && isFederated ? Federation.isEditableByTheUser(user, room, subscription) : hasPermissionToAddUsers;\n\tconst canAddUsers = room && user && isFederated ? Federation.isEditableByTheUser(user, room, subscription) : hasPermissionToAddUsers;\n\n\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst openUserInfo = useMutableCallback((e) => {\n\tconst openUserInfo = useMutableCallback((e) => {\n\t\tconst { userid } = e.currentTarget.dataset;\n\t\tconst { userid } = e.currentTarget.dataset;",
            "openInvite": "\tconst openInvite = useMutableCallback(() => {\n\tconst openInvite = useMutableCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.INVITE });",
            "openAddUser": "\tconst openAddUser = useMutableCallback(() => {\n\tconst openAddUser = useMutableCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.ADD });",
            "handleBack": "\tconst handleBack = useCallback(() => {\n\tconst handleBack = useCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.LIST });"
        },
        "depth_rank": 8
    },
    {
        "file": "InviteUsers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteUsers.tsx",
        "code": {
            "InviteUsers": "const InviteUsers = ({\nconst InviteUsers = ({\n\tonClickBackMembers,\n\tonClickBackLink,\n\tonClickNewLink,\n\tonClose,\n\tisEditing,\n\tonClickEdit,\n\tdaysAndMaxUses,\n\tcaptionText,\n\tlinkText,\n\terror,\n}: InviteUsersProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{(onClickBackMembers || onClickBackLink) && <ContextualbarBack onClick={isEditing ? onClickBackLink : onClickBackMembers} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "InviteLink.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteLink.tsx",
        "code": {
            "t": "const InviteLink = ({ linkText, captionText, onClickEdit }: InviteLinkProps): ReactElement => {\nconst InviteLink = ({ linkText, captionText, onClickEdit }: InviteLinkProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { copy } = useClipboardWithToast(linkText);\n\tconst { copy } = useClipboardWithToast(linkText);"
        },
        "depth_rank": 9
    },
    {
        "file": "EditInviteLink.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/EditInviteLink.tsx",
        "code": {
            "t": "const EditInviteLink = ({ daysAndMaxUses, onClickNewLink }: EditInviteLinkProps): ReactElement => {\nconst EditInviteLink = ({ daysAndMaxUses, onClickNewLink }: EditInviteLinkProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tformState: { isDirty },"
        },
        "depth_rank": 9
    },
    {
        "file": "InviteUsersWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteUsersWithData.tsx",
        "code": {
            "dispatchToastMessage": "const InviteUsersWithData = ({ rid, onClickBack }: InviteUsersWithDataProps): ReactElement => {\nconst InviteUsersWithData = ({ rid, onClickBack }: InviteUsersWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [\n\tconst [\n\t\t{\n\t\t\tisEditing,\n\t\t\turl,\n\t\t\tcaption,\n\t\t\terror,\n\t\t\tdaysAndMaxUses: { days, maxUses },",
            "handleEdit": "\tconst handleClose = useTabBarClose();\n\tconst handleClose = useTabBarClose();\n\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\tconst findOrCreateInvite = useEndpoint('POST', '/v1/findOrCreateInvite');\n\tconst findOrCreateInvite = useEndpoint('POST', '/v1/findOrCreateInvite');\n\n\tconst handleEdit = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: true })));\n\tconst handleEdit = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: true })));",
            "handleBackToLink": "\tconst handleBackToLink = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: false })));\n\tconst handleBackToLink = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: false })));",
            "data": "\t\t\t\tconst data = await findOrCreateInvite({ rid, days: Number(days), maxUses: Number(maxUses) });\n\t\t\t\tconst data = await findOrCreateInvite({ rid, days: Number(days), maxUses: Number(maxUses) });",
            "handleGenerateLink": "\tconst handleGenerateLink = useMutableCallback((daysAndMaxUses) => {\n\tconst handleGenerateLink = useMutableCallback((daysAndMaxUses) => {\n\t\tsetInviteState((prevState) => ({ ...prevState, daysAndMaxUses, isEditing: false }));"
        },
        "depth_rank": 9
    },
    {
        "file": "AddUsers.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/AddUsers/AddUsers.tsx",
        "code": {
            "t": "const AddUsers = ({ onClickClose, onClickBack, onClickSave, users, isRoomFederated, onChange }: AddUsersProps): ReactElement => {\nconst AddUsers = ({ onClickClose, onClickBack, onClickSave, users, isRoomFederated, onChange }: AddUsersProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{onClickBack && <ContextualbarBack onClick={onClickBack} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "AddUsersWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/AddUsers/AddUsersWithData.tsx",
        "code": {
            "saveAction": "const AddUsersWithData = ({ rid, onClickBack, reload }: AddUsersWithDataProps): ReactElement => {\nconst AddUsersWithData = ({ rid, onClickBack, reload }: AddUsersWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\tconst onClickClose = useTabBarClose();\n\tconst onClickClose = useTabBarClose();\n\tconst saveAction = useMethod('addUsersToRoom');\n\tconst saveAction = useMethod('addUsersToRoom');\n\n\tconst { values, handlers } = useForm({ users: [] as IUser['username'][] });\n\tconst { values, handlers } = useForm({ users: [] as IUser['username'][] });",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait saveAction({ rid, users });"
        },
        "depth_rank": 9
    },
    {
        "file": "KeyboardShortcutSection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcutSection.tsx",
        "code": {
            "KeyboardShortcutSection": "const KeyboardShortcutSection = ({ title, command }: KeyboardShortcutSectionProps): ReactElement => (\nconst KeyboardShortcutSection = ({ title, command }: KeyboardShortcutSectionProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "KeyboardShortcutsWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcutsWithData.tsx",
        "code": {
            "handleClose": "const KeyboardShortcutsWithData = ({ tabBar }: { tabBar: ToolboxContextValue['tabBar'] }): ReactElement => {\nconst KeyboardShortcutsWithData = ({ tabBar }: { tabBar: ToolboxContextValue['tabBar'] }): ReactElement => {\n\tconst handleClose = useMutableCallback(() => tabBar?.close());\n\tconst handleClose = useMutableCallback(() => tabBar?.close());\n\treturn <KeyboardShortcuts handleClose={handleClose} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "KeyboardShortcuts.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcuts.tsx",
        "code": {
            "t": "const KeyboardShortcuts = ({ handleClose }: { handleClose: () => void }): ReactElement => {\nconst KeyboardShortcuts = ({ handleClose }: { handleClose: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='keyboard' />\n\t\t\t\t<ContextualbarTitle>{t('Keyboard_Shortcuts_Title')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "DiscussionsListContextBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsListContextBar.tsx",
        "code": {
            "options": "const DiscussionListContextBar = ({ rid }: { rid: IRoom['_id'] }): ReactElement | null => {\nconst DiscussionListContextBar = ({ rid }: { rid: IRoom['_id'] }): ReactElement | null => {\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst onClose = useTabBarClose();\n\tconst onClose = useTabBarClose();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 400);\n\tconst debouncedText = useDebouncedValue(text, 400);\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => ({\n\t\t\trid,\n\t\t\ttext: debouncedText,\n\t\t}),\n\t\t[rid, debouncedText],\n\t);\n\n\tconst { discussionsList, loadMoreItems } = useDiscussionsList(options, userId);\n\tconst { discussionsList, loadMoreItems } = useDiscussionsList(options, userId);"
        },
        "depth_rank": 8
    },
    {
        "file": "DiscussionsListRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsListRow.tsx",
        "code": {
            "msg": "function DiscussionListRow({ discussion, showRealNames, userId, onClick }: DiscussionListRowProps) {\nfunction DiscussionListRow({ discussion, showRealNames, userId, onClick }: DiscussionListRowProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\n\tconst msg = normalizeThreadMessage(discussion);\n\tconst msg = normalizeThreadMessage(discussion);\n\n\tconst { name = discussion.u.username } = discussion.u;\n\tconst { name = discussion.u.username } = discussion.u;"
        },
        "depth_rank": 8
    },
    {
        "file": "useDiscussionsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/useDiscussionsList.ts",
        "code": {
            "fetchMessages": "\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\n\tconst getDiscussions = useEndpoint('GET', '/v1/chat.getDiscussions');\n\tconst getDiscussions = useEndpoint('GET', '/v1/chat.getDiscussions');\n\n\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\t\troomId: options.rid,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: messages,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getDiscussions, options.rid, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList("
        },
        "depth_rank": 8
    },
    {
        "file": "DiscussionsList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsList.tsx",
        "code": {
            "DiscussionsList": "function DiscussionsList({\nfunction DiscussionsList({\n\ttotal = 10,\n\tdiscussions = [],\n\tloadMoreItems,\n\tloading,\n\tonClose,\n\terror,\n\tuserId,\n\ttext,\n\tonChangeFilter,\n}: DiscussionsListProps) {",
            "onClick": "\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus(true);\n\tconst inputRef = useAutoFocus(true);\n\tconst onClick = useCallback((e) => {\n\tconst onClick = useCallback((e) => {\n\t\tconst { drid } = e.currentTarget.dataset;\n\t\tconst { drid } = e.currentTarget.dataset;"
        },
        "depth_rank": 8
    },
    {
        "file": "DiscussionsListItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/components/DiscussionsListItem.tsx",
        "code": {
            "DiscussionListItem": "const DiscussionListItem = ({\nconst DiscussionListItem = ({\n\t_id,\n\tmsg,\n\tusername,\n\tname = username,\n\tts,\n\tdcount,\n\tformatDate = (date: any) => date,\n\tdlm,\n\tclassName = [],\n\temoji,\n\t...props\n}: DiscussionListItemProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Box is={Message} {...props} className={className} pbs='x16' pbe='x8'>"
        },
        "depth_rank": 9
    },
    {
        "file": "OTRWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/OTRWithData.tsx",
        "code": {
            "timeout": "\t\tconst timeout = setTimeout(() => {\n\t\tconst timeout = setTimeout(() => {\n\t\t\totr?.setState(OtrRoomState.TIMEOUT);\n\t\t}, 10000);\n\n\t\treturn (): void => {\n\t\t\tclearTimeout(timeout);\n\t\t};\n\t}, [otr, otrState]);\n\n\treturn (\n\t\t<OTR\n\t\t\tisOnline={isOnline}"
        },
        "depth_rank": 8
    },
    {
        "file": "OTR.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/OTR.tsx",
        "code": {
            "renderOTRState": "const OTR = ({ isOnline, onClickClose, onClickStart, onClickEnd, onClickRefresh, otrState, peerUsername }: OTRProps): ReactElement => {\nconst OTR = ({ isOnline, onClickClose, onClickStart, onClickEnd, onClickRefresh, otrState, peerUsername }: OTRProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst renderOTRState = (): ReactElement => {\n\tconst renderOTRState = (): ReactElement => {\n\t\tswitch (otrState) {\n\t\t\tcase OtrRoomState.NOT_STARTED:\n\t\t\t\treturn (\n\t\t\t\t\t<Button onClick={onClickStart} primary>"
        },
        "depth_rank": 8
    },
    {
        "file": "OTRStates.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/components/OTRStates.tsx",
        "code": {
            "t": "const OTRStates = ({ title, description, icon, onClickStart }: OTRStatesProps): ReactElement => {\nconst OTRStates = ({ title, description, icon, onClickStart }: OTRStatesProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<States>\n\t\t\t<StatesIcon name={icon} />"
        },
        "depth_rank": 9
    },
    {
        "file": "OTREstablished.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/components/OTREstablished.tsx",
        "code": {
            "t": "const OTREstablished = ({ onClickRefresh, onClickEnd }: OTREstablishedProps): ReactElement => {\nconst OTREstablished = ({ onClickRefresh, onClickEnd }: OTREstablishedProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ButtonGroup stretch>\n\t\t\t<Button onClick={onClickRefresh}>{t('Refresh_keys')}</Button>"
        },
        "depth_rank": 9
    },
    {
        "file": "AutoTranslateWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/AutoTranslate/AutoTranslateWithData.tsx",
        "code": {
            "saveSettings": "const AutoTranslateWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\nconst AutoTranslateWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\n\tconst handleClose = useTabBarClose();\n\tconst handleClose = useTabBarClose();\n\tconst userLanguage = useLanguage();\n\tconst userLanguage = useLanguage();\n\tconst subscription = useUserSubscription(rid);\n\tconst subscription = useUserSubscription(rid);\n\tconst [currentLanguage, setCurrentLanguage] = useState(subscription?.autoTranslateLanguage ?? '');\n\tconst [currentLanguage, setCurrentLanguage] = useState(subscription?.autoTranslateLanguage ?? '');\n\tconst saveSettings = useEndpointAction('POST', '/v1/autotranslate.saveSettings');\n\tconst saveSettings = useEndpointAction('POST', '/v1/autotranslate.saveSettings');\n\n\tconst { value: translateData } = useEndpointData('/v1/autotranslate.getSupportedLanguages', {\n\tconst { value: translateData } = useEndpointData('/v1/autotranslate.getSupportedLanguages', {\n\t\tparams: useMemo(() => ({ targetLanguage: userLanguage }), [userLanguage]),"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoTranslate.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/AutoTranslate/AutoTranslate.tsx",
        "code": {
            "AutoTranslate": "const AutoTranslate = ({\nconst AutoTranslate = ({\n\tlanguage,\n\tlanguages,\n\thandleSwitch,\n\ttranslateEnable,\n\thandleChangeLanguage,\n\thandleClose,\n}: AutoTranslateProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='language' />\n\t\t\t\t<ContextualbarTitle>{t('Auto_Translate')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfBlockModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfBlockModal.tsx",
        "code": {
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tonConfirm();\n\t\tonClose();\n\t}, [onClose, onConfirm]);\n\n\treturn (\n\t\t<GenericModal\n\t\t\ticon={null}"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfConfigModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfConfigModal.tsx",
        "code": {
            "t": "const VideoConfConfigModal = ({ onClose, onConfirm, isAdmin }: VideoConfConfigModalProps): ReactElement => {\nconst VideoConfConfigModal = ({ onClose, onConfirm, isAdmin }: VideoConfConfigModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t<Modal.Tagline>{isAdmin ? t('Missing_configuration') : t('App_not_enabled')}</Modal.Tagline>"
        },
        "depth_rank": 8
    },
    {
        "file": "useVideoConfList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/useVideoConfList.ts",
        "code": {
            "fetchData": "\tconst [videoConfList, setVideoConfList] = useState(() => new VideoConfRecordList());\n\tconst [videoConfList, setVideoConfList] = useState(() => new VideoConfRecordList());\n\tconst reload = useCallback(() => setVideoConfList(new VideoConfRecordList()), []);\n\tconst reload = useCallback(() => setVideoConfList(new VideoConfRecordList()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (_start, _end) => {\n\t\t\tconst { data, total } = await getVideoConfs({\n\t\t\tconst { data, total } = await getVideoConfs({\n\t\t\t\troomId: options.roomId,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: data.map((videoConf: any) => ({\n\t\t\t\t\t...videoConf,\n\t\t\t\t\t_updatedAt: new Date(videoConf._updatedAt),\n\t\t\t\t\tcreatedAt: new Date(videoConf.createdAt),\n\t\t\t\t\tendedAt: videoConf.endedAt ? new Date(videoConf.endedAt) : undefined,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getVideoConfs, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(videoConfList, fetchData);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(videoConfList, fetchData);"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoConfListItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfListItem.tsx",
        "code": {
            "VideoConfListItem": "const VideoConfListItem = ({\nconst VideoConfListItem = ({\n\tvideoConfData,\n\tclassName = [],\n\treload,\n\t...props\n}: {",
            "showRealName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst showRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst {\n\tconst {\n\t\t_id: callId,\n\t\tcreatedBy: { name, username, _id },",
            "handleJoinConference": "\tconst handleJoinConference = useMutableCallback((): void => {\n\tconst handleJoinConference = useMutableCallback((): void => {\n\t\tjoinCall(callId);\n\t\treturn reload();\n\t});\n\n\treturn (\n\t\t<Box\n\t\t\tcolor='default'\n\t\t\tborderBlockEndWidth={2}"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoConfList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfList.tsx",
        "code": {
            "t": "const VideoConfList = ({ onClose, total, videoConfs, loading, error, reload, loadMoreItems }: VideoConfListProps): ReactElement => {\nconst VideoConfList = ({ onClose, total, videoConfs, loading, error, reload, loadMoreItems }: VideoConfListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\tif (loading) {\n\t\treturn <ContextualbarSkeleton />;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='phone' />\n\t\t\t\t<ContextualbarTitle>{t('Calls')}</ContextualbarTitle>"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoConfListWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfListWithData.tsx",
        "code": {
            "options": "const VideoConfListWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\nconst VideoConfListWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\n\tconst onClose = useTabBarClose();\n\tconst onClose = useTabBarClose();\n\tconst options = useMemo(() => ({ roomId: rid }), [rid]);\n\tconst options = useMemo(() => ({ roomId: rid }), [rid]);"
        },
        "depth_rank": 9
    },
    {
        "file": "useVideoConfWarning.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/hooks/useVideoConfWarning.tsx",
        "code": {
            "handleRedirectToConfiguration": "\tconst handleClose = useMutableCallback(() => setModal(null));\n\tconst handleClose = useMutableCallback(() => setModal(null));\n\n\tconst handleRedirectToConfiguration = useMutableCallback(() => {\n\tconst handleRedirectToConfiguration = useMutableCallback(() => {\n\t\thandleClose();\n\t\tvideoConfSettingsRoute.push({\n\t\t\tgroup: 'Video_Conference',\n\t\t});\n\t});\n\n\treturn useMemo(\n\t\t() => (): void => setModal(<VideoConfConfigModal onClose={handleClose} onConfirm={handleRedirectToConfiguration} isAdmin={isAdmin} />),"
        },
        "depth_rank": 9
    },
    {
        "file": "TimedVideoConfPopup.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/TimedVideoConfPopup.tsx",
        "code": {
            "TimedVideoConfPopup": "const TimedVideoConfPopup = ({\nconst TimedVideoConfPopup = ({\n\tid,\n\trid,\n\tisReceiving = false,\n\tisCalling = false,\n\tposition,\n}: TimedVideoConfPopupProps): ReactElement | null => {",
            "handleStartCall": "\tconst handleConfirm = (): void => {\n\tconst handleConfirm = (): void => {\n\t\tacceptCall(id);\n\t};\n\n\tconst handleClose = (id: string): void => {\n\tconst handleClose = (id: string): void => {\n\t\tif (isReceiving) {\n\t\t\trejectCall(id);\n\t\t\treturn;\n\t\t}\n\n\t\tabortCall();\n\t};\n\n\tconst handleMute = (): void => {\n\tconst handleMute = (): void => {\n\t\tdismissCall(id);\n\t};\n\n\tconst handleStartCall = async (): Promise<void> => {\n\tconst handleStartCall = async (): Promise<void> => {\n\t\tsetStarting(true);\n\t\tstartCall(rid);\n\t};\n\n\tif (isReceiving) {\n\t\treturn <IncomingPopup room={room} id={id} position={position} onClose={handleClose} onMute={handleMute} onConfirm={handleConfirm} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "StartCallPopup.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/StartCallPopup.tsx",
        "code": {
            "videoConfPreferences": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers(videoConfPreferences);\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers(videoConfPreferences);",
            "handleStartCall": "\tconst handleStartCall = useMutableCallback(() => {\n\tconst handleStartCall = useMutableCallback(() => {\n\t\tsetPreferences(controllersConfig);\n\t\tonConfirm();\n\t});\n\n\treturn (\n\t\t<VideoConfPopup ref={ref}>"
        },
        "depth_rank": 10
    },
    {
        "file": "IncomingPopup.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/IncomingPopup.tsx",
        "code": {
            "t": "const IncomingPopup = ({ id, room, position, onClose, onMute, onConfirm }: IncomingPopupProps): ReactElement => {\nconst IncomingPopup = ({ id, room, position, onClose, onMute, onConfirm }: IncomingPopupProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers();",
            "params": "\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\n\tconst params = useMemo(() => ({ callId: id }), [id]);\n\tconst params = useMemo(() => ({ callId: id }), [id]);",
            "handleJoinCall": "\tconst showMic = Boolean(value?.capabilities?.mic);\n\tconst showMic = Boolean(value?.capabilities?.mic);\n\tconst showCam = Boolean(value?.capabilities?.cam);\n\tconst showCam = Boolean(value?.capabilities?.cam);\n\n\tconst handleJoinCall = useMutableCallback(() => {\n\tconst handleJoinCall = useMutableCallback(() => {\n\t\tsetPreferences(controllersConfig);\n\t\tonConfirm();\n\t});\n\n\treturn (\n\t\t<VideoConfPopup position={position}>"
        },
        "depth_rank": 10
    },
    {
        "file": "VideoConfPopupRoomInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/VideoConfPopupRoomInfo.tsx",
        "code": {
            "username": "\tconst subscription = useUserSubscription(room._id);\n\tconst subscription = useUserSubscription(room._id);\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });",
            "avatar": "\tconst avatar = <RoomAvatar room={room} size='x40' />;\n\tconst avatar = <RoomAvatar room={room} size='x40' />;"
        },
        "depth_rank": 10
    },
    {
        "file": "OutgoingPopup.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/OutgoingPopup.tsx",
        "code": {
            "videoConfPreferences": "const OutgoingPopup = ({ room, onClose, id }: OutgoingPopupProps): ReactElement => {\nconst OutgoingPopup = ({ room, onClose, id }: OutgoingPopupProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst { controllersConfig } = useVideoConfControllers(videoConfPreferences);\n\tconst { controllersConfig } = useVideoConfControllers(videoConfPreferences);"
        },
        "depth_rank": 10
    },
    {
        "file": "UserInfoActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/UserInfo/UserInfoActions.tsx",
        "code": {
            "UserInfoActions": "const UserInfoActions = ({ user, rid, backToList }: UserInfoActionsProps): ReactElement => {\nconst UserInfoActions = ({ user, rid, backToList }: UserInfoActionsProps): ReactElement => {\n\tconst { actions: actionsDefinition, menu: menuOptions } = useActionSpread(\n\tconst { actions: actionsDefinition, menu: menuOptions } = useActionSpread(",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action }]: any): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "FileExport.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/ExportMessages/FileExport.tsx",
        "code": {
            "t": "const FileExport: FC<FileExportProps> = ({ onCancel, rid }) => {\nconst FileExport: FC<FileExportProps> = ({ onCancel, rid }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { values, handlers } = useForm({\n\tconst { values, handlers } = useForm({\n\t\tdateFrom: '',\n\t\tdateTo: '',\n\t\tformat: 'html',\n\t});\n\n\tconst { dateFrom, dateTo, format } = values as MailExportFormValues;\n\tconst { dateFrom, dateTo, format } = values as MailExportFormValues;",
            "handleSubmit": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleSubmit = async (): Promise<void> => {\n\tconst handleSubmit = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait roomsExport({\n\t\t\t\trid,\n\t\t\t\ttype: 'file',\n\t\t\t\tdateFrom,\n\t\t\t\tdateTo,\n\t\t\t\tformat,\n\t\t\t});\n\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Your_email_has_been_queued_for_sending'),\n\t\t\t});\n\t\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "MailExportForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/ExportMessages/MailExportForm.tsx",
        "code": {
            "clickable": "const clickable = css`\nconst clickable = css`\n\tcursor: pointer;\n`;\n\nconst MailExportForm: FC<MailExportFormProps> = ({ onCancel, rid }) => {\nconst MailExportForm: FC<MailExportFormProps> = ({ onCancel, rid }) => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);",
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst roomName = room?.t && roomCoordinator.getRoomName(room.t, room);\n\tconst roomName = room?.t && roomCoordinator.getRoomName(room.t, room);\n\n\tconst [errorMessage, setErrorMessage] = useState<string>();\n\tconst [errorMessage, setErrorMessage] = useState<string>();\n\n\tconst messages = selectedMessageStore.getSelectedMessages();\n\tconst messages = selectedMessageStore.getSelectedMessages();\n\tconst count = useCountSelected();\n\tconst count = useCountSelected();\n\n\tconst { values, handlers } = useForm({\n\tconst { values, handlers } = useForm({\n\t\tdateFrom: '',\n\t\tdateTo: '',\n\t\ttoUsers: [],\n\t\tadditionalEmails: '',\n\t\tsubject: t('Mail_Messages_Subject', roomName),\n\t});\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { toUsers, additionalEmails, subject } = values as MailExportFormValues;\n\tconst { toUsers, additionalEmails, subject } = values as MailExportFormValues;",
            "clearSelection": "\tconst clearSelection = useMutableCallback(() => {\n\tconst clearSelection = useMutableCallback(() => {\n\t\tselectedMessageStore.clearStore();\n\t});\n\n\tuseEffect(() => {\n\t\tselectedMessageStore.setIsSelecting(true);\n\t\treturn (): void => {\n\t\t\tselectedMessageStore.reset();\n\t\t};\n\t}, [selectedMessageStore]);\n\n\tconst { handleToUsers, handleAdditionalEmails, handleSubject } = handlers;\n\tconst { handleToUsers, handleAdditionalEmails, handleSubject } = handlers;"
        },
        "depth_rank": 8
    },
    {
        "file": "NotificationPreferencesWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferencesWithData.tsx",
        "code": {
            "notifications": "\tconst handlePlaySound = (): void => {\n\tconst handlePlaySound = (): void => {\n\t\tcustomSound.play(desktopSound);\n\t};\n\n\tconst handleSave = methods.handleSubmit(\n\tconst handleSave = methods.handleSubmit(\n\t\t({ turnOn, muteGroupMentions, showCounter, showMentions, desktopAlert, desktopSound, mobileAlert, emailAlert }) => {\n\t\t\tconst notifications = {\n\t\t\tconst notifications = {\n\t\t\t\tdisableNotifications: turnOn ? '0' : '1',\n\t\t\t\tmuteGroupMentions: muteGroupMentions ? '1' : '0',\n\t\t\t\thideUnreadStatus: showCounter ? '0' : '1',\n\t\t\t\thideMentionStatus: showMentions ? '0' : '1',\n\t\t\t\tdesktopNotifications: desktopAlert,\n\t\t\t\taudioNotificationValue: desktopSound,\n\t\t\t\tmobilePushNotifications: mobileAlert,\n\t\t\t\temailNotifications: emailAlert,\n\t\t\t};\n\n\t\t\tsaveSettings({\n\t\t\t\troomId: rid,\n\t\t\t\tnotifications,\n\t\t\t});\n\t\t},\n\t);\n\n\treturn (\n\t\t<FormProvider {...methods}>"
        },
        "depth_rank": 8
    },
    {
        "file": "NotificationPreferencesForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferencesForm.tsx",
        "code": {
            "t": "const NotificationPreferencesForm = ({ notificationOptions, handlePlaySound }: NotificationPreferencesFormProps) => {\nconst NotificationPreferencesForm = ({ notificationOptions, handlePlaySound }: NotificationPreferencesFormProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { watch, control } = useFormContext();\n\tconst { watch, control } = useFormContext();"
        },
        "depth_rank": 8
    },
    {
        "file": "NotificationPreferences.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferences.tsx",
        "code": {
            "NotificationPreferences": "const NotificationPreferences = ({\nconst NotificationPreferences = ({\n\thandleClose,\n\thandleSave,\n\tnotificationOptions,\n\thandlePlaySound,\n}: NotificationPreferencesProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tformState: { isDirty },"
        },
        "depth_rank": 8
    },
    {
        "file": "NotificationByDevice.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/components/NotificationByDevice.tsx",
        "code": {
            "NotificationByDevice": "const NotificationByDevice = ({ device, icon, children }: NotificationByDeviceProps): ReactElement => (\nconst NotificationByDevice = ({ device, icon, children }: NotificationByDeviceProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "NotificationPreference.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/components/NotificationPreference.tsx",
        "code": {
            "NotificationPreference": "const NotificationPreference = ({\nconst NotificationPreference = ({\n\tname,\n\toptions,\n\tonChange,\n\toptionValue,\n\tchildren,\n\t...props\n}: NotificationPreferenceProps): ReactElement => (\n\t<Field {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomInfoRouter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/RoomInfoRouter.tsx",
        "code": {
            "onClickEnterRoom": "\tconst canEdit = useCanEditRoom(room);\n\tconst canEdit = useCanEditRoom(room);\n\tconst onClickEnterRoom = useMutableCallback(() => onEnterRoom(room));\n\tconst onClickEnterRoom = useMutableCallback(() => onEnterRoom(room));\n\n\tif (isEditing) {\n\t\treturn <EditRoomInfoWithData rid={rid} onClickBack={() => setIsEditing(false)} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "useRoomLeave.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomLeave.tsx",
        "code": {
            "leaveAction": "\tconst handleLeave = useMutableCallback(() => {\n\tconst handleLeave = useMutableCallback(() => {\n\t\tconst leaveAction = async () => {\n\t\tconst leaveAction = async () => {\n\t\t\ttry {\n\t\t\t\tawait leaveRoom(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t\tLegacyRoomManager.close(room._id);\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.LEAVE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.LEAVE_WARNING);\n\n\t\tsetModal(\n\t\t\t<WarningModal\n\t\t\t\ttext={t(warnText as TranslationKey, room.fname || room.name)}"
        },
        "depth_rank": 10
    },
    {
        "file": "useRoomConvertToTeam.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomConvertToTeam.tsx",
        "code": {
            "onConfirm": "\tconst convertRoomToTeam = useEndpoint('POST', room.t === 'c' ? '/v1/channels.convertToTeam' : '/v1/groups.convertToTeam');\n\tconst convertRoomToTeam = useEndpoint('POST', room.t === 'c' ? '/v1/channels.convertToTeam' : '/v1/groups.convertToTeam');\n\n\tconst handleConvertToTeam = useMutableCallback(async () => {\n\tconst handleConvertToTeam = useMutableCallback(async () => {\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\ttry {\n\t\t\t\tawait convertRoomToTeam(room.t === 'c' ? { channelId: room._id } : { roomId: room._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "useRoomDelete.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomDelete.tsx",
        "code": {
            "onConfirm": "\tconst canDelete = isRoomFederated(room) ? false : hasPermissionToDelete;\n\tconst canDelete = isRoomFederated(room) ? false : hasPermissionToDelete;\n\n\tconst deleteRoom = useEndpoint('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete');\n\tconst deleteRoom = useEndpoint('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete');\n\n\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteRoom({ roomId: room._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "useRoomHide.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomHide.tsx",
        "code": {
            "hide": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst hideRoom = useMethod('hideRoom');\n\tconst hideRoom = useMethod('hideRoom');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async () => {\n\t\tconst hide = async () => {\n\t\t\ttry {\n\t\t\t\tawait hideRoom(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tsetModal(\n\t\t\t<WarningModal\n\t\t\t\ttext={t(warnText as TranslationKey, room.fname || room.name)}"
        },
        "depth_rank": 10
    },
    {
        "file": "EditChannel.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/EditRoomInfo/EditChannel.js",
        "code": {
            "useInitialValues": "const typeMap = {\nconst typeMap = {\n\tc: 'Channels',\n\tp: 'Groups',\n\td: 'DMs',\n};\n\nconst useInitialValues = (room, settings) => {\nconst useInitialValues = (room, settings) => {\n\tconst {\n\tconst {\n\t\tt,\n\t\tro,\n\t\tarchived,\n\t\ttopic,\n\t\tdescription,\n\t\tannouncement,\n\t\tjoinCodeRequired,\n\t\tsysMes,\n\t\tencrypted,\n\t\tretention = {},",
            "filesOnlyDefault": "\tconst excludePinnedDefault = useSetting('RetentionPolicy_DoNotPrunePinned');\n\tconst excludePinnedDefault = useSetting('RetentionPolicy_DoNotPrunePinned');\n\tconst filesOnlyDefault = useSetting('RetentionPolicy_FilesOnly');\n\tconst filesOnlyDefault = useSetting('RetentionPolicy_FilesOnly');\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\troomName: t === 'd' ? room.usernames.join(' x ') : roomCoordinator.getRoomName(t, { type: t, ...room }),",
            "saveData": "\tconst saveData = useRef({});\n\tconst saveData = useRef({});",
            "onChange": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst onChange = useCallback(({ initialValue, value, key }) => {\n\tconst onChange = useCallback(({ initialValue, value, key }) => {\n\t\tconst { current } = saveData;\n\t\tconst { current } = saveData;",
            "sysMesOptions": "\tconst sysMesOptions = useMemo(() => MessageTypesValues.map(({ key, i18nLabel }) => [key, t(i18nLabel)]), [t]);\n\tconst sysMesOptions = useMemo(() => MessageTypesValues.map(({ key, i18nLabel }) => [key, t(i18nLabel)]), [t]);",
            "isAllowed": "\tconst {\n\tconst {\n\t\troomName,\n\t\troomType,\n\t\treadOnly,\n\t\tencrypted,\n\t\troomAvatar,\n\t\tarchived,\n\t\troomTopic,\n\t\troomDescription,\n\t\troomAnnouncement,\n\t\treactWhenReadOnly,\n\t\tjoinCode,\n\t\tjoinCodeRequired,\n\t\tsystemMessages,\n\t\thideSysMes,\n\t\tretentionEnabled,\n\t\tretentionOverrideGlobal,\n\t\tretentionMaxAge,\n\t\tretentionExcludePinned,\n\t\tretentionFilesOnly,\n\t} = values;\n\n\tconst {\n\tconst {\n\t\thandleJoinCode,\n\t\thandleJoinCodeRequired,\n\t\thandleSystemMessages,\n\t\thandleEncrypted,\n\t\thandleHideSysMes,\n\t\thandleRoomName,\n\t\thandleReadOnly,\n\t\thandleArchived,\n\t\thandleRoomAvatar,\n\t\thandleReactWhenReadOnly,\n\t\thandleRoomType,\n\t\thandleRoomTopic,\n\t\thandleRoomDescription,\n\t\thandleRoomAnnouncement,\n\t\thandleRetentionEnabled,\n\t\thandleRetentionOverrideGlobal,\n\t\thandleRetentionMaxAge,\n\t\thandleRetentionExcludePinned,\n\t\thandleRetentionFilesOnly,\n\t} = handlers;\n\n\tconst [\n\tconst [\n\t\tcanViewName,\n\t\tcanViewTopic,\n\t\tcanViewAnnouncement,\n\t\tcanViewArchived,\n\t\tcanViewDescription,\n\t\tcanViewType,\n\t\tcanViewReadOnly,\n\t\tcanViewHideSysMes,\n\t\tcanViewJoinCode,\n\t\tcanViewEncrypted,\n\t] = useMemo(() => {\n\t\tconst isAllowed = roomCoordinator.getRoomDirectives(room.t).allowRoomSettingChange || (() => {});\n\t\tconst isAllowed = roomCoordinator.getRoomDirectives(room.t).allowRoomSettingChange || (() => {});",
            "archiveAction": "\tconst archiveSelector = room.archived ? 'unarchive' : 'archive';\n\tconst archiveSelector = room.archived ? 'unarchive' : 'archive';\n\tconst archiveMessage = room.archived ? 'Room_has_been_unarchived' : 'Room_has_been_archived';\n\tconst archiveMessage = room.archived ? 'Room_has_been_unarchived' : 'Room_has_been_archived';\n\tconst saveAction = useEndpointAction('POST', '/v1/rooms.saveRoomSettings', {\n\tconst saveAction = useEndpointAction('POST', '/v1/rooms.saveRoomSettings', {\n\t\tsuccessMessage: t('Room_updated_successfully'),\n\t});\n\tconst archiveAction = useEndpointAction('POST', '/v1/rooms.changeArchivationState', { successMessage: t(archiveMessage) });\n\tconst archiveAction = useEndpointAction('POST', '/v1/rooms.changeArchivationState', { successMessage: t(archiveMessage) });",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst { joinCodeRequired, hideSysMes, ...data } = saveData.current;\n\t\tconst { joinCodeRequired, hideSysMes, ...data } = saveData.current;",
            "save": "\t\tconst save = () =>\n\t\tconst save = () =>\n\t\t\tsaveAction({\n\t\t\t\trid: room._id,\n\t\t\t\t...data,\n\t\t\t\t...(joinCode && { joinCode: joinCodeRequired ? joinCode : '' }),",
            "archive": "\t\tconst archive = () => archiveAction({ rid: room._id, action: archiveSelector });\n\t\tconst archive = () => archiveAction({ rid: room._id, action: archiveSelector });",
            "onConfirm": "\tconst deleteRoom = useMethod('eraseRoom');\n\tconst deleteRoom = useMethod('eraseRoom');\n\n\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst onCancel = () => setModal(undefined);\n\t\tconst onCancel = () => setModal(undefined);\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\tawait deleteRoom(room._id);\n\t\t\tonCancel();\n\t\t\trouter.navigate('/home');\n\t\t};\n\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={onConfirm} onCancel={onCancel} confirmText={t('Yes_delete_it')}>",
            "isFederated": "\tconst changeRoomType = useMutableCallback(() => {\n\tconst changeRoomType = useMutableCallback(() => {\n\t\thandleRoomType(roomType === 'p' ? 'c' : 'p');\n\t});\n\n\tconst onChangeMaxAge = useMutableCallback((e) => {\n\tconst onChangeMaxAge = useMutableCallback((e) => {\n\t\thandleRetentionMaxAge(Math.max(1, Number(e.currentTarget.value)));\n\t});\n\n\tconst isFederated = useMemo(() => isRoomFederated(room), [room]);\n\tconst isFederated = useMemo(() => isRoomFederated(room), [room]);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{onClickBack && <ContextualbarBack onClick={onClickBack} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "EditChannelWithData.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/EditRoomInfo/EditChannelWithData.js",
        "code": {
            "onClickClose": "function EditChannelWithData({ rid, onClickBack }) {\nfunction EditChannelWithData({ rid, onClickBack }) {\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst onClickClose = useTabBarClose();\n\tconst onClickClose = useTabBarClose();\n\n\treturn <EditChannel onClickClose={onClickClose} onClickBack={onClickBack} room={{ type: room?.t, ...room }} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/RoomInfo/RoomInfo.tsx",
        "code": {
            "t": "const RoomInfo = ({ room, icon, onClickBack, onClickClose, onClickEnterRoom, onClickEdit, resetState }: RoomInfoProps) => {\nconst RoomInfo = ({ room, icon, onClickBack, onClickClose, onClickEnterRoom, onClickEdit, resetState }: RoomInfoProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { name, fname, description, topic, archived, broadcast, announcement } = room;\n\tconst { name, fname, description, topic, archived, broadcast, announcement } = room;",
            "memoizedActions": "\tconst roomTitle = fname || name;\n\tconst roomTitle = fname || name;\n\n\tconst retentionPolicy = useRetentionPolicy(room);\n\tconst retentionPolicy = useRetentionPolicy(room);\n\tconst memoizedActions = useRoomActions(room, { onClickEnterRoom, onClickEdit }, resetState);\n\tconst memoizedActions = useRoomActions(room, { onClickEnterRoom, onClickEdit }, resetState);",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]) => (\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelToTeamSelection.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamSelection.tsx",
        "code": {
            "t": "const ChannelToTeamSelection = ({ teamId, onCancel, onChange, onConfirm }: ChannelToTeamSelectionProps) => {\nconst ChannelToTeamSelection = ({ teamId, onCancel, onChange, onConfirm }: ChannelToTeamSelectionProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\tcancelText={t('Cancel')}"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelToTeamModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamModal.tsx",
        "code": {
            "ChannelToTeamModal": "const CHANNEL_TO_TEAM_STEPS = {\nconst CHANNEL_TO_TEAM_STEPS = {\n\tSELECTION: 'selection',\n\tCONFIRMATION: 'confirmation',\n};\n\nconst ChannelToTeamModal = ({ onCancel, onConfirm }: ChannelToTeamModalProps) => {\nconst ChannelToTeamModal = ({ onCancel, onConfirm }: ChannelToTeamModalProps) => {\n\tconst [step, setStep] = useState(CHANNEL_TO_TEAM_STEPS.SELECTION);\n\tconst [step, setStep] = useState(CHANNEL_TO_TEAM_STEPS.SELECTION);\n\tconst [teamId, setTeamId] = useState<string>();\n\tconst [teamId, setTeamId] = useState<string>();\n\n\tif (step === CHANNEL_TO_TEAM_STEPS.CONFIRMATION && teamId) {\n\t\treturn <ChannelToTeamConfirmation onCancel={onCancel} onConfirm={() => onConfirm(teamId)} />;",
            "handleChange": "\tconst handleChange = (value: string | string[]) => {\n\tconst handleChange = (value: string | string[]) => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetTeamId(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<ChannelToTeamSelection\n\t\t\tonCancel={onCancel}"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelToTeamConfirmation.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamConfirmation.tsx",
        "code": {
            "t": "const ChannelToTeamConfirmation = ({ onCancel, onConfirm }: ChannelToTeamConfirmationProps) => {\nconst ChannelToTeamConfirmation = ({ onCancel, onConfirm }: ChannelToTeamConfirmationProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Confirmation')}"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/ThreadList.tsx",
        "code": {
            "goToThread": "\tconst goToThread = useGoToThread({ replace: true });\n\tconst goToThread = useGoToThread({ replace: true });",
            "handleThreadClick": "\tconst handleThreadClick = useCallback(\n\tconst handleThreadClick = useCallback(\n\t\t(tmid: IMessage['_id']) => {\n\t\t\tgoToThread({ rid, tmid });"
        },
        "depth_rank": 8
    },
    {
        "file": "Thread.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/Thread.tsx",
        "code": {
            "goToThreadList": "const Thread: VFC<ThreadProps> = ({ tmid }) => {\nconst Thread: VFC<ThreadProps> = ({ tmid }) => {\n\tconst goToThreadList = useGoToThreadList({ replace: true });\n\tconst goToThreadList = useGoToThreadList({ replace: true });",
            "toggleFollowingMutation": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst following = uid ? mainMessageQueryResult.data?.replies?.includes(uid) ?? false : false;\n\tconst following = uid ? mainMessageQueryResult.data?.replies?.includes(uid) ?? false : false;\n\tconst toggleFollowingMutation = useToggleFollowingThreadMutation({\n\tconst toggleFollowingMutation = useToggleFollowingThreadMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleClose": "\tconst handleClose = () => {\n\tconst handleClose = () => {\n\t\tcloseTabBar();\n\t};\n\n\treturn (\n\t\t<ContextualbarInnerContent>\n\t\t\t{canExpand && expanded && <Modal.Backdrop onClick={handleBackdropClick} />}"
        },
        "depth_rank": 8
    },
    {
        "file": "Threads.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/Threads.tsx",
        "code": {
            "tmid": "const Threads = (): ReactElement => {\nconst Threads = (): ReactElement => {\n\tconst tmid = useTabContext() as string | undefined;\n\tconst tmid = useTabContext() as string | undefined;\n\n\tif (tmid) {\n\t\treturn <Thread tmid={tmid} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "useToggleFollowingThreadMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useToggleFollowingThreadMutation.ts",
        "code": {
            "queryClient": "\tconst followMessage = useEndpoint('POST', '/v1/chat.followMessage');\n\tconst followMessage = useEndpoint('POST', '/v1/chat.followMessage');\n\tconst unfollowMessage = useEndpoint('POST', '/v1/chat.unfollowMessage');\n\tconst unfollowMessage = useEndpoint('POST', '/v1/chat.unfollowMessage');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync ({ tmid, follow }) => {\n\t\t\tif (follow) {\n\t\t\t\tawait followMessage({ mid: tmid });"
        },
        "depth_rank": 9
    },
    {
        "file": "useLegacyThreadMessageListScrolling.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useLegacyThreadMessageListScrolling.ts",
        "code": {
            "observer": "\t\tconst observer = new ResizeObserver(() => {\n\t\tconst observer = new ResizeObserver(() => {\n\t\t\tsendToBottomIfNecessary();\n\t\t});\n\n\t\tif (listWrapperRef.current) observer.observe(listWrapperRef.current);\n\t\tif (listRef.current) observer.observe(listRef.current);\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\treturn { listWrapperRef, listRef, requestScrollToBottom: sendToBottomIfNecessary, onScroll };"
        },
        "depth_rank": 9
    },
    {
        "file": "useLegacyThreadMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useLegacyThreadMessages.ts",
        "code": {
            "getThreadMessages": "\tconst [loading, setLoading] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\n\tconst getThreadMessages = useMethod('getThreadMessages');\n\tconst getThreadMessages = useMethod('getThreadMessages');\n\n\tuseEffect(() => {\n\t\tsetLoading(true);\n\t\tgetThreadMessages({ tmid }).then((messages) => {\n\t\t\tupsertMessageBulk({ msgs: messages }, Messages);"
        },
        "depth_rank": 9
    },
    {
        "file": "useGetMessageByID.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useGetMessageByID.ts",
        "code": {
            "getMessage": "\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\n\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\n\n\treturn useCallback(\n\t\tasync (mid: IMessage['_id']) => {\n\t\t\ttry {\n\t\t\t\tconst { message: rawMessage } = await getMessage({ msgId: mid });\n\t\t\t\tconst { message: rawMessage } = await getMessage({ msgId: mid });"
        },
        "depth_rank": 9
    },
    {
        "file": "useThreadsList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useThreadsList.ts",
        "code": {
            "fetchMessages": "\tconst threadsList = useMemo(() => new ThreadsList(options), [options]);\n\tconst threadsList = useMemo(() => new ThreadsList(options), [options]);\n\n\tconst getThreadsList = useEndpoint('GET', '/v1/chat.getThreadsList');\n\tconst getThreadsList = useEndpoint('GET', '/v1/chat.getThreadsList');\n\n\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { threads, total } = await getThreadsList({\n\t\t\tconst { threads, total } = await getThreadsList({\n\t\t\t\trid: options.rid,\n\t\t\t\ttype: options.type,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: threads,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getThreadsList, options.rid, options.text, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList("
        },
        "depth_rank": 9
    },
    {
        "file": "useThreadMainMessageQuery.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useThreadMainMessageQuery.ts",
        "code": {
            "createDeleteCriteria": "const createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\tconst query: Query<IMessage> = { ts: params.ts };"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadTitle.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadTitle.tsx",
        "code": {
            "innerHTML": "const ThreadTitle = ({ mainMessage }: ThreadTitleProps) => {\nconst ThreadTitle = ({ mainMessage }: ThreadTitleProps) => {\n\tconst innerHTML = useMemo(() => ({ __html: normalizeThreadTitle(mainMessage) }), [mainMessage]);\n\tconst innerHTML = useMemo(() => ({ __html: normalizeThreadTitle(mainMessage) }), [mainMessage]);"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadListItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadListItem.tsx",
        "code": {
            "msg": "const ThreadListItem = ({ thread, unread, unreadUser, unreadGroup, onClick }: ThreadListItemProps): ReactElement => {\nconst ThreadListItem = ({ thread, unread, unreadUser, unreadGroup, onClick }: ThreadListItemProps): ReactElement => {\n\tconst uid = useUserId() ?? undefined;\n\tconst uid = useUserId() ?? undefined;\n\tconst decryptedMsg = useDecryptedMessage(thread);\n\tconst decryptedMsg = useDecryptedMessage(thread);\n\tconst msg = normalizeThreadMessage({ ...thread, msg: decryptedMsg });\n\tconst msg = normalizeThreadMessage({ ...thread, msg: decryptedMsg });",
            "toggleFollowMessage": "\tconst followMessage = useMethod('followMessage');\n\tconst followMessage = useMethod('followMessage');\n\tconst unfollowMessage = useMethod('unfollowMessage');\n\tconst unfollowMessage = useMethod('unfollowMessage');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst toggleFollowMessage = useCallback(async (): Promise<void> => {\n\tconst toggleFollowMessage = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tif (following) {\n\t\t\t\tawait unfollowMessage({ mid: thread._id });"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadChat.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadChat.tsx",
        "code": {
            "t": "\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst sendToChannelID = useUniqueId();\n\tconst sendToChannelID = useUniqueId();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ContextualbarContent flexShrink={1} flexGrow={1} paddingInline={0} {...fileUploadTriggerProps}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadListMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadListMessage.tsx",
        "code": {
            "ThreadListMessage": "const ThreadListMessage = ({\nconst ThreadListMessage = ({\n\t_id,\n\tmsg,\n\tfollowing,\n\tusername,\n\tname = username,\n\tts,\n\treplies,\n\tparticipants,\n\thandleFollowButton,\n\tunread,\n\tmention,\n\tall,\n\ttlm,\n\tclassName = [],\n\temoji,\n\t...props\n}: ThreadListMessageProps): ReactElement => {"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadSkeleton.tsx",
        "code": {
            "ThreadSkeleton": "const ThreadSkeleton = (): ReactElement => {\nconst ThreadSkeleton = (): ReactElement => {\n\treturn (\n\t\t<Box p='x24'>\n\t\t\t<Skeleton width='32px' height='32px' variant='rect' /> <Skeleton />\n\t\t\t{Array(5)\n\t\t\t\t.fill(5)\n\t\t\t\t.map((_, index) => (\n\t\t\t\t\t<Skeleton key={index} />"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadMessageList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadMessageList.tsx",
        "code": {
            "ThreadMessageList": "const ThreadMessageList = ({ mainMessage }: ThreadMessageListProps): ReactElement => {\nconst ThreadMessageList = ({ mainMessage }: ThreadMessageListProps): ReactElement => {\n\tconst { messages, loading } = useLegacyThreadMessages(mainMessage._id);\n\tconst { messages, loading } = useLegacyThreadMessages(mainMessage._id);",
            "system": "\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomFiles.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/RoomFiles.js",
        "code": {
            "RoomFiles": "function RoomFiles({\nfunction RoomFiles({\n\tloading,\n\tfilesItems = [],\n\ttext,\n\ttype,\n\tsetText,\n\tsetType,\n\tonClickClose,\n\tonClickDelete,\n\ttotal,\n\tloadMoreItems,\n\tisDeletionAllowed,\n}) {",
            "itemData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => [\n\t\t\t['all', t('All')],\n\t\t\t['image', t('Images')],\n\t\t\t['video', t('Videos')],\n\t\t\t['audio', t('Audios')],\n\t\t\t['text', t('Texts')],\n\t\t\t['application', t('Files')],\n\t\t],\n\t\t[t],\n\t);\n\tconst inputRef = useAutoFocus(true);\n\tconst inputRef = useAutoFocus(true);\n\n\tconst searchId = useUniqueId();\n\tconst searchId = useUniqueId();\n\n\tconst itemData = useMemo(\n\tconst itemData = useMemo(\n\t\t() => ({\n\t\t\tonClickDelete,\n\t\t\tisDeletionAllowed,\n\t\t}),\n\t\t[isDeletionAllowed, onClickDelete],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='attachment' />\n\t\t\t\t<ContextualbarTitle>{t('Files')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomFilesWithData.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/RoomFilesWithData.js",
        "code": {
            "handleTextChange": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst { filesList, loadMoreItems, reload } = useFilesList(useMemo(() => ({ rid, type, text }), [rid, type, text]));\n\tconst { filesList, loadMoreItems, reload } = useFilesList(useMemo(() => ({ rid, type, text }), [rid, type, text]));",
            "onConfirm": "\tconst handleDelete = useMutableCallback((_id) => {\n\tconst handleDelete = useMutableCallback((_id) => {\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteFile(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Deleted') });",
            "isDeletionAllowed": "\tconst isDeletionAllowed = useMessageDeletionIsAllowed(rid, uid);\n\tconst isDeletionAllowed = useMessageDeletionIsAllowed(rid, uid);\n\n\treturn (\n\t\t<RoomFiles\n\t\t\trid={rid}"
        },
        "depth_rank": 8
    },
    {
        "file": "Row.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/Row.js",
        "code": {
            "Row": "const Row = ({ item, data, index }) => {\nconst Row = ({ item, data, index }) => {\n\tconst { onClickDelete, isDeletionAllowed } = data;\n\tconst { onClickDelete, isDeletionAllowed } = data;"
        },
        "depth_rank": 8
    },
    {
        "file": "useMessageDeletionIsAllowed.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/hooks/useMessageDeletionIsAllowed.js",
        "code": {
            "isOwn": "\t\t\t\t\t\tconst currentTsDiff = getDifference(new Date(), new Date(ts), MINUTES);\n\t\t\t\t\t\tconst currentTsDiff = getDifference(new Date(), new Date(ts), MINUTES);\n\n\t\t\t\t\t\treturn currentTsDiff < blockDeleteInMinutes;\n\t\t\t\t  }\n\t\t\t\t: () => true;\n\n\t\tif (userHasPermissonToDeleteAny) {\n\t\t\treturn checkTimeframe;\n\t\t}\n\n\t\tconst isOwn = ({ uid: owner }) => owner === uid;\n\t\tconst isOwn = ({ uid: owner }) => owner === uid;"
        },
        "depth_rank": 9
    },
    {
        "file": "FileItem.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/components/FileItem.js",
        "code": {
            "format": "const FileItem = ({ fileData, isDeletionAllowed, onClickDelete }) => {\nconst FileItem = ({ fileData, isDeletionAllowed, onClickDelete }) => {\n\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\n\tconst { _id, name, url, uploadedAt, ts, type, typeGroup, style, className, user } = fileData;\n\tconst { _id, name, url, uploadedAt, ts, type, typeGroup, style, className, user } = fileData;"
        },
        "depth_rank": 9
    },
    {
        "file": "MenuItem.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/components/MenuItem.js",
        "code": {
            "menuOptions": "const MenuItem = ({ _id, name, url, onClickDelete }) => {\nconst MenuItem = ({ _id, name, url, onClickDelete }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst menuOptions = {\n\tconst menuOptions = {\n\t\tdownLoad: {\n\t\t\tlabel: (\n\t\t\t\t<Box display='flex' alignItems='center'>\n\t\t\t\t\t<Icon mie='x4' name='download' size='x16' />\n\t\t\t\t\t{t('Download')}"
        },
        "depth_rank": 9
    },
    {
        "file": "Apps.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Apps/Apps.tsx",
        "code": {
            "Apps": "const Apps = ({ view, onSubmit, onClose, onCancel, appId }: AppsProps): JSX.Element => (\nconst Apps = ({ view, onSubmit, onClose, onCancel, appId }: AppsProps): JSX.Element => ("
        },
        "depth_rank": 8
    },
    {
        "file": "AppsWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/Apps/AppsWithData.tsx",
        "code": {
            "filterInputFields": "const isInputBlock = (block: any): block is IInputBlock => block?.element?.initialValue;\nconst isInputBlock = (block: any): block is IInputBlock => block?.element?.initialValue;\n\nconst useValues = (view: IUIKitSurface): [any, Dispatch<any>] => {\nconst useValues = (view: IUIKitSurface): [any, Dispatch<any>] => {\n\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\t\t...values,\n\t\t[actionId]: payload,\n\t}));\n\n\tconst initializer = useMutableCallback(() => {\n\tconst initializer = useMutableCallback(() => {\n\t\tconst filterInputFields = (block: IBlock | Block): boolean => {\n\t\tconst filterInputFields = (block: IBlock | Block): boolean => {\n\t\t\tif (isInputBlock(block)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t((block as IActionsBlock).elements as IInputElement[])?.filter((element) => filterInputFields({ element } as IInputBlock)).length",
            "mapElementToState": "\t\tconst mapElementToState = (block: IBlock | Block): InputFieldStateTuple | InputFieldStateTuple[] => {\n\t\tconst mapElementToState = (block: IBlock | Block): InputFieldStateTuple | InputFieldStateTuple[] => {\n\t\t\tif (isInputBlock(block)) {\n\t\t\t\tconst { element, blockId } = block;\n\t\t\t\tconst { element, blockId } = block;",
            "AppsWithData": "const AppsWithData = ({\nconst AppsWithData = ({\n\tviewId,\n\troomId,\n\tpayload,\n\tappId,\n}: {",
            "closeTabBar": "\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst closeTabBar = useTabBarClose();\n\tconst closeTabBar = useTabBarClose();\n\n\tconst [state, setState] = useState<ViewState>(payload);\n\tconst [state, setState] = useState<ViewState>(payload);\n\tconst { view } = state;\n\tconst { view } = state;",
            "handleUpdate": "\tconst [values, updateValues] = useValues(view);\n\tconst [values, updateValues] = useValues(view);\n\n\tuseEffect(() => {\n\t\tconst handleUpdate = ({ type, ...data }: IUIKitContextualBarInteraction | IUIKitErrorInteraction): void => {\n\t\tconst handleUpdate = ({ type, ...data }: IUIKitContextualBarInteraction | IUIKitErrorInteraction): void => {\n\t\t\tif (type === 'errors') {\n\t\t\t\tconst { errors } = data as Omit<IUIKitErrorInteraction, 'type'>;\n\t\t\t\tconst { errors } = data as Omit<IUIKitErrorInteraction, 'type'>;",
            "groupStateByBlockId": "\tconst groupStateByBlockId = (obj: InputFieldStateObject): InputFieldStateByBlockId =>\n\tconst groupStateByBlockId = (obj: InputFieldStateObject): InputFieldStateByBlockId =>\n\t\tObject.entries(obj).reduce((obj: InputFieldStateByBlockId, [key, { blockId, value }]: InputFieldStateTuple) => {\n\t\t\tobj[blockId] = obj[blockId] || {};",
            "debouncedBlockAction": "\tconst prevent = (e: SyntheticEvent): void => {\n\tconst prevent = (e: SyntheticEvent): void => {\n\t\tif (e) {\n\t\t\t(e.nativeEvent || e).stopImmediatePropagation();\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t}\n\t};\n\n\tconst debouncedBlockAction = useDebouncedCallback(({ actionId, appId, value, blockId }: ActionParams) => {\n\tconst debouncedBlockAction = useDebouncedCallback(({ actionId, appId, value, blockId }: ActionParams) => {\n\t\tactionManager.triggerBlockAction({\n\t\t\tcontainer: {\n\t\t\t\ttype: UIKitIncomingInteractionContainerType.VIEW,\n\t\t\t\tid: viewId,\n\t\t\t},\n\t\t\tactionId,\n\t\t\tappId,\n\t\t\tvalue,\n\t\t\tblockId,\n\t\t});\n\t}, 700);\n\n\tconst context: ContextType<typeof kitContext> = {\n\tconst context: ContextType<typeof kitContext> = {\n\t\taction: async ({ actionId, appId, value, blockId, dispatchActionConfig }: ActionParams): Promise<void> => {\n\t\t\tif (Array.isArray(dispatchActionConfig) && dispatchActionConfig.includes(InputElementDispatchAction.ON_CHARACTER_ENTERED)) {\n\t\t\t\tawait debouncedBlockAction({ actionId, appId, value, blockId });",
            "handleClose": "\tconst handleSubmit = useMutableCallback((e) => {\n\tconst handleSubmit = useMutableCallback((e) => {\n\t\tprevent(e);\n\t\tcloseTabBar();\n\t\tactionManager.triggerSubmitView({\n\t\t\tviewId,\n\t\t\tappId,\n\t\t\tpayload: {\n\t\t\t\tview: {\n\t\t\t\t\t...view,\n\t\t\t\t\tid: viewId,\n\t\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t});\n\n\tconst handleCancel = useMutableCallback((e) => {\n\tconst handleCancel = useMutableCallback((e) => {\n\t\tprevent(e);\n\t\tcloseTabBar();\n\t\treturn actionManager.triggerCancel({\n\t\t\tappId,\n\t\t\tviewId,\n\t\t\tview: {\n\t\t\t\t...view,\n\t\t\t\tid: viewId,\n\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t},\n\t\t});\n\t});\n\n\tconst handleClose = useMutableCallback((e) => {\n\tconst handleClose = useMutableCallback((e) => {\n\t\tprevent(e);\n\t\tcloseTabBar();\n\t\treturn actionManager.triggerCancel({\n\t\t\tappId,\n\t\t\tviewId,\n\t\t\tview: {\n\t\t\t\t...view,\n\t\t\t\tid: viewId,\n\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t},\n\t\t\tisCleared: true,\n\t\t});\n\t});\n\n\treturn (\n\t\t<kitContext.Provider value={context}>"
        },
        "depth_rank": 8
    },
    {
        "file": "PruneMessages.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessages.stories.tsx",
        "code": {
            "methods": "\t\t\tconst methods = useForm({\n\t\t\tconst methods = useForm({\n\t\t\t\tdefaultValues: {\n\t\t\t\t\tpinned: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn (\n\t\t\t\t<FormProvider {...methods}>"
        },
        "depth_rank": 8
    },
    {
        "file": "PruneMessages.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessages.tsx",
        "code": {
            "t": "const PruneMessages = ({ callOutText, validateText, onClickClose, onClickPrune }: PruneMessagesProps): ReactElement => {\nconst PruneMessages = ({ callOutText, validateText, onClickClose, onClickPrune }: PruneMessagesProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { control, register } = useFormContext();\n\tconst { control, register } = useFormContext();",
            "attachedCheckboxId": "\tconst inclusiveCheckboxId = useUniqueId();\n\tconst inclusiveCheckboxId = useUniqueId();\n\tconst pinnedCheckboxId = useUniqueId();\n\tconst pinnedCheckboxId = useUniqueId();\n\tconst discussionCheckboxId = useUniqueId();\n\tconst discussionCheckboxId = useUniqueId();\n\tconst threadsCheckboxId = useUniqueId();\n\tconst threadsCheckboxId = useUniqueId();\n\tconst attachedCheckboxId = useUniqueId();\n\tconst attachedCheckboxId = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='eraser' />\n\t\t\t\t<ContextualbarTitle>{t('Prune_Messages')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "PruneMessagesDateTimeRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessagesDateTimeRow.tsx",
        "code": {
            "PruneMessagesDateTimeRow": "const PruneMessagesDateTimeRow = ({ label, field }: PruneMessagesDateTimeRowProps): ReactElement => {\nconst PruneMessagesDateTimeRow = ({ label, field }: PruneMessagesDateTimeRowProps): ReactElement => {\n\tconst { register } = useFormContext();\n\tconst { register } = useFormContext();"
        },
        "depth_rank": 8
    },
    {
        "file": "PruneMessagesWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessagesWithData.tsx",
        "code": {
            "methods": "const DEFAULT_PRUNE_LIMIT = 2000;\nconst DEFAULT_PRUNE_LIMIT = 2000;\n\nconst PruneMessagesWithData = ({ rid, tabBar }: { rid: IRoom['_id']; tabBar: ToolboxContextValue['tabBar'] }): ReactElement => {\nconst PruneMessagesWithData = ({ rid, tabBar }: { rid: IRoom['_id']; tabBar: ToolboxContextValue['tabBar'] }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst onClickClose = useMutableCallback(() => tabBar?.close());\n\tconst onClickClose = useMutableCallback(() => tabBar?.close());\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst pruneMessagesAction = useEndpoint('POST', '/v1/rooms.cleanHistory');\n\tconst pruneMessagesAction = useEndpoint('POST', '/v1/rooms.cleanHistory');\n\n\tconst [counter, setCounter] = useState(0);\n\tconst [counter, setCounter] = useState(0);\n\n\tconst methods = useForm({ defaultValues: initialValues });\n\tconst methods = useForm({ defaultValues: initialValues });",
            "limit": "\tconst handlePrune = useMutableCallback((): void => {\n\tconst handlePrune = useMutableCallback((): void => {\n\t\tconst handlePruneAction = async () => {\n\t\tconst handlePruneAction = async () => {\n\t\t\tconst limit = DEFAULT_PRUNE_LIMIT;\n\t\t\tconst limit = DEFAULT_PRUNE_LIMIT;\n\n\t\t\ttry {\n\t\t\t\tif (counter === limit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { count } = await pruneMessagesAction({\n\t\t\t\tconst { count } = await pruneMessagesAction({\n\t\t\t\t\troomId: rid,\n\t\t\t\t\tlatest: toDate.toISOString(),\n\t\t\t\t\toldest: fromDate.toISOString(),\n\t\t\t\t\tinclusive,\n\t\t\t\t\tlimit,\n\t\t\t\t\texcludePinned: pinned,\n\t\t\t\t\tfilesOnly: attached,\n\t\t\t\t\tignoreDiscussion: discussion,\n\t\t\t\t\tignoreThreads: threads,\n\t\t\t\t\tusers,\n\t\t\t\t});\n\n\t\t\t\tsetCounter(count);\n\n\t\t\t\tif (count < 1) {\n\t\t\t\t\tthrow new Error(t('No_messages_found_to_prune'));\n\t\t\t\t}\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('__count__message_pruned', { count }) });",
            "filesOrMessages": "\t\tconst filesOrMessages = t(attached ? 'files' : 'messages', {});\n\t\tconst filesOrMessages = t(attached ? 'files' : 'messages', {});"
        },
        "depth_rank": 8
    },
    {
        "file": "UserCardWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/UserCard/UserCardWithData.tsx",
        "code": {
            "showRealNames": "const UserCardWithData = ({ username, target, rid, open, onClose }: UserCardWithDataProps): ReactElement => {\nconst UserCardWithData = ({ username, target, rid, open, onClose }: UserCardWithDataProps): ReactElement => {\n\tconst ref = useRef(target);\n\tconst ref = useRef(target);\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst { data, isLoading } = useUserInfoQuery({ username });\n\tconst { data, isLoading } = useUserInfoQuery({ username });",
            "defaultValue": "\tconst user = useMemo(() => {\n\tconst user = useMemo(() => {\n\t\tconst defaultValue = isLoading ? undefined : null;\n\t\tconst defaultValue = isLoading ? undefined : null;\n\n\t\tconst {\n\t\tconst {\n\t\t\t_id,\n\t\t\tname,\n\t\t\troles = defaultValue,\n\t\t\tstatusText = defaultValue,\n\t\t\tbio = defaultValue,\n\t\t\tutcOffset = defaultValue,\n\t\t\tnickname,\n\t\t\tavatarETag,\n\t\t} = data?.user || {};\n\n\t\treturn {\n\t\t\t_id,\n\t\t\tname: getUserDisplayName(name, username, showRealNames),\n\t\t\tusername,\n\t\t\troles: roles && getRoles(roles).map((role, index) => <UserCard.Role key={index}>{role}</UserCard.Role>),",
            "userActions": "\tconst handleOpen = useMutableCallback((e: UIEvent) => {\n\tconst handleOpen = useMutableCallback((e: UIEvent) => {\n\t\topen?.(e);\n\t\tonClose?.();\n\t});\n\n\tconst userActions = useUserInfoActions({ _id: user._id ?? '', username: user.username }, rid);\n\tconst userActions = useUserInfoActions({ _id: user._id ?? '', username: user.username }, rid);",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action }]: any): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "MessageListTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/contextualBar/MessageListTab.tsx",
        "code": {
            "subscription": "\tconst closeTabBar = useTabBarClose();\n\tconst closeTabBar = useTabBarClose();\n\tconst handleTabBarCloseButtonClick = useCallback(() => {\n\tconst handleTabBarCloseButtonClick = useCallback(() => {\n\t\tcloseTabBar();\n\t}, [closeTabBar]);\n\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name={iconName} />",
            "all": "\t\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\t\tconst firstUnread = isMessageFirstUnread(subscription, message, previous);\n\t\t\t\t\t\t\t\t\t\t\t\tconst firstUnread = isMessageFirstUnread(subscription, message, previous);\n\t\t\t\t\t\t\t\t\t\t\t\tconst showDivider = newDay || firstUnread;\n\t\t\t\t\t\t\t\t\t\t\t\tconst showDivider = newDay || firstUnread;\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{showDivider && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MessageDivider unreadLabel={firstUnread ? t('Unread_Messages').toLowerCase() : undefined}>"
        },
        "depth_rank": 8
    },
    {
        "file": "DropTargetOverlay.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/DropTargetOverlay.tsx",
        "code": {
            "file": "\t\t\t\t\tconst file = new File([data], filename, { type: data.type });\n\t\t\t\t\tconst file = new File([data], filename, { type: data.type });"
        },
        "depth_rank": 8
    },
    {
        "file": "LeaderBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/LeaderBar.tsx",
        "code": {
            "chatNowLink": "const LeaderBar = ({ _id, name, username, visible, onAvatarClick }: LeaderBarProps): ReactElement => {\nconst LeaderBar = ({ _id, name, username, visible, onAvatarClick }: LeaderBarProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleLinkClick = useExternalLink();\n\tconst handleLinkClick = useExternalLink();\n\n\tconst chatNowLink = useMemo(() => roomCoordinator.getRouteLink('d', { name: username }) || undefined, [username]);\n\tconst chatNowLink = useMemo(() => roomCoordinator.getRouteLink('d', { name: username }) || undefined, [username]);"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomBody.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/RoomBody.tsx",
        "code": {
            "sendToBottom": "\tconst scrollMessageList = useScrollMessageList(wrapperRef);\n\tconst scrollMessageList = useScrollMessageList(wrapperRef);\n\n\tconst sendToBottom = useCallback(() => {\n\tconst sendToBottom = useCallback(() => {\n\t\tscrollMessageList((wrapper) => {\n\t\t\treturn { left: 30, top: wrapper?.scrollHeight };",
            "uploads": "\tconst sendToBottomIfNecessary = useCallback(() => {\n\tconst sendToBottomIfNecessary = useCallback(() => {\n\t\tif (atBottomRef.current === true) {\n\t\t\tsendToBottom();\n\t\t}\n\t}, [sendToBottom]);\n\n\tconst checkIfScrollIsAtBottom = useCallback(() => {\n\tconst checkIfScrollIsAtBottom = useCallback(() => {\n\t\tatBottomRef.current = _isAtBottom(100);\n\t}, [_isAtBottom]);\n\n\tconst handleNewMessageButtonClick = useCallback(() => {\n\tconst handleNewMessageButtonClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tsendToBottomIfNecessary();\n\t\tchat.composer?.focus();\n\t}, [chat, sendToBottomIfNecessary]);\n\n\tconst handleJumpToRecentButtonClick = useCallback(() => {\n\tconst handleJumpToRecentButtonClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tRoomHistoryManager.clear(room._id);\n\t\tRoomHistoryManager.getMoreIfIsEmpty(room._id);\n\t}, [room._id]);\n\n\tconst [unread, setUnreadCount] = useUnreadMessages(room);\n\tconst [unread, setUnreadCount] = useUnreadMessages(room);\n\n\tconst uploads = useSyncExternalStore(chat.uploads.subscribe, chat.uploads.get);\n\tconst uploads = useSyncExternalStore(chat.uploads.subscribe, chat.uploads.get);\n\n\tconst { hasMorePreviousMessages, hasMoreNextMessages, isLoadingMoreMessages } = useRoomMessages();\n\tconst { hasMorePreviousMessages, hasMoreNextMessages, isLoadingMoreMessages } = useRoomMessages();",
            "rid": "\tconst handleUnreadBarJumpToButtonClick = useCallback(() => {\n\tconst handleUnreadBarJumpToButtonClick = useCallback(() => {\n\t\tconst rid = room._id;\n\t\tconst rid = room._id;\n\t\tconst { firstUnread } = RoomHistoryManager.getRoom(rid);\n\t\tconst { firstUnread } = RoomHistoryManager.getRoom(rid);",
            "handleWrapperScroll": "\t\tconst store = RoomManager.getStore(room._id);\n\t\tconst store = RoomManager.getStore(room._id);\n\n\t\tconst handleWrapperScroll = withThrottling({ wait: 30 })(() => {\n\t\tconst handleWrapperScroll = withThrottling({ wait: 30 })(() => {\n\t\t\tstore?.update({ scroll: wrapper.scrollTop, atBottom: isAtBottom(wrapper, 50) });"
        },
        "depth_rank": 8
    },
    {
        "file": "UnreadMessagesIndicator.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/UnreadMessagesIndicator.tsx",
        "code": {
            "UnreadMessagesIndicator": "const UnreadMessagesIndicator = ({\nconst UnreadMessagesIndicator = ({\n\tcount,\n\tsince,\n\tonJumpButtonClick,\n\tonMarkAsReadButtonClick,\n}: UnreadMessagesIndicatorProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "UploadProgressIndicator.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/UploadProgressIndicator.tsx",
        "code": {
            "handleCloseClick": "const UploadProgressIndicator = ({ id, name, percentage, error, onClose }: UploadProgressIndicatorProps): ReactElement => {\nconst UploadProgressIndicator = ({ id, name, percentage, error, onClose }: UploadProgressIndicatorProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCloseClick = useCallback(() => {\n\tconst handleCloseClick = useCallback(() => {\n\t\tonClose?.(id);\n\t}, [id, onClose]);\n\n\tif (error) {\n\t\treturn <ErroredUploadProgressIndicator id={id} error={error} onClose={onClose} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "useFileUploadDropTarget.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/hooks/useFileUploadDropTarget.ts",
        "code": {
            "room": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { triggerProps, overlayProps } = useDropTarget();\n\tconst { triggerProps, overlayProps } = useDropTarget();",
            "uploads": "\t\tconst uploads = Array.from(files).map((file) => {\n\t\tconst uploads = Array.from(files).map((file) => {\n\t\t\tObject.defineProperty(file, 'type', { value: mime.lookup(file.name) });"
        },
        "depth_rank": 9
    },
    {
        "file": "useUnreadMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/hooks/useUnreadMessages.ts",
        "code": {
            "since": "\tconst since = useReactiveValue(useCallback(() => LegacyRoomManager.getOpenedRoomByRid(room._id)?.unreadSince.get(), [room._id]));\n\tconst since = useReactiveValue(useCallback(() => LegacyRoomManager.getOpenedRoomByRid(room._id)?.unreadSince.get(), [room._id]));\n\n\treturn useMemo(() => {\n\t\tif (count && since) {\n\t\t\treturn [{ count, since }, setLoadedCount];"
        },
        "depth_rank": 9
    },
    {
        "file": "useDropTarget.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/hooks/useDropTarget.ts",
        "code": {
            "triggerProps": "\tconst onDismiss = useCallback(() => {\n\tconst onDismiss = useCallback(() => {\n\t\tsetVisible(false);\n\t}, []);\n\n\tconst triggerProps = useMemo(() => ({ onDragEnter }), [onDragEnter]);\n\tconst triggerProps = useMemo(() => ({ onDragEnter }), [onDragEnter]);",
            "overlayProps": "\tconst overlayProps = useMemo(() => ({ visible, onDismiss }), [visible, onDismiss]);\n\tconst overlayProps = useMemo(() => ({ visible, onDismiss }), [visible, onDismiss]);"
        },
        "depth_rank": 9
    },
    {
        "file": "useRetentionPolicy.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/hooks/useRetentionPolicy.ts",
        "code": {
            "hasRetentionPolicy": "const hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>\nconst hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>"
        },
        "depth_rank": 9
    },
    {
        "file": "useRoomRolesManagement.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/hooks/useRoomRolesManagement.ts",
        "code": {
            "getRoomRoles": "\tconst getRoomRoles = useMethod('getRoomRoles');\n\tconst getRoomRoles = useMethod('getRoomRoles');\n\n\tuseEffect(() => {\n\t\tgetRoomRoles(rid).then((results) => {\n\t\t\tArray.from(results).forEach(({ _id, ...data }) => {\n\t\t\t\tconst {\n\t\t\t\tconst {\n\t\t\t\t\trid,\n\t\t\t\t\tu: { _id: uid },"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerJoinWithPassword.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerJoinWithPassword.tsx",
        "code": {
            "join": "const ComposerJoinWithPassword = (): ReactElement => {\nconst ComposerJoinWithPassword = (): ReactElement => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst [joinCode, setJoinPassword] = useState<string>('');\n\tconst [joinCode, setJoinPassword] = useState<string>('');\n\n\tconst [error, setError] = useState<string>('');\n\tconst [error, setError] = useState<string>('');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst joinEndpoint = useEndpoint('POST', '/v1/channels.join');\n\tconst joinEndpoint = useEndpoint('POST', '/v1/channels.join');\n\n\tconst join = useCallback<FormEventHandler<HTMLElement>>(\n\tconst join = useCallback<FormEventHandler<HTMLElement>>(\n\t\tasync (e) => {\n\t\t\te.preventDefault();\n\t\t\ttry {\n\t\t\t\tawait joinEndpoint({\n\t\t\t\t\troomId: room._id,\n\t\t\t\t\tjoinCode,\n\t\t\t\t});\n\t\t\t} catch (error: any) {"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerMessage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerMessage.tsx",
        "code": {
            "composerProps": "const ComposerMessage = ({ rid, tmid, readOnly, onSend, ...props }: ComposerMessageProps): ReactElement => {\nconst ComposerMessage = ({ rid, tmid, readOnly, onSend, ...props }: ComposerMessageProps): ReactElement => {\n\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst composerProps = useMemo(\n\tconst composerProps = useMemo(\n\t\t() => ({\n\t\t\tonJoin: async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait chat?.data?.joinRoom();\n\t\t\t\t} catch (error) {",
            "newMessageSent": "\t\t\t\t\tconst newMessageSent = await chat?.flows.sendMessage({\n\t\t\t\t\tconst newMessageSent = await chat?.flows.sendMessage({\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttshow,\n\t\t\t\t\t});\n\t\t\t\t\tif (newMessageSent) onSend?.();\n\t\t\t\t} catch (error) {"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerBlocked.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerBlocked.tsx",
        "code": {
            "t": "const ComposerBlocked = (): ReactElement => {\nconst ComposerBlocked = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <MessageFooterCallout>{t('room_is_blocked')}</MessageFooterCallout>;"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerAnonymous.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerAnonymous.tsx",
        "code": {
            "joinAnonymous": "\tconst joinAnonymous = () => {\n\tconst joinAnonymous = () => {\n\t\tregisterAnonymous.mutate({ email: null });",
            "t": "\tconst setForceLogin = useSessionDispatch('forceLogin');\n\tconst setForceLogin = useSessionDispatch('forceLogin');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ButtonGroup marginBlock='x16'>\n\t\t\t<Button small primary onClick={() => setForceLogin(true)}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerReadOnly.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerReadOnly.tsx",
        "code": {
            "join": "const ComposerReadOnly = (): ReactElement => {\nconst ComposerReadOnly = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst isSubscribed = useUserIsSubscribed();\n\tconst isSubscribed = useUserIsSubscribed();\n\tconst joinChannel = useEndpoint('POST', '/v1/channels.join');\n\tconst joinChannel = useEndpoint('POST', '/v1/channels.join');\n\n\tconst join = useMutation(() => joinChannel({ roomId: room._id }), {\n\tconst join = useMutation(() => joinChannel({ roomId: room._id }), {\n\t\tonError: (error: unknown) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerContainer.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerContainer.tsx",
        "code": {
            "isBlockedOrBlocker": "\tconst isAnonymous = useMessageComposerIsAnonymous();\n\tconst isAnonymous = useMessageComposerIsAnonymous();\n\n\tconst isBlockedOrBlocker = useMessageComposerIsBlocked({ subscription: props.subscription });\n\tconst isBlockedOrBlocker = useMessageComposerIsBlocked({ subscription: props.subscription });",
            "isVoip": "\tconst isReadOnly = useMessageComposerIsReadOnly(props.rid, props.subscription);\n\tconst isReadOnly = useMessageComposerIsReadOnly(props.rid, props.subscription);\n\n\tconst isOmnichannel = isOmnichannelRoom(room);\n\tconst isOmnichannel = isOmnichannelRoom(room);\n\n\tconst isFederation = isRoomFederated(room);\n\tconst isFederation = isRoomFederated(room);\n\n\tconst isVoip = isVoipRoom(room);\n\tconst isVoip = isVoipRoom(room);\n\n\tif (isOmnichannel) {\n\t\treturn <ComposerOmnichannel {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerFederationDisabled.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerFederation/ComposerFederationDisabled.tsx",
        "code": {
            "t": "const ComposerFederationDisabled = (): ReactElement => {\nconst ComposerFederationDisabled = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <MessageFooterCallout>{t('Federation_Matrix_Federated_Description_disabled')}</MessageFooterCallout>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerFederationJoinRoomDisabled.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerFederation/ComposerFederationJoinRoomDisabled.tsx",
        "code": {
            "t": "const ComposerFederationJoinRoomDisabled = (): ReactElement => {\nconst ComposerFederationJoinRoomDisabled = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <MessageFooterCallout>{t('Federation_Matrix_join_public_rooms_is_enterprise')}</MessageFooterCallout>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerUserActionIndicator.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerUserActionIndicator/ComposerUserActionIndicator.tsx",
        "code": {
            "roomAction": "const maxUsernames = 5;\nconst maxUsernames = 5;\n\nconst ComposerUserActionIndicator = ({ rid, tmid }: { rid: string; tmid?: string }): ReactElement => {\nconst ComposerUserActionIndicator = ({ rid, tmid }: { rid: string; tmid?: string }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst actions = useReactiveValue(\n\tconst actions = useReactiveValue(\n\t\tuseCallback(() => {\n\t\t\tconst roomAction = UserAction.get(tmid || rid) || {};\n\t\t\tconst roomAction = UserAction.get(tmid || rid) || {};"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerOmnichannel.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerOmnichannel/ComposerOmnichannel.tsx",
        "code": {
            "ComposerOmnichannel": "const ComposerOmnichannel = (props: ComposerMessageProps): ReactElement => {\nconst ComposerOmnichannel = (props: ComposerMessageProps): ReactElement => {\n\tconst { servedBy, queuedAt, open, onHold } = useOmnichannelRoom();\n\tconst { servedBy, queuedAt, open, onHold } = useOmnichannelRoom();"
        },
        "depth_rank": 10
    },
    {
        "file": "useResumeChatOnHoldMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/ComposerOmnichannel/hooks/useResumeChatOnHoldMutation.ts",
        "code": {
            "queryClient": "\tconst resumeChatOnHold = useEndpoint('POST', '/v1/livechat/room.resumeOnHold');\n\tconst resumeChatOnHold = useEndpoint('POST', '/v1/livechat/room.resumeOnHold');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync (roomId) => {\n\t\t\tawait resumeChatOnHold({ roomId });"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageBox.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBox.tsx",
        "code": {
            "getEmptyArray": "const emptySubscribe = () => () => undefined;\nconst emptySubscribe = () => () => undefined;\nconst getEmptyFalse = () => false;\nconst getEmptyFalse = () => false;\nconst a: any[] = [];\nconst a: any[] = [];\nconst getEmptyArray = () => a;\nconst getEmptyArray = () => a;\n\ntype MessageBoxProps = {\n\trid: IRoom['_id'];\n\ttmid?: IMessage['_id'];\n\treadOnly: boolean;\n\tonSend?: (params: { value: string; tshow?: boolean }) => Promise<void>;",
            "MessageBox": "const MessageBox = ({\nconst MessageBox = ({\n\trid,\n\ttmid,\n\tonSend,\n\tonJoin,\n\tonNavigateToNextMessage,\n\tonNavigateToPreviousMessage,\n\tonUploadFiles,\n\tonEscape,\n\tonTyping,\n\treadOnly,\n\ttshow,\n}: MessageBoxProps): ReactElement => {",
            "composerPlaceholder": "\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst composerPlaceholder = useMessageBoxPlaceholder(t('Message'), room);\n\tconst composerPlaceholder = useMessageBoxPlaceholder(t('Message'), room);\n\n\tconst [typing, setTyping] = useReducer(reducer, false);\n\tconst [typing, setTyping] = useReducer(reducer, false);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "text": "\tconst handleSendMessage = useMutableCallback(() => {\n\tconst handleSendMessage = useMutableCallback(() => {\n\t\tconst text = chat.composer?.text ?? '';\n\t\tconst text = chat.composer?.text ?? '';\n\t\tchat.composer?.clear();\n\t\tclearPopup();\n\n\t\tonSend?.({\n\t\t\tvalue: text,\n\t\t\ttshow,\n\t\t});\n\t});\n\n\tconst handler: KeyboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\tconst handler: KeyboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\t\tconst { which: keyCode } = event;\n\t\tconst { which: keyCode } = event;",
            "isRecording": "\tconst isEditing = useSubscription({\n\tconst isEditing = useSubscription({\n\t\tgetCurrentValue: chat.composer?.editing.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.editing.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecordingAudio = useSubscription({\n\tconst isRecordingAudio = useSubscription({\n\t\tgetCurrentValue: chat.composer?.recording.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.recording.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isMicrophoneDenied = useSubscription({\n\tconst isMicrophoneDenied = useSubscription({\n\t\tgetCurrentValue: chat.composer?.isMicrophoneDenied.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.isMicrophoneDenied.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecordingVideo = useSubscription({\n\tconst isRecordingVideo = useSubscription({\n\t\tgetCurrentValue: chat.composer?.recordingVideo.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.recordingVideo.subscribe ?? emptySubscribe,\n\t});\n\n\tconst formatters = useSubscription({\n\tconst formatters = useSubscription({\n\t\tgetCurrentValue: chat.composer?.formatters.get ?? getEmptyArray,\n\t\tsubscribe: chat.composer?.formatters.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecording = isRecordingAudio || isRecordingVideo;\n\tconst isRecording = isRecordingAudio || isRecordingVideo;\n\n\tconst { textAreaStyle, shadowStyle } = useAutoGrow(textareaRef, shadowRef, isRecordingAudio);\n\tconst { textAreaStyle, shadowStyle } = useAutoGrow(textareaRef, shadowRef, isRecordingAudio);",
            "joinMutation": "\tconst canSend = useReactiveValue(useCallback(() => roomCoordinator.verifyCanSendMessage(rid), [rid]));\n\tconst canSend = useReactiveValue(useCallback(() => roomCoordinator.verifyCanSendMessage(rid), [rid]));\n\n\tconst sizes = useContentBoxSize(textareaRef);\n\tconst sizes = useContentBoxSize(textareaRef);\n\n\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\n\tconst joinMutation = useMutation(async () => onJoin?.());\n\tconst joinMutation = useMutation(async () => onJoin?.());\n\n\tconst handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\tconst handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\t\tconst { clipboardData } = event;\n\t\tconst { clipboardData } = event;",
            "composerPopupConfig": "\tconst composerPopupConfig = useComposerPopup();\n\tconst composerPopupConfig = useComposerPopup();\n\n\tconst {\n\tconst {\n\t\tpopup,\n\t\tfocused,\n\t\titems,\n\t\tariaActiveDescendant,\n\t\tsuspended,\n\t\tselect,\n\t\tcommandsRef,\n\t\tcallbackRef: c,\n\t\tfilter,\n\t\tclearPopup,\n\t} = useComposerBoxPopup<{ _id: string; sort?: number }>({",
            "shouldPopupPreview": "\tconst mergedRefs = useMessageComposerMergedRefs(c, textareaRef, callbackRef, autofocusRef);\n\tconst mergedRefs = useMessageComposerMergedRefs(c, textareaRef, callbackRef, autofocusRef);\n\n\tconst shouldPopupPreview = useEnablePopupPreview(filter, popup);\n\tconst shouldPopupPreview = useEnablePopupPreview(filter, popup);\n\n\treturn (\n\t\t<>\n\t\t\t{chat.composer?.quotedMessages && <MessageBoxReplies />}"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageBoxReplies.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxReplies.tsx",
        "code": {
            "closeWrapperStyle": "\tconst closeWrapperStyle = css`\n\tconst closeWrapperStyle = css`\n\t\tposition: absolute;\n\t\tright: 0.5rem;\n\t\ttop: 0.75rem;\n\t`;\n\n\treturn (\n\t\t<Box mbe='x8' position='relative' overflowY='auto' maxHeight='x256'>\n\t\t\t{replies.map((reply, key) => (\n\t\t\t\t<Margins block='x4' key={key}>"
        },
        "depth_rank": 10
    },
    {
        "file": "useMediaPermissions.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/hooks/useMediaPermissions.ts",
        "code": {
            "permissionStatus": "\tconst [isPermissionDenied, setIsPermissionDenied] = useState(false);\n\tconst [isPermissionDenied, setIsPermissionDenied] = useState(false);\n\n\tconst handleMount = useMutableCallback(async (): Promise<void> => {\n\tconst handleMount = useMutableCallback(async (): Promise<void> => {\n\t\tif (navigator.permissions) {\n\t\t\ttry {\n\t\t\t\tconst permissionStatus = await navigator.permissions.query({ name: name as PermissionName });\n\t\t\t\tconst permissionStatus = await navigator.permissions.query({ name: name as PermissionName });"
        },
        "depth_rank": 11
    },
    {
        "file": "useMessageBoxAutoFocus.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/hooks/useMessageBoxAutoFocus.ts",
        "code": {
            "handleKeyDown": "\tconst ref = useRef<HTMLElement>(null);\n\tconst ref = useRef<HTMLElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tconst { current: node } = ref;\n\t\t\tconst { current: node } = ref;"
        },
        "depth_rank": 11
    },
    {
        "file": "ActionsToolbarDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/ActionsToolbarDropdown.tsx",
        "code": {
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reference = useRef(null);\n\tconst reference = useRef(null);\n\tconst target = useRef(null);\n\tconst target = useRef(null);\n\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageBoxActionsToolbar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/MessageBoxActionsToolbar.tsx",
        "code": {
            "MessageBoxActionsToolbar": "const MessageBoxActionsToolbar = ({\nconst MessageBoxActionsToolbar = ({\n\tvariant = 'large',\n\tisRecording,\n\ttyping,\n\tcanSend,\n\trid,\n\ttmid,\n\tisMicrophoneDenied,\n\t...props\n}: MessageBoxActionsToolbarProps) => {"
        },
        "depth_rank": 11
    },
    {
        "file": "WebdavAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/actions/WebdavAction.tsx",
        "code": {
            "handleCreateWebDav": "const getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\nconst getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\n\nconst WebdavAction = ({ chatContext }: { chatContext?: ChatAPI }) => {\nconst WebdavAction = ({ chatContext }: { chatContext?: ChatAPI }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst webDavAccounts = useReactiveValue(getWebdavAccounts);\n\tconst webDavAccounts = useReactiveValue(getWebdavAccounts);\n\n\tconst webDavEnabled = useSetting('Webdav_Integration_Enabled');\n\tconst webDavEnabled = useSetting('Webdav_Integration_Enabled');\n\n\tconst handleCreateWebDav = () => setModal(<AddWebdavAccountModal onClose={() => setModal(null)} onConfirm={() => setModal(null)} />);\n\tconst handleCreateWebDav = () => setModal(<AddWebdavAccountModal onClose={() => setModal(null)} onConfirm={() => setModal(null)} />);",
            "handleOpenWebdav": "\tconst chat = useChat() ?? chatContext;\n\tconst chat = useChat() ?? chatContext;\n\n\tconst handleUpload = async (file: File, description?: string) =>\n\tconst handleUpload = async (file: File, description?: string) =>\n\t\tchat?.uploads.send(file, {\n\t\t\tdescription,\n\t\t});\n\n\tconst handleOpenWebdav = (account: IWebdavAccountIntegration) =>\n\tconst handleOpenWebdav = (account: IWebdavAccountIntegration) =>\n\t\tsetModal(<WebdavFilePickerModal account={account} onUpload={handleUpload} onClose={() => setModal(null)} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "AudioMessageAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/actions/AudioMessageAction.tsx",
        "code": {
            "handleRecordButtonClick": "\tconst getMediaActionTitle = useMediaActionTitle('audio', isPermissionDenied, isFileUploadEnabled, isAudioRecorderEnabled, isAllowed);\n\tconst getMediaActionTitle = useMediaActionTitle('audio', isPermissionDenied, isFileUploadEnabled, isAudioRecorderEnabled, isAllowed);\n\n\tconst chat = useChat() ?? chatContext;\n\tconst chat = useChat() ?? chatContext;\n\n\tconst stopRecording = useMutableCallback(() => {\n\tconst stopRecording = useMutableCallback(() => {\n\t\tchat?.action.stop('recording');\n\n\t\tchat?.composer?.setRecordingMode(false);\n\t});\n\n\tconst setMicrophoneDenied = useMutableCallback((isDenied) => {\n\tconst setMicrophoneDenied = useMutableCallback((isDenied) => {\n\t\tif (isDenied) {\n\t\t\tstopRecording();\n\t\t}\n\n\t\tchat?.composer?.setIsMicrophoneDenied(isDenied);\n\t});\n\n\tuseEffect(() => {\n\t\tsetMicrophoneDenied(isPermissionDenied);\n\t}, [setMicrophoneDenied, isPermissionDenied]);\n\n\tconst handleRecordButtonClick = () => chat?.composer?.setRecordingMode(true);\n\tconst handleRecordButtonClick = () => chat?.composer?.setRecordingMode(true);\n\n\treturn (\n\t\t<MessageComposerAction\n\t\t\ttitle={getMediaActionTitle}"
        },
        "depth_rank": 12
    },
    {
        "file": "CreateDiscussionAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/actions/CreateDiscussionAction.tsx",
        "code": {
            "handleCreateDiscussion": "const CreateDiscussionAction = ({ room }: { room: IRoom }) => {\nconst CreateDiscussionAction = ({ room }: { room: IRoom }) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCreateDiscussion = () =>\n\tconst handleCreateDiscussion = () =>\n\t\tsetModal(<CreateDiscussion onClose={() => setModal(null)} defaultParentRoom={room?.prid || room?._id} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "ShareLocationAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxActionsToolbar/actions/ShareLocationAction.tsx",
        "code": {
            "handleShareLocation": "const ShareLocationAction = ({ room, tmid }: { room: IRoom; tmid?: string }) => {\nconst ShareLocationAction = ({ room, tmid }: { room: IRoom; tmid?: string }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst isMapViewEnabled = useSetting('MapView_Enabled') === true;\n\tconst isMapViewEnabled = useSetting('MapView_Enabled') === true;\n\tconst isGeolocationCurrentPositionSupported = Boolean(navigator.geolocation?.getCurrentPosition);\n\tconst isGeolocationCurrentPositionSupported = Boolean(navigator.geolocation?.getCurrentPosition);\n\tconst googleMapsApiKey = useSetting('MapView_GMapsAPIKey') as string;\n\tconst googleMapsApiKey = useSetting('MapView_GMapsAPIKey') as string;\n\tconst canGetGeolocation = isMapViewEnabled && isGeolocationCurrentPositionSupported && googleMapsApiKey && googleMapsApiKey.length;\n\tconst canGetGeolocation = isMapViewEnabled && isGeolocationCurrentPositionSupported && googleMapsApiKey && googleMapsApiKey.length;\n\n\tconst handleShareLocation = () => setModal(<ShareLocationModal rid={room._id} tmid={tmid} onClose={() => setModal(null)} />);\n\tconst handleShareLocation = () => setModal(<ShareLocationModal rid={room._id} tmid={tmid} onClose={() => setModal(null)} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "FormattingToolbarDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxFormattingToolbar/FormattingToolbarDropdown.tsx",
        "code": {
            "target": "const FormattingToolbarDropdown = ({ composer, items, ...props }: FormattingToolbarDropdownProps) => {\nconst FormattingToolbarDropdown = ({ composer, items, ...props }: FormattingToolbarDropdownProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reference = useRef(null);\n\tconst reference = useRef(null);\n\tconst target = useRef(null);\n\tconst target = useRef(null);\n\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });",
            "handleFormattingAction": "\t\t\t\t\t\tconst handleFormattingAction = () => {\n\t\t\t\t\t\tconst handleFormattingAction = () => {\n\t\t\t\t\t\t\tif ('link' in formatter) {\n\t\t\t\t\t\t\t\twindow.open(formatter.link, '_blank', 'rel=noreferrer noopener');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcomposer.wrapSelection(formatter.pattern);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Option\n\t\t\t\t\t\t\t\tkey={index}"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageBoxFormattingToolbar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/messageBox/MessageBoxFormattingToolbar/MessageBoxFormattingToolbar.tsx",
        "code": {
            "featuredFormatter": "const MessageBoxFormattingToolbar = ({ items, variant = 'large', composer, ...props }: MessageBoxFormattingToolbarProps) => {\nconst MessageBoxFormattingToolbar = ({ items, variant = 'large', composer, ...props }: MessageBoxFormattingToolbarProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (variant === 'small') {\n\t\tconst collapsedItems = [...items];\n\t\tconst collapsedItems = [...items];\n\t\tconst featuredFormatter = collapsedItems.splice(0, 1)[0];\n\t\tconst featuredFormatter = collapsedItems.splice(0, 1)[0];\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{'icon' in featuredFormatter && (\n\t\t\t\t\t<MessageComposerAction\n\t\t\t\t\t\t{...props}"
        },
        "depth_rank": 11
    },
    {
        "file": "useAutoGrow.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/composer/RoomComposer/hooks/useAutoGrow.ts",
        "code": {
            "handleInput": "\t\tconst handleInput = () => {\n\t\tconst handleInput = () => {\n\t\t\tconst { value } = textarea;\n\t\t\tconst { value } = textarea;"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomForewordUsernameList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/RoomForeword/RoomForewordUsernameList.tsx",
        "code": {
            "useRealName": "const RoomForewordUsernameList: VFC<RoomForewordUsernameListProps> = ({ usernames }) => {\nconst RoomForewordUsernameList: VFC<RoomForewordUsernameListProps> = ({ usernames }) => {\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\treturn (\n\t\t<>\n\t\t\t{usernames.map((username) => (\n\t\t\t\t<RoomForewordUsernameListItem\n\t\t\t\t\tusername={username}"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomForeword.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/components/body/RoomForeword/RoomForeword.tsx",
        "code": {
            "t": "const RoomForeword = ({ user, room }: RoomForewordProps): ReactElement | null => {\nconst RoomForeword = ({ user, room }: RoomForewordProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (isVoipRoom(room)) {\n\t\treturn <VoipRoomForeword room={room} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageList.tsx",
        "code": {
            "messages": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst messages = useMessages({ rid });\n\tconst messages = useMessages({ rid });",
            "formatDate": "\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\treturn (\n\t\t<MessageListProvider scrollMessageList={scrollMessageList}>",
            "ignoredUser": "\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageListErrorBoundary.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageListErrorBoundary.tsx",
        "code": {
            "room": "const MessageListErrorBoundary = ({ children }: { children: ReactNode }): ReactElement => {\nconst MessageListErrorBoundary = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\treturn (\n\t\t<ErrorBoundary\n\t\t\tchildren={children}"
        },
        "depth_rank": 7
    },
    {
        "file": "useLoadSurroundingMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/hooks/useLoadSurroundingMessages.ts",
        "code": {
            "Serialized": "\t\t\t\t// Serialized IMessage dates are strings. For this function, only ts is needed\n\t\t\t\t// Serialized IMessage dates are strings. For this function, only ts is needed\n\t\t\t\tlegacyJumpToMessage({ ...message, ts: new Date(message.ts) } as any as IMessage);"
        },
        "depth_rank": 8
    },
    {
        "file": "useJumpToMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/hooks/useJumpToMessage.ts",
        "code": {
            "search": "\t\t\tconst search = router.getSearchParameters();\n\t\t\tconst search = router.getSearchParameters();\n\t\t\tdelete search.msg;\n\t\t\trouter.navigate(\n\t\t\t\t{\n\t\t\t\t\tpathname: router.getLocationPathname(),\n\t\t\t\t\tsearch,\n\t\t\t\t},\n\t\t\t\t{ replace: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageHighlightContext.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/contexts/MessageHighlightContext.tsx",
        "code": {
            "MessageHighlightContext": "const MessageHighlightContext = createContext<MessageHighlightContextValue>({});\nconst MessageHighlightContext = createContext<MessageHighlightContextValue>({});"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageHighlightProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/MessageHighlightProvider.tsx",
        "code": {
            "contextValue": "const MessageHighlightProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst MessageHighlightProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst highlightMessageId = useSyncExternalStore(messageHighlightSubscription.subscribe, messageHighlightSubscription.getSnapshot);\n\tconst highlightMessageId = useSyncExternalStore(messageHighlightSubscription.subscribe, messageHighlightSubscription.getSnapshot);\n\n\tconst contextValue = useMemo<ContextType<typeof MessageHighlightContext>>(\n\tconst contextValue = useMemo<ContextType<typeof MessageHighlightContext>>(\n\t\t() => ({\n\t\t\thighlightMessageId,\n\t\t}),\n\t\t[highlightMessageId],\n\t);\n\n\treturn <MessageHighlightContext.Provider value={contextValue}>{children}</MessageHighlightContext.Provider>;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageListProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/MessageListProvider.tsx",
        "code": {
            "subscription": "\tconst reactToMessage = useEndpoint('POST', '/v1/chat.react');\n\tconst reactToMessage = useEndpoint('POST', '/v1/chat.react');\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst uid = user?._id;\n\tconst uid = user?._id;\n\tconst username = user?.username;\n\tconst username = user?.username;\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "highlights": "\tconst highlights = useUserPreference<string[]>('highlights');\n\tconst highlights = useUserPreference<string[]>('highlights');\n\n\tconst { showAutoTranslate, autoTranslateLanguage } = useAutoTranslate(subscription);\n\tconst { showAutoTranslate, autoTranslateLanguage } = useAutoTranslate(subscription);",
            "chat": "\tconst hasSubscription = Boolean(subscription);\n\tconst hasSubscription = Boolean(subscription);\n\tconst msgParameter = useSearchParameter('msg');\n\tconst msgParameter = useSearchParameter('msg');\n\n\tuseLoadSurroundingMessages(msgParameter);\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst context: MessageListContextValue = useMemo(\n\tconst context: MessageListContextValue = useMemo(\n\t\t() => ({\n\t\t\tshowColors,\n\t\t\tuseReactionsFilter: (message: IMessage): ((reaction: string) => string[]) => {\n\t\t\t\tconst { reactions } = message;\n\t\t\t\tconst { reactions } = message;"
        },
        "depth_rank": 8
    },
    {
        "file": "messageHighlightSubscription.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/messageHighlightSubscription.ts",
        "code": {
            "clearHighlight": "const createMessageHighlightSubscription = (): MessageHighlightSubscription => {\nconst createMessageHighlightSubscription = (): MessageHighlightSubscription => {\n\tlet updateCb: () => void = () => undefined;\n\n\tlet highlightMessageId: IMessage['_id'] | undefined;\n\n\tconst subscribe = (cb: () => void): (() => void) => {\n\tconst subscribe = (cb: () => void): (() => void) => {\n\t\tupdateCb = cb;\n\t\treturn (): void => {\n\t\t\tupdateCb = (): void => undefined;\n\t\t};\n\t};\n\n\tconst getSnapshot = (): typeof highlightMessageId => highlightMessageId;\n\tconst getSnapshot = (): typeof highlightMessageId => highlightMessageId;\n\n\tconst setHighlight = (_id: IMessage['_id']): void => {\n\tconst setHighlight = (_id: IMessage['_id']): void => {\n\t\thighlightMessageId = _id;\n\t\tupdateCb();\n\t};\n\n\tconst clearHighlight = (): void => {\n\tconst clearHighlight = (): void => {\n\t\thighlightMessageId = undefined;\n\t\tupdateCb();\n\t};\n\n\treturn { subscribe, getSnapshot, setHighlight, clearHighlight };"
        },
        "depth_rank": 8
    },
    {
        "file": "SaveToWebdavModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/webdav/SaveToWebdavModal.tsx",
        "code": {
            "accountIdField": "const SaveToWebdavModal = ({ onClose, data }: SaveToWebdavModalProps): ReactElement => {\nconst SaveToWebdavModal = ({ onClose, data }: SaveToWebdavModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst uploadFileToWebdav = useMethod('uploadFileToWebdav');\n\tconst uploadFileToWebdav = useMethod('uploadFileToWebdav');\n\tconst fileRequest = useRef<XMLHttpRequest | null>(null);\n\tconst fileRequest = useRef<XMLHttpRequest | null>(null);\n\tconst accountIdField = useUniqueId();\n\tconst accountIdField = useUniqueId();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "handleSaveFile": "\tconst handleSaveFile = ({ accountId }: { accountId: IWebdavAccount['_id'] }): void => {\n\tconst handleSaveFile = ({ accountId }: { accountId: IWebdavAccount['_id'] }): void => {\n\t\tsetIsLoading(true);\n\n\t\tconst {\n\t\tconst {\n\t\t\turl,\n\t\t\tattachment: { title },"
        },
        "depth_rank": 7
    },
    {
        "file": "AddWebdavAccountModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/webdav/AddWebdavAccountModal.tsx",
        "code": {
            "dispatchToastMessage": "const AddWebdavAccountModal = ({ onClose, onConfirm }: AddWebdavAccountModalProps): ReactElement => {\nconst AddWebdavAccountModal = ({ onClose, onConfirm }: AddWebdavAccountModalProps): ReactElement => {\n\tconst handleAddWebdavAccount = useMethod('addWebdavAccount');\n\tconst handleAddWebdavAccount = useMethod('addWebdavAccount');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },"
        },
        "depth_rank": 7
    },
    {
        "file": "WebdavFilePickerModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx",
        "code": {
            "dispatchToastMessage": "const WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');",
            "blob": "\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });",
            "filteredNodes": "\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));",
            "handleGetWebdavFileList": "\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {",
            "handleBreadcrumb": "\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst { index } = e.currentTarget.dataset;",
            "uploadFile": "\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {",
            "file": "\t\t\tconst blob = new Blob([data]);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });",
            "sortedNodes": "\tconst options: SelectOption[] = [\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "WebdavFilePickerTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerTable.tsx",
        "code": {
            "WebdavFilePickerTable": "const WebdavFilePickerTable = ({\nconst WebdavFilePickerTable = ({\n\twebdavNodes,\n\tsortBy,\n\tsortDirection,\n\tonSort,\n\tonNodeClick,\n\tisLoading,\n}: WebdavFilePickerTableProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' overflowY='hidden' height='x256'>\n\t\t\t{(isLoading || webdavNodes?.length > 0) && (\n\t\t\t\t<GenericTable>\n\t\t\t\t\t<GenericTableHeader>\n\t\t\t\t\t\t<GenericTableHeaderCell\n\t\t\t\t\t\t\twidth='300px'\n\t\t\t\t\t\t\tkey='name'\n\t\t\t\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 8
    },
    {
        "file": "WebdavFilePickerGridItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerGrid/WebdavFilePickerGridItem.tsx",
        "code": {
            "WebdavFilePickerGridItem": "const WebdavFilePickerGridItem = ({ ...props }): ReactElement => (\nconst WebdavFilePickerGridItem = ({ ...props }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "SelectedMessagesProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/SelectedMessagesProvider.tsx",
        "code": {
            "value": "\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tselectedMessageStore,\n\t\t}),\n\t\t[],\n\t);\n\n\treturn <SelectedMessageContext.Provider value={value}>{children}</SelectedMessageContext.Provider>;"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/ChatProvider.tsx",
        "code": {
            "ChatProvider": "const ChatProvider = ({ children, tmid }: ChatProviderProps): ReactElement => {\nconst ChatProvider = ({ children, tmid }: ChatProviderProps): ReactElement => {\n\tconst { _id: rid } = useRoom();\n\tconst { _id: rid } = useRoom();",
            "value": "\tconst value = useChatMessagesInstance({ rid, tmid });\n\tconst value = useChatMessagesInstance({ rid, tmid });"
        },
        "depth_rank": 7
    },
    {
        "file": "ComposerPopupProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/ComposerPopupProvider.tsx",
        "code": {
            "ComposerPopupProvider": "const ComposerPopupProvider = ({ children, room }: { children: ReactNode; room: IRoom }) => {\nconst ComposerPopupProvider = ({ children, room }: { children: ReactNode; room: IRoom }) => {\n\tconst { _id: rid } = room;\n\tconst { _id: rid } = room;",
            "data": "\t\t\t\t\tconst collection = emoji.list;\n\t\t\t\t\tconst collection = emoji.list;\n\n\t\t\t\t\treturn Object.keys(collection)\n\t\t\t\t\t\t.map((_id) => {\n\t\t\t\t\t\t\tconst data = collection[key];\n\t\t\t\t\t\t\tconst data = collection[key];\n\t\t\t\t\t\t\treturn { _id, data };",
            "result": "\t\t\t\t\tconst result = await call({ cmd, params, msg: { rid, tmid } });\n\t\t\t\t\tconst result = await call({ cmd, params, msg: { rid, tmid } });"
        },
        "depth_rank": 7
    },
    {
        "file": "VirtualAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/VirtualAction.tsx",
        "code": {
            "VirtualAction": "const groupsDict: Record<RoomType, string> = {\nconst groupsDict: Record<RoomType, string> = {\n\tl: 'live',\n\tv: 'voip',\n\td: 'direct',\n\tp: 'group',\n\tc: 'channel',\n};\n\nconst getGroup = (room: IRoom): string => {\nconst getGroup = (room: IRoom): string => {\n\tconst group = groupsDict[room.t];\n\tconst group = groupsDict[room.t];\n\tif (room.teamMain) {\n\t\treturn 'team';\n\t}\n\n\tif (group === groupsDict.d && (room.uids?.length ?? 0) > 2) {\n\t\treturn 'direct_multiple';\n\t}\n\n\treturn group;\n};\n\nconst VirtualAction = ({\nconst VirtualAction = ({\n\thandleChange,\n\troom,\n\taction,\n\tid,\n}: {",
            "config": "\tconst config = typeof action === 'function' ? action({ room }) : action;\n\tconst config = typeof action === 'function' ? action({ room }) : action;"
        },
        "depth_rank": 7
    },
    {
        "file": "ToolboxProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/ToolboxProvider.tsx",
        "code": {
            "handleChange": "const ToolboxProvider = ({ children, room }: { children: ReactNode; room: IRoom }): JSX.Element => {\nconst ToolboxProvider = ({ children, room }: { children: ReactNode; room: IRoom }): JSX.Element => {\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst [list, setList] = useSafely(useDebouncedState<Store<ToolboxAction>>(new Map<string, ToolboxActionConfig>(), 5));\n\tconst [list, setList] = useSafely(useDebouncedState<Store<ToolboxAction>>(new Map<string, ToolboxActionConfig>(), 5));\n\tconst handleChange = useMutableCallback((fn) => {\n\tconst handleChange = useMutableCallback((fn) => {\n\t\tfn(list);\n\t\tsetList((list) => new Map(list));\n\t});\n\tconst { listen, actions } = useToolboxActions(room);\n\tconst { listen, actions } = useToolboxActions(room);",
            "appActions": "\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t(): ToolboxContextValue => ({\n\t\t\tlisten,\n\t\t\tactions: new Map(list),\n\t\t\tactiveTabBar: activeTabBar[0],\n\t\t\tcontext: activeTabBar[1],\n\t\t\topen,\n\t\t\tclose,\n\t\t\topenRoomInfo,\n\t\t}),\n\t\t[listen, list, activeTabBar, open, close, openRoomInfo],\n\t);\n\n\tconst appActions = useRoomActionAppsActionButtons();\n\tconst appActions = useRoomActionAppsActionButtons();\n\n\treturn (\n\t\t<ToolboxContext.Provider value={contextValue}>"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomProvider.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/RoomProvider.tsx",
        "code": {
            "RoomProvider": "const RoomProvider = ({ rid, children }: RoomProviderProps): ReactElement => {\nconst RoomProvider = ({ rid, children }: RoomProviderProps): ReactElement => {\n\tuseRoomRolesManagement(rid);\n\n\tconst { data: room, isSuccess } = useRoomQuery(rid);\n\tconst { data: room, isSuccess } = useRoomQuery(rid);",
            "subscriptionQuery": "\tconst subscriptionQuery = useReactiveQuery(['subscriptions', { rid }], () => ChatSubscription.findOne({ rid }) ?? null);\n\tconst subscriptionQuery = useReactiveQuery(['subscriptions', { rid }], () => ChatSubscription.findOne({ rid }) ?? null);",
            "api": "\tconst api = useMemo(() => ({}), []);\n\tconst api = useMemo(() => ({}), []);"
        },
        "depth_rank": 7
    },
    {
        "file": "useDepsMatch.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useDepsMatch.ts",
        "code": {
            "prevDepsRef": "\tconst prevDepsRef = useRef(deps);\n\tconst prevDepsRef = useRef(deps);\n\tconst { current: prevDeps } = prevDepsRef;\n\tconst { current: prevDeps } = prevDepsRef;"
        },
        "depth_rank": 8
    },
    {
        "file": "useUserCard.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useUserCard.ts",
        "code": {
            "open": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst openUserInfo = useTabBarOpenUserInfo();\n\tconst openUserInfo = useTabBarOpenUserInfo();\n\n\tconst open = useCallback(\n\tconst open = useCallback(\n\t\t(username: string) => (event: UIEvent) => {\n\t\t\tevent.preventDefault();\n\t\t\topenUserCard({\n\t\t\t\tusername,\n\t\t\t\ttarget: event.currentTarget,\n\t\t\t\trid: room._id,\n\t\t\t\topen: (event: UIEvent) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\topenUserInfo(username);\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t\t[openUserInfo, room._id],\n\t);\n\n\treturn { open, close: closeUserCard };"
        },
        "depth_rank": 8
    },
    {
        "file": "useRoomQuery.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useRoomQuery.ts",
        "code": {
            "queryResult": "\tconst queryKey = ['rooms', rid] as const;\n\tconst queryKey = ['rooms', rid] as const;\n\n\tconst queryResult = useQuery(queryKey, async (): Promise<IRoom | null> => ChatRoom.findOne({ _id: rid }, { reactive: false }) ?? null, {\n\tconst queryResult = useQuery(queryKey, async (): Promise<IRoom | null> => ChatRoom.findOne({ _id: rid }, { reactive: false }) ?? null, {\n\t\tstaleTime: Infinity,\n\t\t...options,\n\t});\n\n\tconst { refetch } = queryResult;\n\tconst { refetch } = queryResult;",
            "liveQueryHandle": "\t\tconst liveQueryHandle = ChatRoom.find({ _id: rid }).observe({\n\t\tconst liveQueryHandle = ChatRoom.find({ _id: rid }).observe({\n\t\t\tadded: () => queueMicrotask(() => refetch({ exact: false })),"
        },
        "depth_rank": 8
    },
    {
        "file": "useChatMessagesInstance.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useChatMessagesInstance.ts",
        "code": {
            "instance": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst chatMessages = useInstance(() => {\n\tconst chatMessages = useInstance(() => {\n\t\tconst instance = new ChatMessages({ rid, tmid, uid });\n\t\tconst instance = new ChatMessages({ rid, tmid, uid });"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/RoomHeader.tsx",
        "code": {
            "t": "const RoomHeader: FC<RoomHeaderProps> = ({ room, topic = '', slots = {} }) => {\nconst RoomHeader: FC<RoomHeaderProps> = ({ room, topic = '', slots = {} }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Header>\n\t\t\t{slots?.start}"
        },
        "depth_rank": 7
    },
    {
        "file": "Header.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Header.tsx",
        "code": {
            "Header": "const Header = ({ room }: HeaderProps<IRoom>): ReactElement | null => {\nconst Header = ({ room }: HeaderProps<IRoom>): ReactElement | null => {\n\tconst { isMobile, isEmbedded, showTopNavbarEmbeddedLayout } = useLayout();\n\tconst { isMobile, isEmbedded, showTopNavbarEmbeddedLayout } = useLayout();"
        },
        "depth_rank": 7
    },
    {
        "file": "ParentTeam.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/ParentTeam.tsx",
        "code": {
            "ParentTeam": "const ParentTeam = ({ room }: { room: IRoom }): ReactElement | null => {\nconst ParentTeam = ({ room }: { room: IRoom }): ReactElement | null => {\n\tconst { teamId } = room;\n\tconst { teamId } = room;",
            "userTeamsListEndpoint": "\tconst teamsInfoEndpoint = useEndpoint('GET', '/v1/teams.info');\n\tconst teamsInfoEndpoint = useEndpoint('GET', '/v1/teams.info');\n\tconst userTeamsListEndpoint = useEndpoint('GET', '/v1/users.listTeams');\n\tconst userTeamsListEndpoint = useEndpoint('GET', '/v1/users.listTeams');\n\n\tconst {\n\tconst {\n\t\tdata: teamInfoData,\n\t\tisLoading: teamInfoLoading,\n\t\tisError: teamInfoError,\n\t} = useQuery(['teamId', teamId], async () => teamsInfoEndpoint({ teamId }), {"
        },
        "depth_rank": 7
    },
    {
        "file": "DirectRoomHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/DirectRoomHeader.tsx",
        "code": {
            "directUserData": "\tconst directUserData = usePresence(directUserId);\n\tconst directUserData = usePresence(directUserId);\n\n\treturn <RoomHeader slots={slots} room={room} topic={directUserData?.statusText} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "ParentRoomWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoomWithData.tsx",
        "code": {
            "ParentRoomWithData": "const ParentRoomWithData = ({ room }: ParentRoomWithDataProps): ReactElement => {\nconst ParentRoomWithData = ({ room }: ParentRoomWithDataProps): ReactElement => {\n\tconst { prid } = room;\n\tconst { prid } = room;",
            "subscription": "\tconst subscription = useUserSubscription(prid);\n\tconst subscription = useUserSubscription(prid);\n\n\tif (subscription) {\n\t\treturn <ParentRoom room={subscription} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomTitle.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/RoomTitle.tsx",
        "code": {
            "RoomTitle": "const RoomTitle = ({ room }: RoomTitleProps): ReactElement => (\nconst RoomTitle = ({ room }: RoomTitleProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "ParentRoom.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoom.tsx",
        "code": {
            "handleClick": "const ParentRoom = ({ room }: ParentRoomProps): ReactElement => {\nconst ParentRoom = ({ room }: ParentRoomProps): ReactElement => {\n\tconst icon = useRoomIcon(room);\n\tconst icon = useRoomIcon(room);\n\n\tconst handleClick = (): void => roomCoordinator.openRouteLink(room.t, { rid: room._id, ...room });\n\tconst handleClick = (): void => roomCoordinator.openRouteLink(room.t, { rid: room._id, ...room });"
        },
        "depth_rank": 7
    },
    {
        "file": "ParentRoomWithEndpointData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoomWithEndpointData.tsx",
        "code": {
            "ParentRoomWithEndpointData": "const ParentRoomWithEndpointData = ({ rid }: ParentRoomWithEndpointDataProps): ReactElement | null => {\nconst ParentRoomWithEndpointData = ({ rid }: ParentRoomWithEndpointDataProps): ReactElement | null => {\n\tconst { data, isLoading, isError } = useRoomInfoEndpoint(rid);\n\tconst { data, isLoading, isError } = useRoomInfoEndpoint(rid);"
        },
        "depth_rank": 7
    },
    {
        "file": "HeaderIconWithRoom.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/HeaderIconWithRoom.tsx",
        "code": {
            "icon": "const HeaderIconWithRoom = ({ room }: HeaderIconWithRoomProps): ReactElement => {\nconst HeaderIconWithRoom = ({ room }: HeaderIconWithRoomProps): ReactElement => {\n\tconst icon = useRoomIcon(room);\n\tconst icon = useRoomIcon(room);\n\tif (isOmnichannelRoom(room)) {\n\t\treturn <OmnichannelRoomIcon room={room} size='x20' placement='default' />;"
        },
        "depth_rank": 7
    },
    {
        "file": "OmnichannelRoomHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/OmnichannelRoomHeader.tsx",
        "code": {
            "currentRouteName": "const OmnichannelRoomHeader: FC<OmnichannelRoomHeaderProps> = ({ slots: parentSlot }) => {\nconst OmnichannelRoomHeader: FC<OmnichannelRoomHeaderProps> = ({ slots: parentSlot }) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentRouteName = useSyncExternalStore(\n\tconst currentRouteName = useSyncExternalStore(\n\t\trouter.subscribeToRouteChange,\n\t\tuseCallback(() => router.getRouteName(), [router]),\n\t);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 8
    },
    {
        "file": "VoipRoomHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/VoipRoomHeader.tsx",
        "code": {
            "currentRouteName": "const VoipRoomHeader: FC<VoipRoomHeaderProps> = ({ slots: parentSlot, room }) => {\nconst VoipRoomHeader: FC<VoipRoomHeaderProps> = ({ slots: parentSlot, room }) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentRouteName = useSyncExternalStore(\n\tconst currentRouteName = useSyncExternalStore(\n\t\trouter.subscribeToRouteChange,\n\t\tuseCallback(() => router.getRouteName(), [router]),\n\t);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 8
    },
    {
        "file": "QuickActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/QuickActions.tsx",
        "code": {
            "t": "const QuickActions: FC<QuickActionsProps> = ({ room, className }) => {\nconst QuickActions: FC<QuickActionsProps> = ({ room, className }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { visibleActions, actionDefault } = useQuickActions(room);\n\tconst { visibleActions, actionDefault } = useQuickActions(room);",
            "props": "\t\t\t\tconst props = {\n\t\t\t\tconst props = {\n\t\t\t\t\tid,\n\t\t\t\t\ticon,\n\t\t\t\t\tcolor,\n\t\t\t\t\ttitle: t(title),\n\t\t\t\t\tclassName,\n\t\t\t\t\tindex,\n\t\t\t\t\tprimary: false,\n\t\t\t\t\taction,\n\t\t\t\t\troom,\n\t\t\t\t};\n\n\t\t\t\tif (options) {\n\t\t\t\t\treturn <ToolBoxActionOptions options={options} {...props} key={id} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "ToolBoxActionOptions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/ToolBoxActionOptions.tsx",
        "code": {
            "target": "const ToolBoxActionOptions: FC<ToolBoxActionOptionsProps> = ({ options, room, action, ...props }) => {\nconst ToolBoxActionOptions: FC<ToolBoxActionOptionsProps> = ({ options, room, action, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reference = useRef(null);\n\tconst reference = useRef(null);\n\tconst target = useRef(null);\n\tconst target = useRef(null);\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });",
            "handleClick": "\tconst handleClick = (id: string) => (): void => {\n\tconst handleClick = (id: string) => (): void => {\n\t\ttoggle();\n\t\taction(id);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<HeaderToolboxAction ref={reference} onClick={(): void => toggle()} secondary={isVisible} {...props} />"
        },
        "depth_rank": 9
    },
    {
        "file": "useQuickActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/hooks/useQuickActions.tsx",
        "code": {
            "handleRequestTranscript": "\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\n\tconst requestTranscript = useMethod('livechat:requestTranscript');\n\tconst requestTranscript = useMethod('livechat:requestTranscript');\n\n\tconst handleRequestTranscript = useCallback(\n\tconst handleRequestTranscript = useCallback(\n\t\tasync (email: string, subject: string) => {\n\t\t\ttry {\n\t\t\t\tawait requestTranscript(rid, email, subject);\n\t\t\t\tcloseModal();\n\t\t\t\tdispatchToastMessage({\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\tmessage: t('Livechat_email_transcript_has_been_requested'),\n\t\t\t\t});\n\t\t\t} catch (error) {",
            "handleSendTranscriptPDF": "\tconst handleSendTranscriptPDF = useCallback(async () => {\n\tconst handleSendTranscriptPDF = useCallback(async () => {\n\t\ttry {\n\t\t\tawait sendTranscriptPDF();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Livechat_transcript_has_been_requested'),\n\t\t\t});\n\t\t} catch (error) {",
            "handleSendTranscript": "\tconst sendTranscript = useMethod('livechat:sendTranscript');\n\tconst sendTranscript = useMethod('livechat:sendTranscript');\n\n\tconst handleSendTranscript = useCallback(\n\tconst handleSendTranscript = useCallback(\n\t\tasync (email: string, subject: string, token: string) => {\n\t\t\ttry {\n\t\t\t\tawait sendTranscript(token, rid, email, subject);\n\t\t\t\tcloseModal();\n\t\t\t} catch (error) {",
            "handleDiscardTranscript": "\tconst discardTranscript = useMethod('livechat:discardTranscript');\n\tconst discardTranscript = useMethod('livechat:discardTranscript');\n\n\tconst handleDiscardTranscript = useCallback(async () => {\n\tconst handleDiscardTranscript = useCallback(async () => {\n\t\ttry {\n\t\t\tawait discardTranscript(rid);\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Livechat_transcript_request_has_been_canceled'),\n\t\t\t});\n\t\t\tcloseModal();\n\t\t} catch (error) {",
            "handleForwardChat": "\tconst forwardChat = useEndpoint('POST', '/v1/livechat/room.forward');\n\tconst forwardChat = useEndpoint('POST', '/v1/livechat/room.forward');\n\n\tconst handleForwardChat = useCallback(\n\tconst handleForwardChat = useCallback(\n\t\tasync (departmentId?: string, userId?: string, comment?: string) => {\n\t\t\tif (departmentId && userId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst transferData: {\n\t\t\tconst transferData: {\n\t\t\t\troomId: string;\n\t\t\t\tclientAction: boolean;\n\t\t\t\tcomment?: string;\n\t\t\t\tdepartmentId?: string;\n\t\t\t\tuserId?: string;\n\t\t\t} = {",
            "handleClose": "\tconst closeChat = useEndpoint('POST', '/v1/livechat/room.closeByUser');\n\tconst closeChat = useEndpoint('POST', '/v1/livechat/room.closeByUser');\n\n\tconst handleClose = useCallback(\n\tconst handleClose = useCallback(\n\t\tasync (\n\t\t\tcomment?: string,\n\t\t\ttags?: string[],\n\t\t\tpreferences?: { omnichannelTranscriptPDF: boolean; omnichannelTranscriptEmail: boolean },",
            "putChatOnHoldMutation": "\tconst putChatOnHoldMutation = usePutChatOnHoldMutation({\n\tconst putChatOnHoldMutation = usePutChatOnHoldMutation({\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_On_Hold_Successfully') });",
            "handleAction": "\tconst handleAction = useMutableCallback(async (id: string) => {\n\tconst handleAction = useMutableCallback(async (id: string) => {\n\t\tswitch (id) {\n\t\t\tcase QuickActionsEnum.MoveQueue:\n\t\t\t\tsetModal(\n\t\t\t\t\t<ReturnChatQueueModal\n\t\t\t\t\t\tonMoveChat={(): void => returnChatToQueueMutation.mutate(rid)}",
            "email": "\t\t\t\tconst email = await getVisitorEmail();\n\t\t\t\tconst email = await getVisitorEmail();\n\t\t\t\tsetModal(\n\t\t\t\t\troom.departmentId ? (\n\t\t\t\t\t\t<CloseChatModalData visitorEmail={email} departmentId={room.departmentId} onConfirm={handleClose} onCancel={closeModal} />",
            "visibleActions": "\tconst visibleActions = actions.filter((action) => {\n\tconst visibleActions = actions.filter((action) => {\n\t\tconst { options, id } = action;\n\t\tconst { options, id } = action;",
            "getAction": "\tconst actionDefault = useMutableCallback((actionId) => {\n\tconst actionDefault = useMutableCallback((actionId) => {\n\t\thandleAction(actionId);\n\t});\n\n\tconst getAction = useMutableCallback((id) => {\n\tconst getAction = useMutableCallback((id) => {\n\t\thandleAction(id);\n\t});\n\n\treturn { visibleActions, actionDefault, getAction };"
        },
        "depth_rank": 10
    },
    {
        "file": "usePutChatOnHoldMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/hooks/usePutChatOnHoldMutation.ts",
        "code": {
            "queryClient": "\tconst putChatOnHold = useEndpoint('POST', '/v1/livechat/room.onHold');\n\tconst putChatOnHold = useEndpoint('POST', '/v1/livechat/room.onHold');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync (rid) => {\n\t\t\tawait putChatOnHold({ roomId: rid });"
        },
        "depth_rank": 10
    },
    {
        "file": "ToolBox.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/ToolBox/ToolBox.tsx",
        "code": {
            "openTabBar": "const ToolBox = ({ className }: ToolBoxProps): ReactElement => {\nconst ToolBox = ({ className }: ToolBoxProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst tab = useTab();\n\tconst tab = useTab();\n\tconst openTabBar = useTabBarOpen();\n\tconst openTabBar = useTabBarOpen();\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "hiddenActionRenderers": "\tconst hiddenActionRenderers = useRef<{ [key: string]: OptionRenderer }>({});\n\tconst hiddenActionRenderers = useRef<{ [key: string]: OptionRenderer }>({});"
        },
        "depth_rank": 8
    },
    {
        "file": "Translate.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/Header/icons/Translate.tsx",
        "code": {
            "encryptedLabel": "const Translate: FC<TranslateProps> = ({ room: { autoTranslateLanguage, autoTranslate } }) => {\nconst Translate: FC<TranslateProps> = ({ room: { autoTranslateLanguage, autoTranslate } }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst autoTranslateEnabled = useSetting('AutoTranslate_Enabled');\n\tconst autoTranslateEnabled = useSetting('AutoTranslate_Enabled');\n\tconst encryptedLabel = t('Translated');\n\tconst encryptedLabel = t('Translated');\n\treturn autoTranslateEnabled && autoTranslate && autoTranslateLanguage ? (\n\t\t<HeaderState title={encryptedLabel} icon='language' color='info' />"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomLayout.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/layout/RoomLayout.tsx",
        "code": {
            "RoomLayout": "const RoomLayout = ({ header, body, footer, aside, ...props }: RoomLayoutProps): ReactElement => (\nconst RoomLayout = ({ header, body, footer, aside, ...props }: RoomLayoutProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "ShareLocationModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/ShareLocation/ShareLocationModal.tsx",
        "code": {
            "dispatchToast": "const ShareLocationModal = ({ rid, tmid, onClose }: ShareLocationModalProps): ReactElement => {\nconst ShareLocationModal = ({ rid, tmid, onClose }: ShareLocationModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToast = useToastMessageDispatch();\n\tconst dispatchToast = useToastMessageDispatch();\n\tconst { data: permissionData, isLoading: permissionLoading } = useQuery(['geolocationPermission'], getGeolocationPermission);\n\tconst { data: permissionData, isLoading: permissionLoading } = useQuery(['geolocationPermission'], getGeolocationPermission);",
            "position": "\tconst onConfirmRequestLocation = async (): Promise<void> => {\n\tconst onConfirmRequestLocation = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst position = await getGeolocationPosition();\n\t\t\tconst position = await getGeolocationPosition();\n\t\t\tqueryClient.setQueryData(['geolocationPosition', 'granted'], position);\n\t\t\tqueryClient.setQueryData(['geolocationPermission'], 'granted');\n\t\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "ShareMessageModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ShareMessageModal/ShareMessageModal.tsx",
        "code": {
            "dispatchToastMessage": "const ShareMessageModal = ({ onClose, permalink, message }: ShareMessageProps): ReactElement => {\nconst ShareMessageModal = ({ onClose, permalink, message }: ShareMessageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { copy, hasCopied } = useClipboard(permalink);\n\tconst { copy, hasCopied } = useClipboard(permalink);",
            "sendPayload": "\tconst { control, watch } = useForm({\n\tconst { control, watch } = useForm({\n\t\tdefaultValues: {\n\t\t\trooms: [],\n\t\t},\n\t});\n\n\tconst rooms = watch('rooms');\n\tconst rooms = watch('rooms');\n\tconst sendMessage = useEndpoint('POST', '/v1/chat.postMessage');\n\tconst sendMessage = useEndpoint('POST', '/v1/chat.postMessage');\n\n\tconst sendMessageMutation = useMutation({\n\tconst sendMessageMutation = useMutation({\n\t\tmutationFn: async () => {\n\t\t\tconst optionalMessage = '';\n\t\t\tconst optionalMessage = '';\n\t\t\tconst curMsg = await prependReplies(optionalMessage, [message]);\n\t\t\tconst curMsg = await prependReplies(optionalMessage, [message]);\n\n\t\t\treturn Promise.all(\n\t\t\t\trooms.map(async (roomId) => {\n\t\t\t\t\tconst sendPayload = {\n\t\t\t\t\tconst sendPayload = {\n\t\t\t\t\t\troomId,\n\t\t\t\t\t\ttext: curMsg,\n\t\t\t\t\t};\n\n\t\t\t\t\tawait sendMessage(sendPayload);\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Message_has_been_shared') });"
        },
        "depth_rank": 8
    },
    {
        "file": "ReadReceiptRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReadReceiptsModal/ReadReceiptRow.tsx",
        "code": {
            "displayName": "const ReadReceiptRow = ({ user, ts }: ReadReceipt): ReactElement => {\nconst ReadReceiptRow = ({ user, ts }: ReadReceipt): ReactElement => {\n\tconst displayName = useUserDisplayName(user || {});\n\tconst displayName = useUserDisplayName(user || {});",
            "formatDateAndTime": "\tconst formatDateAndTime = useFormatDateAndTime({ withSeconds: true });\n\tconst formatDateAndTime = useFormatDateAndTime({ withSeconds: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "ReadReceiptsModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReadReceiptsModal/ReadReceiptsModal.tsx",
        "code": {
            "readReceipts": "\tconst readReceipts = readReceiptsResult.data;\n\tconst readReceipts = readReceiptsResult.data;\n\n\treturn (\n\t\t<GenericModal title={t('Read_by')} onConfirm={onClose} onClose={onClose}>"
        },
        "depth_rank": 8
    },
    {
        "file": "ReactionUserTag.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/ReactionUserTag.tsx",
        "code": {
            "ReactionUserTag": "const ReactionUserTag = ({ username, onClick, displayName }: ReactionUserTagProps): ReactElement => (\nconst ReactionUserTag = ({ username, onClick, displayName }: ReactionUserTagProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "Reactions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/Reactions.tsx",
        "code": {
            "useRealName": "const Reactions = ({ reactions, onClick }: ReactionsProps): ReactElement => {\nconst Reactions = ({ reactions, onClick }: ReactionsProps): ReactElement => {\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\treturn (\n\t\t<Box display='flex' flexDirection='column'>\n\t\t\t{Object.entries(reactions).map(([reaction, { names = [], usernames }]) => (\n\t\t\t\t<Box key={reaction} display='flex' alignItems='center' flexDirection='row' overflowX='hidden' mb='x8'>"
        },
        "depth_rank": 8
    },
    {
        "file": "ReactionListModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/ReactionListModal.tsx",
        "code": {
            "onClick": "const ReactionList = ({ reactions, onClose }: ReactionListProps): ReactElement => {\nconst ReactionList = ({ reactions, onClose }: ReactionListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst onClick = useMutableCallback((e) => {\n\tconst onClick = useMutableCallback((e) => {\n\t\tconst { username } = e.currentTarget.dataset;\n\t\tconst { username } = e.currentTarget.dataset;"
        },
        "depth_rank": 8
    },
    {
        "file": "FileUploadModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/FileUploadModal.tsx",
        "code": {
            "FileUploadModal": "const FileUploadModal = ({\nconst FileUploadModal = ({\n\tonClose,\n\tfile,\n\tfileName,\n\tfileDescription,\n\tonSubmit,\n\tinvalidContentType,\n\tshowDescription = true,\n}: FileUploadModalProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "FilePreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/FilePreview.tsx",
        "code": {
            "fileType": "const FilePreview = ({ file }: FilePreviewProps): ReactElement => {\nconst FilePreview = ({ file }: FilePreviewProps): ReactElement => {\n\tconst fileType = getFileType(file.type);\n\tconst fileType = getFileType(file.type);\n\n\tif (shouldShowMediaPreview(file, fileType)) {\n\t\treturn <MediaPreview file={file} fileType={fileType as FilePreviewType} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ImagePreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/ImagePreview.tsx",
        "code": {
            "handleError": "const ImagePreview = ({ url, file }: ImagePreviewProps): ReactElement => {\nconst ImagePreview = ({ url, file }: ImagePreviewProps): ReactElement => {\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [loading, setLoading] = useState(true);\n\tconst [loading, setLoading] = useState(true);\n\n\tconst handleLoad = (): void => setLoading(false);\n\tconst handleLoad = (): void => setLoading(false);\n\tconst handleError = (): void => {\n\tconst handleError = (): void => {\n\t\tsetLoading(false);\n\t\tsetError(true);\n\t};\n\n\tif (error) {\n\t\treturn <GenericPreview file={file} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "GenericPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/GenericPreview.tsx",
        "code": {
            "GenericPreview": "const GenericPreview = ({ file }: { file: File }): ReactElement => (\nconst GenericPreview = ({ file }: { file: File }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ReportMessageModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/room/modals/ReportMessageModal/ReportMessageModal.tsx",
        "code": {
            "t": "const ReportMessageModal = ({ message, onClose }: ReportMessageModalProps): ReactElement => {\nconst ReportMessageModal = ({ message, onClose }: ReportMessageModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tregister,\n\t\tformState: { errors },",
            "reportMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst reportMessage = useMethod('reportMessage');\n\tconst reportMessage = useMethod('reportMessage');\n\n\tconst { _id } = message;\n\tconst { _id } = message;",
            "handleReportMessage": "\tconst handleReportMessage = async ({ description }: ReportMessageModalsFields): Promise<void> => {\n\tconst handleReportMessage = async ({ description }: ReportMessageModalsFields): Promise<void> => {\n\t\ttry {\n\t\t\tawait reportMessage(_id, description);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Report_has_been_sent') });"
        },
        "depth_rank": 8
    },
    {
        "file": "PortalsWrapper.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/PortalsWrapper.tsx",
        "code": {
            "portals": "const PortalsWrapper: FC = () => {\nconst PortalsWrapper: FC = () => {\n\tconst portals = useSyncExternalStore(portalsSubscription.subscribe, portalsSubscription.getSnapshot);\n\tconst portals = useSyncExternalStore(portalsSubscription.subscribe, portalsSubscription.getSnapshot);\n\n\treturn (\n\t\t<>\n\t\t\t{portals.map(({ key, portal }) => (\n\t\t\t\t<PortalWrapper key={key} portal={portal} />"
        },
        "depth_rank": 6
    },
    {
        "file": "IndexRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/IndexRoute.tsx",
        "code": {
            "room": "\t\tconst computation = Tracker.autorun((c) => {\n\t\tconst computation = Tracker.autorun((c) => {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tif (user?.defaultRoom) {\n\t\t\t\t\tconst room = user.defaultRoom.split('/') as [routeName: RouteName, routeParam: string];\n\t\t\t\t\tconst room = user.defaultRoom.split('/') as [routeName: RouteName, routeParam: string];\n\t\t\t\t\trouter.navigate({\n\t\t\t\t\t\tname: room[0],\n\t\t\t\t\t\tparams: { name: room[1] },"
        },
        "depth_rank": 6
    },
    {
        "file": "AppLayout.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/AppLayout.tsx",
        "code": {
            "layout": "\tconst layout = useSyncExternalStore(appLayout.subscribe, appLayout.getSnapshot);\n\tconst layout = useSyncExternalStore(appLayout.subscribe, appLayout.getSnapshot);\n\n\treturn <Suspense fallback={<PageLoading />}>{layout}</Suspense>;"
        },
        "depth_rank": 6
    },
    {
        "file": "OutermostErrorBoundary.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/OutermostErrorBoundary.tsx",
        "code": {
            "OutermostErrorBoundary": "const OutermostErrorBoundary = ({ children }: OutermostErrorBoundaryProps) => {\nconst OutermostErrorBoundary = ({ children }: OutermostErrorBoundaryProps) => {\n\tif (BugsnagErrorBoundary) {\n\t\treturn <BugsnagErrorBoundary FallbackComponent={AppErrorPage}>{children}</BugsnagErrorBoundary>;"
        },
        "depth_rank": 6
    },
    {
        "file": "useEscapeKeyStroke.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/hooks/useEscapeKeyStroke.ts",
        "code": {
            "clearUnreadAllMessagesMutation": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst clearUnreadAllMessagesMutation = useClearUnreadAllMessagesMutation({\n\tconst clearUnreadAllMessagesMutation = useClearUnreadAllMessagesMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 7
    },
    {
        "file": "useClearUnreadAllMessagesMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/hooks/useClearUnreadAllMessagesMutation.ts",
        "code": {
            "promises": "\tconst readSubscription = useEndpoint('POST', '/v1/subscriptions.read');\n\tconst readSubscription = useEndpoint('POST', '/v1/subscriptions.read');\n\n\treturn useMutation(async () => {\n\t\tconst promises = ChatSubscription.find(\n\t\tconst promises = ChatSubscription.find(\n\t\t\t{\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t\talert: 1,\n\t\t\t\t\trid: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).map((subscription) => {\n\t\t\tif (subscription.alert || subscription.unread > 0) {\n\t\t\t\treturn readSubscription({ rid: subscription.rid, readThreads: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "useMessageLinkClicks.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/hooks/useMessageLinkClicks.ts",
        "code": {
            "absoluteUrl": "\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 7
    },
    {
        "file": "LoginPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/LoginPage.tsx",
        "code": {
            "iframeLoginUrl": "const LoginPage = ({ defaultRoute, children }: { defaultRoute?: LoginRoutes; children?: ReactNode }): ReactElement => {\nconst LoginPage = ({ defaultRoute, children }: { defaultRoute?: LoginRoutes; children?: ReactNode }): ReactElement => {\n\tconst showForcedLogoutBanner = useSession('force_logout');\n\tconst showForcedLogoutBanner = useSession('force_logout');\n\tconst iframeLoginUrl = useIframeLogin();\n\tconst iframeLoginUrl = useIframeLogin();\n\n\tif (iframeLoginUrl) {\n\t\treturn <iframe src={iframeLoginUrl} style={{ height: '100%', width: '100%' }} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "AuthenticationCheck.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/AuthenticationCheck.tsx",
        "code": {
            "forceLogin": "const AuthenticationCheck = ({ children, guest }: { children: ReactNode; guest?: boolean }): ReactElement => {\nconst AuthenticationCheck = ({ children, guest }: { children: ReactNode; guest?: boolean }): ReactElement => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst forceLogin = useSession('forceLogin');\n\tconst forceLogin = useSession('forceLogin');\n\n\tif (uid) {\n\t\treturn <UsernameCheck>{children}</UsernameCheck>;"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterUsername.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/RegisterUsername.tsx",
        "code": {
            "usernameSuggestion": "\tconst setUsername = useMethod('setUsername');\n\tconst setUsername = useMethod('setUsername');\n\tconst saveCustomFields = useMethod('saveCustomFields');\n\tconst saveCustomFields = useMethod('saveCustomFields');\n\tconst usernameSuggestion = useEndpoint('GET', '/v1/users.getUsernameSuggestion');\n\tconst usernameSuggestion = useEndpoint('GET', '/v1/users.getUsernameSuggestion');\n\tconst { data, isLoading } = useQuery(['suggestion'], async () => usernameSuggestion());\n\tconst { data, isLoading } = useQuery(['suggestion'], async () => usernameSuggestion());",
            "registerUsernameMutation": "\tconst registerUsernameMutation = useMutation({\n\tconst registerUsernameMutation = useMutation({\n\t\tmutationFn: async (data: RegisterUsernamePayload) => {\n\t\t\tconst { username, ...customFields } = data;\n\t\t\tconst { username, ...customFields } = data;"
        },
        "depth_rank": 7
    },
    {
        "file": "UsernameCheck.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/UsernameCheck.tsx",
        "code": {
            "userId": "const UsernameCheck = ({ children }: { children: ReactNode }): ReactElement => {\nconst UsernameCheck = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst { data: userData, isLoading } = useUserInfoQuery({ userId: userId || '' });\n\tconst { data: userData, isLoading } = useUserInfoQuery({ userId: userId || '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "LayoutWithSidebar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/LayoutWithSidebar.tsx",
        "code": {
            "LayoutWithSidebar": "const LayoutWithSidebar = ({ children }: { children: ReactNode }): ReactElement => {\nconst LayoutWithSidebar = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 7
    },
    {
        "file": "TwoFactorAuthSetupCheck.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/TwoFactorAuthSetupCheck.tsx",
        "code": {
            "TwoFactorAuthSetupCheck": "const TwoFactorAuthSetupCheck = ({ children }: { children: ReactNode }): ReactElement => {\nconst TwoFactorAuthSetupCheck = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 7
    },
    {
        "file": "MainLayout.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/root/MainLayout/MainLayout.tsx",
        "code": {
            "MainLayout": "const MainLayout = ({ children = null }: MainLayoutProps): ReactElement => {\nconst MainLayout = ({ children = null }: MainLayoutProps): ReactElement => {\n\tuseCustomScript();\n\n\treturn (\n\t\t<Preload>\n\t\t\t<AuthenticationCheck>\n\t\t\t\t<Suspense fallback={null}>{children}</Suspense>"
        },
        "depth_rank": 7
    },
    {
        "file": "NotFoundPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/notFound/NotFoundPage.tsx",
        "code": {
            "t": "const NotFoundPage = (): ReactElement => {\nconst NotFoundPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <NotFoundState title={t('Page_not_found')} subtitle={t('Page_not_exist_or_not_permission')} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "ConferencePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/conference/ConferencePage.tsx",
        "code": {
            "callUrlParam": "const getQueryParams = () => {\nconst getQueryParams = () => {\n\tconst queryString = window.location.search;\n\tconst queryString = window.location.search;\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst callUrlParam = urlParams.get('callUrl');\n\tconst callUrlParam = urlParams.get('callUrl');\n\n\treturn { callUrlParam };",
            "userDisplayName": "const ConferencePage = (): ReactElement => {\nconst ConferencePage = (): ReactElement => {\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst defaultRoute = useRoute('home');\n\tconst defaultRoute = useRoute('home');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });"
        },
        "depth_rank": 6
    },
    {
        "file": "ConferencePageError.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/conference/ConferencePageError.tsx",
        "code": {
            "route": "const ConferencePageError = () => {\nconst ConferencePageError = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst route = useRoute('login');\n\tconst route = useRoute('login');\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<Page.Header title={t('Video_Conference')} />"
        },
        "depth_rank": 6
    },
    {
        "file": "VideoMessageRecorder.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/VideoMessageRecorder/VideoMessageRecorder.tsx",
        "code": {
            "stopVideoRecording": "\tconst chat = useChat() ?? chatContext;\n\tconst chat = useChat() ?? chatContext;\n\n\tconst stopVideoRecording = async (rid: IRoom['_id'], tmid?: IMessage['_id']) => {\n\tconst stopVideoRecording = async (rid: IRoom['_id'], tmid?: IMessage['_id']) => {\n\t\tif (recordingInterval) {\n\t\t\tclearInterval(recordingInterval);\n\t\t}\n\t\tsetRecordingInterval(null);\n\t\tVideoRecorder.stopRecording();\n\t\tUserAction.stop(rid, USER_ACTIVITIES.USER_RECORDING, { tmid });",
            "handleRecord": "\tconst handleRecord = async () => {\n\tconst handleRecord = async () => {\n\t\tif (recordingState === 'recording') {\n\t\t\tstopVideoRecording(rid, tmid);\n\t\t} else {",
            "file": "\t\t\tconst file = new File([blob], fileName, { type: VideoRecorder.getSupportedMimeTypes().split(';')[0] });\n\t\t\tconst file = new File([blob], fileName, { type: VideoRecorder.getSupportedMimeTypes().split(';')[0] });"
        },
        "depth_rank": 7
    },
    {
        "file": "AudioMessageRecorder.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/AudioMessageRecorder/AudioMessageRecorder.tsx",
        "code": {
            "file": "\t\tconst file = new File([blob], fileName, { type: 'audio/mpeg' });\n\t\tconst file = new File([blob], fileName, { type: 'audio/mpeg' });"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiPicker.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPicker.tsx",
        "code": {
            "customEmojiList": "\t\t\tconst customEmojiList = getEmojiListsByCategory().filter(({ key }) => key === 'rocket');\n\t\t\tconst customEmojiList = getEmojiListsByCategory().filter(({ key }) => key === 'rocket');",
            "handleGoToCategory": "\tconst handleGoToCategory = (categoryIndex: number) => {\n\tconst handleGoToCategory = (categoryIndex: number) => {\n\t\tsetSearching(false);\n\t\tvirtuosoRef.current?.scrollToIndex({ index: categoryIndex });",
            "handleGoToAddCustom": "\tconst handleGoToAddCustom = () => {\n\tconst handleGoToAddCustom = () => {\n\t\tcustomEmojiRoute.push();\n\t\tonClose();\n\t};\n\n\treturn (\n\t\t<EmojiPickerDropdown reference={ref as RefObject<HTMLElement>} ref={emojiContainerRef}>"
        },
        "depth_rank": 7
    },
    {
        "file": "SearchingResult.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/SearchingResult.tsx",
        "code": {
            "ref": "const SearchingResult = ({ searchResults, handleSelectEmoji }: SearchingResultProps) => {\nconst SearchingResult = ({ searchResults, handleSelectEmoji }: SearchingResultProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst ref = useRef<VirtuosoGridHandle>(null);\n\tconst ref = useRef<VirtuosoGridHandle>(null);\n\n\tif (searchResults.length === 0) {\n\t\treturn <EmojiPickerNotFound>{t('No_emojis_found')}</EmojiPickerNotFound>;"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiPickerDropDown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerDropDown.tsx",
        "code": {
            "EmojiPickerDropdown": "const EmojiPickerDropdown = forwardRef(function EmojiPickerDropdown<TReferenceElement extends HTMLElement>(\nconst EmojiPickerDropdown = forwardRef(function EmojiPickerDropdown<TReferenceElement extends HTMLElement>(\n\t{ children, reference }: EmojiPickerDropdownProps<TReferenceElement>,",
            "Dropdown": "\tconst Dropdown = isMobile ? DropdownMobile : EmojiPickerDesktopDropdown;\n\tconst Dropdown = isMobile ? DropdownMobile : EmojiPickerDesktopDropdown;\n\n\treturn (\n\t\t<Dropdown ref={ref} reference={reference}>"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiElement.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiElement.tsx",
        "code": {
            "EmojiElement": "const EmojiElement = ({ emoji, image, onClick, small = false, ...props }: EmojiElementProps) => {\nconst EmojiElement = ({ emoji, image, onClick, small = false, ...props }: EmojiElementProps) => {\n\tconst { handlePreview, handleRemovePreview } = usePreviewEmoji();\n\tconst { handlePreview, handleRemovePreview } = usePreviewEmoji();",
            "emojiElement": "\tconst emojiSmallClass = css`\n\tconst emojiSmallClass = css`\n\t\t> .emoji,\n\t\t.emojione {\n\t\t\twidth: 18px;\n\t\t\theight: 18px;\n\t\t}\n\t`;\n\n\tconst emojiElement = <div dangerouslySetInnerHTML={{ __html: image }} />;\n\tconst emojiElement = <div dangerouslySetInnerHTML={{ __html: image }} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiCategoryRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiCategoryRow.tsx",
        "code": {
            "EmojiCategoryRow": "const EmojiCategoryRow = ({\nconst EmojiCategoryRow = ({\n\tcategoryKey,\n\tcategoriesPosition,\n\ti18n,\n\temojis,\n\tcustomItemsLimit,\n\thandleLoadMore,\n\thandleSelectEmoji,\n}: EmojiCategoryRowProps) => {"
        },
        "depth_rank": 7
    },
    {
        "file": "CategoriesResult.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/CategoriesResult.tsx",
        "code": {
            "CategoriesResult": "const CategoriesResult = forwardRef<VirtuosoHandle, CategoriesResultProps>(function CategoriesResult(\nconst CategoriesResult = forwardRef<VirtuosoHandle, CategoriesResultProps>(function CategoriesResult(\n\t{ emojiListByCategory, categoriesPosition, customItemsLimit, handleLoadMore, handleSelectEmoji, handleScroll },",
            "wrapper": "\tconst wrapper = useRef<HTMLDivElement>(null);\n\tconst wrapper = useRef<HTMLDivElement>(null);\n\n\treturn (\n\t\t<Box\n\t\t\tref={wrapper}"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiPickerCategoryItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerCategoryItem.tsx",
        "code": {
            "icon": "const EmojiPickerCategoryItem = ({ category, index, active, handleGoToCategory, ...props }: EmojiPickerCategoryItemProps) => {\nconst EmojiPickerCategoryItem = ({ category, index, active, handleGoToCategory, ...props }: EmojiPickerCategoryItemProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst icon = mapCategoryIcon(category.key);\n\tconst icon = mapCategoryIcon(category.key);\n\n\treturn (\n\t\t<IconButton\n\t\t\trole='tab'\n\t\t\tpressed={active}"
        },
        "depth_rank": 7
    },
    {
        "file": "EmojiPickerDesktopDropdown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerDesktopDropdown.tsx",
        "code": {
            "EmojiPickerDesktopDropdown": "const EmojiPickerDesktopDropdown = forwardRef(function ToolboxDropdownDesktop(\nconst EmojiPickerDesktopDropdown = forwardRef(function ToolboxDropdownDesktop(\n\t{ reference, children }: EmojiPickerDesktopDropdownProps,",
            "style": "\tconst targetRef = useRef<HTMLElement>(null);\n\tconst targetRef = useRef<HTMLElement>(null);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\n\tconst style = useDropdownPosition(reference, targetRef);\n\tconst style = useDropdownPosition(reference, targetRef);\n\n\treturn (\n\t\t<Tile is='ul' style={style} ref={mergedRef} elevation='2' pi='0' pb='0' display='flex' flexDirection='column' overflow='auto'>"
        },
        "depth_rank": 7
    },
    {
        "file": "ToneSelector.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/ToneSelector/ToneSelector.tsx",
        "code": {
            "renderOption": "const ToneSelector = ({ tone, setTone }: { tone: number; setTone: (tone: number) => void }) => {\nconst ToneSelector = ({ tone, setTone }: { tone: number; setTone: (tone: number) => void }) => {\n\tconst options = useMemo(() => {\n\tconst options = useMemo(() => {\n\t\tconst renderOption = (tone: number): ReactElement => <ToneItem tone={tone} />;\n\t\tconst renderOption = (tone: number): ReactElement => <ToneItem tone={tone} />;",
            "handleSelection": "\tconst handleSelection = useCallback(\n\tconst handleSelection = useCallback(\n\t\t([selected]) => {\n\t\t\tsetTone(selected);\n\t\t\treset();\n\t\t\thide();\n\t\t},\n\t\t[hide, reset, setTone],\n\t);\n\n\tuseEffect(() => setTone(tone), [tone, setTone]);\n\n\treturn (\n\t\t<>\n\t\t\t<IconButton\n\t\t\t\tmedium\n\t\t\t\tref={ref}"
        },
        "depth_rank": 8
    },
    {
        "file": "ToneSelectorWrapper.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/ToneSelector/ToneSelectorWrapper.tsx",
        "code": {
            "ToneSelectorWrapper": "const ToneSelectorWrapper = ({ caption, children, ...props }: { caption: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\nconst ToneSelectorWrapper = ({ caption, children, ...props }: { caption: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\n\treturn (\n\t\t<Box {...props} display='flex' alignItems='center'>"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomLinkList.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/RoomLinkList.js",
        "code": {
            "roomsArray": "const RoomLinkList = ({ rooms }) => {\nconst RoomLinkList = ({ rooms }) => {\n\tconst roomsArray = Object.values(rooms);\n\tconst roomsArray = Object.values(rooms);\n\treturn roomsArray.map((room, i) => (\n\t\t<React.Fragment key={i}>"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveUsersFirstStep.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/RemoveUsersFirstStep.js",
        "code": {
            "RemoveUsersFirstStep": "const RemoveUsersFirstStep = ({\nconst RemoveUsersFirstStep = ({\n\tonClose,\n\tonCancel,\n\tonConfirm,\n\tusername,\n\tresults,\n\trooms,\n\t// params,\n\t// onChangeParams,\n\tonToggleAllRooms,\n\tonChangeRoomSelection,\n\tselectedRooms,\n\t// onChangeParams={(...args) => console.log(args)}",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Teams_removing_member')}"
        },
        "depth_rank": 9
    },
    {
        "file": "BaseRemoveUsersModal.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/BaseRemoveUsersModal.js",
        "code": {
            "BaseRemoveUsersModal": "const STEPS = {\nconst STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_DELETE: 'CONFIRM_DELETE',\n};\n\nconst BaseRemoveUsersModal = ({\nconst BaseRemoveUsersModal = ({\n\tonClose,\n\tonCancel,\n\tonConfirm,\n\trooms,\n\tcurrentStep = rooms?.length === 0 ? STEPS.CONFIRM_DELETE : STEPS.LIST_ROOMS,\n\tusername,\n}) => {",
            "onChangeRoomSelection": "\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(selectedRooms).filter(Boolean).length === 0) {\n\t\t\treturn setSelectedRooms(Object.fromEntries(eligibleRooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetSelectedRooms({});"
        },
        "depth_rank": 9
    },
    {
        "file": "RemoveUsersModal.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/RemoveUsersModal.js",
        "code": {
            "initialData": "const initialData = { user: { username: '' } };\nconst initialData = { user: { username: '' } };",
            "t": "const RemoveUsersModal = ({ teamId, userId, onClose, onCancel, onConfirm }) => {\nconst RemoveUsersModal = ({ teamId, userId, onClose, onCancel, onConfirm }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { value, phase } = useEndpointData('/v1/teams.listRoomsOfUser', { params: useMemo(() => ({ teamId, userId }), [teamId, userId]) });\n\tconst { value, phase } = useEndpointData('/v1/teams.listRoomsOfUser', { params: useMemo(() => ({ teamId, userId }), [teamId, userId]) });",
            "userDataFetch": "\tconst userDataFetch = useEndpointData('/v1/users.info', { params: useMemo(() => ({ userId }), [userId]), initialValue: initialData });\n\tconst userDataFetch = useEndpointData('/v1/users.info', { params: useMemo(() => ({ userId }), [userId]), initialValue: initialData });"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomActions.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/RoomActions.js",
        "code": {
            "handleClose": "const useReactModal = (Component, props) => {\nconst useReactModal = (Component, props) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback(() => {\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} {...props} />);",
            "removeRoomEndpoint": "\tconst updateRoomEndpoint = useEndpointAction('POST', '/v1/teams.updateRoom');\n\tconst updateRoomEndpoint = useEndpointAction('POST', '/v1/teams.updateRoom');\n\tconst removeRoomEndpoint = useEndpointAction('POST', '/v1/teams.removeRoom', { successMessage: t('Room_has_been_removed') });\n\tconst removeRoomEndpoint = useEndpointAction('POST', '/v1/teams.removeRoom', { successMessage: t('Room_has_been_removed') });",
            "RemoveFromTeamAction": "\tconst deleteRoomEndpoint = useEndpointAction('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete', {\n\tconst deleteRoomEndpoint = useEndpointAction('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete', {\n\t\tsuccessMessage: t('Room_has_been_deleted'),\n\t});\n\n\tconst RemoveFromTeamAction = useReactModal(ConfirmationModal, {\n\tconst RemoveFromTeamAction = useReactModal(ConfirmationModal, {\n\t\tonConfirmAction: async () => {\n\t\t\ttry {\n\t\t\t\tawait removeRoomEndpoint({ teamId: room.teamId, roomId: room._id });",
            "DeleteChannelAction": "\tconst DeleteChannelAction = useReactModal(ConfirmationModal, {\n\tconst DeleteChannelAction = useReactModal(ConfirmationModal, {\n\t\tonConfirmAction: async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteRoomEndpoint({ roomId: room._id });"
        },
        "depth_rank": 8
    },
    {
        "file": "TeamsChannels.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/TeamsChannels.tsx",
        "code": {
            "handleClose": "const useReactModal = (Component: FC<any>, teamId: string, reload: () => void) => {\nconst useReactModal = (Component: FC<any>, teamId: string, reload: () => void) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback((e: SyntheticEvent) => {\n\t\te.preventDefault();\n\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tsetModal(null);\n\t\t\treload();\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} teamId={teamId} />);",
            "TeamsChannels": "const TeamsChannels = ({ teamId, rid }: TeamChannelsProps) => {\nconst TeamsChannels = ({ teamId, rid }: TeamChannelsProps) => {\n\tconst [state, setState] = useState<{ tab?: string; rid?: string }>({});\n\tconst [state, setState] = useState<{ tab?: string; rid?: string }>({});",
            "debouncedText": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst debouncedText = useDebouncedValue(text, 800);\n\tconst debouncedText = useDebouncedValue(text, 800);\n\n\tconst { teamsChannelList, loadMoreItems, reload } = useTeamsChannelList(\n\tconst { teamsChannelList, loadMoreItems, reload } = useTeamsChannelList(",
            "handleBack": "\tconst addExisting = useReactModal(AddExistingModal, teamId, reload);\n\tconst addExisting = useReactModal(AddExistingModal, teamId, reload);\n\tconst createNew = useReactModal(CreateChannelWithData, teamId, reload);\n\tconst createNew = useReactModal(CreateChannelWithData, teamId, reload);\n\n\tconst goToRoom = useCallback((room) => roomCoordinator.openRouteLink(room.t, room), []);\n\tconst goToRoom = useCallback((room) => roomCoordinator.openRouteLink(room.t, room), []);\n\tconst handleBack = useCallback(() => setState({}), [setState]);\n\tconst handleBack = useCallback(() => setState({}), [setState]);",
            "viewRoom": "\tconst viewRoom = useMutableCallback((room: IRoom) => {\n\tconst viewRoom = useMutableCallback((room: IRoom) => {\n\t\tgoToRoom(room);\n\t});\n\n\tif (state?.tab === 'RoomInfo' && state?.rid) {\n\t\treturn <RoomInfo rid={state?.rid} onClickBack={handleBack} onEnterRoom={goToRoom} resetState={() => setState({})} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "BaseTeamsChannels.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/BaseTeamsChannels.tsx",
        "code": {
            "BaseTeamsChannels": "const BaseTeamsChannels = ({\nconst BaseTeamsChannels = ({\n\tloading,\n\tchannels = [],\n\ttext,\n\ttype,\n\tsetText,\n\tsetType,\n\tonClickClose,\n\tonClickAddExisting,\n\tonClickCreateNew,\n\ttotal,\n\tloadMoreItems,\n\tonClickView,\n\treload,\n}: BaseTeamsChannelsProps) => {",
            "loadMoreChannels": "\tconst loadMoreChannels = useDebouncedCallback(\n\tconst loadMoreChannels = useDebouncedCallback(\n\t\t() => {\n\t\t\tif (channels.length >= total) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlm(channels.length);\n\t\t},\n\t\t300,\n\t\t[lm, channels],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='hash' />\n\t\t\t\t<ContextualbarTitle>{t('Team_Channels')}</ContextualbarTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "useTeamsChannelList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts",
        "code": {
            "fetchData": "\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, webRtcCallStartTime, ...room }) => ({\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),"
        },
        "depth_rank": 9
    },
    {
        "file": "AddExistingModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/AddExistingModal/AddExistingModal.tsx",
        "code": {
            "addRoomEndpoint": "const AddExistingModal = ({ onClose, teamId }: AddExistingModalProps) => {\nconst AddExistingModal = ({ onClose, teamId }: AddExistingModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst addRoomEndpoint = useEndpoint('POST', '/v1/teams.addRooms');\n\tconst addRoomEndpoint = useEndpoint('POST', '/v1/teams.addRooms');\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tformState: { isDirty },",
            "handleAddChannels": "\tconst handleAddChannels = useCallback(\n\tconst handleAddChannels = useCallback(\n\t\tasync ({ rooms }) => {\n\t\t\ttry {\n\t\t\t\tawait addRoomEndpoint({\n\t\t\t\t\trooms,\n\t\t\t\t\tteamId,\n\t\t\t\t});\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Channels_added') });"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomsAvailableForTeamsAutoComplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/AddExistingModal/RoomsAvailableForTeamsAutoComplete.tsx",
        "code": {
            "roomsAvailableForTeamsAutoCompleteEndpoint": "const RoomsAvailableForTeamsAutoComplete = ({ value, onChange, ...props }: RoomsAvailableForTeamsAutoCompleteProps) => {\nconst RoomsAvailableForTeamsAutoComplete = ({ value, onChange, ...props }: RoomsAvailableForTeamsAutoCompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\n\tconst roomsAvailableForTeamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/rooms.autocomplete.availableForTeams');\n\tconst roomsAvailableForTeamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/rooms.autocomplete.availableForTeams');\n\n\tconst { data } = useQuery(\n\tconst { data } = useQuery("
        },
        "depth_rank": 9
    },
    {
        "file": "TeamAutocomplete.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/TeamAutocomplete/TeamAutocomplete.tsx",
        "code": {
            "teamsAutoCompleteEndpoint": "const TeamAutocomplete = ({ value, onChange, ...props }: TeamAutocompleteProps) => {\nconst TeamAutocomplete = ({ value, onChange, ...props }: TeamAutocompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst teamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/teams.autocomplete');\n\tconst teamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/teams.autocomplete');\n\tconst { data, isSuccess } = useQuery(['teamsAutoComplete', filter], async () => teamsAutoCompleteEndpoint({ name: filter }));\n\tconst { data, isSuccess } = useQuery(['teamsAutoComplete', filter], async () => teamsAutoCompleteEndpoint({ name: filter }));",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tisSuccess\n\t\t\t\t? data?.teams.map(({ name, teamId, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: teamId as string,\n\t\t\t\t\t\tlabel: { name, avatarETag, type: t, _id },"
        },
        "depth_rank": 8
    },
    {
        "file": "Avatar.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/TeamAutocomplete/Avatar.js",
        "code": {
            "Avatar": "const Avatar = ({ _id, type, avatarETag, ...props }) => (\nconst Avatar = ({ _id, type, avatarETag, ...props }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "TeamsInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfo.tsx",
        "code": {
            "TeamsInfo": "const TeamsInfo = ({\nconst TeamsInfo = ({\n\troom,\n\tretentionPolicy,\n\tonClickHide,\n\tonClickClose,\n\tonClickLeave,\n\tonClickEdit,\n\tonClickDelete,\n\tonClickViewChannels,\n\tonClickConvertToChannel,\n}: TeamsInfoProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { retentionPolicyEnabled, filesOnlyDefault, excludePinnedDefault, maxAgeDefault } = retentionPolicy;\n\tconst { retentionPolicyEnabled, filesOnlyDefault, excludePinnedDefault, maxAgeDefault } = retentionPolicy;",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "TeamsInfoWithRooms.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfoWithRooms.tsx",
        "code": {
            "params": "const TeamsInfoWithRooms = ({ rid }: TeamsInfoWithRoomsProps) => {\nconst TeamsInfoWithRooms = ({ rid }: TeamsInfoWithRoomsProps) => {\n\tconst [editing, setEditing] = useState(false);\n\tconst [editing, setEditing] = useState(false);\n\tconst onClickBack = useMutableCallback(() => setEditing(false));\n\tconst onClickBack = useMutableCallback(() => setEditing(false));\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst params = useMemo(() => ({ roomId: rid }), [rid]);\n\tconst params = useMemo(() => ({ roomId: rid }), [rid]);"
        },
        "depth_rank": 8
    },
    {
        "file": "TeamsInfoWithData.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfoWithData.js",
        "code": {
            "roomsToRemove": "\tconst onClickDelete = useMutableCallback(() => {\n\tconst onClickDelete = useMutableCallback(() => {\n\t\tconst onConfirm = async (deletedRooms) => {\n\t\tconst onConfirm = async (deletedRooms) => {\n\t\t\tconst roomsToRemove = Array.isArray(deletedRooms) && deletedRooms.length > 0 ? deletedRooms : [];\n\t\t\tconst roomsToRemove = Array.isArray(deletedRooms) && deletedRooms.length > 0 ? deletedRooms : [];\n\n\t\t\ttry {\n\t\t\t\tawait deleteTeam({ teamId: room.teamId, ...(roomsToRemove.length && { roomsToRemove }) });",
            "roomsToLeave": "\tconst onClickLeave = useMutableCallback(() => {\n\tconst onClickLeave = useMutableCallback(() => {\n\t\tconst onConfirm = async (roomsLeft) => {\n\t\tconst onConfirm = async (roomsLeft) => {\n\t\t\troomsLeft = Object.keys(roomsLeft);\n\t\t\tconst roomsToLeave = Array.isArray(roomsLeft) && roomsLeft.length > 0 ? roomsLeft : [];\n\t\t\tconst roomsToLeave = Array.isArray(roomsLeft) && roomsLeft.length > 0 ? roomsLeft : [];\n\n\t\t\ttry {\n\t\t\t\tawait leaveTeam({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\t...(roomsToLeave.length && { rooms: roomsToLeave }),",
            "hide": "\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async () => {\n\t\tconst hide = async () => {\n\t\t\ttry {\n\t\t\t\tawait hideTeam(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tif (dontAskHideRoom) {\n\t\t\treturn hide();\n\t\t}\n\n\t\tsetModal(\n\t\t\t<GenericModalDoNotAskAgain\n\t\t\t\tvariant='danger'\n\t\t\t\tconfirmText={t('Yes_hide_it')}",
            "onConfirm": "\tconst onClickConvertToChannel = useMutableCallback(() => {\n\tconst onClickConvertToChannel = useMutableCallback(() => {\n\t\tconst onConfirm = async (roomsToRemove) => {\n\t\tconst onConfirm = async (roomsToRemove) => {\n\t\t\ttry {\n\t\t\t\tawait convertTeamToChannel({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\troomsToRemove: Object.keys(roomsToRemove),\n\t\t\t\t});\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Success') });"
        },
        "depth_rank": 8
    },
    {
        "file": "LeaveTeamWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamWithData.tsx",
        "code": {
            "getRoomsOfUser": "\tconst getRoomsOfUser = useEndpoint('GET', '/v1/teams.listRoomsOfUser');\n\tconst getRoomsOfUser = useEndpoint('GET', '/v1/teams.listRoomsOfUser');\n\tconst { data, isLoading } = useQuery(['teams.listRoomsOfUser'], () => getRoomsOfUser({ teamId, userId }));\n\tconst { data, isLoading } = useQuery(['teams.listRoomsOfUser'], () => getRoomsOfUser({ teamId, userId }));"
        },
        "depth_rank": 9
    },
    {
        "file": "LeaveTeamModalConfirmation.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModalConfirmation.tsx",
        "code": {
            "t": "const LeaveTeamModalConfirmation = ({ selectedRooms, onConfirm, onCancel, onClose }: LeaveTeamModalConfirmationProps): ReactElement => {\nconst LeaveTeamModalConfirmation = ({ selectedRooms, onConfirm, onCancel, onClose }: LeaveTeamModalConfirmationProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='danger'\n\t\t\ttitle={t('Confirmation')}"
        },
        "depth_rank": 10
    },
    {
        "file": "LeaveTeamModalChannels.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModalChannels.tsx",
        "code": {
            "LeaveTeamModalChannels": "const LeaveTeamModalChannels = ({\nconst LeaveTeamModalChannels = ({\n\trooms,\n\tonToggleAllRooms,\n\tonChangeRoomSelection,\n\tonConfirm,\n\tonCancel,\n\teligibleRoomsLength,\n\tselectedRooms,\n}: LeaveTeamModalChannelsProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Teams_leave')}"
        },
        "depth_rank": 10
    },
    {
        "file": "LeaveTeamModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModal.tsx",
        "code": {
            "as": "const LEAVE_TEAM_STEPS = {\nconst LEAVE_TEAM_STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_LEAVE: 'CONFIRM_LEAVE',\n} as const;\n} as const;\n\ntype LeaveTeamModalProps = {\n\trooms: (Serialized<IRoom> & { isLastOwner?: boolean })[];",
            "memoizedRooms": "const LeaveTeamModal = ({ rooms, onCancel, onConfirm }: LeaveTeamModalProps): ReactElement => {\nconst LeaveTeamModal = ({ rooms, onCancel, onConfirm }: LeaveTeamModalProps): ReactElement => {\n\tconst memoizedRooms = useMemo(() => rooms, [rooms]);\n\tconst memoizedRooms = useMemo(() => rooms, [rooms]);\n\tconst [step, setStep] = useState(memoizedRooms.length === 0 ? LEAVE_TEAM_STEPS.CONFIRM_LEAVE : LEAVE_TEAM_STEPS.LIST_ROOMS);\n\tconst [step, setStep] = useState(memoizedRooms.length === 0 ? LEAVE_TEAM_STEPS.CONFIRM_LEAVE : LEAVE_TEAM_STEPS.LIST_ROOMS);\n\n\tconst [selectedRooms, setSelectedRooms] = useState<{ [key: string]: Serialized<IRoom> & { isLastOwner?: boolean } }>({});\n\tconst [selectedRooms, setSelectedRooms] = useState<{ [key: string]: Serialized<IRoom> & { isLastOwner?: boolean } }>({});",
            "lastOwnerRooms": "\tconst lastOwnerRooms = rooms.filter(({ isLastOwner }) => isLastOwner);\n\tconst lastOwnerRooms = rooms.filter(({ isLastOwner }) => isLastOwner);",
            "onChangeRoomSelection": "\tconst handleContinue = useCallback(() => setStep(LEAVE_TEAM_STEPS.CONFIRM_LEAVE), []);\n\tconst handleContinue = useCallback(() => setStep(LEAVE_TEAM_STEPS.CONFIRM_LEAVE), []);\n\tconst handleReturn = useCallback(() => setStep(LEAVE_TEAM_STEPS.LIST_ROOMS), []);\n\tconst handleReturn = useCallback(() => setStep(LEAVE_TEAM_STEPS.LIST_ROOMS), []);\n\n\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };"
        },
        "depth_rank": 10
    },
    {
        "file": "ChannelDeletionTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/ChannelDeletionTable.tsx",
        "code": {
            "t": "const ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\nconst ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');",
            "headers": "\tconst sortedRooms = getSortedChannels();\n\tconst sortedRooms = getSortedChannels();\n\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' sort='name' onClick={setSort} direction={sortDirection} active={sortBy === 'name'}>"
        },
        "depth_rank": 9
    },
    {
        "file": "StepOne.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/StepOne.js",
        "code": {
            "StepOne": "const StepOne = ({\nconst StepOne = ({\n\trooms,\n\t// params,\n\t// onChangeParams,\n\tonToggleAllRooms,\n\tonChangeRoomSelection,\n\tonConfirm,\n\tonCancel,\n\tselectedRooms,\n}) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Teams_about_the_channels')}"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelDeletionTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/ChannelDeletionTableRow.tsx",
        "code": {
            "ChannelDeletionTableRow": "const ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\nconst ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\n\tconst { name, fname, usersCount } = room;\n\tconst { name, fname, usersCount } = room;",
            "handleChange": "\tconst handleChange = useMutableCallback(() => onChange(room));\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\n\treturn (\n\t\t<GenericTableRow action>\n\t\t\t<GenericTableCell maxWidth='x300' withTruncatedText>\n\t\t\t\t<CheckBox checked={selected} onChange={handleChange} />"
        },
        "depth_rank": 9
    },
    {
        "file": "DeleteTeamModalWithRooms.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/DeleteTeamModalWithRooms.tsx",
        "code": {
            "DeleteTeamModalWithRooms": "const DeleteTeamModalWithRooms = ({ teamId, onConfirm, onCancel }: DeleteTeamModalWithRoomsProps): ReactElement => {\nconst DeleteTeamModalWithRooms = ({ teamId, onConfirm, onCancel }: DeleteTeamModalWithRoomsProps): ReactElement => {\n\tconst { value, phase } = useEndpointData('/v1/teams.listRooms', { params: useMemo(() => ({ teamId }), [teamId]) });\n\tconst { value, phase } = useEndpointData('/v1/teams.listRooms', { params: useMemo(() => ({ teamId }), [teamId]) });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (phase === AsyncStatePhase.LOADING) {\n\t\treturn (\n\t\t\t<GenericModal variant='warning' onClose={onCancel} onConfirm={onCancel} title={<Skeleton width='50%' />} confirmText={t('Cancel')}>"
        },
        "depth_rank": 9
    },
    {
        "file": "DeleteTeamModal.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/DeleteTeamModal.js",
        "code": {
            "STEPS": "const STEPS = { LIST_ROOMS: 'LIST_ROOMS', CONFIRM_DELETE: 'CONFIRM_DELETE' };\nconst STEPS = { LIST_ROOMS: 'LIST_ROOMS', CONFIRM_DELETE: 'CONFIRM_DELETE' };",
            "hasRooms": "const DeleteTeamModal = ({ onCancel, onConfirm, rooms }) => {\nconst DeleteTeamModal = ({ onCancel, onConfirm, rooms }) => {\n\tconst hasRooms = rooms?.length > 0;\n\tconst hasRooms = rooms?.length > 0;\n\n\tconst [step, setStep] = useState(hasRooms ? STEPS.LIST_ROOMS : STEPS.CONFIRM_DELETE);\n\tconst [step, setStep] = useState(hasRooms ? STEPS.LIST_ROOMS : STEPS.CONFIRM_DELETE);\n\tconst [deletedRooms, setDeletedRooms] = useState({});\n\tconst [deletedRooms, setDeletedRooms] = useState({});",
            "onChangeRoomSelection": "\tconst onContinue = useCallback(() => {\n\tconst onContinue = useCallback(() => {\n\t\tsetStep(STEPS.CONFIRM_DELETE);\n\t}, [setStep]);\n\n\tconst onReturn = useCallback(() => {\n\tconst onReturn = useCallback(() => {\n\t\tsetStep(STEPS.LIST_ROOMS);\n\t}, [setStep]);\n\n\tconst onChangeRoomSelection = useMutableCallback((room) => {\n\tconst onChangeRoomSelection = useMutableCallback((room) => {\n\t\tif (deletedRooms[room._id]) {\n\t\t\tsetDeletedRooms((deletedRooms) => {\n\t\t\t\tdelete deletedRooms[room._id];\n\t\t\t\treturn { ...deletedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(deletedRooms).filter(Boolean).length === 0) {\n\t\t\treturn setDeletedRooms(Object.fromEntries(rooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetDeletedRooms({});"
        },
        "depth_rank": 9
    },
    {
        "file": "StepTwo.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/StepTwo.js",
        "code": {
            "t": "const StepTwo = ({ deletedRooms, keptRooms, onConfirm, onReturn, onCancel }) => {\nconst StepTwo = ({ deletedRooms, keptRooms, onConfirm, onReturn, onCancel }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='danger'\n\t\t\ticon='trash'\n\t\t\ttitle={t('Deleting')}"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelDesertionTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/ChannelDesertionTable/ChannelDesertionTableRow.tsx",
        "code": {
            "ChannelDesertionTableRow": "const ChannelDesertionTableRow = ({ room, onChange, selected, lastOwnerWarning }: ChannelDesertionTableRowProps): ReactElement => {\nconst ChannelDesertionTableRow = ({ room, onChange, selected, lastOwnerWarning }: ChannelDesertionTableRowProps): ReactElement => {\n\tconst { name, fname, ts, isLastOwner } = room;\n\tconst { name, fname, ts, isLastOwner } = room;",
            "handleChange": "\tconst formatDate = useFormatDateAndTime();\n\tconst formatDate = useFormatDateAndTime();\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\n\treturn (\n\t\t<GenericTableRow action>\n\t\t\t<GenericTableCell maxWidth='x300' withTruncatedText>\n\t\t\t\t<CheckBox checked={selected} onChange={handleChange} disabled={room.isLastOwner} />"
        },
        "depth_rank": 7
    },
    {
        "file": "BaseConvertToChannelModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/BaseConvertToChannelModal.tsx",
        "code": {
            "STEPS": "const STEPS = {\nconst STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_CONVERT: 'CONFIRM_CONVERT',\n};\n\ntype BaseConvertToChannelModalProps = {\n\tonClose: () => void;\n\tonCancel: () => void;\n\tonConfirm: () => Serialized<IRoom>[];\n\tcurrentStep?: string;\n\trooms?: (Serialized<IRoom> & { isLastOwner?: boolean })[];",
            "onChangeRoomSelection": "\tconst onContinue = useMutableCallback(() => setStep(STEPS.CONFIRM_CONVERT));\n\tconst onContinue = useMutableCallback(() => setStep(STEPS.CONFIRM_CONVERT));\n\tconst onReturn = useMutableCallback(() => setStep(STEPS.LIST_ROOMS));\n\tconst onReturn = useMutableCallback(() => setStep(STEPS.LIST_ROOMS));\n\n\tconst eligibleRooms = rooms;\n\tconst eligibleRooms = rooms;\n\n\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(selectedRooms).filter(Boolean).length === 0 && eligibleRooms) {\n\t\t\treturn setSelectedRooms(Object.fromEntries(eligibleRooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetSelectedRooms({});"
        },
        "depth_rank": 7
    },
    {
        "file": "FirstStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/ModalSteps/FirstStep.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Converting_team_to_channel')}"
        },
        "depth_rank": 8
    },
    {
        "file": "SecondStep.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/ModalSteps/SecondStep.tsx",
        "code": {
            "t": "const SecondStep: FC<SecondStepsProps> = ({ onClose, onCancel, onConfirm, deletedRooms = {}, rooms = [], ...props }) => {\nconst SecondStep: FC<SecondStepsProps> = ({ onClose, onCancel, onConfirm, deletedRooms = {}, rooms = [], ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\t{...props}"
        },
        "depth_rank": 8
    },
    {
        "file": "additionalForms.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/additionalForms.tsx",
        "code": {
            "createFormSubscription": "const createFormSubscription = (): {\nconst createFormSubscription = (): {\n\tregisterForm: (form: EEFormHooks) => void;\n\tunregisterForm: (form: keyof EEFormHooks) => void;\n\tformsSubscription: readonly [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => EEFormHooks];\n\tgetForm: (form: keyof EEFormHooks) => () => ReactElement;\n} => {",
            "registerForm": "\tconst formsSubscription = [\n\tconst formsSubscription = [\n\t\t(cb: () => void): (() => void) => {\n\t\t\tupdateCb = cb;\n\t\t\treturn (): void => {\n\t\t\t\tupdateCb = (): void => undefined;\n\t\t\t};\n\t\t},\n\t\t(): EEFormHooks => forms,\n\t] as const;\n\t] as const;\n\n\tconst registerForm = (newForm: EEFormHooks): void => {\n\tconst registerForm = (newForm: EEFormHooks): void => {\n\t\tforms = { ...forms, ...newForm };",
            "getForm": "\tconst unregisterForm = (form: keyof EEFormHooks): void => {\n\tconst unregisterForm = (form: keyof EEFormHooks): void => {\n\t\tdelete forms[form];\n\t\tupdateCb();\n\t};\n\n\tconst getForm = (form: keyof EEFormHooks): (() => ReactElement) => (forms as any)[form] as any;\n\tconst getForm = (form: keyof EEFormHooks): (() => ReactElement) => (forms as any)[form] as any;\n\n\treturn { registerForm, unregisterForm, formsSubscription, getForm };"
        },
        "depth_rank": 6
    },
    {
        "file": "AddManager.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/managers/AddManager.tsx",
        "code": {
            "result": "\t\tconst result = await saveAction({ username });\n\t\tconst result = await saveAction({ username });",
            "handleChange": "\tconst handleChange = (value: unknown): void => {\n\tconst handleChange = (value: unknown): void => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetUsername(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Box display='flex' alignItems='center'>\n\t\t\t<Field>\n\t\t\t\t<Field.Label>{t('Username')}</Field.Label>"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveManagerButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/managers/RemoveManagerButton.tsx",
        "code": {
            "deleteAction": "const RemoveManagerButton = ({ _id, reload }: { _id: string; reload: () => void }): ReactElement => {\nconst RemoveManagerButton = ({ _id, reload }: { _id: string; reload: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/manager/:_id', { keys: { _id } });\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/manager/:_id', { keys: { _id } });",
            "onDeleteManager": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tawait deleteAction();\n\t\treload();\n\t});\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteManager = async (): Promise<void> => {\n\t\tconst onDeleteManager = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Manager_removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "ManagersTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/managers/ManagersTable.tsx",
        "code": {
            "t": "const ManagersTable = () => {\nconst ManagersTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address'>('name');",
            "query": "\tconst query = useDebouncedValue(\n\tconst query = useDebouncedValue(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\t// text,\n\t\t\t\tfields: JSON.stringify({ name: 1, username: 1, emails: 1, avatarETag: 1 }),",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 7
    },
    {
        "file": "WebhooksPageContainer.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/webhooks/WebhooksPageContainer.js",
        "code": {
            "reduceSettings": "const reduceSettings = (settings) =>\nconst reduceSettings = (settings) =>\n\tsettings.reduce((acc, { _id, value }) => {\n\t\tacc = { ...acc, [_id]: value };",
            "t": "const WebhooksPageContainer = () => {\nconst WebhooksPageContainer = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/integrations.settings');\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/integrations.settings');"
        },
        "depth_rank": 7
    },
    {
        "file": "WebhooksPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/webhooks/WebhooksPage.js",
        "code": {
            "getInitialValues": "const getInitialValues = ({\nconst getInitialValues = ({\n\tLivechat_webhookUrl,\n\tLivechat_secret_token,\n\tLivechat_webhook_on_start,\n\tLivechat_webhook_on_close,\n\tLivechat_webhook_on_chat_taken,\n\tLivechat_webhook_on_chat_queued,\n\tLivechat_webhook_on_forward,\n\tLivechat_webhook_on_offline_msg,\n\tLivechat_webhook_on_visitor_message,\n\tLivechat_webhook_on_agent_message,\n\tLivechat_http_timeout,\n}) => {",
            "dispatchToastMessage": "\tconst sendOptions = {\n\tconst sendOptions = {\n\t\tLivechat_webhook_on_start,\n\t\tLivechat_webhook_on_close,\n\t\tLivechat_webhook_on_chat_taken,\n\t\tLivechat_webhook_on_chat_queued,\n\t\tLivechat_webhook_on_forward,\n\t\tLivechat_webhook_on_offline_msg,\n\t\tLivechat_webhook_on_visitor_message,\n\t\tLivechat_webhook_on_agent_message,\n\t};\n\n\tconst mappedSendOptions = reduceSendOptions(sendOptions);\n\tconst mappedSendOptions = reduceSendOptions(sendOptions);\n\n\treturn {\n\t\tLivechat_webhookUrl,\n\t\tLivechat_secret_token,\n\t\tLivechat_http_timeout,\n\t\tsendOn: mappedSendOptions,\n\t};\n};\n\nconst WebhooksPage = ({ settings }) => {\nconst WebhooksPage = ({ settings }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { values, handlers, hasUnsavedChanges, reset, commit } = useForm(getInitialValues(settings));\n\tconst { values, handlers, hasUnsavedChanges, reset, commit } = useForm(getInitialValues(settings));",
            "test": "\tconst save = useEndpoint('POST', '/v1/omnichannel/integrations');\n\tconst save = useEndpoint('POST', '/v1/omnichannel/integrations');\n\tconst test = useEndpoint('POST', '/v1/livechat/webhook.test');\n\tconst test = useEndpoint('POST', '/v1/livechat/webhook.test');\n\n\tconst { Livechat_webhookUrl, Livechat_secret_token, Livechat_http_timeout, sendOn } = values;\n\tconst { Livechat_webhookUrl, Livechat_secret_token, Livechat_http_timeout, sendOn } = values;",
            "handleSave": "\tconst sendOptions = useMemo(\n\tconst sendOptions = useMemo(\n\t\t() => [\n\t\t\t['Livechat_webhook_on_start', t('Chat_start')],\n\t\t\t['Livechat_webhook_on_close', t('Chat_close')],\n\t\t\t['Livechat_webhook_on_chat_taken', t('Chat_taken')],\n\t\t\t['Livechat_webhook_on_chat_queued', t('Chat_queued')],\n\t\t\t['Livechat_webhook_on_forward', t('Forwarding')],\n\t\t\t['Livechat_webhook_on_offline_msg', t('Offline_messages')],\n\t\t\t['Livechat_webhook_on_visitor_message', t('Visitor_message')],\n\t\t\t['Livechat_webhook_on_agent_message', t('Agent_messages')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait save({\n\t\t\t\tLivechatWebhookUrl: Livechat_webhookUrl,\n\t\t\t\tLivechatSecretToken: Livechat_secret_token,\n\t\t\t\tLivechatHttpTimeout: Livechat_http_timeout,\n\t\t\t\tLivechatWebhookOnStart: sendOn.includes('Livechat_webhook_on_start'),\n\t\t\t\tLivechatWebhookOnClose: sendOn.includes('Livechat_webhook_on_close'),\n\t\t\t\tLivechatWebhookOnChatTaken: sendOn.includes('Livechat_webhook_on_chat_taken'),\n\t\t\t\tLivechatWebhookOnChatQueued: sendOn.includes('Livechat_webhook_on_chat_queued'),\n\t\t\t\tLivechatWebhookOnForward: sendOn.includes('Livechat_webhook_on_forward'),\n\t\t\t\tLivechatWebhookOnOfflineMsg: sendOn.includes('Livechat_webhook_on_offline_msg'),\n\t\t\t\tLivechatWebhookOnVisitorMessage: sendOn.includes('Livechat_webhook_on_visitor_message'),\n\t\t\t\tLivechatWebhookOnAgentMessage: sendOn.includes('Livechat_webhook_on_agent_message'),\n\t\t\t});\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "handleTest": "\tconst handleTest = useMutableCallback(async () => {\n\tconst handleTest = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait test();\n\t\t\tdispatchToastMessage({ type: 'success', message: t('It_works') });"
        },
        "depth_rank": 7
    },
    {
        "file": "OmnichannelSidebar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/sidebar/OmnichannelSidebar.tsx",
        "code": {
            "t": "const OmnichannelSidebar: FC = () => {\nconst OmnichannelSidebar: FC = () => {\n\tconst items = useSyncExternalStore(subscribeToOmnichannelSidebarItems, getOmnichannelSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToOmnichannelSidebarItems, getOmnichannelSidebarItems);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Omnichannel')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "Overview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/Overview.tsx",
        "code": {
            "t": "const conversationsInitialData = [initialData, initialData];\nconst conversationsInitialData = [initialData, initialData];\nconst productivityInitialData = [initialData];\nconst productivityInitialData = [initialData];\n\nconst Overview = ({ type, dateRange, departmentId }: { type: string; dateRange: { start: string; end: string }; departmentId: string }) => {\nconst Overview = ({ type, dateRange, departmentId }: { type: string; dateRange: { start: string; end: string }; departmentId: string }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;",
            "params": "\tconst params = useMemo(\n\tconst params = useMemo(\n\t\t() => ({\n\t\t\tanalyticsOptions: { name: type },"
        },
        "depth_rank": 7
    },
    {
        "file": "InterchangeableChart.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/InterchangeableChart.tsx",
        "code": {
            "getChartTooltips": "const getChartTooltips = (chartName: string) => {\nconst getChartTooltips = (chartName: string) => {\n\tswitch (chartName) {\n\t\tcase 'Avg_chat_duration':\n\t\tcase 'Avg_first_response_time':\n\t\tcase 'Best_first_response_time':\n\t\tcase 'Avg_response_time':\n\t\tcase 'Avg_reaction_time':\n\t\t\treturn {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle([ctx]: TooltipItem<'line'>[]) {\n\t\t\t\t\t\tconst { dataset } = ctx;\n\t\t\t\t\t\tconst { dataset } = ctx;",
            "item": "\t\t\t\t\t\tconst item = dataset.data[dataIndex];\n\t\t\t\t\t\tconst item = dataset.data[dataIndex];\n\t\t\t\t\t\treturn secondsToHHMMSS(typeof item === 'number' ? item : 0);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {};",
            "InterchangeableChart": "const InterchangeableChart = ({\nconst InterchangeableChart = ({\n\tdepartmentId,\n\tdateRange,\n\tchartName,\n\t...props\n}: {",
            "context": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst canvas = useRef<HTMLCanvasElement | null>(null);\n\tconst canvas = useRef<HTMLCanvasElement | null>(null);\n\tconst context = useRef<ChartType<'line', number, string> | void>();\n\tconst context = useRef<ChartType<'line', number, string> | void>();\n\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentOverview.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/AgentOverview.tsx",
        "code": {
            "style": "const style = { width: '100%' };\nconst style = { width: '100%' };",
            "AgentOverview": "const AgentOverview = ({\nconst AgentOverview = ({\n\ttype,\n\tdateRange,\n\tdepartmentId,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;",
            "params": "\tconst params = useMemo(\n\tconst params = useMemo(\n\t\t() => ({\n\t\t\tchartOptions: { name: type },",
            "value": "\t\t\tconst value = await loadData(params);\n\t\t\tconst value = await loadData(params);\n\t\t\tsetDisplayData(value);\n\t\t}\n\t\tfetchData();\n\t}, [start, end, loadData, params]);\n\n\treturn (\n\t\t<Table style={style} fixed>"
        },
        "depth_rank": 7
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/DateRangePicker.tsx",
        "code": {
            "t": "const todayDate = formatToDateInput(moment());\nconst todayDate = formatToDateInput(moment());\n\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\n\tstart: formatToDateInput(moment().subtract(monthsToSubtractFromToday, 'month').date(1)),\n\tend: formatToDateInput(monthsToSubtractFromToday === 0 ? moment() : moment().subtract(monthsToSubtractFromToday).date(0)),\n});\n\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\n\tstart: formatToDateInput(moment().subtract(daysToSubtractFromStart, 'day')),\n\tend: formatToDateInput(moment().subtract(daysToSubtractFromEnd, 'day')),\n});\n\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [range, setRange] = useState({ start: '', end: '' });\n\tconst [range, setRange] = useState({ start: '', end: '' });",
            "options": "\tconst handleStart = useMutableCallback(({ currentTarget }) => {\n\tconst handleStart = useMutableCallback(({ currentTarget }) => {\n\t\tconst rangeObj = {\n\t\tconst rangeObj = {\n\t\t\tstart: currentTarget.value,\n\t\t\tend: range.end,\n\t\t};\n\t\tsetRange(rangeObj);\n\t\tonChange(rangeObj);\n\t});\n\n\tconst handleEnd = useMutableCallback(({ currentTarget }) => {\n\tconst handleEnd = useMutableCallback(({ currentTarget }) => {\n\t\tconst rangeObj = {\n\t\tconst rangeObj = {\n\t\t\tend: currentTarget.value,\n\t\t\tstart: range.start,\n\t\t};\n\t\tsetRange(rangeObj);\n\t\tonChange(rangeObj);\n\t});\n\n\tconst handleRange = useMutableCallback((range) => {\n\tconst handleRange = useMutableCallback((range) => {\n\t\tsetRange(range);\n\t\tonChange(range);\n\t});\n\n\tuseEffect(() => {\n\t\thandleRange({\n\t\t\tstart: todayDate,\n\t\t\tend: todayDate,\n\t\t});\n\t}, [handleRange]);\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => ({\n\t\t\ttoday: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Today'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(0, 0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesterday: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Yesterday'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(1, 1));\n\t\t\t\t},\n\t\t\t},\n\t\t\tthisWeek: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('This_week'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(7, 0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tpreviousWeek: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Previous_week'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(14, 7));\n\t\t\t\t},\n\t\t\t},\n\t\t\tthisMonth: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('This_month'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getMonthRange(0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tlastMonth: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Previous_month'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getMonthRange(1));\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\t[handleRange, t],\n\t);\n\n\treturn (\n\t\t<Box {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AnalyticsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/AnalyticsPage.tsx",
        "code": {
            "t": "const useOptions = (type: string): SelectOption[] => {\nconst useOptions = (type: string): SelectOption[] => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn useMemo(() => {\n\t\tif (type === 'Conversations') {\n\t\t\treturn [\n\t\t\t\t['Total_conversations', t('Total_conversations')],\n\t\t\t\t['Avg_chat_duration', t('Avg_chat_duration')],\n\t\t\t\t['Total_messages', t('Total_messages')],\n\t\t\t];\n\t\t}\n\t\treturn [\n\t\t\t['Avg_first_response_time', t('Avg_first_response_time')],\n\t\t\t['Best_first_response_time', t('Best_first_response_time')],\n\t\t\t['Avg_response_time', t('Avg_response_time')],\n\t\t\t['Avg_reaction_time', t('Avg_reaction_time')],\n\t\t];\n\t}, [t, type]);\n};\n\nconst AnalyticsPage = () => {\nconst AnalyticsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [type, setType] = useState('Conversations');\n\tconst [type, setType] = useState('Conversations');\n\tconst [department, setDepartment] = useState<string | null>(null);\n\tconst [department, setDepartment] = useState<string | null>(null);\n\tconst [dateRange, setDateRange] = useState({ start: '', end: '' });\n\tconst [dateRange, setDateRange] = useState({ start: '', end: '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "ContactContextualBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/ContactContextualBar.tsx",
        "code": {
            "HEADER_OPTIONS": "const HEADER_OPTIONS = {\nconst HEADER_OPTIONS = {\n\tnew: { icon: 'user', title: 'New_Contact' },",
            "handleContactsContextualbarCloseButtonClick": "\tconst bar = (useRouteParameter('bar') || 'info') as BarOptions;\n\tconst bar = (useRouteParameter('bar') || 'info') as BarOptions;\n\tconst contactId = useRouteParameter('id') || '';\n\tconst contactId = useRouteParameter('id') || '';\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleContactsContextualbarCloseButtonClick = () => {\n\tconst handleContactsContextualbarCloseButtonClick = () => {\n\t\tdirectoryRoute.push({ page: 'contacts' });",
            "handleContactsContextualbarBackButtonClick": "\tconst handleContactsContextualbarBackButtonClick = () => {\n\tconst handleContactsContextualbarBackButtonClick = () => {\n\t\tdirectoryRoute.push({ page: 'contacts', id: contactId, bar: 'info' });"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatsContextualBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/ChatsContextualBar.tsx",
        "code": {
            "openInRoom": "\tconst bar = useRouteParameter('bar') || 'info';\n\tconst bar = useRouteParameter('bar') || 'info';\n\tconst id = useRouteParameter('id') || '';\n\tconst id = useRouteParameter('id') || '';\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst openInRoom = (): void => {\n\tconst openInRoom = (): void => {\n\t\tid && directoryRoute.push({ page: 'chats', id, bar: 'view' });",
            "handleChatsContextualbarCloseButtonClick": "\tconst handleChatsContextualbarCloseButtonClick = (): void => {\n\tconst handleChatsContextualbarCloseButtonClick = (): void => {\n\t\tdirectoryRoute.push({ page: 'chats' });",
            "handleChatsContextualbarBackButtonClick": "\tconst handleChatsContextualbarBackButtonClick = (): void => {\n\tconst handleChatsContextualbarBackButtonClick = (): void => {\n\t\tid && directoryRoute.push({ page: 'chats', id, bar: 'info' });"
        },
        "depth_rank": 7
    },
    {
        "file": "CallsContextualBarDirectory.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/CallsContextualBarDirectory.tsx",
        "code": {
            "handleCallsContextualbarCloseButtonClick": "\tconst bar = useRouteParameter('bar') || 'info';\n\tconst bar = useRouteParameter('bar') || 'info';\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst token = useSearchParameter('token');\n\tconst token = useSearchParameter('token');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCallsContextualbarCloseButtonClick = (): void => {\n\tconst handleCallsContextualbarCloseButtonClick = (): void => {\n\t\tdirectoryRoute.push({ page: 'calls' });",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\trid: id || '',\n\t\t\ttoken: token || '',\n\t\t}),\n\t\t[id, token],\n\t);\n\n\tconst { value: data, phase: state, error } = useEndpointData(`/v1/voip/room`, { params: query });\n\tconst { value: data, phase: state, error } = useEndpointData(`/v1/voip/room`, { params: query });",
            "room": "\tconst room = data.room as unknown as IVoipRoom; // TODO Check why types are incompatible even though the endpoint returns an IVoipRooms\n\tconst room = data.room as unknown as IVoipRoom; // TODO Check why types are incompatible even though the endpoint returns an IVoipRooms\n\n\treturn (\n\t\t<Contextualbar>{bar === 'info' && <VoipInfo room={room} onClickClose={handleCallsContextualbarCloseButtonClick} />}</Contextualbar>"
        },
        "depth_rank": 7
    },
    {
        "file": "useSlaInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useSlaInfo.tsx",
        "code": {
            "getSLA": "\tconst getSLA = useEndpoint('GET', '/v1/livechat/sla/:slaId', { slaId });\n\tconst getSLA = useEndpoint('GET', '/v1/livechat/sla/:slaId', { slaId });"
        },
        "depth_rank": 8
    },
    {
        "file": "useDepartmentInfo.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useDepartmentInfo.ts",
        "code": {
            "deptInfo": "\tconst deptInfo = useEndpoint('GET', `/v1/livechat/department/:_id`, { _id: departmentId });\n\tconst deptInfo = useEndpoint('GET', `/v1/livechat/department/:_id`, { _id: departmentId });"
        },
        "depth_rank": 8
    },
    {
        "file": "useVisitorInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useVisitorInfo.tsx",
        "code": {
            "getVisitorInfo": "\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst { data: { visitor } = {}, ...props } = useQuery(['/v1/livechat/visitors.info', visitorId], () => getVisitorInfo({ visitorId }), {\n\tconst { data: { visitor } = {}, ...props } = useQuery(['/v1/livechat/visitors.info', visitorId], () => getVisitorInfo({ visitorId }), {\n\t\tenabled,\n\t\tcacheTime,\n\t});\n\treturn { data: visitor, ...props };"
        },
        "depth_rank": 8
    },
    {
        "file": "usePriorityInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/usePriorityInfo.tsx",
        "code": {
            "getPriority": "\tconst getPriority = useEndpoint('GET', `/v1/livechat/priorities/:priorityId`, { priorityId });\n\tconst getPriority = useEndpoint('GET', `/v1/livechat/priorities/:priorityId`, { priorityId });"
        },
        "depth_rank": 8
    },
    {
        "file": "useOmnichannelRoomInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useOmnichannelRoomInfo.tsx",
        "code": {
            "getRoomInfo": "\tconst getRoomInfo = useEndpoint('GET', '/v1/rooms.info');\n\tconst getRoomInfo = useEndpoint('GET', '/v1/rooms.info');\n\tconst { data: roomData, ...props } = useQuery(['/v1/rooms.info', roomId], () => getRoomInfo({ roomId }), { cacheTime, staleTime });\n\tconst { data: roomData, ...props } = useQuery(['/v1/rooms.info', roomId], () => getRoomInfo({ roomId }), { cacheTime, staleTime });"
        },
        "depth_rank": 8
    },
    {
        "file": "AgentField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/AgentField.tsx",
        "code": {
            "t": "const AgentField = ({ agent, isSmall = false }: AgentFieldProps) => {\nconst AgentField = ({ agent, isSmall = false }: AgentFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { username = '' } = agent ?? {};\n\tconst { username = '' } = agent ?? {};",
            "getUserInfo": "\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\n\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\n\tconst { data, isLoading } = useQuery(['/v1/users.info', username], () => getUserInfo({ username }));\n\tconst { data, isLoading } = useQuery(['/v1/users.info', username], () => getUserInfo({ username }));",
            "displayName": "\tconst displayName = name || username;\n\tconst displayName = name || username;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Label>{t('Agent')}</Label>"
        },
        "depth_rank": 8
    },
    {
        "file": "SourceField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/SourceField.tsx",
        "code": {
            "roomSource": "const SourceField: FC<SourceFieldProps> = ({ room }) => {\nconst SourceField: FC<SourceFieldProps> = ({ room }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst roomSource = room.source.alias || room.source.id || room.source.type;\n\tconst roomSource = room.source.alias || room.source.id || room.source.type;\n\n\t// TODO: create a hook that gets the default types values (alias, icons, ids, etc...)\n\t// so we don't have to write this object again and again\n\tconst defaultTypesLabels: {\n\tconst defaultTypesLabels: {\n\t\twidget: string;\n\t\temail: string;\n\t\tsms: string;\n\t\tapp: string;\n\t\tapi: string;\n\t\tother: string;\n\t} = {"
        },
        "depth_rank": 8
    },
    {
        "file": "SlaField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/SlaField.tsx",
        "code": {
            "t": "const SlaField = ({ id }: SlaFieldProps) => {\nconst SlaField = ({ id }: SlaFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = useSlaInfo(id);\n\tconst { data, isInitialLoading, isError } = useSlaInfo(id);"
        },
        "depth_rank": 8
    },
    {
        "file": "CallDialpadButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/CallDialpadButton.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { outBoundCallsAllowed, outBoundCallsEnabledForUser } = useVoipOutboundStates();\n\tconst { outBoundCallsAllowed, outBoundCallsEnabledForUser } = useVoipOutboundStates();",
            "onClick": "\tconst onClick = (event: MouseEvent<HTMLButtonElement>): void => {\n\tconst onClick = (event: MouseEvent<HTMLButtonElement>): void => {\n\t\tevent.stopPropagation();\n\t\topenDialModal({ initialValue: phoneNumber });"
        },
        "depth_rank": 8
    },
    {
        "file": "ContactField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/ContactField.tsx",
        "code": {
            "t": "const ContactField = ({ contact, room }: ContactFieldProps) => {\nconst ContactField = ({ contact, room }: ContactFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { status } = contact;\n\tconst { status } = contact;",
            "getVisitorInfo": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(type).getAvatarPath(room) || '';\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(type).getAvatarPath(room) || '';\n\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/visitors.info', contact._id], () =>\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/visitors.info', contact._id], () =>",
            "displayName": "\tconst displayName = name || username;\n\tconst displayName = name || username;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Label>{t('Contact')}</Label>"
        },
        "depth_rank": 8
    },
    {
        "file": "PriorityField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/PriorityField.tsx",
        "code": {
            "t": "const PriorityField = ({ id }: PriorityFieldProps) => {\nconst PriorityField = ({ id }: PriorityFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(id);\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(id);"
        },
        "depth_rank": 8
    },
    {
        "file": "ContactTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/ContactTable.tsx",
        "code": {
            "ContactTable": "function ContactTable(): ReactElement {\nfunction ContactTable(): ReactElement {\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "onRowClick": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst onButtonNewClick = useMutableCallback(() =>\n\tconst onButtonNewClick = useMutableCallback(() =>\n\t\tdirectoryRoute.push({\n\t\t\tpage: 'contacts',\n\t\t\tbar: 'new',\n\t\t}),\n\t);\n\n\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => (): void =>\n\t\t\tdirectoryRoute.push({\n\t\t\t\tpage: 'contacts',\n\t\t\t\tid,\n\t\t\t\tbar: 'info',\n\t\t\t}),\n\t);\n\n\tconst { data, isLoading, isError, isSuccess, refetch } = useCurrentContacts(query);\n\tconst { data, isLoading, isError, isSuccess, refetch } = useCurrentContacts(query);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='username' direction={sortDirection} active={sortBy === 'username'} onClick={setSort} sort='username'>",
            "visitorEmail": "\t\t\t\t\t\t\t\tconst phoneNumber = (phone?.length && phone[0].phoneNumber) || '';\n\t\t\t\t\t\t\t\tconst phoneNumber = (phone?.length && phone[0].phoneNumber) || '';\n\t\t\t\t\t\t\t\tconst visitorEmail = visitorEmails?.length && visitorEmails[0].address;\n\t\t\t\t\t\t\t\tconst visitorEmail = visitorEmails?.length && visitorEmails[0].address;\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<GenericTableRow\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\tkey={_id}"
        },
        "depth_rank": 8
    },
    {
        "file": "ContactsContextualBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactsContextualBar.tsx",
        "code": {
            "room": "\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\n\tconst {\n\tconst {\n\t\tv: { _id },"
        },
        "depth_rank": 9
    },
    {
        "file": "ContactInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactInfo.tsx",
        "code": {
            "getContact": "\tconst getContact = useEndpoint('GET', '/v1/omnichannel/contact');\n\tconst getContact = useEndpoint('GET', '/v1/omnichannel/contact');\n\tconst {\n\tconst {\n\t\tdata: { contact } = {},",
            "showContactHistory": "\tconst showContactHistory = currentRouteName === 'live' && lastChat;\n\tconst showContactHistory = currentRouteName === 'live' && lastChat;\n\n\tconst [{ phoneNumber = '' }] = phone ?? [{}];\n\tconst [{ phoneNumber = '' }] = phone ?? [{}];",
            "field": "\tconst checkIsVisibleAndScopeVisitor = (key: string) => {\n\tconst checkIsVisibleAndScopeVisitor = (key: string) => {\n\t\tconst field = customFields?.find(({ _id }) => _id === key);\n\t\tconst field = customFields?.find(({ _id }) => _id === key);",
            "onChatHistory": "\tconst onChatHistory = () => {\n\tconst onChatHistory = () => {\n\t\tconst { _id = '' } = lastChat ?? {};\n\t\tconst { _id = '' } = lastChat ?? {};",
            "customFieldEntries": "\tconst customFieldEntries = Object.entries((livechatData ?? {}) as unknown as Record<string, string>).filter(\n\tconst customFieldEntries = Object.entries((livechatData ?? {}) as unknown as Record<string, string>).filter("
        },
        "depth_rank": 9
    },
    {
        "file": "ContactNewEdit.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactNewEdit.tsx",
        "code": {
            "DEFAULT_VALUES": "const DEFAULT_VALUES = {\nconst DEFAULT_VALUES = {\n\ttoken: '',\n\tname: '',\n\temail: '',\n\tphone: '',\n\tusername: '',\n\tcustomFields: {},",
            "initialValue": "\tconst saveContact = useEndpoint('POST', '/v1/omnichannel/contact');\n\tconst saveContact = useEndpoint('POST', '/v1/omnichannel/contact');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\n\tconst { data: customFieldsMetadata = [], isInitialLoading: isLoadingCustomFields } = useCustomFieldsMetadata({\n\tconst { data: customFieldsMetadata = [], isInitialLoading: isLoadingCustomFields } = useCustomFieldsMetadata({\n\t\tscope: 'visitor',\n\t\tenabled: canViewCustomFields(),\n\t});\n\n\tconst initialValue = getInitialValues(data);\n\tconst initialValue = getInitialValues(data);\n\tconst { username: initialUsername } = initialValue;\n\tconst { username: initialUsername } = initialValue;",
            "query": "\t\tconst query = { [name]: value } as Record<'phone' | 'email', string>;\n\t\tconst query = { [name]: value } as Record<'phone' | 'email', string>;",
            "payload": "\t\tconst payload = {\n\t\tconst payload = {\n\t\t\tname,\n\t\t\tphone,\n\t\t\temail,\n\t\t\tcustomFields,\n\t\t\ttoken: token || createToken(),\n\t\t\t...(username && { contactManager: { username } }),"
        },
        "depth_rank": 9
    },
    {
        "file": "Chat.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/Chat.tsx",
        "code": {
            "Chat": "const Chat = ({ rid }: ChatProps): ReactElement => {\nconst Chat = ({ rid }: ChatProps): ReactElement => {\n\treturn (\n\t\t<Box position='absolute' backgroundColor='surface' width='full' height='full'>\n\t\t\t<RoomOpener type='l' reference={rid} />"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/ChatTable.tsx",
        "code": {
            "headers": "\tconst onRowClick = useMutableCallback((id) =>\n\tconst onRowClick = useMutableCallback((id) =>\n\t\tdirectoryRoute.push({\n\t\t\tpage: 'chats',\n\t\t\tbar: 'info',\n\t\t\tid,\n\t\t}),\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='fname' direction={sortDirection} active={sortBy === 'fname'} onClick={setSort} sort='fname' w='x400'>",
            "renderRow": "\tconst renderRow = useCallback(\n\tconst renderRow = useCallback(\n\t\t({ _id, fname, ts, closedAt, department, tags }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "useTagsLabels.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/hooks/useTagsLabels.tsx",
        "code": {
            "labels": "\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\tconst { data: tagsData, isInitialLoading } = useQuery(['/v1/livechat/tags'], () => getTags({ text: '' }), {\n\tconst { data: tagsData, isInitialLoading } = useQuery(['/v1/livechat/tags'], () => getTags({ text: '' }), {\n\t\tenabled: Boolean(initialTags.length),\n\t});\n\n\tconst labels = useMemo(() => {\n\tconst labels = useMemo(() => {\n\t\tconst { tags = [] } = tagsData || {};\n\t\tconst { tags = [] } = tagsData || {};"
        },
        "depth_rank": 9
    },
    {
        "file": "DepartmentField.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/DepartmentField.tsx",
        "code": {
            "t": "const DepartmentField = ({ departmentId }: DepartmentFieldProps) => {\nconst DepartmentField = ({ departmentId }: DepartmentFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isLoading, isError } = useDepartmentInfo(departmentId);\n\tconst { data, isLoading, isError } = useDepartmentInfo(departmentId);"
        },
        "depth_rank": 9
    },
    {
        "file": "ChatInfo.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/ChatInfo.js",
        "code": {
            "formatDuration": "\tconst [customFields, setCustomFields] = useState([]);\n\tconst [customFields, setCustomFields] = useState([]);\n\tconst formatDuration = useFormatDuration();\n\tconst formatDuration = useFormatDuration();\n\n\tconst { data: room } = useOmnichannelRoomInfo(id);\n\tconst { data: room } = useOmnichannelRoomInfo(id);",
            "queueStartedAt": "\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst visitorId = v?._id;\n\tconst visitorId = v?._id;\n\tconst queueStartedAt = queuedAt || ts;\n\tconst queueStartedAt = queuedAt || ts;\n\n\tuseEffect(() => {\n\t\tif (allCustomFields) {\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;",
            "field": "\tconst checkIsVisibleAndScopeRoom = (key) => {\n\tconst checkIsVisibleAndScopeRoom = (key) => {\n\t\tconst field = customFields.find(({ _id }) => _id === key);\n\t\tconst field = customFields.find(({ _id }) => _id === key);",
            "customFieldEntries": "\tconst customFieldEntries = Object.entries(livechatData || {}).filter(([key]) => checkIsVisibleAndScopeRoom(key) && livechatData[key]);\n\tconst customFieldEntries = Object.entries(livechatData || {}).filter(([key]) => checkIsVisibleAndScopeRoom(key) && livechatData[key]);"
        },
        "depth_rank": 9
    },
    {
        "file": "ChatInfoDirectory.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/ChatInfoDirectory.js",
        "code": {
            "dispatchToastMessage": "\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst visitorId = v?._id;\n\tconst visitorId = v?._id;\n\tconst queueStartedAt = queuedAt || ts;\n\tconst queueStartedAt = queuedAt || ts;\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tuseEffect(() => {\n\t\tif (allCustomFields) {\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;",
            "field": "\tconst checkIsVisibleAndScopeRoom = (key) => {\n\tconst checkIsVisibleAndScopeRoom = (key) => {\n\t\tconst field = customFields.find(({ _id }) => _id === key);\n\t\tconst field = customFields.find(({ _id }) => _id === key);"
        },
        "depth_rank": 9
    },
    {
        "file": "VisitorClientInfo.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/VisitorClientInfo.js",
        "code": {
            "clientData": "\tconst clientData = {};\n\tconst clientData = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomEdit.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/RoomEdit/RoomEdit.tsx",
        "code": {
            "ROOM_INTIAL_VALUE": "const ROOM_INTIAL_VALUE = {\nconst ROOM_INTIAL_VALUE = {\n\ttopic: '',\n\ttags: [],\n\tlivechatData: {},",
            "getInitialValuesRoom": "const getInitialValuesRoom = (room: Serialized<IOmnichannelRoom>) => {\nconst getInitialValuesRoom = (room: Serialized<IOmnichannelRoom>) => {\n\tconst { topic, tags, livechatData, slaId, priorityId } = room ?? ROOM_INTIAL_VALUE;\n\tconst { topic, tags, livechatData, slaId, priorityId } = room ?? ROOM_INTIAL_VALUE;",
            "saveRoom": "\tconst saveRoom = useEndpoint('POST', '/v1/livechat/room.saveInfo');\n\tconst saveRoom = useEndpoint('POST', '/v1/livechat/room.saveInfo');\n\n\tconst { data: slaPolicies, isInitialLoading: isSlaPoliciesLoading } = useSlaPolicies();\n\tconst { data: slaPolicies, isInitialLoading: isSlaPoliciesLoading } = useSlaPolicies();",
            "PrioritiesSelect": "\tconst SlaPoliciesSelect = useSlaPoliciesSelect();\n\tconst SlaPoliciesSelect = useSlaPoliciesSelect();\n\tconst PrioritiesSelect = usePrioritiesSelect();\n\tconst PrioritiesSelect = usePrioritiesSelect();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\tcontrol,\n\t\tformState: { isDirty: isFormDirty, isValid: isFormValid },",
            "roomData": "\t\t\tconst guestData = {\n\t\t\tconst guestData = {\n\t\t\t\t_id: visitor._id,\n\t\t\t};\n\n\t\t\tconst roomData = {\n\t\t\tconst roomData = {\n\t\t\t\t_id: room._id,\n\t\t\t\ttopic,\n\t\t\t\ttags: tags.sort(),\n\t\t\t\tlivechatData,\n\t\t\t\tpriorityId,\n\t\t\t\t...(slaId && { slaId }),"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomEditWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/RoomEdit/RoomEditWithData.tsx",
        "code": {
            "t": "function RoomEditWithData({ id: roomId, reload, reloadInfo, onClose }: RoomEditWithDataProps) {\nfunction RoomEditWithData({ id: roomId, reload, reloadInfo, onClose }: RoomEditWithDataProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data: room, isLoading: isRoomLoading, isError: isRoomError } = useOmnichannelRoomInfo(roomId);\n\tconst { data: room, isLoading: isRoomLoading, isError: isRoomError } = useOmnichannelRoomInfo(roomId);"
        },
        "depth_rank": 10
    },
    {
        "file": "CallTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/CallTable.tsx",
        "code": {
            "onRowClick": "\tconst onRowClick = useMutableCallback((id, token) => {\n\tconst onRowClick = useMutableCallback((id, token) => {\n\t\tdirectoryRoute.push(\n\t\t\t{\n\t\t\t\tpage: 'calls',\n\t\t\t\tbar: 'info',\n\t\t\t\tid,\n\t\t\t},\n\t\t\t{ token },",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='fname' direction={sortDirection} active={sortBy === 'fname'} onClick={setSort} sort='fname' w='x400'>"
        },
        "depth_rank": 8
    },
    {
        "file": "Call.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/Call.tsx",
        "code": {
            "Call": "const Call = ({ rid }: CallProps): ReactElement => {\nconst Call = ({ rid }: CallProps): ReactElement => {\n\treturn (\n\t\t<Box position='absolute' backgroundColor='surface' width='full' height='full'>\n\t\t\t<RoomOpener type='v' reference={rid} />"
        },
        "depth_rank": 8
    },
    {
        "file": "CallTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/CallTableRow.tsx",
        "code": {
            "isCallReady": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\n\tconst { _id, fname, callStarted, queue, callDuration = 0, v, direction } = room;\n\tconst { _id, fname, callStarted, queue, callDuration = 0, v, direction } = room;",
            "as": "\tconst duration = moment.duration(callDuration / 1000, 'seconds');\n\tconst duration = moment.duration(callDuration / 1000, 'seconds');\n\tconst phoneNumber = Array.isArray(v?.phone) ? v?.phone[0]?.phoneNumber : v?.phone;\n\tconst phoneNumber = Array.isArray(v?.phone) ? v?.phone[0]?.phoneNumber : v?.phone;\n\n\tconst resolveDirectionLabel = useCallback(\n\tconst resolveDirectionLabel = useCallback(\n\t\t(direction: IVoipRoom['direction']) => {\n\t\t\tconst labels = {\n\t\t\tconst labels = {\n\t\t\t\tinbound: 'Incoming',\n\t\t\t\toutbound: 'Outgoing',\n\t\t\t} as const;\n\t\t\t} as const;\n\t\t\treturn t(labels[direction] || 'Not_Available');\n\t\t},\n\t\t[t],\n\t);\n\n\treturn (\n\t\t<GenericTableRow\n\t\t\tkey={_id}"
        },
        "depth_rank": 8
    },
    {
        "file": "VoipInfoCallButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/VoipInfoCallButton.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { openDialModal } = useDialModal();\n\tconst { openDialModal } = useDialModal();"
        },
        "depth_rank": 9
    },
    {
        "file": "CallsContextualBarRoom.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/CallsContextualBarRoom.tsx",
        "code": {
            "room": "const VoipInfoWithData = ({ tabBar: { close } }: any): ReactElement => {\nconst VoipInfoWithData = ({ tabBar: { close } }: any): ReactElement => {\n\tconst room = useVoipRoom();\n\tconst room = useVoipRoom();\n\n\treturn <VoipInfo room={room} onClickClose={close} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "VoipInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/VoipInfo.tsx",
        "code": {
            "isCallReady": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\n\tconst { servedBy, queue, v, fname, name, callDuration, callTotalHoldTime, closedAt, callWaitingTime, tags, lastMessage } = room;\n\tconst { servedBy, queue, v, fname, name, callDuration, callTotalHoldTime, closedAt, callWaitingTime, tags, lastMessage } = room;",
            "_name": "\tconst shouldShowTags = useMemo(() => tags && tags.length > 0, [tags]);\n\tconst shouldShowTags = useMemo(() => tags && tags.length > 0, [tags]);\n\tconst _name = fname || name;\n\tconst _name = fname || name;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader expanded>\n\t\t\t\t<ContextualbarIcon name='phone' />\n\t\t\t\t<ContextualbarTitle>{t('Call_Information')}</ContextualbarTitle>"
        },
        "depth_rank": 9
    },
    {
        "file": "AgentInfoDetails.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/components/AgentInfoDetails.tsx",
        "code": {
            "AgentInfoDetails": "const AgentInfoDetails = ({ name, shortName, status = <UserStatus.Offline />, ...props }: AgentInfoDetailsProps): ReactElement => (\nconst AgentInfoDetails = ({ name, shortName, status = <UserStatus.Offline />, ...props }: AgentInfoDetailsProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "EditDepartment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartment.tsx",
        "code": {
            "queryClient": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst {\n\tconst {\n\t\tuseEeNumberInput = () => null,\n\t\tuseEeTextInput = () => null,\n\t\tuseEeTextAreaInput = () => null,\n\t\tuseDepartmentForwarding = () => null,\n\t\tuseDepartmentBusinessHours = () => null,\n\t\tuseSelectForwardDepartment = () => null,\n\t} = useFormsSubscription();\n\n\tconst { department, agents = [] } = data || {};\n\tconst { department, agents = [] } = data || {};",
            "initialValues": "\tconst MaxChats = useEeNumberInput();\n\tconst MaxChats = useEeNumberInput();\n\tconst VisitorInactivity = useEeNumberInput();\n\tconst VisitorInactivity = useEeNumberInput();\n\tconst WaitingQueueMessageInput = useEeTextAreaInput();\n\tconst WaitingQueueMessageInput = useEeTextAreaInput();\n\tconst AbandonedMessageInput = useEeTextInput();\n\tconst AbandonedMessageInput = useEeTextInput();\n\tconst DepartmentForwarding = useDepartmentForwarding();\n\tconst DepartmentForwarding = useDepartmentForwarding();\n\tconst DepartmentBusinessHours = useDepartmentBusinessHours();\n\tconst DepartmentBusinessHours = useDepartmentBusinessHours();\n\tconst AutoCompleteDepartment = useSelectForwardDepartment();\n\tconst AutoCompleteDepartment = useSelectForwardDepartment();\n\n\tconst initialValues = getInitialValues({ department, agents, allowedToForwardData });\n\tconst initialValues = getInitialValues({ department, agents, allowedToForwardData });",
            "offlineMessageChannelName": "\tconst requestTagBeforeClosingChat = watch('requestTagBeforeClosingChat');\n\tconst requestTagBeforeClosingChat = watch('requestTagBeforeClosingChat');\n\tconst offlineMessageChannelName = watch('offlineMessageChannelName');\n\tconst offlineMessageChannelName = watch('offlineMessageChannelName');\n\n\tconst { itemsList: RoomsList, loadMoreItems: loadMoreRooms } = useRoomsList(\n\tconst { itemsList: RoomsList, loadMoreItems: loadMoreRooms } = useRoomsList(",
            "saveDepartmentAgentsInfoOnEdit": "\tconst saveDepartmentInfo = useMethod('livechat:saveDepartment');\n\tconst saveDepartmentInfo = useMethod('livechat:saveDepartment');\n\tconst saveDepartmentAgentsInfoOnEdit = useEndpoint('POST', `/v1/livechat/department/:_id/agents`, { _id: id || '' });\n\tconst saveDepartmentAgentsInfoOnEdit = useEndpoint('POST', `/v1/livechat/department/:_id/agents`, { _id: id || '' });",
            "payload": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleSave = useMutableCallback(async (data: FormValues) => {\n\tconst handleSave = useMutableCallback(async (data: FormValues) => {\n\t\tconst {\n\t\tconst {\n\t\t\tagentList,\n\t\t\tenabled,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tshowOnRegistration,\n\t\t\tshowOnOfflineForm,\n\t\t\temail,\n\t\t\tchatClosingTags,\n\t\t\tofflineMessageChannelName,\n\t\t\tmaxNumberSimultaneousChat,\n\t\t\tvisitorInactivityTimeoutInSeconds,\n\t\t\tabandonedRoomsCloseCustomMessage,\n\t\t\twaitingQueueMessage,\n\t\t\tdepartmentsAllowedToForward,\n\t\t\tfallbackForwardDepartment,\n\t\t} = data;\n\n\t\tconst payload = {\n\t\tconst payload = {\n\t\t\tenabled,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tshowOnRegistration,\n\t\t\tshowOnOfflineForm,\n\t\t\trequestTagBeforeClosingChat,\n\t\t\temail,\n\t\t\tchatClosingTags,\n\t\t\tofflineMessageChannelName,\n\t\t\tmaxNumberSimultaneousChat,\n\t\t\tvisitorInactivityTimeoutInSeconds,\n\t\t\tabandonedRoomsCloseCustomMessage,\n\t\t\twaitingQueueMessage,\n\t\t\tdepartmentsAllowedToForward: departmentsAllowedToForward?.map((dep) => dep.value),\n\t\t\tfallbackForwardDepartment,\n\t\t};\n\n\t\ttry {\n\t\t\tif (id) {\n\t\t\t\tconst { agentList: initialAgentList } = initialValues;\n\t\t\t\tconst { agentList: initialAgentList } = initialValues;",
            "handleReturn": "\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\tdepartmentsRoute.push({});",
            "formId": "\tconst isFormValid = isValid && isDirty;\n\tconst isFormValid = isValid && isDirty;\n\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<Page.Header title={title}>"
        },
        "depth_rank": 7
    },
    {
        "file": "DepartmentsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsPage.tsx",
        "code": {
            "onAddNew": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tconst handleTabClick = useMutableCallback((tab) =>\n\tconst handleTabClick = useMutableCallback((tab) =>\n\t\tdepartmentsRoute.push({\n\t\t\tcontext: tab,\n\t\t}),\n\t);\n\n\tconst onAddNew = useMutableCallback(() =>\n\tconst onAddNew = useMutableCallback(() =>\n\t\tdepartmentsRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\tif (context === 'new') {\n\t\treturn <NewDepartment id={id} />;"
        },
        "depth_rank": 7
    },
    {
        "file": "EditDepartmentWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartmentWithData.tsx",
        "code": {
            "params": "const params = { onlyMyDepartments: 'true' } as const;\nconst params = { onlyMyDepartments: 'true' } as const;",
            "getDepartment": "const EditDepartmentWithData = ({ id, title }: EditDepartmentWithDataProps) => {\nconst EditDepartmentWithData = ({ id, title }: EditDepartmentWithDataProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: id ?? '' });\n\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: id ?? '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "NewDepartment.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/NewDepartment.tsx",
        "code": {
            "getDepartmentCreationAvailable": "const NewDepartment = ({ id }: NewDepartmentProps) => {\nconst NewDepartment = ({ id }: NewDepartmentProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst getDepartmentCreationAvailable = useEndpoint('GET', '/v1/livechat/department/isDepartmentCreationAvailable');\n\tconst getDepartmentCreationAvailable = useEndpoint('GET', '/v1/livechat/department/isDepartmentCreationAvailable');\n\tconst { data, isLoading, isError } = useQuery(['getDepartments'], () => getDepartmentCreationAvailable(), {\n\tconst { data, isLoading, isError } = useQuery(['getDepartments'], () => getDepartmentCreationAvailable(), {\n\t\tonSuccess: (data) => {\n\t\t\tif (data.isDepartmentCreationAvailable === false) {\n\t\t\t\tsetModal(<EnterpriseDepartmentsModal closeModal={(): void => setModal(null)} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "EditDepartmentWithAllowedForwardData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartmentWithAllowedForwardData.tsx",
        "code": {
            "getDepartmentListByIds": "const EditDepartmentWithAllowedForwardData = ({ data, ...props }: Omit<EditDepartmentProps, 'allowedToForwardData'>) => {\nconst EditDepartmentWithAllowedForwardData = ({ data, ...props }: Omit<EditDepartmentProps, 'allowedToForwardData'>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartmentListByIds = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\tconst getDepartmentListByIds = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\n\tconst {\n\tconst {\n\t\tdata: allowedToForwardData,\n\t\tisInitialLoading,\n\t\tisError,\n\t} = useQuery(['/v1/livechat/department.listByIds', data?.department?.departmentsAllowedToForward], () =>\n\t\tgetDepartmentListByIds({\n\t\t\tids: data?.department?.departmentsAllowedToForward ?? [],\n\t\t}),\n\t);\n\n\tif (isInitialLoading) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (isError) {\n\t\treturn <Box mbs='x16'>{t('Not_Available')}</Box>;"
        },
        "depth_rank": 7
    },
    {
        "file": "DepartmentsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/DepartmentsTable.tsx",
        "code": {
            "debouncedText": "const DEPARTMENTS_ENDPOINTS = {\nconst DEPARTMENTS_ENDPOINTS = {\n\tdepartment: '/v1/livechat/department',\n\tarchived: '/v1/livechat/departments/archived',\n} as const;\n} as const;\n\nconst DepartmentsTable = ({ archived }: { archived: boolean }) => {\nconst DepartmentsTable = ({ archived }: { archived: boolean }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 8
    },
    {
        "file": "DepartmentItemMenu.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/DepartmentItemMenu.tsx",
        "code": {
            "departmentRemovalEnabled": "\tconst departmentRemovalEnabled = useSetting('Omnichannel_enable_department_removal');\n\tconst departmentRemovalEnabled = useSetting('Omnichannel_enable_department_removal');\n\tconst { _id, name } = department;\n\tconst { _id, name } = department;",
            "handleEdit": "\tconst toggleArchive = useEndpoint('POST', archived ? ARCHIVE_DEPARTMENT_ENDPOINTS.unarchive : ARCHIVE_DEPARTMENT_ENDPOINTS.archive, {\n\tconst toggleArchive = useEndpoint('POST', archived ? ARCHIVE_DEPARTMENT_ENDPOINTS.unarchive : ARCHIVE_DEPARTMENT_ENDPOINTS.archive, {\n\t\t_id,\n\t});\n\n\tconst handleEdit = useMutableCallback(() => {\n\tconst handleEdit = useMutableCallback(() => {\n\t\troute.push({ context: 'edit', id: _id });",
            "handleToggleArchive": "\tconst handleToggleArchive = useMutableCallback(async () => {\n\tconst handleToggleArchive = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait toggleArchive();\n\t\t\tdispatchToastMessage({ type: 'success', message: archived ? t('Department_unarchived') : t('Department_archived') });",
            "handlePermanentDepartmentRemoval": "\tconst handlePermanentDepartmentRemoval = useMutableCallback(() => {\n\tconst handlePermanentDepartmentRemoval = useMutableCallback(() => {\n\t\tsetModal(<RemoveDepartmentModal _id={_id} reset={handleReload} onClose={() => setModal(null)} name={name} />);"
        },
        "depth_rank": 8
    },
    {
        "file": "RemoveDepartmentModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/RemoveDepartmentModal.tsx",
        "code": {
            "removeDepartment": "const RemoveDepartmentModal = ({ _id = '', name, reset, onClose }: RemoveDepartmentModalProps): ReactElement => {\nconst RemoveDepartmentModal = ({ _id = '', name, reset, onClose }: RemoveDepartmentModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst removeDepartment = useEndpoint('DELETE', '/v1/livechat/department/:_id', { _id });\n\tconst removeDepartment = useEndpoint('DELETE', '/v1/livechat/department/:_id', { _id });",
            "onSubmit": "\tconst dispatchToast = useToastMessageDispatch();\n\tconst dispatchToast = useToastMessageDispatch();\n\n\tconst onSubmit = useMutableCallback(async (e) => {\n\tconst onSubmit = useMutableCallback(async (e) => {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tawait removeDepartment();\n\t\t\tdispatchToast({ type: 'success', message: t('Department_removed') });"
        },
        "depth_rank": 8
    },
    {
        "file": "DepartmentAgentsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/DepartmentAgentsTable.tsx",
        "code": {
            "t": "function DepartmentAgentsTable({ control, register }: DepartmentAgentsTableProps) {\nfunction DepartmentAgentsTable({ control, register }: DepartmentAgentsTableProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { fields, append, remove } = useFieldArray({ control, name: 'agentList' });\n\tconst { fields, append, remove } = useFieldArray({ control, name: 'agentList' });",
            "agentList": "\tconst agentList = useWatch({ control, name: 'agentList' });\n\tconst agentList = useWatch({ control, name: 'agentList' });"
        },
        "depth_rank": 8
    },
    {
        "file": "RemoveAgentButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/RemoveAgentButton.tsx",
        "code": {
            "onRemoveAgent": "function RemoveAgentButton({ agentId, onRemove }: { agentId: string; onRemove: (agentId: string) => void }) {\nfunction RemoveAgentButton({ agentId, onRemove }: { agentId: string; onRemove: (agentId: string) => void }) {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\n\t\tconst onRemoveAgent = async () => {\n\t\tconst onRemoveAgent = async () => {\n\t\t\tonRemove(agentId);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 8
    },
    {
        "file": "AddAgent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/AddAgent.tsx",
        "code": {
            "getAgent": "function AddAgent({ agentList, onAdd }: { agentList: IDepartmentAgent[]; onAdd: (agent: IDepartmentAgent) => void }) {\nfunction AddAgent({ agentList, onAdd }: { agentList: IDepartmentAgent[]; onAdd: (agent: IDepartmentAgent) => void }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [userId, setUserId] = useState('');\n\tconst [userId, setUserId] = useState('');\n\n\tconst getAgent = useEndpointAction('GET', '/v1/livechat/users/agent/:_id', { keys: { _id: userId } });\n\tconst getAgent = useEndpointAction('GET', '/v1/livechat/users/agent/:_id', { keys: { _id: userId } });"
        },
        "depth_rank": 8
    },
    {
        "file": "QueueListTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/queueList/QueueListTable.tsx",
        "code": {
            "t": "const QueueListTable = (): ReactElement => {\nconst QueueListTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t{mediaQuery && (\n\t\t\t\t<GenericTableHeaderCell key='servedBy' direction={sortDirection} active={sortBy === 'servedBy'} onClick={setSort} sort='servedBy'>",
            "query": "\tconst query = useMemo(() => {\n\tconst query = useMemo(() => {\n\t\tconst query: {\n\t\tconst query: {\n\t\t\tagentId?: string;\n\t\t\tincludeOfflineAgents?: 'true' | 'false';\n\t\t\tdepartmentId?: string;\n\t\t\tsort: string;\n\t\t\tcount: number;\n\t\t} = {"
        },
        "depth_rank": 7
    },
    {
        "file": "QueueListPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/queueList/QueueListPage.tsx",
        "code": {
            "t": "const QueueListPage = () => {\nconst QueueListPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Livechat_Queue')} />"
        },
        "depth_rank": 7
    },
    {
        "file": "useHistoryList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/useHistoryList.ts",
        "code": {
            "reload": "\tconst reload = useCallback(() => setItemsList(new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>()), []);",
            "fetchData": "\tconst getHistory = useEndpoint('GET', '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId', {\n\tconst getHistory = useEndpoint('GET', '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId', {\n\t\troomId: options.roomId,\n\t\tvisitorId: options.visitorId,\n\t});\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { history, total } = await getHistory({\n\t\t\tconst { history, total } = await getHistory({\n\t\t\t\t...(options.filter && { searchText: options.filter }),"
        },
        "depth_rank": 7
    },
    {
        "file": "ContactHistoryList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/ContactHistoryList.tsx",
        "code": {
            "room": "const ContactHistoryList = ({ setChatId, close }: { setChatId: Dispatch<SetStateAction<string>>; close: () => void }): ReactElement => {\nconst ContactHistoryList = ({ setChatId, close }: { setChatId: Dispatch<SetStateAction<string>>; close: () => void }): ReactElement => {\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst { itemsList: historyList, loadMoreItems } = useHistoryList(\n\tconst { itemsList: historyList, loadMoreItems } = useHistoryList(",
            "handleSearchChange": "\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetText(event.currentTarget.value);\n\t};\n\n\tconst { phase, error, items: history, itemCount: totalItemCount } = useRecordList(historyList);\n\tconst { phase, error, items: history, itemCount: totalItemCount } = useRecordList(historyList);"
        },
        "depth_rank": 7
    },
    {
        "file": "ContactHistoryMessagesList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/MessageList/ContactHistoryMessagesList.tsx",
        "code": {
            "ContactHistoryMessagesList": "const ContactHistoryMessagesList = ({\nconst ContactHistoryMessagesList = ({\n\tchatId,\n\tsetChatId,\n\tclose,\n}: {",
            "handleSearchChange": "\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetText(event.currentTarget.value);\n\t};\n\n\tconst { phase, error, items: messages, itemCount: totalItemCount } = useRecordList(messageList);\n\tconst { phase, error, items: messages, itemCount: totalItemCount } = useRecordList(messageList);",
            "isNewDay": "\t\t\t\t\t\t\t\tconst isSequential = isMessageSequential(data, lastMessage, messageGroupingPeriod);\n\t\t\t\t\t\t\t\tconst isSequential = isMessageSequential(data, lastMessage, messageGroupingPeriod);\n\t\t\t\t\t\t\t\tconst isNewDay = isMessageNewDay(data, lastMessage);\n\t\t\t\t\t\t\t\tconst isNewDay = isMessageNewDay(data, lastMessage);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ContactHistoryMessage message={data} sequential={isSequential} isNewDay={isNewDay} showUserAvatar={showUserAvatar} />"
        },
        "depth_rank": 8
    },
    {
        "file": "useHistoryMessageList.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/MessageList/useHistoryMessageList.ts",
        "code": {
            "getMessages": "\tconst [itemsList, setItemsList] = useState(() => new MessageList());\n\tconst [itemsList, setItemsList] = useState(() => new MessageList());\n\tconst reload = useCallback(() => setItemsList(new MessageList()), []);\n\tconst reload = useCallback(() => setItemsList(new MessageList()), []);\n\n\tconst getMessages = useEndpoint('GET', '/v1/livechat/:rid/messages', { rid: options.roomId });\n\tconst getMessages = useEndpoint('GET', '/v1/livechat/:rid/messages', { rid: options.roomId });",
            "fetchMessages": "\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getMessages({\n\t\t\tconst { messages, total } = await getMessages({\n\t\t\t\t...(options.filter && { searchTerm: options.filter }),"
        },
        "depth_rank": 8
    },
    {
        "file": "RemoveChatButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/RemoveChatButton.tsx",
        "code": {
            "onDeleteAgent": "const RemoveChatButton: FC<{ _id: string }> = ({ _id }) => {\nconst RemoveChatButton: FC<{ _id: string }> = ({ _id }) => {\n\tconst removeCurrentChatMutation = useRemoveCurrentChatMutation();\n\tconst removeCurrentChatMutation = useRemoveCurrentChatMutation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tremoveCurrentChatMutation.mutate(_id);\n\t});\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_removed') });",
            "handleClose": "\t\tconst handleClose = (): void => {\n\t\tconst handleClose = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={onDeleteAgent} onClose={handleClose} onCancel={handleClose} confirmText={t('Delete')} />,"
        },
        "depth_rank": 7
    },
    {
        "file": "CurrentChatsRoute.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/CurrentChatsRoute.tsx",
        "code": {
            "CurrentChatsRoute": "const CurrentChatsRoute = (): ReactElement => {\nconst CurrentChatsRoute = (): ReactElement => {\n\tconst { sortBy, sortDirection, setSort } = useSort<'fname' | 'departmentId' | 'servedBy' | 'priorityWeight' | 'ts' | 'lm' | 'open'>(\n\tconst { sortBy, sortDirection, setSort } = useSort<'fname' | 'departmentId' | 'servedBy' | 'priorityWeight' | 'ts' | 'lm' | 'open'>(",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => currentChatQuery(params, customFields, [sortBy, sortDirection], current, itemsPerPage),\n\t\t[customFields, itemsPerPage, params, sortBy, sortDirection, current],\n\t);\n\n\tconst { data, isLoading, isSuccess } = useCurrentChats(query);\n\tconst { data, isLoading, isSuccess } = useCurrentChats(query);",
            "onRowClick": "\tconst onRowClick = useMutableCallback((_id) => {\n\tconst onRowClick = useMutableCallback((_id) => {\n\t\tdirectoryRoute.push({ id: _id });",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t{isPriorityEnabled && (\n\t\t\t\t<GenericTableHeaderCell\n\t\t\t\t\tkey='priorityWeight'\n\t\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 7
    },
    {
        "file": "FilterByText.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/FilterByText.tsx",
        "code": {
            "t": "const FilterByText: FilterByTextType = ({ setFilter, reload, customFields, setCustomFields, hasCustomFields, ...props }) => {\nconst FilterByText: FilterByTextType = ({ setFilter, reload, customFields, setCustomFields, hasCustomFields, ...props }) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst statusOptions: [string, string][] = [\n\tconst statusOptions: [string, string][] = [\n\t\t['all', t('All')],\n\t\t['closed', t('Closed')],\n\t\t['opened', t('Open')],\n\t\t['onhold', t('On_Hold_Chats')],\n\t];\n\n\tconst [guest, setGuest] = useLocalStorage('guest', '');\n\tconst [guest, setGuest] = useLocalStorage('guest', '');\n\tconst [servedBy, setServedBy] = useLocalStorage('servedBy', 'all');\n\tconst [servedBy, setServedBy] = useLocalStorage('servedBy', 'all');\n\tconst [status, setStatus] = useLocalStorage('status', 'all');\n\tconst [status, setStatus] = useLocalStorage('status', 'all');\n\tconst [department, setDepartment] = useLocalStorage<string>('department', 'all');\n\tconst [department, setDepartment] = useLocalStorage<string>('department', 'all');\n\tconst [from, setFrom] = useLocalStorage('from', '');\n\tconst [from, setFrom] = useLocalStorage('from', '');\n\tconst [to, setTo] = useLocalStorage('to', '');\n\tconst [to, setTo] = useLocalStorage('to', '');\n\tconst [tags, setTags] = useLocalStorage<never | { label: string; value: string }[]>('tags', []);\n\tconst [tags, setTags] = useLocalStorage<never | { label: string; value: string }[]>('tags', []);",
            "onDeleteAll": "\tconst handleClearFilters = useMutableCallback(() => {\n\tconst handleClearFilters = useMutableCallback(() => {\n\t\treset();\n\t});\n\n\tconst removeClosedChats = useMethod('livechat:removeAllClosedRooms');\n\tconst removeClosedChats = useMethod('livechat:removeAllClosedRooms');\n\n\tconst handleRemoveClosed = useMutableCallback(async () => {\n\tconst handleRemoveClosed = useMutableCallback(async () => {\n\t\tconst onDeleteAll = async (): Promise<void> => {\n\t\tconst onDeleteAll = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeClosedChats();\n\t\t\t\treload?.();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_removed') });",
            "handleClose": "\t\tconst handleClose = (): void => {\n\t\tconst handleClose = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={onDeleteAll} onClose={handleClose} onCancel={handleClose} confirmText={t('Delete')} />,"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomFieldsList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/CustomFieldsList.tsx",
        "code": {
            "CustomFieldsList": "const CustomFieldsList = ({ setCustomFields, allCustomFields }: CustomFieldsListProps): ReactElement => {\nconst CustomFieldsList = ({ setCustomFields, allCustomFields }: CustomFieldsListProps): ReactElement => {\n\tconst { register, watch, control } = useForm({ mode: 'onChange' });\n\tconst { register, watch, control } = useForm({ mode: 'onChange' });"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomFieldsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/CustomFieldsTable.tsx",
        "code": {
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='field' direction={sortDirection} active={sortBy === '_id'} onClick={setSort} sort='_id'>",
            "onRowClick": "\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => () =>\n\t\t\tdepartmentsRoute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid,\n\t\t\t}),\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<FilterByText onChange={({ text }) => setFilter(text)} />"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveCustomFieldButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/RemoveCustomFieldButton.tsx",
        "code": {
            "onDeleteAgent": "const RemoveCustomFieldButton = ({ _id, reload }: { _id: ILivechatCustomField['_id']; reload: () => void }) => {\nconst RemoveCustomFieldButton = ({ _id, reload }: { _id: ILivechatCustomField['_id']; reload: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeCustomField = useMethod('livechat:removeCustomField');\n\tconst removeCustomField = useMethod('livechat:removeCustomField');\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeCustomField(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Field_Removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "NewCustomFieldsPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/NewCustomFieldsPage.js",
        "code": {
            "dispatchToastMessage": "const initialValues = {\nconst initialValues = {\n\tfield: '',\n\tlabel: '',\n\tscope: 'visitor',\n\tvisibility: true,\n\tregexp: '',\n\tsearchable: true,\n};\n\nconst NewCustomFieldsPage = ({ reload }) => {\nconst NewCustomFieldsPage = ({ reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [additionalValues, setAdditionalValues] = useState({});\n\tconst [additionalValues, setAdditionalValues] = useState({});",
            "handleReturn": "\tconst handleReturn = useCallback(() => {\n\tconst handleReturn = useCallback(() => {\n\t\trouter.push({});",
            "save": "\tconst save = useMethod('livechat:saveCustomField');\n\tconst save = useMethod('livechat:saveCustomField');\n\n\tconst { hasError, data: additionalData, hasUnsavedChanges: additionalFormChanged } = additionalValues;\n\tconst { hasError, data: additionalData, hasUnsavedChanges: additionalFormChanged } = additionalValues;",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait save(undefined, {\n\t\t\t\t...values,\n\t\t\t\tvisibility: values.visibility ? 'visible' : 'hidden',\n\t\t\t\t...additionalData,\n\t\t\t});\n\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "handleAdditionalForm": "\tconst handleAdditionalForm = useMutableCallback((val) => {\n\tconst handleAdditionalForm = useMutableCallback((val) => {\n\t\tsetAdditionalValues({ ...additionalValues, ...val });"
        },
        "depth_rank": 7
    },
    {
        "file": "NewCustomFieldsForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/NewCustomFieldsForm.js",
        "code": {
            "t": "const NewCustomFieldsForm = ({ values = {}, handlers = {}, className }) => {\nconst NewCustomFieldsForm = ({ values = {}, handlers = {}, className }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { id, field, label, scope, visibility, searchable, regexp } = values;\n\tconst { id, field, label, scope, visibility, searchable, regexp } = values;",
            "scopeOptions": "\tconst scopeOptions = useMemo(\n\tconst scopeOptions = useMemo(\n\t\t() => [\n\t\t\t['visitor', t('Visitor')],\n\t\t\t['room', t('Room')],\n\t\t],\n\t\t[t],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Field className={className}>"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomFieldsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/CustomFieldsPage.tsx",
        "code": {
            "onAddNew": "\tconst onAddNew = useMutableCallback(() => router.push({ context: 'new' }));\n\tconst onAddNew = useMutableCallback(() => router.push({ context: 'new' }));"
        },
        "depth_rank": 7
    },
    {
        "file": "EditCustomFieldsPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/EditCustomFieldsPage.js",
        "code": {
            "dispatchToastMessage": "const EditCustomFieldsPage = ({ customField, id, reload }) => {\nconst EditCustomFieldsPage = ({ customField, id, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [additionalValues, setAdditionalValues] = useState({});\n\tconst [additionalValues, setAdditionalValues] = useState({});",
            "handleReturn": "\tconst handleReturn = useCallback(() => {\n\tconst handleReturn = useCallback(() => {\n\t\trouter.push({});",
            "save": "\tconst save = useMethod('livechat:saveCustomField');\n\tconst save = useMethod('livechat:saveCustomField');\n\n\tconst { hasError, data: additionalData, hasUnsavedChanges: additionalFormChanged } = additionalValues;\n\tconst { hasError, data: additionalData, hasUnsavedChanges: additionalFormChanged } = additionalValues;",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait save(id, {\n\t\t\t\t...additionalData,\n\t\t\t\t...values,\n\t\t\t\tvisibility: values.visibility ? 'visible' : 'hidden',\n\t\t\t});\n\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "handleAdditionalForm": "\tconst handleAdditionalForm = useMutableCallback((val) => {\n\tconst handleAdditionalForm = useMutableCallback((val) => {\n\t\tsetAdditionalValues({ ...additionalValues, ...val });"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentsTab.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTab.tsx",
        "code": {
            "handleClose": "\tconst handleClose = useCallback((): void => {\n\tconst handleClose = useCallback((): void => {\n\t\tagentsRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentEdit.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentEdit.tsx",
        "code": {
            "voipEnabled": "\tconst [maxChatUnsaved, setMaxChatUnsaved] = useState();\n\tconst [maxChatUnsaved, setMaxChatUnsaved] = useState();\n\tconst voipEnabled = useSetting('VoIP_Enabled');\n\tconst voipEnabled = useSetting('VoIP_Enabled');\n\n\tconst { user } = data || { user: {} };\n\tconst { user } = data || { user: {} };",
            "initialDepartmentValue": "\tconst initialDepartmentValue = useMemo(\n\tconst initialDepartmentValue = useMemo(\n\t\t() => (userDepartments.departments ? userDepartments.departments.map(({ departmentId }) => departmentId) : []),",
            "saveRef": "\tconst eeForms = useFormsSubscription();\n\tconst eeForms = useFormsSubscription();\n\n\tconst saveRef = useRef({\n\tconst saveRef = useRef({\n\t\tvalues: {},",
            "handleSave": "\tconst { departments, status, voipExtension } = values as {\n\tconst { departments, status, voipExtension } = values as {\n\t\tdepartments: string[];\n\t\tstatus: ILivechatAgent['statusLivechat'];\n\t\tvoipExtension: string;\n\t};\n\n\tconst MaxChats = useMaxChatsPerAgent();\n\tconst MaxChats = useMaxChatsPerAgent();\n\n\tconst saveAgentInfo = useMethod('livechat:saveAgentInfo');\n\tconst saveAgentInfo = useMethod('livechat:saveAgentInfo');\n\tconst saveAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst saveAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleReset = useMutableCallback(() => {\n\tconst handleReset = useMutableCallback(() => {\n\t\treset();\n\t\tresetMaxChats();\n\t});\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait saveAgentInfo(uid, saveRef.current.values, departments);\n\t\t\tawait saveAgentStatus({ status, agentId: uid });"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentInfoActions.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentInfoActions.tsx",
        "code": {
            "deleteAction": "\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/agent/:_id', { keys: { _id } });\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/agent/:_id', { keys: { _id } });",
            "result": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tconst result = await deleteAction();\n\t\tconst result = await deleteAction();\n\t\tif (result.success === true) {\n\t\t\tagentsRoute.push({});",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });",
            "handleEditClick": "\tconst handleEditClick = useMutableCallback(() =>\n\tconst handleEditClick = useMutableCallback(() =>\n\t\tagentsRoute.push({\n\t\t\tcontext: 'edit',\n\t\t\tid: _id,\n\t\t}),\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<AgentInfoAction key={t('Edit')} title={t('Edit')} label={t('Edit')} onClick={handleEditClick} icon='edit' />"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentInfo.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentInfo.tsx",
        "code": {
            "result": "const AgentInfo = memo<AgentInfoProps>(function AgentInfo({ uid, children, ...props }) {\nconst AgentInfo = memo<AgentInfoProps>(function AgentInfo({ uid, children, ...props }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst result = useEndpointData('/v1/livechat/users/agent/:_id', { keys: { _id: uid } });\n\tconst result = useEndpointData('/v1/livechat/users/agent/:_id', { keys: { _id: uid } });",
            "MaxChats": "\tconst MaxChats = useMaxChatsPerAgentDisplay?.();\n\tconst MaxChats = useMaxChatsPerAgentDisplay?.();\n\n\tif (result.phase === AsyncStatePhase.LOADING) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (result.phase === AsyncStatePhase.REJECTED) {\n\t\treturn <Box mbs='x16'>{t('User_not_found')}</Box>;"
        },
        "depth_rank": 7
    },
    {
        "file": "AgentEditWithData.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentEditWithData.tsx",
        "code": {
            "getAgent": "const AgentEditWithData = ({ uid, reload }: AgentEditWithDataProps): ReactElement => {\nconst AgentEditWithData = ({ uid, reload }: AgentEditWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\n\tconst getAgent = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });\n\tconst getAgent = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });",
            "getAgentDepartments": "\tconst getAgentDepartments = useEndpoint('GET', '/v1/livechat/agents/:agentId/departments', { agentId: uid });\n\tconst getAgentDepartments = useEndpoint('GET', '/v1/livechat/agents/:agentId/departments', { agentId: uid });"
        },
        "depth_rank": 7
    },
    {
        "file": "RemoveAgentButton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/RemoveAgentButton.tsx",
        "code": {
            "deleteAction": "const RemoveAgentButton = ({ _id, reload }: RemoveAgentButtonProps): ReactElement => {\nconst RemoveAgentButton = ({ _id, reload }: RemoveAgentButtonProps): ReactElement => {\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/agent/:_id', { keys: { _id } });\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/agent/:_id', { keys: { _id } });",
            "onDeleteAgent": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tconst result = await deleteAction();\n\t\tconst result = await deleteAction();\n\t\tif (result.success === true) {\n\t\t\treload();\n\t\t}\n\t});\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 8
    },
    {
        "file": "AgentsTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AgentsTable.tsx",
        "code": {
            "t": "const AgentsTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\nconst AgentsTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address' | 'statusLivechat'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address' | 'statusLivechat'>('name');",
            "debouncedSort": "\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedSort = useDebouncedValue(\n\tconst debouncedSort = useDebouncedValue(\n\t\tuseMemo(() => [sortBy, sortDirection], [sortBy, sortDirection]),\n\t\t500,\n\t) as ['name' | 'username' | 'emails.address' | 'statusLivechat', 'asc' | 'desc'];\n\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useQuery({ text: debouncedFilter, current, itemsPerPage }, debouncedSort);\n\tconst query = useQuery({ text: debouncedFilter, current, itemsPerPage }, debouncedSort);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell direction={sortDirection} sort='name' active={sortBy === 'name'} onClick={onHeaderClick}>"
        },
        "depth_rank": 8
    },
    {
        "file": "AddAgent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AddAgent.tsx",
        "code": {
            "result": "\t\tconst result = await saveAction({ username });\n\t\tconst result = await saveAction({ username });",
            "handleChange": "\tconst handleChange = (value: unknown): void => {\n\tconst handleChange = (value: unknown): void => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetUsername(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Box display='flex' alignItems='center'>\n\t\t\t<Field>\n\t\t\t\t<Field.Label>{t('Username')}</Field.Label>"
        },
        "depth_rank": 8
    },
    {
        "file": "AgentsTableRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AgentsTableRow.tsx",
        "code": {
            "AgentsTableRow": "const AgentsTableRow = ({\nconst AgentsTableRow = ({\n\tuser: { _id, name, username, avatarETag, emails, statusLivechat },",
            "onRowClick": "\tconst onRowClick = useCallback(() => {\n\tconst onRowClick = useCallback(() => {\n\t\tagentsRoute.push({\n\t\t\tcontext: 'info',\n\t\t\tid: _id,\n\t\t});\n\t}, [_id, agentsRoute]);\n\n\treturn (\n\t\t<GenericTableRow action onClick={onRowClick}>"
        },
        "depth_rank": 8
    },
    {
        "file": "AppearancePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearancePage.tsx",
        "code": {
            "reduceAppearance": "const reduceAppearance = (settings: Serialized<ISetting>[]): AppearanceSettings =>\nconst reduceAppearance = (settings: Serialized<ISetting>[]): AppearanceSettings =>\n\tsettings.reduce<Partial<LivechatAppearanceSettings>>((acc, { _id, value }) => {\n\t\tacc = { ...acc, [_id]: value };",
            "save": "const AppearancePage: FC<AppearancePageProps> = ({ settings }) => {\nconst AppearancePage: FC<AppearancePageProps> = ({ settings }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst save = useMethod('livechat:saveAppearance');\n\tconst save = useMethod('livechat:saveAppearance');\n\n\tconst { values, handlers, commit, reset, hasUnsavedChanges } = useForm(reduceAppearance(settings));\n\tconst { values, handlers, commit, reset, hasUnsavedChanges } = useForm(reduceAppearance(settings));",
            "mappedAppearance": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst mappedAppearance = Object.entries(values).map(([_id, value]) => ({ _id, value }));\n\t\tconst mappedAppearance = Object.entries(values).map(([_id, value]) => ({ _id, value }));",
            "handleResetButtonClick": "\tconst handleResetButtonClick = (): void => {\n\tconst handleResetButtonClick = (): void => {\n\t\treset();\n\t};\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Appearance')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AppearancePageContainer.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearancePageContainer.tsx",
        "code": {
            "t": "const AppearancePageContainer: FC = () => {\nconst AppearancePageContainer: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/appearance');\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/appearance');"
        },
        "depth_rank": 7
    },
    {
        "file": "AppearanceForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearanceForm.tsx",
        "code": {
            "onChangeCharacterLimit": "const AppearanceForm: FC<AppearanceFormProps> = ({ values = {}, handlers = {} }) => {\nconst AppearanceForm: FC<AppearanceFormProps> = ({ values = {}, handlers = {} }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tLivechat_title,\n\t\tLivechat_title_color,\n\t\tLivechat_show_agent_info,\n\t\tLivechat_show_agent_email,\n\t\tLivechat_display_offline_form,\n\t\tLivechat_offline_form_unavailable,\n\t\tLivechat_offline_message,\n\t\tLivechat_offline_title,\n\t\tLivechat_offline_title_color,\n\t\tLivechat_offline_email,\n\t\tLivechat_offline_success_message,\n\t\tLivechat_registration_form,\n\t\tLivechat_name_field_registration_form,\n\t\tLivechat_email_field_registration_form,\n\t\tLivechat_registration_form_message,\n\t\tLivechat_conversation_finished_message,\n\t\tLivechat_conversation_finished_text,\n\t\tLivechat_enable_message_character_limit,\n\t\tLivechat_message_character_limit,\n\t} = values;\n\n\tconst {\n\tconst {\n\t\thandleLivechat_title,\n\t\thandleLivechat_title_color,\n\t\thandleLivechat_show_agent_info,\n\t\thandleLivechat_show_agent_email,\n\t\thandleLivechat_display_offline_form,\n\t\thandleLivechat_offline_form_unavailable,\n\t\thandleLivechat_offline_message,\n\t\thandleLivechat_offline_title,\n\t\thandleLivechat_offline_title_color,\n\t\thandleLivechat_offline_email,\n\t\thandleLivechat_offline_success_message,\n\t\thandleLivechat_registration_form,\n\t\thandleLivechat_name_field_registration_form,\n\t\thandleLivechat_email_field_registration_form,\n\t\thandleLivechat_registration_form_message,\n\t\thandleLivechat_conversation_finished_message,\n\t\thandleLivechat_conversation_finished_text,\n\t\thandleLivechat_enable_message_character_limit,\n\t\thandleLivechat_message_character_limit,\n\t} = handlers;\n\n\tconst onChangeCharacterLimit = useMutableCallback(({ currentTarget: { value } }) => {\n\tconst onChangeCharacterLimit = useMutableCallback(({ currentTarget: { value } }) => {\n\t\thandleLivechat_message_character_limit?.(Number(value) < 0 ? 0 : value);\n\t});\n\n\treturn (\n\t\t<Accordion>\n\t\t\t<Accordion.Item defaultExpanded title={t('Livechat_online')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "RealTimeMonitoringPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/RealTimeMonitoringPage.js",
        "code": {
            "reloadRef": "const dateRange = getDateRange();\nconst dateRange = getDateRange();\n\nconst RealTimeMonitoringPage = () => {\nconst RealTimeMonitoringPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [reloadFrequency, setReloadFrequency] = useState(5);\n\tconst [reloadFrequency, setReloadFrequency] = useState(5);\n\tconst [departmentId, setDepartment] = useState('');\n\tconst [departmentId, setDepartment] = useState('');\n\n\tconst reloadRef = useRef({});\n\tconst reloadRef = useRef({});",
            "departmentParams": "\tconst departmentParams = useMemo(\n\tconst departmentParams = useMemo(\n\t\t() => ({\n\t\t\t...(departmentId && { departmentId }),",
            "reloadOptions": "\tconst reloadOptions = useMemo(\n\tconst reloadOptions = useMemo(\n\t\t() => [\n\t\t\t[5, <Fragment key='5 seconds'>5 {t('seconds')}</Fragment>],"
        },
        "depth_rank": 7
    },
    {
        "file": "ResponseTimesChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ResponseTimesChart.js",
        "code": {
            "tooltipCallbacks": "const [labels, initialData] = getMomentChartLabelsAndData();\nconst [labels, initialData] = getMomentChartLabelsAndData();\nconst tooltipCallbacks = {\nconst tooltipCallbacks = {\n\tcallbacks: {\n\t\ttitle([ctx]) {\n\t\t\tconst { dataset } = ctx;\n\t\t\tconst { dataset } = ctx;",
            "init": "const init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawLineChart(\n\t\tcanvas,\n\t\tcontext,\n\t\t[t('Avg_reaction_time'), t('Longest_reaction_time'), t('Avg_response_time'), t('Longest_response_time')],\n\t\tlabels,\n\t\t[initialData, initialData.slice(), initialData.slice(), initialData.slice()],\n\t\t{ legends: true, anim: true, smallTicks: true, displayColors: false, tooltipCallbacks },",
            "updateChartData": "const ResponseTimesChart = ({ params, reloadRef, ...props }) => {\nconst ResponseTimesChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });",
            "label": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tupdateChartData(label, [reactionAvg, reactionLongest, responseAvg, responseLongest]);\n\t\t}\n\t}, [reactionAvg, reactionLongest, responseAvg, responseLongest, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatsPerDepartmentChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsPerDepartmentChart.js",
        "code": {
            "initialData": "const initialData = {\nconst initialData = {\n\tdepartments: {},",
            "initChart": "\tconst chartData = data ?? initialData;\n\tconst chartData = data ?? initialData;\n\n\tuseEffect(() => {\n\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tif (chartData && chartData.success) {\n\t\t\t\tdelete chartData.success;\n\t\t\t\tObject.entries(chartData).forEach(([name, value]) => {\n\t\t\t\t\tupdateChartData(name, [value.open, value.closed]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [chartData, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "AgentStatusChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/AgentStatusChart.js",
        "code": {
            "initChart": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED && context.current) {\n\t\t\tupdateChartData(t('Offline'), [offline]);\n\t\t\tupdateChartData(t('Available'), [available]);\n\t\t\tupdateChartData(t('Away'), [away]);\n\t\t\tupdateChartData(t('Busy'), [busy]);\n\t\t}\n\t}, [available, away, busy, offline, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "Chart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/Chart.js",
        "code": {
            "Chart": "const style = {\nconst style = {\n\tminHeight: '250px',\n};\nconst Chart = forwardRef(function Chart(props, ref) {\nconst Chart = forwardRef(function Chart(props, ref) {\n\treturn (\n\t\t<Box padding='x20' height='x300' {...props}>"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatsPerAgentChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsPerAgentChart.js",
        "code": {
            "initialData": "const initialData = {\nconst initialData = {\n\tagents: {},",
            "initChart": "\tconst chartData = data ?? initialData;\n\tconst chartData = data ?? initialData;\n\n\tuseEffect(() => {\n\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tif (chartData && chartData.success) {\n\t\t\t\tdelete chartData.success;\n\t\t\t\tObject.entries(chartData).forEach(([name, value]) => {\n\t\t\t\t\tupdateChartData(name, [value.open, value.closed, value.onhold]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [chartData, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatsChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsChart.js",
        "code": {
            "updateChartData": "const labels = ['Open', 'Queued', 'On_Hold_Chats', 'Closed'];\nconst labels = ['Open', 'Queued', 'On_Hold_Chats', 'Closed'];\n\nconst initialData = {\nconst initialData = {\n\topen: 0,\n\tqueued: 0,\n\tonhold: 0,\n\tclosed: 0,\n};\n\nconst init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawDoughnutChart(\n\t\tcanvas,\n\t\tt('Chats'),\n\t\tcontext,\n\t\tlabels.map((l) => t(l)),\n\t\tObject.values(initialData),\n\t);\n\nconst ChatsChart = ({ params, reloadRef, ...props }) => {\nconst ChatsChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/chats', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/chats', { params });",
            "initChart": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tupdateChartData(t('Open'), [open]);\n\t\t\tupdateChartData(t('Closed'), [closed]);\n\t\t\tupdateChartData(t('On_Hold_Chats'), [onhold]);\n\t\t\tupdateChartData(t('Queued'), [queued]);\n\t\t}\n\t}, [closed, open, queued, onhold, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatDurationChart.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatDurationChart.js",
        "code": {
            "tooltipCallbacks": "const [labels, initialData] = getMomentChartLabelsAndData();\nconst [labels, initialData] = getMomentChartLabelsAndData();\nconst tooltipCallbacks = {\nconst tooltipCallbacks = {\n\tcallbacks: {\n\t\ttitle([ctx]) {\n\t\t\tconst { dataset } = ctx;\n\t\t\tconst { dataset } = ctx;",
            "updateChartData": "const init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawLineChart(canvas, context, [t('Avg_chat_duration'), t('Longest_chat_duration')], labels, [initialData, initialData.slice()], {\n\t\tlegends: true,\n\t\tanim: true,\n\t\tsmallTicks: true,\n\t\tdisplayColors: false,\n\t\ttooltipCallbacks,\n\t});\n\nconst ChatDurationChart = ({ params, reloadRef, ...props }) => {\nconst ChatDurationChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });",
            "label": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tupdateChartData(label, [avg, longest]);\n\t\t}\n\t}, [avg, longest, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ChatsOverview.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/overviews/ChatsOverview.js",
        "code": {
            "initialData": "const initialData = [\nconst initialData = [\n\t{ title: '', value: 0 },"
        },
        "depth_rank": 8
    },
    {
        "file": "ProductivityOverview.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/overviews/ProductivityOverview.js",
        "code": {
            "defaultValue": "const defaultValue = { title: '', value: '00:00:00' };\nconst defaultValue = { title: '', value: '00:00:00' };"
        },
        "depth_rank": 8
    },
    {
        "file": "CounterRow.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/counter/CounterRow.js",
        "code": {
            "CounterRow": "const CounterRow = ({ children, ...props }) => (\nconst CounterRow = ({ children, ...props }) => ("
        },
        "depth_rank": 8
    },
    {
        "file": "CounterContainer.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/counter/CounterContainer.js",
        "code": {
            "t": "const CounterContainer = ({ data, state, initialData, ...props }) => {\nconst CounterContainer = ({ data, state, initialData, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [displayData, setDisplayData] = useState(initialData);\n\tconst [displayData, setDisplayData] = useState(initialData);\n\n\tconst { totalizers } = data || { totalizers: initialData };\n\tconst { totalizers } = data || { totalizers: initialData };"
        },
        "depth_rank": 8
    },
    {
        "file": "BusinessHoursPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/BusinessHoursPage.js",
        "code": {
            "handleNew": "\tconst handleNew = useMutableCallback(() => {\n\tconst handleNew = useMutableCallback(() => {\n\t\trouter.push({\n\t\t\tcontext: 'new',\n\t\t});\n\t});\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Business_Hours')}>"
        },
        "depth_rank": 7
    },
    {
        "file": "BusinessHoursForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/BusinessHoursForm.js",
        "code": {
            "daysOptions": "const BusinessHoursForm = ({ values, handlers, className = undefined }) => {\nconst BusinessHoursForm = ({ values, handlers, className = undefined }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst daysOptions = useMemo(() => DAYS_OF_WEEK.map((day) => [day, t(day)]), [t]);\n\tconst daysOptions = useMemo(() => DAYS_OF_WEEK.map((day) => [day, t(day)]), [t]);\n\n\tconst { daysOpen, daysTime } = values;\n\tconst { daysOpen, daysTime } = values;"
        },
        "depth_rank": 7
    },
    {
        "file": "TimeRangeFieldsAssembler.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/TimeRangeFieldsAssembler.js",
        "code": {
            "handleChange": "const TimeRangeFieldsAssembler = ({ onChange, daysOpen, daysTime, className }) => {\nconst TimeRangeFieldsAssembler = ({ onChange, daysOpen, daysTime, className }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleChange = (day) => (start, finish) => onChange({ ...daysTime, [day]: { start, finish } });\n\tconst handleChange = (day) => (start, finish) => onChange({ ...daysTime, [day]: { start, finish } });",
            "daysList": "\tconst stableDaysOpen = useStableArray(daysOpen);\n\tconst stableDaysOpen = useStableArray(daysOpen);\n\tconst daysList = useMemo(() => DAYS_OF_WEEK.filter((day) => stableDaysOpen.includes(day)), [stableDaysOpen]);\n\tconst daysList = useMemo(() => DAYS_OF_WEEK.filter((day) => stableDaysOpen.includes(day)), [stableDaysOpen]);\n\n\treturn (\n\t\t<>\n\t\t\t{daysList.map((day) => (\n\t\t\t\t<Field className={className} key={day}>"
        },
        "depth_rank": 7
    },
    {
        "file": "NewBusinessHoursPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/NewBusinessHoursPage.js",
        "code": {
            "saveData": "const defaultBusinessHour = createDefaultBusinessHours();\nconst defaultBusinessHour = createDefaultBusinessHours();\n\nconst NewBusinessHoursPage = () => {\nconst NewBusinessHoursPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [hasChanges, setHasChanges] = useState(false);\n\tconst [hasChanges, setHasChanges] = useState(false);\n\n\tconst saveData = useRef({ form: {} });\n\tconst saveData = useRef({ form: {} });",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst {\n\t\tconst {\n\t\t\tcurrent: { form, multiple: { departments, ...multiple } = {}, timezone: { name: timezoneName } = {} },",
            "payload": "\t\tconst mappedForm = mapBusinessHoursForm(form, defaultBusinessHour);\n\t\tconst mappedForm = mapBusinessHoursForm(form, defaultBusinessHour);\n\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\n\t\ttry {\n\t\t\tconst payload = {\n\t\t\tconst payload = {\n\t\t\t\t...defaultBusinessHour,\n\t\t\t\t...multiple,\n\t\t\t\t...(departmentsToApplyBusinessHour && { departmentsToApplyBusinessHour }),",
            "handleReturn": "\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\trouter.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "EditBusinessHoursPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/EditBusinessHoursPage.js",
        "code": {
            "saveData": "\tconst saveData = useRef({ form: {} });\n\tconst saveData = useRef({ form: {} });",
            "payload": "\t\tconst mappedForm = mapBusinessHoursForm(form, data.businessHour);\n\t\tconst mappedForm = mapBusinessHoursForm(form, data.businessHour);\n\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\n\t\ttry {\n\t\t\tconst payload = {\n\t\t\tconst payload = {\n\t\t\t\t...data.businessHour,\n\t\t\t\t...multiple,\n\t\t\t\tdepartmentsToApplyBusinessHour: departmentsToApplyBusinessHour ?? '',\n\t\t\t\ttimezoneName: timezoneName || data.businessHour.timezone.name,\n\t\t\t\tworkHours: mappedForm,\n\t\t\t};\n\n\t\t\tawait save(payload);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Business_hours_updated') });",
            "handleReturn": "\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\trouter.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "mapBusinessHoursForm.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/mapBusinessHoursForm.js",
        "code": {
            "open": "\t\tconst open = daysOpen.includes(currentDay);\n\t\tconst open = daysOpen.includes(currentDay);\n\t\tif (daysTime[currentDay]) {\n\t\t\tconst { start, finish } = daysTime[currentDay];\n\t\t\tconst { start, finish } = daysTime[currentDay];"
        },
        "depth_rank": 7
    },
    {
        "file": "TimeRangeInput.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/TimeRangeInput.js",
        "code": {
            "handleChangeTo": "const TimeRangeInput = ({ onChange, start: startDefault, finish: finishDefault }) => {\nconst TimeRangeInput = ({ onChange, start: startDefault, finish: finishDefault }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [start, setStart] = useState(startDefault);\n\tconst [start, setStart] = useState(startDefault);\n\tconst [finish, setFinish] = useState(finishDefault);\n\tconst [finish, setFinish] = useState(finishDefault);\n\n\tconst handleChangeFrom = useMutableCallback(({ currentTarget: { value } }) => {\n\tconst handleChangeFrom = useMutableCallback(({ currentTarget: { value } }) => {\n\t\tsetStart(value);\n\t\tonChange(value, finish);\n\t});\n\n\tconst handleChangeTo = useMutableCallback(({ currentTarget: { value } }) => {\n\tconst handleChangeTo = useMutableCallback(({ currentTarget: { value } }) => {\n\t\tsetFinish(value);\n\t\tonChange(start, value);\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' flexGrow={1} mie='x2'>"
        },
        "depth_rank": 7
    },
    {
        "file": "BusinessHoursFormContainer.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/BusinessHoursFormContainer.js",
        "code": {
            "useChangeHandler": "const useChangeHandler = (name, ref) =>\nconst useChangeHandler = (name, ref) =>\n\tuseMutableCallback((val) => {\n\t\tref.current[name] = { ...ref.current[name], ...val };",
            "cleanFunc": "const cleanFunc = () => {};\nconst cleanFunc = () => {};",
            "forms": "const BusinessHoursFormContainer = ({ data, saveRef, onChange = () => {} }) => {\nconst BusinessHoursFormContainer = ({ data, saveRef, onChange = () => {} }) => {\n\tconst forms = useFormsSubscription();\n\tconst forms = useFormsSubscription();\n\n\tconst [hasChangesMultiple, setHasChangesMultiple] = useState(false);\n\tconst [hasChangesMultiple, setHasChangesMultiple] = useState(false);\n\tconst [hasChangesTimeZone, setHasChangesTimeZone] = useState(false);\n\tconst [hasChangesTimeZone, setHasChangesTimeZone] = useState(false);\n\n\tconst { useBusinessHoursTimeZone = cleanFunc, useBusinessHoursMultiple = cleanFunc } = forms;\n\tconst { useBusinessHoursTimeZone = cleanFunc, useBusinessHoursMultiple = cleanFunc } = forms;",
            "onChangeMultipleBHForm": "\tconst TimezoneForm = useBusinessHoursTimeZone();\n\tconst TimezoneForm = useBusinessHoursTimeZone();\n\tconst MultipleBHForm = useBusinessHoursMultiple();\n\tconst MultipleBHForm = useBusinessHoursMultiple();\n\n\tconst showTimezone = useReactiveValue(useMutableCallback(() => businessHourManager.showTimezoneTemplate()));\n\tconst showTimezone = useReactiveValue(useMutableCallback(() => businessHourManager.showTimezoneTemplate()));\n\tconst showMultipleBHForm = useReactiveValue(useMutableCallback(() => businessHourManager.showCustomTemplate(data)));\n\tconst showMultipleBHForm = useReactiveValue(useMutableCallback(() => businessHourManager.showCustomTemplate(data)));\n\n\tconst onChangeTimezone = useChangeHandler('timezone', saveRef);\n\tconst onChangeTimezone = useChangeHandler('timezone', saveRef);\n\tconst onChangeMultipleBHForm = useChangeHandler('multiple', saveRef);\n\tconst onChangeMultipleBHForm = useChangeHandler('multiple', saveRef);\n\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitalData(data));\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitalData(data));"
        },
        "depth_rank": 7
    },
    {
        "file": "TriggersRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersRow.tsx",
        "code": {
            "onDeleteTrigger": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteTrigger = async () => {\n\t\tconst onDeleteTrigger = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteTrigger(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Trigger_removed') });"
        },
        "depth_rank": 7
    },
    {
        "file": "EditTriggerPageContainer.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/EditTriggerPageContainer.js",
        "code": {
            "t": "const EditTriggerPageContainer = ({ id, onSave }) => {\nconst EditTriggerPageContainer = ({ id, onSave }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { value: data, phase: state } = useEndpointData('/v1/livechat/triggers/:_id', { keys: { _id: id } });\n\tconst { value: data, phase: state } = useEndpointData('/v1/livechat/triggers/:_id', { keys: { _id: id } });"
        },
        "depth_rank": 7
    },
    {
        "file": "TriggersTable.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersTable.tsx",
        "code": {
            "t": "const TriggersTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\nconst TriggersTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(() => ({ offset: current, count: itemsPerPage }), [current, itemsPerPage]);\n\tconst query = useMemo(() => ({ offset: current, count: itemsPerPage }), [current, itemsPerPage]);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 7
    },
    {
        "file": "EditTriggerPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/EditTriggerPage.js",
        "code": {
            "getInitialValues": "const getInitialValues = ({\nconst getInitialValues = ({\n\tname,\n\tdescription,\n\tenabled,\n\trunOnce,\n\tconditions: [{ name: condName, value: condValue }],",
            "save": "\tconst save = useMethod('livechat:saveTrigger');\n\tconst save = useMethod('livechat:saveTrigger');\n\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialValues(data));\n\tconst { values, handlers, hasUnsavedChanges } = useForm(getInitialValues(data));",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tactions: {\n\t\t\t\t\tparams: { sender, msg, name },",
            "canSave": "\tconst canSave = name && hasUnsavedChanges;\n\tconst canSave = name && hasUnsavedChanges;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarScrollableContent>\n\t\t\t\t<FieldGroup>\n\t\t\t\t\t<TriggersForm values={values} handlers={handlers} />"
        },
        "depth_rank": 7
    },
    {
        "file": "NewTriggerPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/NewTriggerPage.js",
        "code": {
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tactions: {\n\t\t\t\t\tparams: { sender, msg, name },",
            "canSave": "\tconst canSave = useMemo(() => name && msg, [name, msg]);\n\tconst canSave = useMemo(() => name && msg, [name, msg]);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarScrollableContent>\n\t\t\t\t<FieldGroup>\n\t\t\t\t\t<TriggersForm values={values} handlers={handlers} />"
        },
        "depth_rank": 7
    },
    {
        "file": "TriggersPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersPage.tsx",
        "code": {
            "handleAdd": "\tconst reload = useRef(() => null);\n\tconst reload = useRef(() => null);\n\n\tconst handleReload = useCallback(() => {\n\tconst handleReload = useCallback(() => {\n\t\treload.current();\n\t}, []);\n\n\tconst handleAdd = useMutableCallback(() => {\n\tconst handleAdd = useMutableCallback(() => {\n\t\trouter.push({ context: 'new' });",
            "handleCloseContextualbar": "\tconst handleCloseContextualbar = useMutableCallback(() => {\n\tconst handleCloseContextualbar = useMutableCallback(() => {\n\t\trouter.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "TriggersForm.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersForm.tsx",
        "code": {
            "t": "const TriggersForm: FC<TriggersFormProps> = ({ values, handlers, className }) => {\nconst TriggersForm: FC<TriggersFormProps> = ({ values, handlers, className }) => {\n\tconst [nameError, setNameError] = useState('');\n\tconst [nameError, setNameError] = useState('');\n\tconst [msgError, setMsgError] = useState('');\n\tconst [msgError, setMsgError] = useState('');\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { name, description, enabled, runOnce, conditions, actions } = values;\n\tconst { name, description, enabled, runOnce, conditions, actions } = values;"
        },
        "depth_rank": 7
    },
    {
        "file": "InvitePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/invite/InvitePage.tsx",
        "code": {
            "channelRoute": "const InvitePage = (): ReactElement => {\nconst InvitePage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst token = useRouteParameter('hash');\n\tconst token = useRouteParameter('hash');\n\tconst registrationForm = useSetting('Accounts_RegistrationForm');\n\tconst registrationForm = useSetting('Accounts_RegistrationForm');\n\tconst setLoginDefaultState = useSessionDispatch('loginDefaultState');\n\tconst setLoginDefaultState = useSessionDispatch('loginDefaultState');\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst homeRoute = useRoute('home');\n\tconst homeRoute = useRoute('home');\n\tconst groupRoute = useRoute('group');\n\tconst groupRoute = useRoute('group');\n\tconst channelRoute = useRoute('channel');\n\tconst channelRoute = useRoute('channel');\n\n\tconst { isLoading, data } = useQuery(\n\tconst { isLoading, data } = useQuery(",
            "result": "\t\t\t\t\tconst result = await sdk.rest.post('/v1/useInviteToken', { token });\n\t\t\t\t\tconst result = await sdk.rest.post('/v1/useInviteToken', { token });"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalRegion.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/modal/ModalRegion.tsx",
        "code": {
            "currentModal": "const ModalRegion = (): ReactElement | null => {\nconst ModalRegion = (): ReactElement | null => {\n\tconst currentModal = useCurrentModal();\n\tconst currentModal = useCurrentModal();\n\tconst { setModal } = useModal();\n\tconst { setModal } = useModal();"
        },
        "depth_rank": 6
    },
    {
        "file": "ModalBlock.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/modal/uikit/ModalBlock.tsx",
        "code": {
            "element": "\t\t\tconst element = ref.current.querySelector<HTMLElement>(focusableElementsStringInvalid);\n\t\t\tconst element = ref.current.querySelector<HTMLElement>(focusableElementsStringInvalid);\n\t\t\telement?.focus();\n\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "UiKitModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/modal/uikit/UiKitModal.tsx",
        "code": {
            "state": "const UiKitModal = (props: ActionManagerState): ReactElement => {\nconst UiKitModal = (props: ActionManagerState): ReactElement => {\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst state = useActionManagerState(props);\n\tconst state = useActionManagerState(props);\n\n\tconst { appId, viewId, mid: _mid, errors, view } = state;\n\tconst { appId, viewId, mid: _mid, errors, view } = state;",
            "groupStateByBlockId": "\tconst [values, updateValues] = useValues(view.blocks as LayoutBlock[]);\n\tconst [values, updateValues] = useValues(view.blocks as LayoutBlock[]);\n\n\tconst groupStateByBlockId = (values: { value: unknown; blockId: string }[]) =>\n\tconst groupStateByBlockId = (values: { value: unknown; blockId: string }[]) =>",
            "handleClose": "\tconst handleSubmit = useMutableCallback((e) => {\n\tconst handleSubmit = useMutableCallback((e) => {\n\t\tprevent(e);\n\t\tactionManager.triggerSubmitView({\n\t\t\tviewId,\n\t\t\tappId,\n\t\t\tpayload: {\n\t\t\t\tview: {\n\t\t\t\t\t...view,\n\t\t\t\t\tid: viewId,\n\t\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t});\n\n\tconst handleCancel = useMutableCallback((e) => {\n\tconst handleCancel = useMutableCallback((e) => {\n\t\tprevent(e);\n\t\tactionManager.triggerCancel({\n\t\t\tviewId,\n\t\t\tappId,\n\t\t\tview: {\n\t\t\t\t...view,\n\t\t\t\tid: viewId,\n\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t},\n\t\t});\n\t});\n\n\tconst handleClose = useMutableCallback(() => {\n\tconst handleClose = useMutableCallback(() => {\n\t\tactionManager.triggerCancel({\n\t\t\tviewId,\n\t\t\tappId,\n\t\t\tview: {\n\t\t\t\t...view,\n\t\t\t\tid: viewId,\n\t\t\t\tstate: groupStateByBlockId(values),\n\t\t\t},\n\t\t\tisCleared: true,\n\t\t});\n\t});\n\n\treturn (\n\t\t<kitContext.Provider value={context}>"
        },
        "depth_rank": 7
    },
    {
        "file": "useActionManagerState.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/modal/uikit/hooks/useActionManagerState.ts",
        "code": {
            "actionManager": "\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst [state, setState] = useState(initialState);\n\tconst [state, setState] = useState(initialState);\n\n\tconst { viewId } = state;\n\tconst { viewId } = state;",
            "handleUpdate": "\t\tconst handleUpdate = ({ type, errors, ...data }: ActionManagerState) => {\n\t\tconst handleUpdate = ({ type, errors, ...data }: ActionManagerState) => {\n\t\t\tif (type === 'errors') {\n\t\t\t\tsetState((state) => ({ ...state, errors, type }));"
        },
        "depth_rank": 8
    },
    {
        "file": "useValues.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/modal/uikit/hooks/useValues.ts",
        "code": {
            "hasInitialValueAndActionId": "const hasElementInBlock = (block: LayoutBlock): block is LayoutBlockWithElement => 'element' in block;\nconst hasElementInBlock = (block: LayoutBlock): block is LayoutBlockWithElement => 'element' in block;\nconst hasElementsInBlock = (block: LayoutBlock): block is LayoutBlockWithElements => 'elements' in block;\nconst hasElementsInBlock = (block: LayoutBlock): block is LayoutBlockWithElements => 'elements' in block;\nconst hasInitialValueAndActionId = (\nconst hasInitialValueAndActionId = (\n\telement: ElementFromLayoutBlock,\n): element is Extract<ElementFromLayoutBlock, { actionId: string }> & { initialValue: unknown } =>",
            "extractValue": "const extractValue = (element: ElementFromLayoutBlock, obj: Record<string, { value: unknown; blockId?: string }>, blockId?: string) => {\nconst extractValue = (element: ElementFromLayoutBlock, obj: Record<string, { value: unknown; blockId?: string }>, blockId?: string) => {\n\tif (hasInitialValueAndActionId(element)) {\n\t\tobj[element.actionId] = { value: element.initialValue, blockId };",
            "initializer": "\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\t\t...values,\n\t\t[actionId]: payload,\n\t}));\n\n\tconst initializer = useMutableCallback((blocks: LayoutBlock[]) => {\n\tconst initializer = useMutableCallback((blocks: LayoutBlock[]) => {\n\t\tconst obj: Record<string, { value: unknown; blockId?: string }> = {};\n\t\tconst obj: Record<string, { value: unknown; blockId?: string }> = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "UiKitBanner.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/banners/UiKitBanner.tsx",
        "code": {
            "icon": "const UiKitBanner: FC<UiKitBannerProps> = ({ payload }) => {\nconst UiKitBanner: FC<UiKitBannerProps> = ({ payload }) => {\n\tconst state = useUIKitStateManager(payload);\n\tconst state = useUIKitStateManager(payload);\n\n\tconst icon = useMemo(() => {\n\tconst icon = useMemo(() => {\n\t\tif (state.icon) {\n\t\t\treturn <Icon name={state.icon as IconName} size={20} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "LegacyBanner.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/banners/LegacyBanner.tsx",
        "code": {
            "handleClose": "\t\tconst timer = setTimeout(() => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tconfig.onClose?.call(undefined);\n\t\t\tbanners.close();\n\t\t}, config.timer);\n\n\t\treturn (): void => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [config.onClose, config.timer]);\n\n\tconst handleAction = useCallback(() => {\n\tconst handleAction = useCallback(() => {\n\t\tconfig.action?.call(undefined);\n\t}, [config.action]);\n\n\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\tconfig.onClose?.call(undefined);\n\t\tbanners.close();\n\t}, [config.onClose]);\n\n\treturn (\n\t\t<Banner\n\t\t\tinline={inline}",
            "title": "\t\t\ttitle={typeof title === 'function' ? title() : title}\n\t\t\ttitle={typeof title === 'function' ? title() : title}",
            "text": "\t\t\t{typeof text === 'function' ? text() : text}\n\t\t\t{typeof text === 'function' ? text() : text}"
        },
        "depth_rank": 6
    },
    {
        "file": "useDismissUserBannerMutation.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/banners/hooks/useDismissUserBannerMutation.ts",
        "code": {
            "dispatchToastMessage": "\tconst dismissBanner = useMethod('banner/dismiss');\n\tconst dismissBanner = useMethod('banner/dismiss');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutation(dismissBanner, {\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 7
    },
    {
        "file": "useUserBanners.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/banners/hooks/useUserBanners.ts",
        "code": {
            "t": "\tconst user = useUser();\n\tconst user = useUser();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { mutate: dismissUserBanner } = useDismissUserBannerMutation();\n\tconst { mutate: dismissUserBanner } = useDismissUserBannerMutation();"
        },
        "depth_rank": 7
    },
    {
        "file": "useRemoteBanners.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/banners/hooks/useRemoteBanners.ts",
        "code": {
            "controller": "\t\tconst controller = new AbortController();\n\t\tconst controller = new AbortController();\n\n\t\tconst { signal } = controller;\n\t\tconst { signal } = controller;",
            "response": "\t\t\tconst response = await serverContext.callEndpoint({\n\t\t\tconst response = await serverContext.callEndpoint({\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpathPattern: '/v1/banners/:id',\n\t\t\t\tkeys: { id: event.bannerId },"
        },
        "depth_rank": 7
    },
    {
        "file": "BundleChips.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/BundleChips.tsx",
        "code": {
            "t": "const BundleChips = ({ bundledIn }: BundleChipsProps): ReactElement => {\nconst BundleChips = ({ bundledIn }: BundleChipsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t{bundledIn.map((bundle) => (\n\t\t\t\t<Tag\n\t\t\t\t\tkey={bundle.bundleId}"
        },
        "depth_rank": 6
    },
    {
        "file": "UnlimitedAppsUpsellModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/UnlimitedAppsUpsellModal.tsx",
        "code": {
            "cloudWorkspaceHadTrial": "const UnlimitedAppsUpsellModal = () => {\nconst UnlimitedAppsUpsellModal = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\n\treturn (\n\t\t<GenericUpsellModal\n\t\t\ttitle={t('Enable_unlimited_apps')}"
        },
        "depth_rank": 6
    },
    {
        "file": "AppUpdateModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppUpdateModal.tsx",
        "code": {
            "handleConfirmButtonClick": "const AppUpdateModal: FC<AppUpdateModalProps> = ({ confirm, cancel, ...props }) => {\nconst AppUpdateModal: FC<AppUpdateModalProps> = ({ confirm, cancel, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCloseButtonClick = (): void => {\n\tconst handleCloseButtonClick = (): void => {\n\t\tcancel();\n\t};\n\n\tconst handleCancelButtonClick = (): void => {\n\tconst handleCancelButtonClick = (): void => {\n\t\tcancel();\n\t};\n\n\tconst handleConfirmButtonClick = (): void => {\n\tconst handleConfirmButtonClick = (): void => {\n\t\tconfirm();\n\t};\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "MarketplaceRouter.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/MarketplaceRouter.tsx",
        "code": {
            "initialize": "\t\tconst initialize = async () => {\n\t\tconst initialize = async () => {\n\t\t\t// The currentContext === 'all' verification is for users who bookmarked\n\t\t\t// the old marketplace\n\t\t\t// TODO: Remove the all verification in the future;\n\t\t\tif (currentContext === 'all') {\n\t\t\t\tmarketplaceRoute.replace({ context: 'explore', page: 'list' });"
        },
        "depth_rank": 6
    },
    {
        "file": "AppPermissionsReviewModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppPermissionsReviewModal.tsx",
        "code": {
            "t": "const AppPermissionsReviewModal: FC<AppPermissionsReviewModalProps> = ({ appPermissions, onCancel, onConfirm }) => {\nconst AppPermissionsReviewModal: FC<AppPermissionsReviewModalProps> = ({ appPermissions, onCancel, onConfirm }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Apps_Permissions_Review_Modal_Title')}"
        },
        "depth_rank": 6
    },
    {
        "file": "IframeModal.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/IframeModal.js",
        "code": {
            "iframeMsgListener": "const iframeMsgListener = (confirm, cancel) => (e) => {\nconst iframeMsgListener = (confirm, cancel) => (e) => {\n\tlet data;\n\ttry {\n\t\tdata = JSON.parse(e.data);\n\t} catch (e) {",
            "listener": "const IframeModal = ({ url, confirm, cancel, wrapperHeight = 'x360', ...props }) => {\nconst IframeModal = ({ url, confirm, cancel, wrapperHeight = 'x360', ...props }) => {\n\tuseEffect(() => {\n\t\tconst listener = iframeMsgListener(confirm, cancel);\n\t\tconst listener = iframeMsgListener(confirm, cancel);\n\n\t\twindow.addEventListener('message', listener);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('message', listener);\n\t\t};\n\t}, [confirm, cancel]);\n\n\treturn (\n\t\t<Modal height={wrapperHeight} {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "AppMenu.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppMenu.js",
        "code": {
            "button": "\tconst appCountQuery = useAppsCountQuery(context);\n\tconst appCountQuery = useAppsCountQuery(context);\n\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\n\tconst button = appButtonProps({ ...app, isAdminUser });\n\tconst button = appButtonProps({ ...app, isAdminUser });",
            "installationSuccess": "\tconst action = button?.action || '';\n\tconst action = button?.action || '';\n\n\tconst closeModal = useCallback(() => {\n\tconst closeModal = useCallback(() => {\n\t\tsetModal(null);\n\t\tsetLoading(false);\n\t}, [setModal, setLoading]);\n\n\tconst installationSuccess = useCallback(\n\tconst installationSuccess = useCallback(\n\t\tasync (action, permissionsGranted) => {\n\t\t\tif (action === 'purchase') {\n\t\t\t\tsetPurchased(true);\n\t\t\t}\n\n\t\t\tif (action === 'request') {\n\t\t\t\tsetRequestedEndUser(true);\n\t\t\t} else {",
            "confirm": "\t\t\tconst confirm = async () => {\n\t\t\tconst confirm = async () => {\n\t\t\t\tawait handleSubscription();\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<WarningModal\n\t\t\t\t\tclose={closeModal}",
            "handleEnable": "\tconst handleEnable = useCallback(async () => {\n\tconst handleEnable = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { status } = await setAppStatus({ status: 'manually_enabled' });\n\t\t\tconst { status } = await setAppStatus({ status: 'manually_enabled' });",
            "uninstall": "\tconst handleUninstall = useCallback(() => {\n\tconst handleUninstall = useCallback(() => {\n\t\tconst uninstall = async () => {\n\t\tconst uninstall = async () => {\n\t\t\tcloseModal();\n\t\t\ttry {\n\t\t\t\tconst { success } = await uninstallApp();\n\t\t\t\tconst { success } = await uninstallApp();",
            "bothAppStatusOptions": "\tconst handleUpdate = useCallback(async () => {\n\tconst handleUpdate = useCallback(async () => {\n\t\tsetLoading(true);\n\n\t\tif (app?.versionIncompatible) {\n\t\t\topenIncompatibleModal(app, 'update', closeModal);\n\t\t\treturn;\n\t\t}\n\n\t\topenPermissionModal();\n\t}, [app, openPermissionModal, openIncompatibleModal, closeModal]);\n\n\tconst canUpdate = app.installed && app.version && app.marketplaceVersion && semver.lt(app.version, app.marketplaceVersion);\n\tconst canUpdate = app.installed && app.version && app.marketplaceVersion && semver.lt(app.version, app.marketplaceVersion);\n\n\tconst menuOptions = useMemo(() => {\n\tconst menuOptions = useMemo(() => {\n\t\tconst bothAppStatusOptions = {\n\t\tconst bothAppStatusOptions = {\n\t\t\t...(canAppBeSubscribed &&\n\t\t\t\tisSubscribed &&\n\t\t\t\tisAdminUser && {\n\t\t\t\t\tsubscribe: {\n\t\t\t\t\t\tlabel: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Icon name={incompatibleIconName(app, 'subscribe')} size='x16' mie='x4' />"
        },
        "depth_rank": 6
    },
    {
        "file": "AppInstallPage.js",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppInstallPage.js",
        "code": {
            "appCountQuery": "\tconst appCountQuery = useAppsCountQuery('private');\n\tconst appCountQuery = useAppsCountQuery('private');\n\n\tconst { values, handlers } = useForm({\n\tconst { values, handlers } = useForm({\n\t\tfile: {},",
            "fileData": "\t\t\t\tconst fileData = Uint8Array.from(buff.data);\n\t\t\t\tconst fileData = Uint8Array.from(buff.data);\n\t\t\t\tmanifest = await getManifestFromZippedApp(fileData);\n\t\t\t\tappFile = new File([fileData], 'app.zip', { type: 'application/zip' });",
            "handleAppPermissionsReview": "\tconst handleAppPermissionsReview = async (permissions, appFile, appId) => {\n\tconst handleAppPermissionsReview = async (permissions, appFile, appId) => {\n\t\tsetModal(\n\t\t\t<AppPermissionsReviewModal\n\t\t\t\tappPermissions={permissions}",
            "isInstalled": "\tconst uploadFile = async (appFile, { id, permissions }) => {\n\tconst uploadFile = async (appFile, { id, permissions }) => {\n\t\tconst isInstalled = await isAppInstalled(id);\n\t\tconst isInstalled = await isAppInstalled(id);\n\n\t\tif (isInstalled) {\n\t\t\treturn setModal(<AppUpdateModal cancel={cancelAction} confirm={() => handleAppPermissionsReview(permissions, appFile, id)} />);",
            "getAppFileAndManifest": "\tconst getAppFileAndManifest = async () => {\n\tconst getAppFileAndManifest = async () => {\n\t\ttry {\n\t\t\tlet manifest;\n\t\t\tlet appFile;\n\t\t\tif (url) {\n\t\t\t\tconst { buff } = await downloadApp({ url, downloadOnly: true });\n\t\t\t\tconst { buff } = await downloadApp({ url, downloadOnly: true });",
            "handleCancel": "\tconst handleCancel = () => {\n\tconst handleCancel = () => {\n\t\trouter.navigate({\n\t\t\tname: 'marketplace',\n\t\t\tparams: {\n\t\t\t\tcontext,\n\t\t\t\tpage: 'list',\n\t\t\t},\n\t\t});\n\t};\n\n\treturn (\n\t\t<Page flexDirection='column'>\n\t\t\t<Page.Header title={t('App_Installation')} />"
        },
        "depth_rank": 6
    },
    {
        "file": "MarketplaceSidebar.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/MarketplaceSidebar.tsx",
        "code": {
            "t": "const MarketplaceSidebar = (): ReactElement => {\nconst MarketplaceSidebar = (): ReactElement => {\n\tconst items = useSyncExternalStore(subscribeToMarketplaceSidebarItems, getMarketplaceSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToMarketplaceSidebarItems, getMarketplaceSidebarItems);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Marketplace')} />"
        },
        "depth_rank": 6
    },
    {
        "file": "useOpenAppPermissionsReviewModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useOpenAppPermissionsReviewModal.tsx",
        "code": {
            "handleCancel": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useCallback(() => {\n\t\tconst handleCancel = () => {\n\t\tconst handleCancel = () => {\n\t\t\tsetModal(null);\n\t\t\tonCancel();\n\t\t};\n\n\t\tconst handleConfirm: typeof onConfirm = (appPermissions) => {\n\t\tconst handleConfirm: typeof onConfirm = (appPermissions) => {\n\t\t\tsetModal(null);\n\t\t\tonConfirm(appPermissions);\n\t\t};\n\n\t\treturn setModal(<AppPermissionsReviewModal appPermissions={app.permissions} onCancel={handleCancel} onConfirm={handleConfirm} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "useAppInstallationHandler.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useAppInstallationHandler.tsx",
        "code": {
            "openPermissionModal": "\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\n\tconst closeModal = useCallback(() => {\n\tconst closeModal = useCallback(() => {\n\t\tsetModal(null);\n\t\tonDismiss();\n\t}, [onDismiss, setModal]);\n\n\tconst success = useCallback(\n\tconst success = useCallback(\n\t\t(appPermissions?: App['permissions']) => {\n\t\t\tsetModal(null);\n\t\t\tonSuccess(action, appPermissions);\n\t\t},\n\t\t[action, onSuccess, setModal],\n\t);\n\n\tconst openPermissionModal = useOpenAppPermissionsReviewModal({ app, onCancel: closeModal, onConfirm: success });\n\tconst openPermissionModal = useOpenAppPermissionsReviewModal({ app, onCancel: closeModal, onConfirm: success });",
            "data": "\t\t\t\tconst data = await AppClientOrchestratorInstance.buildExternalAppRequest(app.id);\n\t\t\t\tconst data = await AppClientOrchestratorInstance.buildExternalAppRequest(app.id);\n\t\t\t\tsetModal(<IframeModal url={data.url} wrapperHeight='x460' cancel={onDismiss} confirm={requestConfirmAction} />);",
            "requestConfirmAction": "\t\t\tconst requestConfirmAction = (postMessage: Record<string, unknown>) => {\n\t\t\tconst requestConfirmAction = (postMessage: Record<string, unknown>) => {\n\t\t\t\tsetModal(null);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: 'App request submitted' });"
        },
        "depth_rank": 7
    },
    {
        "file": "useCategories.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useCategories.ts",
        "code": {
            "mappedCategories": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [categories, setCategories] = useState<CategoryDropDownListProps['categories']>([]);\n\tconst [categories, setCategories] = useState<CategoryDropDownListProps['categories']>([]);\n\n\tconst fetchCategories = useCallback(async (): Promise<void> => {\n\tconst fetchCategories = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst fetchedCategories = await AppClientOrchestratorInstance.getCategories();\n\t\t\tconst fetchedCategories = await AppClientOrchestratorInstance.getCategories();\n\n\t\t\tconst mappedCategories = fetchedCategories.map((currentCategory) => ({\n\t\t\tconst mappedCategories = fetchedCategories.map((currentCategory) => ({\n\t\t\t\tid: currentCategory.id,\n\t\t\t\tlabel: currentCategory.title,\n\t\t\t\tchecked: false,\n\t\t\t}));\n\n\t\t\tsetCategories([\n\t\t\t\t{\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'all',\n\t\t\t\t\t\t\tlabel: t('All_categories'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t('Filter_by_category'),\n\t\t\t\t\titems: mappedCategories,\n\t\t\t\t},\n\t\t\t]);\n\t\t} catch (e: any) {",
            "selectedCategories": "\t\tconst fetchCategoriesWrapper = async (): Promise<void> => {\n\t\tconst fetchCategoriesWrapper = async (): Promise<void> => {\n\t\t\tawait fetchCategories();\n\t\t};\n\n\t\tfetchCategoriesWrapper();\n\t}, [fetchCategories]);\n\n\tconst onSelected = useCategoryToggle(setCategories);\n\tconst onSelected = useCategoryToggle(setCategories);\n\tconst flatCategories = useCategoryFlatList(categories);\n\tconst flatCategories = useCategoryFlatList(categories);\n\tconst originalSize = useCategoryFlatList(categories).length;\n\tconst originalSize = useCategoryFlatList(categories).length;\n\n\tconst selectedCategories = useMemo(\n\tconst selectedCategories = useMemo(\n\t\t() => flatCategories.filter((category) => Boolean(category.checked)),\n\t\t[flatCategories],\n\t) as (CategoryDropdownItem & { checked: true })[];"
        },
        "depth_rank": 7
    },
    {
        "file": "useRadioToggle.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useRadioToggle.ts",
        "code": {
            "onSelected": "\tconst onSelected = useCallback(\n\tconst onSelected = useCallback(\n\t\t(item: RadioDropDownItem) => {\n\t\t\tsetData((prevState) => {\n\t\t\t\tprevState.items.forEach((currentItem) => {\n\t\t\t\t\tcurrentItem.checked = currentItem === item;\n\t\t\t\t});\n\t\t\t\treturn { ...prevState };"
        },
        "depth_rank": 7
    },
    {
        "file": "useLogs.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useLogs.ts",
        "code": {
            "logs": "\tconst logs = useEndpoint('GET', '/apps/:id/logs', { id: appId });\n\tconst logs = useEndpoint('GET', '/apps/:id/logs', { id: appId });"
        },
        "depth_rank": 7
    },
    {
        "file": "useFilteredApps.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useFilteredApps.ts",
        "code": {
            "value": "\tconst value = useMemo(() => {\n\tconst value = useMemo(() => {\n\t\tif (appsData.value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { apps } = appsData.value;\n\t\tconst { apps } = appsData.value;"
        },
        "depth_rank": 7
    },
    {
        "file": "useAppInfo.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useAppInfo.ts",
        "code": {
            "getBundledInApp": "const getBundledInApp = async (app: App): Promise<App['bundledIn']> => {\nconst getBundledInApp = async (app: App): Promise<App['bundledIn']> => {\n\tconst { bundledIn = [] } = app;\n\tconst { bundledIn = [] } = app;",
            "getSettings": "\tconst [appData, setAppData] = useState<AppInfo>();\n\tconst [appData, setAppData] = useState<AppInfo>();\n\n\tconst getSettings = useEndpoint('GET', '/apps/:id/settings', { id: appId });\n\tconst getSettings = useEndpoint('GET', '/apps/:id/settings', { id: appId });",
            "getScreenshots": "\tconst getScreenshots = useEndpoint('GET', '/apps/:id/screenshots', { id: appId });\n\tconst getScreenshots = useEndpoint('GET', '/apps/:id/screenshots', { id: appId });",
            "getApis": "\tconst getApis = useEndpoint('GET', '/apps/:id/apis', { id: appId });\n\tconst getApis = useEndpoint('GET', '/apps/:id/apis', { id: appId });",
            "getBundledIn": "\tconst getBundledIn = useEndpoint('GET', '/apps/:id', { id: appId });\n\tconst getBundledIn = useEndpoint('GET', '/apps/:id', { id: appId });"
        },
        "depth_rank": 7
    },
    {
        "file": "useCategoryToggle.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useCategoryToggle.ts",
        "code": {
            "allCategoriesOption": "\t\t\t\tconst allCategoriesOption = categories.find(({ id }) => id === 'all');\n\t\t\t\tconst allCategoriesOption = categories.find(({ id }) => id === 'all');",
            "toggledCategory": "\t\t\t\tconst toggledCategory = categories.find(({ id }) => id === item.id);\n\t\t\t\tconst toggledCategory = categories.find(({ id }) => id === item.id);"
        },
        "depth_rank": 7
    },
    {
        "file": "useOpenIncompatibleModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useOpenIncompatibleModal.tsx",
        "code": {
            "incompatibleData": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useCallback(\n\t\tasync (app, actionName, cancelAction) => {\n\t\t\tconst handleCancel = () => {\n\t\t\tconst handleCancel = () => {\n\t\t\t\tsetModal(null);\n\t\t\t\tcancelAction();\n\t\t\t};\n\n\t\t\tconst handleConfirm = () => {\n\t\t\tconst handleConfirm = () => {\n\t\t\t\tsetModal(null);\n\t\t\t\tcancelAction();\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst incompatibleData = await AppClientOrchestratorInstance.buildIncompatibleExternalUrl(\n\t\t\t\tconst incompatibleData = await AppClientOrchestratorInstance.buildIncompatibleExternalUrl(\n\t\t\t\t\tapp.id,\n\t\t\t\t\tapp.marketplaceVersion,\n\t\t\t\t\tactionName,\n\t\t\t\t);\n\t\t\t\tsetModal(<IframeModal url={incompatibleData.url} cancel={handleCancel} confirm={handleConfirm} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "getManifestFromZippedApp.ts",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/lib/getManifestFromZippedApp.ts",
        "code": {
            "function": "async function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\nasync function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\n\ttry {\n\t\tif (zippedApp instanceof File) {\n\t\t\tzippedApp = await fileToUint8Array(zippedApp);\n\t\t}\n\n\t\treturn unzipAppBuffer(zippedApp);\n\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "EnabledAppsCount.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/EnabledAppsCount.tsx",
        "code": {
            "EnabledAppsCount": "const EnabledAppsCount = ({\nconst EnabledAppsCount = ({\n\tvariant,\n\tpercentage,\n\tlimit,\n\tenabled,\n\tcontext,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst privateAppsCountText: string = t('Private_Apps_Count_Enabled', { count: enabled });\n\tconst privateAppsCountText: string = t('Private_Apps_Count_Enabled', { count: enabled });"
        },
        "depth_rank": 7
    },
    {
        "file": "BannerEnterpriseTrialEnded.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/BannerEnterpriseTrialEnded.tsx",
        "code": {
            "cloudWorkspaceHadTrial": "\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\n\tconst [showTrialBanner, setShowTrialBanner] = useLocalStorage('showAppsTrialEndBanner', cloudWorkspaceHadTrial);\n\tconst [showTrialBanner, setShowTrialBanner] = useLocalStorage('showAppsTrialEndBanner', cloudWorkspaceHadTrial);\n\n\treturn (\n\t\t<>\n\t\t\t{showTrialBanner && (\n\t\t\t\t<Banner\n\t\t\t\t\tcloseable\n\t\t\t\t\ticon={<Icon name='store' size={24} />}"
        },
        "depth_rank": 7
    },
    {
        "file": "ScreenshotCarousel.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/ScreenshotCarousel.tsx",
        "code": {
            "ScreenshotCarousel": "const ScreenshotCarousel = ({\nconst ScreenshotCarousel = ({\n\tAppScreenshots,\n\tsetViewCarousel,\n\thandleNextSlide,\n\thandlePrevSlide,\n\tisFirstSlide,\n\tisLastSlide,\n\tcurrentSlideIndex,\n}: ScreenshotCarouselProps): ReactElement => {",
            "screenshotWrapperStyle": "\tconst handleScreenshotRender = (): JSX.Element[] =>\n\tconst handleScreenshotRender = (): JSX.Element[] =>\n\t\tAppScreenshots.map((currentScreenshot, index) => {\n\t\t\tconst isCurrentImageOnScreen = index === currentSlideIndex;\n\t\t\tconst isCurrentImageOnScreen = index === currentSlideIndex;\n\t\t\tconst screenshotWrapperStyle = isCurrentImageOnScreen\n\t\t\tconst screenshotWrapperStyle = isCurrentImageOnScreen\n\t\t\t\t? {\n\t\t\t\t\t\topacity: '1',\n\t\t\t\t\t\ttransitionDuration: '1s',\n\t\t\t\t\t\ttransform: 'scale(1.08)',\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\topacity: '0',\n\t\t\t\t\t\ttransitionDuration: '1s ease',\n\t\t\t\t  };\n\n\t\t\treturn (\n\t\t\t\t<Box style={screenshotWrapperStyle} key={currentScreenshot.id}>"
        },
        "depth_rank": 7
    },
    {
        "file": "RadioButtonList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioButtonList.tsx",
        "code": {
            "RadioButtonList": "const RadioButtonList = ({ group, onSelected }: RadioDropDownProps): ReactElement => (\nconst RadioButtonList = ({ group, onSelected }: RadioDropDownProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "DropDownListWrapper.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/DropDownListWrapper.tsx",
        "code": {
            "DropDownListWrapper": "} as const;\n} as const;\n\nconst hidden = {\nconst hidden = {\n\tvisibility: 'hidden',\n\topacity: 0,\n\tposition: 'fixed',\n} as const;\n} as const;\n\nconst DropDownListWrapper = forwardRef<Element, ComponentProps<typeof Box> & { onClose: (e: MouseEvent) => void }>(\nconst DropDownListWrapper = forwardRef<Element, ComponentProps<typeof Box> & { onClose: (e: MouseEvent) => void }>(",
            "target": "\tfunction CategoryDropDownListWrapper({ children, onClose }, ref) {\n\tfunction CategoryDropDownListWrapper({ children, onClose }, ref) {\n\t\tconst target = useRef<HTMLElement>(null);\n\t\tconst target = useRef<HTMLElement>(null);\n\t\tuseOutsideClick([target], onClose);\n\t\tconst { style = hidden } = usePosition(ref as Parameters<typeof usePosition>[0], target, options);\n\t\tconst { style = hidden } = usePosition(ref as Parameters<typeof usePosition>[0], target, options);"
        },
        "depth_rank": 7
    },
    {
        "file": "ScreenshotCarouselAnchor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/ScreenshotCarouselAnchor.tsx",
        "code": {
            "ScreenshotCarouselAnchor": "const ScreenshotCarouselAnchor = ({ screenshots }: ScreenshotCarouselAnchorProps): ReactElement => {\nconst ScreenshotCarouselAnchor = ({ screenshots }: ScreenshotCarouselAnchorProps): ReactElement => {\n\tconst [viewCarousel, setViewCarousel] = useState(false);\n\tconst [viewCarousel, setViewCarousel] = useState(false);\n\n\tconst [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n\tconst [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n\n\tconst [currentPreviewIndex, setCurrentPreviewIndex] = useState(0);\n\tconst [currentPreviewIndex, setCurrentPreviewIndex] = useState(0);\n\n\tconst { length } = screenshots;\n\tconst { length } = screenshots;",
            "carouselPortal": "\tconst carouselPortal = createPortal(\n\tconst carouselPortal = createPortal(\n\t\t<ScreenshotCarousel\n\t\t\tAppScreenshots={screenshots}"
        },
        "depth_rank": 7
    },
    {
        "file": "MarketplaceHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/MarketplaceHeader.tsx",
        "code": {
            "handleUploadButtonClick": "\tconst context = (useRouteParameter('context') || 'explore') as 'private' | 'explore' | 'installed' | 'enterprise' | 'requested';\n\tconst context = (useRouteParameter('context') || 'explore') as 'private' | 'explore' | 'installed' | 'enterprise' | 'requested';\n\tconst route = useRoute('marketplace');\n\tconst route = useRoute('marketplace');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst result = useAppsCountQuery(context);\n\tconst result = useAppsCountQuery(context);\n\n\tconst handleUploadButtonClick = useCallback((): void => {\n\tconst handleUploadButtonClick = useCallback((): void => {\n\t\troute.push({ context, page: 'install' });"
        },
        "depth_rank": 7
    },
    {
        "file": "AppInstallModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/AppInstallModal/AppInstallModal.tsx",
        "code": {
            "AppInstallationModal": "const AppInstallationModal = ({\nconst AppInstallationModal = ({\n\tcontext,\n\tenabled,\n\tlimit,\n\tappName,\n\thandleClose,\n\thandleConfirm,\n\thandleEnableUnlimitedApps,\n}: AppsInstallationModalProps) => {",
            "getTitle": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getTitle = () => {\n\tconst getTitle = () => {\n\t\tif (enabled === limit) {\n\t\t\treturn context === 'private' ? t('Private_apps_limit_reached') : t('App_limit_reached');\n\t\t}\n\n\t\tif (enabled > limit) {\n\t\t\treturn context === 'private' ? t('Private_apps_limit_exceeded') : t('App_limit_exceeded');\n\t\t}\n\n\t\treturn t('Apps_Currently_Enabled', { context: context === 'private' ? context : '', enabled, limit });",
            "getContent": "\tconst getContent = () => {\n\tconst getContent = () => {\n\t\tif (enabled === limit) {\n\t\t\treturn t('Enable_of_limit_apps_currently_enabled', { context: context === 'private' ? context : '', enabled, limit, appName });",
            "confirmButtonOverlimitLabel": "\tconst confirmButtonOverlimitLabel = context === 'private' ? t('Upload_anyway') : t('Install_anyway');\n\tconst confirmButtonOverlimitLabel = context === 'private' ? t('Upload_anyway') : t('Install_anyway');\n\n\treturn (\n\t\t<>\n\t\t\t<Modal>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t\t<Modal.Title>{getTitle()}</Modal.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "CategoryDropDownList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDownList.tsx",
        "code": {
            "CategoryDropDownList": "const CategoryDropDownList = ({ categories, onSelected }: CategoryDropDownListProps): ReactElement => {\nconst CategoryDropDownList = ({ categories, onSelected }: CategoryDropDownListProps): ReactElement => {\n\treturn (\n\t\t<Tile overflow='auto' pb='x12' pi={0} elevation='2' w='full' bg='light' borderRadius='x2'>"
        },
        "depth_rank": 8
    },
    {
        "file": "CategoryDropDown.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDown.stories.tsx",
        "code": {
            "onSelected": "\tconst [, selectedCategories, categoryTagList] = useCategories();\n\tconst [, selectedCategories, categoryTagList] = useCategories();\n\n\tconst [data, setData] = useState(testCategories);\n\tconst [data, setData] = useState(testCategories);\n\n\tconst onSelected = useCategoryToggle(setData);\n\tconst onSelected = useCategoryToggle(setData);\n\n\treturn (\n\t\t<Box w='x144'>\n\t\t\t<ButtonGroup>\n\t\t\t\t<CategoryDropDown categories={data} selectedCategories={selectedCategories} onSelected={onSelected} />"
        },
        "depth_rank": 8
    },
    {
        "file": "CategoryDropDownAnchor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDownAnchor.tsx",
        "code": {
            "CategoryDropDownAnchor": "const CategoryDropDownAnchor = forwardRef<HTMLElement, CategoryDropDownAnchorProps>(function CategoryDropDownAnchor(\nconst CategoryDropDownAnchor = forwardRef<HTMLElement, CategoryDropDownAnchorProps>(function CategoryDropDownAnchor(\n\t{ onClick, selectedCategoriesCount, ...props },",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box\n\t\t\tis={Button}"
        },
        "depth_rank": 8
    },
    {
        "file": "CategoryDropDown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDown.tsx",
        "code": {
            "onClose": "const CategoryDropDown = ({ categories, onSelected, selectedCategories, ...props }: CategoryDropDownProps): ReactElement => {\nconst CategoryDropDown = ({ categories, onSelected, selectedCategories, ...props }: CategoryDropDownProps): ReactElement => {\n\tconst reference = useRef<HTMLInputElement>(null);\n\tconst reference = useRef<HTMLInputElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (isValidReference(reference, e)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonMouseEventPreventSideEffects(e);\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<CategoryDropDownAnchor\n\t\t\t\tref={reference}"
        },
        "depth_rank": 8
    },
    {
        "file": "RadioDropDown.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDropDown.tsx",
        "code": {
            "onClose": "const RadioDropDown = ({ group, onSelected, ...props }: RadioDropDownProps & ComponentProps<typeof Button>): ReactElement => {\nconst RadioDropDown = ({ group, onSelected, ...props }: RadioDropDownProps & ComponentProps<typeof Button>): ReactElement => {\n\tconst reference = useRef<HTMLElement>(null);\n\tconst reference = useRef<HTMLElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (isValidReference(reference, e)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonMouseEventPreventSideEffects(e);\n\n\t\t\treturn false;\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<RadioDropDownAnchor ref={reference} group={group} onClick={toggleCollapsed as any} {...props} />"
        },
        "depth_rank": 8
    },
    {
        "file": "RadioDropDown.stories.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDropDown.stories.tsx",
        "code": {
            "onSelected": "\tconst [data, setData] = useState(() => testGroup);\n\tconst [data, setData] = useState(() => testGroup);\n\n\tconst onSelected = useRadioToggle(setData);\n\tconst onSelected = useRadioToggle(setData);\n\n\treturn (\n\t\t<>\n\t\t\t<RadioDropDown group={data} onSelected={onSelected} />"
        },
        "depth_rank": 8
    },
    {
        "file": "RadioDownAnchor.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDownAnchor.tsx",
        "code": {
            "selected": "const RadioDownAnchor = forwardRef<HTMLElement, RadioDropdownAnchorProps>(function SortDropDownAnchor({ onClick, group, ...props }, ref) {\nconst RadioDownAnchor = forwardRef<HTMLElement, RadioDropdownAnchorProps>(function SortDropDownAnchor({ onClick, group, ...props }, ref) {\n\tconst selected = group?.items.find((item) => item.checked)?.label;\n\tconst selected = group?.items.find((item) => item.checked)?.label;\n\n\treturn (\n\t\t<Box\n\t\t\tis={Button}"
        },
        "depth_rank": 8
    },
    {
        "file": "UninstallGrandfatheredAppModal.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/components/UninstallGrandfatheredAppModal/UninstallGrandfatheredAppModal.tsx",
        "code": {
            "t": "const UninstallGrandfatheredAppModal = ({ context, limit, appName, handleUninstall, handleClose }: UninstallGrandfatheredAppModalProps) => {\nconst UninstallGrandfatheredAppModal = ({ context, limit, appName, handleUninstall, handleClose }: UninstallGrandfatheredAppModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t<Modal.Title>{t('Uninstall_grandfathered_app', { appName })}</Modal.Title>"
        },
        "depth_rank": 8
    },
    {
        "file": "AppDetailsPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPage.tsx",
        "code": {
            "settingsRef": "const AppDetailsPage = ({ id }: { id: App['id'] }): ReactElement => {\nconst AppDetailsPage = ({ id }: { id: App['id'] }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\tconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\tconst [isSaving, setIsSaving] = useState(false);\n\tconst [isSaving, setIsSaving] = useState(false);\n\n\tconst settingsRef = useRef<Record<string, ISetting['value']>>({});\n\tconst settingsRef = useRef<Record<string, ISetting['value']>>({});",
            "saveAppSettings": "\tconst isSecurityVisible = Boolean(privacyPolicySummary || permissions || tosLink || privacyLink);\n\tconst isSecurityVisible = Boolean(privacyPolicySummary || permissions || tosLink || privacyLink);\n\n\tconst saveAppSettings = useCallback(async () => {\n\tconst saveAppSettings = useCallback(async () => {\n\t\tconst { current } = settingsRef;\n\t\tconst { current } = settingsRef;"
        },
        "depth_rank": 7
    },
    {
        "file": "AppDetailsPageHeader.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPageHeader.tsx",
        "code": {
            "versioni18nKey": "const versioni18nKey = (app: App): string => {\nconst versioni18nKey = (app: App): string => {\n\tconst { version, marketplaceVersion, installed } = app;\n\tconst { version, marketplaceVersion, installed } = app;",
            "incompatibleStatus": "const AppDetailsPageHeader = ({ app }: { app: App }): ReactElement => {\nconst AppDetailsPageHeader = ({ app }: { app: App }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\ticonFileData,\n\t\tname,\n\t\tauthor,\n\t\ticonFileContent,\n\t\tinstalled,\n\t\tmodifiedAt,\n\t\tbundledIn,\n\t\tversionIncompatible,\n\t\tisSubscribed,\n\t\tshortDescription,\n\t} = app;\n\n\tconst lastUpdated = modifiedAt && moment(modifiedAt).fromNow();\n\tconst lastUpdated = modifiedAt && moment(modifiedAt).fromNow();\n\tconst incompatibleStatus = versionIncompatible ? appIncompatibleStatusProps() : undefined;\n\tconst incompatibleStatus = versionIncompatible ? appIncompatibleStatusProps() : undefined;\n\n\treturn (\n\t\t<Box color='default' display='flex' flexDirection='row' mbe='x20' w='full'>\n\t\t\t<AppAvatar size='x124' mie='x32' iconFileContent={iconFileContent} iconFileData={iconFileData} />"
        },
        "depth_rank": 7
    },
    {
        "file": "AppDetailsPageTabs.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPageTabs.tsx",
        "code": {
            "handleTabClick": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleTabClick = (tab: 'details' | 'security' | 'releases' | 'settings' | 'logs' | 'requests') => {\n\tconst handleTabClick = (tab: 'details' | 'security' | 'releases' | 'settings' | 'logs' | 'requests') => {\n\t\trouter.navigate(\n\t\t\t{\n\t\t\t\tname: 'marketplace',\n\t\t\t\tparams: { ...router.getRouteParameters(), tab },"
        },
        "depth_rank": 7
    },
    {
        "file": "AppRequestsLoading.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppRequests/AppRequestsLoading.tsx",
        "code": {
            "appRequestsLoading": "const AppRequestsLoading = (): ReactElement => {\nconst AppRequestsLoading = (): ReactElement => {\n\tconst appRequestsLoading = Array.from({ length: 5 }, (_, i) => (\n\tconst appRequestsLoading = Array.from({ length: 5 }, (_, i) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "AppReleases.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppReleases/AppReleases.tsx",
        "code": {
            "getVersions": "const AppReleases = ({ id }: { id: App['id'] }): ReactElement => {\nconst AppReleases = ({ id }: { id: App['id'] }): ReactElement => {\n\tconst getVersions = useEndpoint('GET', '/apps/:id/versions', { id });\n\tconst getVersions = useEndpoint('GET', '/apps/:id/versions', { id });",
            "t": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data, isLoading, isFetched } = useQuery(\n\tconst { data, isLoading, isFetched } = useQuery("
        },
        "depth_rank": 9
    },
    {
        "file": "AppReleasesItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppReleases/AppReleasesItem.tsx",
        "code": {
            "title": "const AppReleasesItem = ({ release, ...props }: ReleaseItemProps): ReactElement => {\nconst AppReleasesItem = ({ release, ...props }: ReleaseItemProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\n\tconst title = (\n\tconst title = (\n\t\t<Box display='flex' flexDirection='row'>\n\t\t\t<Box is='h4' fontWeight='700' fontSize='x16' lineHeight='x24' color='default' mie='x24'>\n\t\t\t\t{release.version}"
        },
        "depth_rank": 9
    },
    {
        "file": "AppSecurityLabel.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSecurity/AppSecurityLabel.tsx",
        "code": {
            "AppSecurityLabel": "const AppSecurityLabel = ({ children }: { children: string }): ReactElement => (\nconst AppSecurityLabel = ({ children }: { children: string }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "AppSecurity.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSecurity/AppSecurity.tsx",
        "code": {
            "t": "const AppSecurity = ({ privacyPolicySummary, appPermissions, tosLink, privacyLink }: AppSecurityProps): ReactElement => {\nconst AppSecurity = ({ privacyPolicySummary, appPermissions, tosLink, privacyLink }: AppSecurityProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box maxWidth='x640' w='full' marginInline='auto' color='default'>\n\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t<Margins block='x17'>\n\t\t\t\t\t<Box is='section'>\n\t\t\t\t\t\t<AppSecurityLabel>{t('Privacy_summary')}</AppSecurityLabel>"
        },
        "depth_rank": 9
    },
    {
        "file": "AppStatusPriceDisplay.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppStatus/AppStatusPriceDisplay.tsx",
        "code": {
            "t": "const AppStatusPriceDisplay: FC<AppStatusPriceDisplayProps> = ({ purchaseType, pricingPlans, price, showType = true }) => {\nconst AppStatusPriceDisplay: FC<AppStatusPriceDisplayProps> = ({ purchaseType, pricingPlans, price, showType = true }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { type, price: formattedPrice } = useMemo(\n\tconst { type, price: formattedPrice } = useMemo("
        },
        "depth_rank": 9
    },
    {
        "file": "AppStatus.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppStatus/AppStatus.tsx",
        "code": {
            "context": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst { price, purchaseType, pricingPlans } = app;\n\tconst { price, purchaseType, pricingPlans } = app;",
            "button": "\tconst button = appButtonProps({ ...app, isAdminUser, endUserRequested });\n\tconst button = appButtonProps({ ...app, isAdminUser, endUserRequested });",
            "canUpdate": "\tconst canUpdate = installed && app?.version && app?.marketplaceVersion && semver.lt(app?.version, app?.marketplaceVersion);\n\tconst canUpdate = installed && app?.version && app?.marketplaceVersion && semver.lt(app?.version, app?.marketplaceVersion);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 9
    },
    {
        "file": "AppDetailsAPIs.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppDetails/AppDetailsAPIs.tsx",
        "code": {
            "getApiCurl": "const AppDetailsAPIs: FC<AppDetailsAPIsProps> = ({ apis }) => {\nconst AppDetailsAPIs: FC<AppDetailsAPIsProps> = ({ apis }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst getApiCurl = apiCurlGetter(absoluteUrl);\n\tconst getApiCurl = apiCurlGetter(absoluteUrl);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t<Box fontScale='h4' mb='x12'>\n\t\t\t\t\t{t('APIs')}"
        },
        "depth_rank": 9
    },
    {
        "file": "AppDetails.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppDetails/AppDetails.tsx",
        "code": {
            "t": "const AppDetails = ({ app }: { app: AppInfo }): ReactElement => {\nconst AppDetails = ({ app }: { app: AppInfo }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tauthor: { homepage, support },"
        },
        "depth_rank": 9
    },
    {
        "file": "AppLogsItemEntry.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogsItemEntry.tsx",
        "code": {
            "t": "const AppLogsItemEntry: FC<AppLogsItemEntryProps> = ({ severity, timestamp, caller, args }) => {\nconst AppLogsItemEntry: FC<AppLogsItemEntryProps> = ({ severity, timestamp, caller, args }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box color='default'>\n\t\t\t<Box>\n\t\t\t\t{severity}: {timestamp} {t('Caller')}: {caller}"
        },
        "depth_rank": 9
    },
    {
        "file": "AppLogsItem.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogsItem.tsx",
        "code": {
            "t": "const AppLogsItem: FC<AppLogsItemProps> = ({ entries, instanceId, title, ...props }) => {\nconst AppLogsItem: FC<AppLogsItemProps> = ({ entries, instanceId, title, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Accordion.Item title={title} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "AppLogs.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogs.tsx",
        "code": {
            "formatDateAndTime": "const AppLogs = ({ id }: { id: string }): ReactElement => {\nconst AppLogs = ({ id }: { id: string }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst { data, isSuccess, isError, isLoading } = useLogs(id);\n\tconst { data, isSuccess, isError, isLoading } = useLogs(id);"
        },
        "depth_rank": 9
    },
    {
        "file": "AppSettings.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSettings/AppSettings.tsx",
        "code": {
            "reducedSettings": "const AppSettings: FC<AppSettingsProps> = ({ settings, setHasUnsavedChanges, settingsRef }) => {\nconst AppSettings: FC<AppSettingsProps> = ({ settings, setHasUnsavedChanges, settingsRef }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst stringifiedSettings = JSON.stringify(settings);\n\tconst stringifiedSettings = JSON.stringify(settings);\n\n\tconst reducedSettings = useMemo(() => {\n\tconst reducedSettings = useMemo(() => {\n\t\tconst settings: AppSettingsProps['settings'] = JSON.parse(stringifiedSettings);\n\t\tconst settings: AppSettingsProps['settings'] = JSON.parse(stringifiedSettings);\n\t\treturn Object.values(settings).reduce((ret, { id, value, packageValue }) => ({ ...ret, [id]: value ?? packageValue }), {});",
            "values": "\tconst { values, handlers, hasUnsavedChanges } = useForm(reducedSettings) as {\n\tconst { values, handlers, hasUnsavedChanges } = useForm(reducedSettings) as {\n\t\tvalues: Record<string, SettingValue>;\n\t\thandlers: Record<string, (eventOrValue: SettingValue) => void>;\n\t\thasUnsavedChanges: boolean;\n\t};\n\tconst stringifiedValues = JSON.stringify(values);\n\tconst stringifiedValues = JSON.stringify(values);\n\n\tuseEffect(() => {\n\t\tconst values = JSON.parse(stringifiedValues);\n\t\tconst values = JSON.parse(stringifiedValues);\n\t\tsetHasUnsavedChanges(hasUnsavedChanges);\n\t\tsettingsRef.current = values;\n\t}, [hasUnsavedChanges, stringifiedValues, setHasUnsavedChanges, settingsRef]);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' maxWidth='x640' w='full' marginInline='auto'>\n\t\t\t\t<Box fontScale='h4' mb='x12'>\n\t\t\t\t\t{t('Settings')}"
        },
        "depth_rank": 9
    },
    {
        "file": "AppSetting.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSettings/AppSetting.tsx",
        "code": {
            "hint": "\tconst hint = useMemo(() => i18nDescription && <MarkdownText content={tApp(i18nDescription)} />, [i18nDescription, tApp]);\n\tconst hint = useMemo(() => i18nDescription && <MarkdownText content={tApp(i18nDescription)} />, [i18nDescription, tApp]);"
        },
        "depth_rank": 9
    },
    {
        "file": "AppSettingsAssembler.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSettings/AppSettingsAssembler.tsx",
        "code": {
            "AppSettingsAssembler": "const AppSettingsAssembler = ({ settings, values, handlers }: AppSettingsAssemblerProps): ReactElement => (\nconst AppSettingsAssembler = ({ settings, values, handlers }: AppSettingsAssemblerProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "NoInstalledAppsEmptyState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoInstalledAppsEmptyState.tsx",
        "code": {
            "t": "const NoInstalledAppsEmptyState = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\nconst NoInstalledAppsEmptyState = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='x20'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='magnifier' />\n\t\t\t\t<StatesTitle>{t('No_apps_installed')}</StatesTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "AppsFilters.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsFilters.tsx",
        "code": {
            "AppsFilters": "const AppsFilters = ({\nconst AppsFilters = ({\n\tsetText,\n\tfreePaidFilterStructure,\n\tfreePaidFilterOnSelected,\n\tcategories,\n\tselectedCategories,\n\tonSelected,\n\tsortFilterStructure,\n\tsortFilterOnSelected,\n\tcategoryTagList,\n\tstatusFilterStructure,\n\tstatusFilterOnSelected,\n\tcontext,\n}: AppsFiltersProps): ReactElement => {",
            "fixFiltersSize": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isPrivateAppsPage = context === 'private';\n\tconst isPrivateAppsPage = context === 'private';\n\tconst breakpoints = useBreakpoints();\n\tconst breakpoints = useBreakpoints();\n\n\tconst appsSearchPlaceholders: { [key: string]: string } = {\n\tconst appsSearchPlaceholders: { [key: string]: string } = {\n\t\texplore: t('Search_Apps'),\n\t\tenterprise: t('Search_Enterprise_Apps'),\n\t\tinstalled: t('Search_Installed_Apps'),\n\t\trequested: t('Search_Requested_Apps'),\n\t\tprivate: t('Search_Private_apps'),\n\t};\n\n\tconst fixFiltersSize = breakpoints.includes('lg') ? { maxWidth: 'x200', minWidth: 'x200' } : null;\n\tconst fixFiltersSize = breakpoints.includes('lg') ? { maxWidth: 'x200', minWidth: 'x200' } : null;"
        },
        "depth_rank": 7
    },
    {
        "file": "AppsPageContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContent.tsx",
        "code": {
            "t": "const AppsPageContent = (): ReactElement => {\nconst AppsPageContent = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { marketplaceApps, installedApps, privateApps, reload } = useAppsResult();\n\tconst { marketplaceApps, installedApps, privateApps, reload } = useAppsResult();",
            "isRequested": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst isMarketplace = context === 'explore';\n\tconst isMarketplace = context === 'explore';\n\tconst isRequested = context === 'requested';\n\tconst isRequested = context === 'requested';\n\n\tconst [freePaidFilterStructure, setFreePaidFilterStructure] = useState({\n\tconst [freePaidFilterStructure, setFreePaidFilterStructure] = useState({\n\t\tlabel: t('Filter_By_Price'),\n\t\titems: [\n\t\t\t{ id: 'all', label: t('All_Prices'), checked: true },",
            "freePaidFilterOnSelected": "\tconst freePaidFilterOnSelected = useRadioToggle(setFreePaidFilterStructure);\n\tconst freePaidFilterOnSelected = useRadioToggle(setFreePaidFilterStructure);\n\n\tconst [statusFilterStructure, setStatusFilterStructure] = useState({\n\tconst [statusFilterStructure, setStatusFilterStructure] = useState({\n\t\tlabel: t('Filter_By_Status'),\n\t\titems: [\n\t\t\t{ id: 'all', label: t('All_status'), checked: true },",
            "requestedFilterItems": "\tconst requestedFilterItems = [\n\tconst requestedFilterItems = [\n\t\t{ id: 'urf', label: t('Unread_Requested_First'), checked: false },",
            "appsResult": "\tconst createFilterStructureItems = () => {\n\tconst createFilterStructureItems = () => {\n\t\treturn isRequested ? [...requestedFilterItems, ...baseFilterStructureItems] : baseFilterStructureItems;\n\t};\n\n\tconst [sortFilterStructure, setSortFilterStructure] = useState<RadioDropDownGroup>(() => {\n\tconst [sortFilterStructure, setSortFilterStructure] = useState<RadioDropDownGroup>(() => {\n\t\treturn {\n\t\t\tlabel: t('Sort_By'),\n\t\t\titems: createFilterStructureItems(),\n\t\t};\n\t});\n\n\tuseEffect(() => {\n\t\tsetSortFilterStructure({\n\t\t\tlabel: t('Sort_By'),\n\t\t\titems: createFilterStructureItems(),\n\t\t});\n\t}, [isRequested]);\n\n\tconst sortFilterOnSelected = useRadioToggle(setSortFilterStructure);\n\tconst sortFilterOnSelected = useRadioToggle(setSortFilterStructure);\n\n\tconst getAppsData = useCallback((): appsDataType => {\n\tconst getAppsData = useCallback((): appsDataType => {\n\t\tswitch (context) {\n\t\t\tcase 'enterprise':\n\t\t\tcase 'explore':\n\t\t\tcase 'requested':\n\t\t\t\treturn marketplaceApps;\n\t\t\tcase 'private':\n\t\t\t\treturn privateApps;\n\t\t\tdefault:\n\t\t\t\treturn installedApps;\n\t\t}\n\t}, [context, marketplaceApps, installedApps, privateApps]);\n\n\tconst [categories, selectedCategories, categoryTagList, onSelected] = useCategories();\n\tconst [categories, selectedCategories, categoryTagList, onSelected] = useCategories();\n\tconst appsResult = useFilteredApps({\n\tconst appsResult = useFilteredApps({\n\t\tappsData: getAppsData(),\n\t\ttext,\n\t\tcurrent,\n\t\titemsPerPage,\n\t\tcategories: useMemo(() => selectedCategories.map(({ label }) => label), [selectedCategories]),"
        },
        "depth_rank": 7
    },
    {
        "file": "NoMarketplaceOrInstalledAppMatchesEmptyState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoMarketplaceOrInstalledAppMatchesEmptyState.tsx",
        "code": {
            "NoMarketplaceOrInstalledAppMatchesEmptyState": "const NoMarketplaceOrInstalledAppMatchesEmptyState = ({\nconst NoMarketplaceOrInstalledAppMatchesEmptyState = ({\n\tshouldShowSearchText,\n\ttext,\n}: NoMarketplaceOrInstalledAppMatchesEmptyStateProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='x20'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='magnifier' />\n\t\t\t\t<StatesTitle>{t('No_app_matches')}</StatesTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "NoAppRequestsEmptyState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoAppRequestsEmptyState.tsx",
        "code": {
            "t": "const NoAppRequestsEmptyState = () => {\nconst NoAppRequestsEmptyState = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<States>\n\t\t\t<StatesTitle>{t('No_requested_apps')}</StatesTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "FeaturedAppsSections.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/FeaturedAppsSections.tsx",
        "code": {
            "featuredApps": "const FeaturedAppsSections = ({ appsResult }: FeaturedSectionsProps): ReactElement | null => {\nconst FeaturedAppsSections = ({ appsResult }: FeaturedSectionsProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst featuredApps = useFeaturedApps();\n\tconst featuredApps = useFeaturedApps();\n\n\tif (featuredApps.isSuccess) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{featuredApps.data.sections.map((section) => (\n\t\t\t\t\t<AppsList\n\t\t\t\t\t\tkey={section.slug}"
        },
        "depth_rank": 7
    },
    {
        "file": "NoInstalledAppMatchesEmptyState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoInstalledAppMatchesEmptyState.tsx",
        "code": {
            "NoInstalledAppMatchesEmptyState": "const NoInstalledAppMatchesEmptyState = ({\nconst NoInstalledAppMatchesEmptyState = ({\n\tshouldShowSearchText,\n\ttext,\n\tonButtonClick,\n}: NoInstalledAppMatchesEmptyStateProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='x20'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='magnifier' />\n\t\t\t\t<StatesTitle>{t('No_installed_app_matches')}</StatesTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "AppsPageContentSkeleton.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContentSkeleton.tsx",
        "code": {
            "loadingRows": "const AppsPageContentSkeleton = (): ReactElement => {\nconst AppsPageContentSkeleton = (): ReactElement => {\n\tconst loadingRows = Array.from({ length: 3 }, (_, i) => <Skeleton key={i} height='x56' mbe='x8' width='100%' variant='rect' />);\n\tconst loadingRows = Array.from({ length: 3 }, (_, i) => <Skeleton key={i} height='x56' mbe='x8' width='100%' variant='rect' />);"
        },
        "depth_rank": 7
    },
    {
        "file": "PrivateEmptyState.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/PrivateEmptyState.tsx",
        "code": {
            "t": "const PrivateEmptyState = () => {\nconst PrivateEmptyState = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='24px'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='cube' />\n\t\t\t\t<StatesTitle>{t('No_private_apps_installed')}</StatesTitle>"
        },
        "depth_rank": 7
    },
    {
        "file": "AppsPageContentBody.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContentBody.tsx",
        "code": {
            "AppsPageContentBody": "const AppsPageContentBody = ({\nconst AppsPageContentBody = ({\n\tisMarketplace,\n\tisFiltered,\n\tappsResult,\n\titemsPerPage,\n\tcurrent,\n\tonSetItemsPerPage,\n\tonSetCurrent,\n\tpaginationProps,\n\tnoErrorsOcurred,\n}: AppsPageContentBodyProps) => {",
            "scrollableRef": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst scrollableRef = useRef<HTMLDivElement>(null);\n\tconst scrollableRef = useRef<HTMLDivElement>(null);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' overflow='hidden' height='100%' pi='x24'>\n\t\t\t\t{noErrorsOcurred && (\n\t\t\t\t\t<Box overflowY='scroll' height='100%' ref={scrollableRef}>"
        },
        "depth_rank": 7
    },
    {
        "file": "AppRow.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsList/AppRow.tsx",
        "code": {
            "AppRow": "const AppRow = (props: App): ReactElement => {\nconst AppRow = (props: App): ReactElement => {\n\tconst { name, id, shortDescription, iconFileData, marketplaceVersion, iconFileContent, installed, bundledIn, version } = props;\n\tconst { name, id, shortDescription, iconFileData, marketplaceVersion, iconFileContent, installed, bundledIn, version } = props;",
            "canUpdate": "\tconst canUpdate = installed && version && marketplaceVersion && semver.lt(version, marketplaceVersion);\n\tconst canUpdate = installed && version && marketplaceVersion && semver.lt(version, marketplaceVersion);\n\n\treturn (\n\t\t<Box\n\t\t\tkey={id}"
        },
        "depth_rank": 7
    },
    {
        "file": "AppsList.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/marketplace/AppsList/AppsList.tsx",
        "code": {
            "AppsList": "const AppsList = ({ apps, title }: AppsListProps): ReactElement => (\nconst AppsList = ({ apps, title }: AppsListProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "HomePage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/home/HomePage.tsx",
        "code": {
            "dispatchToastMessage": "const HomePage = (): ReactElement => {\nconst HomePage = (): ReactElement => {\n\tuseEffect(() => {\n\t\tKonchatNotification.getDesktopPermission();\n\t}, []);\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tuseEffect(() => {\n\t\tconst { saml_idp_credentialToken: token, ...search } = router.getSearchParameters();\n\t\tconst { saml_idp_credentialToken: token, ...search } = router.getSearchParameters();"
        },
        "depth_rank": 6
    },
    {
        "file": "CustomHomePageContent.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/home/CustomHomePageContent.tsx",
        "code": {
            "body": "const CustomHomePageContent = (props: ComponentProps<typeof Box>): ReactElement => {\nconst CustomHomePageContent = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst body = String(useSetting('Layout_Home_Body'));\n\tconst body = String(useSetting('Layout_Home_Body'));\n\n\treturn <Box withRichContent dangerouslySetInnerHTML={{ __html: body }} {...props} />;"
        },
        "depth_rank": 6
    },
    {
        "file": "AddUsersCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/home/cards/AddUsersCard.tsx",
        "code": {
            "handleOpenUsersRoute": "\tconst handleOpenUsersRoute = (): void => {\n\tconst handleOpenUsersRoute = (): void => {\n\t\tadminUsersRoute.push({});"
        },
        "depth_rank": 7
    },
    {
        "file": "CreateChannelsCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/home/cards/CreateChannelsCard.tsx",
        "code": {
            "openCreateChannelModal": "const CreateChannelsCard = (): ReactElement => {\nconst CreateChannelsCard = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst openCreateChannelModal = (): void => setModal(<CreateChannelWithData onClose={(): void => setModal(null)} />);\n\tconst openCreateChannelModal = (): void => setModal(<CreateChannelWithData onClose={(): void => setModal(null)} />);"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomContentCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/home/cards/CustomContentCard.tsx",
        "code": {
            "dispatchToastMessage": "const CustomContentCard = (): ReactElement | null => {\nconst CustomContentCard = (): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "userVisibilityTooltipText": "\tconst userVisibilityTooltipText = isCustomContentVisible ? t('Now_Its_Visible_For_Everyone') : t('Now_Its_Visible_Only_For_Admins');\n\tconst userVisibilityTooltipText = isCustomContentVisible ? t('Now_Its_Visible_For_Everyone') : t('Now_Its_Visible_Only_For_Admins');\n\n\tlet customContentOnlyTooltipText = t('It_Will_Hide_All_Other_Content_Blocks_In_The_Homepage');\n\tif (willNotShowCustomContent) {\n\t\tcustomContentOnlyTooltipText = t('Action_Available_After_Custom_Content_Added_And_Visible');\n\t} else if (isCustomContentOnly) {"
        },
        "depth_rank": 7
    },
    {
        "file": "OAuthErrorPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/oauth/OAuthErrorPage.tsx",
        "code": {
            "errorType": "const OAuthErrorPage = () => {\nconst OAuthErrorPage = () => {\n\tconst errorType = useRouteParameter('error');\n\tconst errorType = useRouteParameter('error');\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 6
    },
    {
        "file": "Layout.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/oauth/components/Layout.tsx",
        "code": {
            "customBackground": "const Layout = ({ children }: LayoutProps) => {\nconst Layout = ({ children }: LayoutProps) => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 7
    },
    {
        "file": "AuthorizationFormPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/oauth/components/AuthorizationFormPage.tsx",
        "code": {
            "formLabelId": "const AuthorizationFormPage = ({ oauthApp, redirectUri, user }: AuthorizationFormPageProps) => {\nconst AuthorizationFormPage = ({ oauthApp, redirectUri, user }: AuthorizationFormPageProps) => {\n\tconst token = useMemo(() => Meteor._localStorage.getItem(Accounts.LOGIN_TOKEN_KEY) ?? undefined, []);\n\tconst token = useMemo(() => Meteor._localStorage.getItem(Accounts.LOGIN_TOKEN_KEY) ?? undefined, []);\n\n\tconst formLabelId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 7
    },
    {
        "file": "ErrorPage.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/oauth/components/ErrorPage.tsx",
        "code": {
            "ErrorPage": "const ErrorPage = ({ error }: ErrorPageProps) => {\nconst ErrorPage = ({ error }: ErrorPageProps) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 7
    },
    {
        "file": "CurrentUserDisplay.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/views/oauth/components/CurrentUserDisplay.tsx",
        "code": {
            "getRoles": "const CurrentUserDisplay = ({ user }: CurrentUserDisplayProps) => {\nconst CurrentUserDisplay = ({ user }: CurrentUserDisplayProps) => {\n\tconst showRealNames = useSetting<boolean>('UI_Use_Real_Name');\n\tconst showRealNames = useSetting<boolean>('UI_Use_Real_Name');\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 7
    },
    {
        "file": "useUIKitHandleClose.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/UIKit/hooks/useUIKitHandleClose.tsx",
        "code": {
            "dispatchToastMessage": "const emptyFn = (_error: any, _result: UIKitInteractionType | void): void => undefined;\nconst emptyFn = (_error: any, _result: UIKitInteractionType | void): void => undefined;\n\nconst useUIKitHandleClose = <S extends UiKitPayload>(state: S, fn = emptyFn): (() => Promise<void | UIKitInteractionType>) => {\nconst useUIKitHandleClose = <S extends UiKitPayload>(state: S, fn = emptyFn): (() => Promise<void | UIKitInteractionType>) => {\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\treturn useMutableCallback(() =>\n\t\tactionManager\n\t\t\t.triggerCancel({\n\t\t\t\tappId: state.appId,\n\t\t\t\tviewId: state.viewId,\n\t\t\t\tview: {\n\t\t\t\t\t...state,\n\t\t\t\t\tid: state.viewId,\n\t\t\t\t\t// state: groupStateByBlockId(values),\n\t\t\t\t},\n\t\t\t\tisCleared: true,\n\t\t\t})\n\t\t\t.then((result) => fn(undefined, result))\n\t\t\t.catch((error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 6
    },
    {
        "file": "useUIKitStateManager.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/UIKit/hooks/useUIKitStateManager.tsx",
        "code": {
            "actionManager": "const useUIKitStateManager = <S extends UiKitPayload>(initialState: S): S => {\nconst useUIKitStateManager = <S extends UiKitPayload>(initialState: S): S => {\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst [state, setState] = useSafely(useState(initialState));\n\tconst [state, setState] = useSafely(useState(initialState));\n\n\tconst { viewId } = state;\n\tconst { viewId } = state;",
            "handleUpdate": "\t\tconst handleUpdate = ({ ...data }: UIKitUserInteractionResult): void => {\n\t\tconst handleUpdate = ({ ...data }: UIKitUserInteractionResult): void => {\n\t\t\tif (isErrorType(data)) {\n\t\t\t\tconst { errors } = data;\n\t\t\t\tconst { errors } = data;"
        },
        "depth_rank": 6
    },
    {
        "file": "NavbarAdministrationAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/navbar/actions/NavbarAdministrationAction.tsx",
        "code": {
            "router": "const NavbarAdministrationAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarAdministrationAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst administrationItems = useAdministrationItems();\n\tconst administrationItems = useAdministrationItems();\n\n\tconst handleAction = useHandleMenuAction(administrationItems);\n\tconst handleAction = useHandleMenuAction(administrationItems);\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "NavbarAuditAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/navbar/actions/NavbarAuditAction.tsx",
        "code": {
            "handleAction": "const NavbarAuditAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarAuditAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst routerName = router.getRouteName();\n\tconst routerName = router.getRouteName();\n\n\tconst auditItems = useAuditItems();\n\tconst auditItems = useAuditItems();\n\n\tconst handleAction = useHandleMenuAction(auditItems);\n\tconst handleAction = useHandleMenuAction(auditItems);\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "NavbarHomeAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/navbar/actions/NavbarHomeAction.tsx",
        "code": {
            "router": "const NavbarHomeAction: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst NavbarHomeAction: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleHome": "\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst showHome = useSetting('Layout_Show_Home_Button');\n\n\tconst routeName = router.getLocationPathname();\n\tconst routeName = router.getLocationPathname();\n\n\tconst handleHome = useMutableCallback(() => {\n\tconst handleHome = useMutableCallback(() => {\n\t\tsidebar.toggle();\n\t\trouter.navigate('/home');\n\t});\n\n\treturn showHome ? (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "NavbarUserAction.tsx",
        "path": "../Rocket.Chat/apps/meteor/client/navbar/actions/NavbarUserAction.tsx",
        "code": {
            "user": "const NavbarUserAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarUserAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst user = useUser();\n\tconst user = useUser();\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 6
    },
    {
        "file": "customEventPolyfill.ts",
        "path": "../Rocket.Chat/apps/meteor/client/polyfills/customEventPolyfill.ts",
        "code": {
            "CustomEvent": "\tif (typeof window.CustomEvent === 'function') {\n\tif (typeof window.CustomEvent === 'function') {\n\t\treturn;\n\t}\n\n\tconst CustomEvent = function <T>(\n\tconst CustomEvent = function <T>(\n\t\ttype: string,\n\t\t{ bubbles = false, cancelable = false, detail = null as unknown as T }: CustomEventInit<T> = {},",
            "evt": "\t\tconst evt = document.createEvent('CustomEvent') as CustomEvent<T>;\n\t\tconst evt = document.createEvent('CustomEvent') as CustomEvent<T>;\n\t\tevt.initCustomEvent(type, bubbles, cancelable, detail);\n\t\treturn evt;\n\t} as unknown as {"
        },
        "depth_rank": 5
    },
    {
        "file": "cssVars.ts",
        "path": "../Rocket.Chat/apps/meteor/client/polyfills/cssVars.ts",
        "code": {
            "code": "\t\tconst url = linkElement.getAttribute('href');\n\t\tconst url = linkElement.getAttribute('href');\n\n\t\tif (url === null) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst response = await fetch(url);\n\t\t\tconst code = await response.text();\n\t\t\tconst code = await response.text();\n\t\t\toriginalCodes.set(linkElement, code);\n\t\t} catch (error) {",
            "cssVariablesElementObserver": "\tconst cssVariablesElementObserver = new MutationObserver(() => {\n\tconst cssVariablesElementObserver = new MutationObserver(() => {\n\t\tupdate();\n\t});\n\n\tcssVariablesElementObserver.observe(cssVariablesElement, { childList: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "mongo.d.ts",
        "path": "../Rocket.Chat/apps/meteor/definition/externals/meteor/mongo.d.ts",
        "code": {
            "defaultRemoteCollectionDriver": "\t\tfunction defaultRemoteCollectionDriver(): RemoteCollectionDriver;\n\t\tfunction defaultRemoteCollectionDriver(): RemoteCollectionDriver;\n\n\t\tclass ConnectionClass {}"
        },
        "depth_rank": 6
    },
    {
        "file": "ddp-rate-limiter.d.ts",
        "path": "../Rocket.Chat/apps/meteor/definition/externals/meteor/ddp-rate-limiter.d.ts",
        "code": {
            "getErrorMessage": "\t\tfunction _increment(number: DDPRateLimiter.Matcher): void;\n\t\tfunction _increment(number: DDPRateLimiter.Matcher): void;\n\t\tfunction _check(number: DDPRateLimiter.Matcher): {\n\t\tfunction _check(number: DDPRateLimiter.Matcher): {\n\t\t\tallowed: boolean;\n\t\t\ttimeToReset: number;\n\t\t};\n\t\tfunction getErrorMessage(result: { allowed: boolean }): string;\n\t\tfunction getErrorMessage(result: { allowed: boolean }): string;"
        },
        "depth_rank": 6
    },
    {
        "file": "babel-compiler.d.ts",
        "path": "../Rocket.Chat/apps/meteor/definition/externals/meteor/babel-compiler.d.ts",
        "code": {
            "compile": "\t\tfunction getDefaultOptions(options: Record<string, any>): Record<string, any>;\n\t\tfunction getDefaultOptions(options: Record<string, any>): Record<string, any>;\n\t\tfunction compile(script: string, options: Record<string, any>): { code: string };\n\t\tfunction compile(script: string, options: Record<string, any>): { code: string };"
        },
        "depth_rank": 6
    },
    {
        "file": "accounts-base.d.ts",
        "path": "../Rocket.Chat/apps/meteor/definition/externals/meteor/accounts-base.d.ts",
        "code": {
            "_generateStampedLoginToken": "\t\tfunction createUser(\n\t\tfunction createUser(\n\t\t\toptions: {\n\t\t\t\tusername?: string;\n\t\t\t\temail?: string;\n\t\t\t\tpassword?: string;\n\t\t\t\tprofile?: Record<string, unknown>;\n\t\t\t\tjoinDefaultChannelsSilenced?: boolean;\n\t\t\t},\n\t\t\tcallback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void,\n\t\t): string;\n\n\t\tfunction _bcryptRounds(): number;\n\t\tfunction _bcryptRounds(): number;\n\n\t\tfunction _getLoginToken(connectionId: string): string | undefined;\n\t\tfunction _getLoginToken(connectionId: string): string | undefined;\n\n\t\tfunction insertUserDoc(options: Record<string, any>, user: Record<string, any>): string;\n\t\tfunction insertUserDoc(options: Record<string, any>, user: Record<string, any>): string;\n\n\t\tfunction _generateStampedLoginToken(): { token: string; when: Date };\n\t\tfunction _generateStampedLoginToken(): { token: string; when: Date };",
            "_insertLoginToken": "\t\tfunction _insertLoginToken(userId: string, token: { token: string; when: Date }): void;\n\t\tfunction _insertLoginToken(userId: string, token: { token: string; when: Date }): void;",
            "_checkPasswordAsync": "\t\tfunction _runLoginHandlers<T>(methodInvocation: T, loginRequest: Record<string, any>): LoginMethodResult | undefined;\n\t\tfunction _runLoginHandlers<T>(methodInvocation: T, loginRequest: Record<string, any>): LoginMethodResult | undefined;\n\n\t\tfunction registerLoginHandler(name: string, handler: (options: any) => undefined | Object): void;\n\t\tfunction registerLoginHandler(name: string, handler: (options: any) => undefined | Object): void;\n\n\t\tfunction _storedLoginToken(): unknown;\n\t\tfunction _storedLoginToken(): unknown;\n\n\t\tfunction _unstoreLoginToken(): void;\n\t\tfunction _unstoreLoginToken(): void;\n\n\t\tfunction _setAccountData(connectionId: string, key: string, token: string): void;\n\t\tfunction _setAccountData(connectionId: string, key: string, token: string): void;\n\n\t\tfunction _checkPasswordAsync(user: Meteor.User, password: Password): Promise<{ userId: string; error?: any }>;\n\t\tfunction _checkPasswordAsync(user: Meteor.User, password: Password): Promise<{ userId: string; error?: any }>;",
            "_clearAllLoginTokens": "\t\tfunction updateOrCreateUserFromExternalService(\n\t\tfunction updateOrCreateUserFromExternalService(\n\t\t\tserviceName: string,\n\t\t\tserviceData: Record<string, unknown>,\n\t\t\toptions: Record<string, unknown>,\n\t\t): Record<string, unknown>;\n\n\t\tfunction _clearAllLoginTokens(userId: string | null): void;\n\t\tfunction _clearAllLoginTokens(userId: string | null): void;\n\n\t\tclass ConfigError extends Error {}"
        },
        "depth_rank": 6
    },
    {
        "file": "meteor.d.ts",
        "path": "../Rocket.Chat/apps/meteor/definition/externals/meteor/meteor.d.ts",
        "code": {
            "userAsync": "\t\tfunction userAsync(options?: { fields?: Mongo.FieldSpecifier | undefined }): Promise<Meteor.User | null>;\n\t\tfunction userAsync(options?: { fields?: Mongo.FieldSpecifier | undefined }): Promise<Meteor.User | null>;"
        },
        "depth_rank": 6
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/apps/meteor/packages/rocketchat-mongo-config/server/index.js",
        "code": {
            "stream": "\tconst stream = new PassThrough();\n\tconst stream = new PassThrough();\n\tstream.on('data', () => {});"
        },
        "depth_rank": 6
    },
    {
        "file": "linkedin.js",
        "path": "../Rocket.Chat/apps/meteor/packages/accounts-linkedin/linkedin.js",
        "code": {
            "credentialRequestCompleteCallback": "\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\tvoid Linkedin.requestCredential(options, credentialRequestCompleteCallback).catch(credentialRequestCompleteCallback);\n\t};\n\tAccounts.registerClientLoginFunction('linkedin', loginWithLinkedin);\n\n\tMeteor.loginWithLinkedin = (...args) => Accounts.applyLoginFunction('linkedin', args);\n} else {"
        },
        "depth_rank": 5
    },
    {
        "file": "compile-version.js",
        "path": "../Rocket.Chat/apps/meteor/packages/rocketchat-version/plugin/compile-version.js",
        "code": {
            "data": "\t\t\t\tconst data = result.stdout.split('\\n');\n\t\t\t\tconst data = result.stdout.split('\\n');\n\t\t\t\toutput.commit = {\n\t\t\t\t\thash: data.shift(),\n\t\t\t\t\tdate: data.shift(),\n\t\t\t\t\tauthor: data.shift(),\n\t\t\t\t\tsubject: data.join('\\n'),\n\t\t\t\t};\n\t\t\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "linkedin-client.js",
        "path": "../Rocket.Chat/apps/meteor/packages/linkedin-oauth/linkedin-client.js",
        "code": {
            "config": "\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });",
            "credentialToken": "\tconst credentialToken = Random.secret();\n\tconst credentialToken = Random.secret();\n\n\tlet scope;\n\tconst { requestPermissions, ...otherOptionsToPassThrough } = options;\n\tconst { requestPermissions, ...otherOptionsToPassThrough } = options;"
        },
        "depth_rank": 5
    },
    {
        "file": "linkedin-server.js",
        "path": "../Rocket.Chat/apps/meteor/packages/linkedin-oauth/linkedin-server.js",
        "code": {
            "isJSON": "\tconst data = await fetch(url);\n\tconst data = await fetch(url);\n\tconst response = await data.json();\n\tconst response = await data.json();\n\tconst emails = [];\n\tconst emails = [];\n\tfor (const element of response.elements) {\n\tfor (const element of response.elements) {\n\t\temails.push(element['handle~'].emailAddress);\n\t}\n\treturn emails;\n};\n\n// checks whether a string parses as JSON\nconst isJSON = function (str) {\nconst isJSON = function (str) {\n\ttry {\n\t\tJSON.parse(str);\n\t\treturn true;\n\t} catch (e) {",
            "config": "const getTokenResponse = async function (query) {\nconst getTokenResponse = async function (query) {\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });",
            "request": "\t\tconst request = await fetch(url);\n\t\tconst request = await fetch(url);\n\t\treturn request.json();\n\t} catch (err) {",
            "response": "\tconst response = await getTokenResponse(query);\n\tconst response = await getTokenResponse(query);\n\tconst { accessToken } = response;\n\tconst { accessToken } = response;",
            "identity": "\tconst identity = await getIdentity(accessToken);\n\tconst identity = await getIdentity(accessToken);\n\n\tconst { id, firstName, lastName, profilePicture } = identity;\n\tconst { id, firstName, lastName, profilePicture } = identity;"
        },
        "depth_rank": 5
    },
    {
        "file": "client.js",
        "path": "../Rocket.Chat/apps/meteor/packages/meteor-user-presence/client/client.js",
        "code": {
            "after": "\t\t// after first call overwrite start function to only call startTimer\n\t\t// after first call overwrite start function to only call startTimer\n\t\tthis.start = () => {\n\t\t\tthis.startTimer();\n\t\t};\n\t\tthis.userId = userId;\n\n\t\t// register a tracker on connection status so we can setup the away timer again (on reconnect)\n\t\tTracker.autorun(() => {\n\t\t\tconst { connected } = Meteor.status();\n\t\t\tconst { connected } = Meteor.status();"
        },
        "depth_rank": 6
    },
    {
        "file": "route.js",
        "path": "../Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/route.js",
        "code": {
            "endpointContext": "\t\tallowedMethods.forEach(function (method) {\n\t\tallowedMethods.forEach(function (method) {\n\t\t\tconst endpoint = self.endpoints[method];\n\t\t\tconst endpoint = self.endpoints[method];\n\t\t\treturn JsonRoutes.add(method, fullPath, async function (req, res) {\n\t\t\treturn JsonRoutes.add(method, fullPath, async function (req, res) {\n\t\t\t\tlet responseInitiated = false;\n\t\t\t\tconst doneFunc = function () {\n\t\t\t\tconst doneFunc = function () {\n\t\t\t\t\tresponseInitiated = true;\n\t\t\t\t};\n\t\t\t\tconst endpointContext = {\n\t\t\t\tconst endpointContext = {\n\t\t\t\t\turlParams: req.params,\n\t\t\t\t\tqueryParams: req.query,\n\t\t\t\t\tbodyParams: req.body,\n\t\t\t\t\trequest: req,\n\t\t\t\t\tresponse: res,\n\t\t\t\t\tdone: doneFunc,\n\t\t\t\t\t...endpoint,\n\t\t\t\t};\n\t\t\t\tlet responseData = null;\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await self._callEndpoint(endpointContext, endpoint);\n\t\t\t\t} catch (e) {",
            "userSelector": "\t\t\tconst userSelector = {};\n\t\t\tconst userSelector = {};",
            "defaultHeaders": "\t\tconst defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);\n\t\tconst defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);\n\t\theaders = this._lowerCaseKeys(headers);\n\t\theaders = { ...defaultHeaders, ...headers };"
        },
        "depth_rank": 6
    },
    {
        "file": "restivus.js",
        "path": "../Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/restivus.js",
        "code": {
            "user": "\t\t\t\t\tconst user = {};\n\t\t\t\t\tconst user = {};",
            "searchQuery": "\t\t\t\t\t\tconst searchQuery = {};\n\t\t\t\t\t\tconst searchQuery = {};",
            "tokenToRemove": "\t\t\tconst tokenToRemove = {};\n\t\t\tconst tokenToRemove = {};",
            "tokenRemovalQuery": "\t\t\tconst tokenRemovalQuery = {};\n\t\t\tconst tokenRemovalQuery = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "auth.js",
        "path": "../Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/auth.js",
        "code": {
            "getUserQuerySelector": "const getUserQuerySelector = function (user) {\nconst getUserQuerySelector = function (user) {\n\tif (user.id) {\n\t\treturn { _id: user.id };",
            "hashedToken": "\t\tconst passwordVerification = await Accounts._checkPasswordAsync(authenticatingUser, password);\n\t\tconst passwordVerification = await Accounts._checkPasswordAsync(authenticatingUser, password);\n\t\tif (passwordVerification.error) {\n\t\t\tthrow new Meteor.Error(401, 'Unauthorized');\n\t\t}\n\n\t\t// Add a new auth token to the user's account\n\t\tconst authToken = Accounts._generateStampedLoginToken();\n\t\tconst authToken = Accounts._generateStampedLoginToken();\n\t\tconst hashedToken = Accounts._hashLoginToken(authToken.token);\n\t\tconst hashedToken = Accounts._hashLoginToken(authToken.token);\n\t\tAccounts._insertHashedLoginToken(authenticatingUser._id, { hashedToken });"
        },
        "depth_rank": 6
    },
    {
        "file": "sauMonitorHooks.ts",
        "path": "../Rocket.Chat/apps/meteor/server/hooks/sauMonitorHooks.ts",
        "code": {
            "eventObject": "\tconst eventObject = {\n\tconst eventObject = {\n\t\tuserId: info.user._id,\n\t\tconnection: {\n\t\t\t...info.connection,\n\t\t\t...(resume && { loginToken: Accounts._hashLoginToken(resume) }),"
        },
        "depth_rank": 5
    },
    {
        "file": "DatabaseWatcher.ts",
        "path": "../Rocket.Chat/apps/meteor/server/database/DatabaseWatcher.ts",
        "code": {
            "isMasterDoc": "\t\tconst isMasterDoc = await this.db.admin().command({ ismaster: 1 });\n\t\tconst isMasterDoc = await this.db.admin().command({ ismaster: 1 });",
            "options": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\t...(useFullDocument ? { fullDocument: 'updateLookup' } : {}),"
        },
        "depth_rank": 5
    },
    {
        "file": "videoConfTypes.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/videoConfTypes.ts",
        "code": {
            "await": "\t\tfor await (const { data, condition } of typeConditions) {\n\t\tfor await (const { data, condition } of typeConditions) {\n\t\t\tif (await condition(room, allowRinging)) {\n\t\t\t\tif (typeof data === 'string') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: data,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\n\t\treturn { type: 'videoconference' };"
        },
        "depth_rank": 5
    },
    {
        "file": "sendDirectMessageToUsers.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/sendDirectMessageToUsers.ts",
        "code": {
            "fromUser": "\tconst fromUser = await Users.findOneById(fromId, { projection: { _id: 1, username: 1 } });\n\tconst fromUser = await Users.findOneById(fromId, { projection: { _id: 1, username: 1 } });",
            "users": "\tconst users = Users.findByIds(toIds, { projection: { _id: 1, username: 1, language: 1 } });\n\tconst users = Users.findByIds(toIds, { projection: { _id: 1, username: 1, language: 1 } });",
            "await": "\tconst success: string[] = [];\n\tconst success: string[] = [];\n\n\tfor await (const user of users) {\n\tfor await (const user of users) {\n\t\ttry {\n\t\t\tconst { rid } = await createDirectMessage([user.username], fromId);\n\t\t\tconst { rid } = await createDirectMessage([user.username], fromId);",
            "msg": "\t\t\tconst msg = typeof messageFn === 'function' ? messageFn(user) : messageFn;\n\t\t\tconst msg = typeof messageFn === 'function' ? messageFn(user) : messageFn;\n\n\t\t\tawait executeSendMessage(fromId, { rid, msg });"
        },
        "depth_rank": 5
    },
    {
        "file": "migrations.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/migrations.ts",
        "code": {
            "await": "\t\tfor await (const migration of migrations) {\n\t\tfor await (const migration of migrations) {\n\t\t\tawait migration();\n\t\t}\n\t} catch (e) {"
        },
        "depth_rank": 5
    },
    {
        "file": "sendMessagesToAdmins.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/sendMessagesToAdmins.ts",
        "code": {
            "result": "const getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\nconst getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;",
            "fromUser": "\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;\n\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;",
            "await": "\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\n\tfor await (const adminUser of users) {\n\tfor await (const adminUser of users) {\n\t\tif (fromUser) {\n\t\t\ttry {\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);"
        },
        "depth_rank": 5
    },
    {
        "file": "resetUserE2EKey.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/resetUserE2EKey.ts",
        "code": {
            "user": "const sendResetNotification = async function (uid: string): Promise<void> {\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById(uid, {});\n\tconst user = await Users.findOneById(uid, {});",
            "addresses": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }) => verified).map((e) => e.address);\n\tconst addresses = user.emails?.filter(({ verified }) => verified).map((e) => e.address);",
            "t": "\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "await": "\tconst from = settings.get('From_Email');\n\tconst from = settings.get('From_Email');\n\tconst subject = t('E2E_key_reset_email');\n\tconst subject = t('E2E_key_reset_email');\n\n\tfor await (const address of addresses) {\n\tfor await (const address of addresses) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: address,\n\t\t\t\tfrom,\n\t\t\t\tsubject,\n\t\t\t\ttext,\n\t\t\t\thtml,\n\t\t\t} as any);\n\t\t} catch (error) {"
        },
        "depth_rank": 5
    },
    {
        "file": "isUserIdFederated.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/isUserIdFederated.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { federated: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { federated: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "spotlight.js",
        "path": "../Rocket.Chat/apps/meteor/server/lib/spotlight.js",
        "code": {
            "roomIds": "\t\tconst searchableRoomTypeIds = roomCoordinator.searchableRoomTypes();\n\t\tconst searchableRoomTypeIds = roomCoordinator.searchableRoomTypes();\n\n\t\tconst roomIds = (\n\t\tconst roomIds = (\n\t\t\tawait SubscriptionsRaw.findByUserIdAndTypes(userId, searchableRoomTypeIds, {\n\t\t\t\tprojection: { rid: 1 },",
            "room": "\t\tconst users = [];\n\t\tconst users = [];\n\n\t\tconst options = {\n\t\tconst options = {\n\t\t\tlimit: settings.get('Number_of_users_autocomplete_suggestions'),\n\t\t\tprojection: {\n\t\t\t\tusername: 1,\n\t\t\t\tnickname: 1,\n\t\t\t\tname: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tstatusText: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t},\n\t\t\tsort: {\n\t\t\t\t[settings.get('UI_Use_Real_Name') ? 'name' : 'username']: 1,\n\t\t\t},\n\t\t\treadPreference: readSecondaryPreferred(Users.col.s.db),\n\t\t};\n\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, uids: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, uids: 1 } });",
            "canListInsiders": "\t\tconst canListInsiders = canListOutsiders || (rid && (await canAccessRoomAsync(room, { _id: userId })));\n\t\tconst canListInsiders = canListOutsiders || (rid && (await canAccessRoomAsync(room, { _id: userId })));",
            "exactMatch": "\t\tconst searchParams = {\n\t\tconst searchParams = {\n\t\t\trid,\n\t\t\ttext,\n\t\t\tusernames,\n\t\t\toptions,\n\t\t\tusers,\n\t\t\tcanListOutsiders,\n\t\t\tinsiderExtraQuery,\n\t\t\tmentions,\n\t\t};\n\n\t\t// Exact match for username only\n\t\tif (rid && canListInsiders) {\n\t\t\tconst exactMatch = await Users.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n\t\t\tconst exactMatch = await Users.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n\t\t\t\tprojection: options.projection,\n\t\t\t\treadPreference: options.readPreference,\n\t\t\t});\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(exactMatch);\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\tif (users.length === 0 && canListOutsiders) {\n\t\t\tconst exactMatch = await Users.findOneByUsernameIgnoringCase(text, {\n\t\t\tconst exactMatch = await Users.findOneByUsernameIgnoringCase(text, {\n\t\t\t\tprojection: options.projection,\n\t\t\t\treadPreference: options.readPreference,\n\t\t\t});\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(this.mapOutsiders(exactMatch));\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\tif (canListInsiders && rid) {\n\t\t\t// Search for insiders\n\t\t\tif (await this._searchInsiderUsers(searchParams)) {\n\t\t\t\treturn users;\n\t\t\t}\n\n\t\t\t// Search for users that the requester has DMs with\n\t\t\tif (await this._searchConnectedUsers(userId, searchParams, 'd')) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t}\n\n\t\t// If the user can search outsiders, search for any user in the server\n\t\t// Otherwise, search for users that are subscribed to the same rooms as the requester\n\t\tif (canListOutsiders) {\n\t\t\tif (await this._searchOutsiderUsers(searchParams)) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t} else if (await this._searchConnectedUsers(userId, searchParams)) {"
        },
        "depth_rank": 5
    },
    {
        "file": "findUsersOfRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/findUsersOfRoom.ts",
        "code": {
            "searchFields": "\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\treturn Users.findPaginatedByActiveUsersExcept(filter, undefined, options, searchFields, [\n\t\t{\n\t\t\t__rooms: rid,\n\t\t\t...(status && { status }),"
        },
        "depth_rank": 5
    },
    {
        "file": "videoConfProviders.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/videoConfProviders.ts",
        "code": {
            "providers": "const providers = new Map<string, { capabilities: VideoConferenceCapabilities; label: string; appId: string }>();\nconst providers = new Map<string, { capabilities: VideoConferenceCapabilities; label: string; appId: string }>();",
            "defaultProvider": "\t\tconst key = providerName.toLowerCase();\n\t\tconst key = providerName.toLowerCase();\n\n\t\tif (providers.has(key)) {\n\t\t\tproviders.delete(key);\n\t\t}\n\t},\n\n\tgetActiveProvider(): string | undefined {\n\t\tif (providers.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultProvider = settings.get<string>('VideoConf_Default_Provider');\n\t\tconst defaultProvider = settings.get<string>('VideoConf_Default_Provider');\n\n\t\tif (defaultProvider) {\n\t\t\tif (providers.has(defaultProvider)) {\n\t\t\t\treturn defaultProvider;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (providers.size === 1) {\n\t\t\tconst [[name]] = [...providers];\n\t\t\tconst [[name]] = [...providers];\n\t\t\treturn name;\n\t\t}\n\t},\n\n\thasAnyProvider(): boolean {\n\t\treturn providers.size > 0;\n\t},\n\n\tgetProviderList(): { key: string; label: string }[] {\n\t\treturn [...providers.keys()].map((key) => ({ key, label: providers.get(key)?.label || key }));"
        },
        "depth_rank": 5
    },
    {
        "file": "readMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/readMessages.ts",
        "code": {
            "projection": "\tconst projection = { ls: 1, tunread: 1, alert: 1 };\n\tconst projection = { ls: 1, tunread: 1, alert: 1 };",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });"
        },
        "depth_rank": 5
    },
    {
        "file": "parseMessageSearchQuery.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/parseMessageSearchQuery.ts",
        "code": {
            "parser": "\tconst parser = new MessageSearchQueryParser({ user, offset, limit, forceRegex });\n\tconst parser = new MessageSearchQueryParser({ user, offset, limit, forceRegex });"
        },
        "depth_rank": 5
    },
    {
        "file": "sendFile.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/dataExport/sendFile.ts",
        "code": {
            "body": "\tconst subject = i18n.t('Channel_Export');\n\tconst subject = i18n.t('Channel_Export');\n\n\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\tdownload_link: getURL(getPath(file._id), { cdn: false, full: true }),"
        },
        "depth_rank": 6
    },
    {
        "file": "exportRoomMessagesToFile.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/dataExport/exportRoomMessagesToFile.ts",
        "code": {
            "hideUserName": "const hideUserName = (\nconst hideUserName = (\n\tusername: string,\n\tuserData: Pick<IUser, 'username'> | undefined,\n\tusersMap: { userNameTable: Record<string, string> },",
            "getMessageData": "const getMessageData = (\nconst getMessageData = (\n\tmsg: IMessage,\n\thideUsers: boolean,\n\tuserData: Pick<IUser, 'username'> | undefined,\n\tusersMap: { userNameTable: Record<string, string> },",
            "messageObject": "\tconst username = hideUsers ? hideUserName(msg.u.username || msg.u.name || '', userData, usersMap) : msg.u.username;\n\tconst username = hideUsers ? hideUserName(msg.u.username || msg.u.name || '', userData, usersMap) : msg.u.username;\n\n\tconst messageObject = {\n\tconst messageObject = {\n\t\tmsg: msg.msg,\n\t\tusername,\n\t\tts: msg.ts,\n\t\t...(msg.attachments && {\n\t\t\tattachments: msg.attachments.map((attachment) => getAttachmentData(attachment, msg)),\n\t\t}),\n\t\t...(msg.t && { type: msg.t }),",
            "readPreference": "\tconst readPreference = readSecondaryPreferred();\n\tconst readPreference = readSecondaryPreferred();\n\n\tconst { cursor, totalCount } = Messages.findPaginated(\n\tconst { cursor, totalCount } = Messages.findPaginated("
        },
        "depth_rank": 6
    },
    {
        "file": "uploadZipFile.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/dataExport/uploadZipFile.ts",
        "code": {
            "contentType": "\tconst contentType = 'application/zip';\n\tconst contentType = 'application/zip';\n\tconst { size } = await stat(filePath);\n\tconst { size } = await stat(filePath);",
            "details": "\tconst details = {\n\tconst details = {\n\t\tuserId,\n\t\ttype: contentType,\n\t\tsize,\n\t\tname: newFileName,\n\t};\n\n\tconst { fd } = await open(filePath);\n\tconst { fd } = await open(filePath);",
            "stream": "\tconst stream = createReadStream('', { fd }); // @todo once upgrades to Node.js v16.x, use createReadStream from fs.promises.open\n\tconst stream = createReadStream('', { fd }); // @todo once upgrades to Node.js v16.x, use createReadStream from fs.promises.open"
        },
        "depth_rank": 6
    },
    {
        "file": "processDataDownloads.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/dataExport/processDataDownloads.ts",
        "code": {
            "dataToSave": "\tconst dataToSave = {\n\tconst dataToSave = {\n\t\tusername,\n\t\tname,\n\t\tstatusText,\n\t\temails: emails?.map(({ address }) => address),",
            "stream": "\t\tconst stream = createWriteStream(fileName, { encoding: 'utf8' });\n\t\tconst stream = createWriteStream(fileName, { encoding: 'utf8' });",
            "body": "\t\tconst subject = i18n.t('UserDataDownload_EmailSubject');\n\t\tconst subject = i18n.t('UserDataDownload_EmailSubject');\n\t\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\t\tdownload_link: getURL(getPath(file._id), { cdn: false, full: true }),"
        },
        "depth_rank": 6
    },
    {
        "file": "sendViaEmail.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/dataExport/sendViaEmail.ts",
        "code": {
            "missing": "\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\n\tconst missing = [...data.toUsers].filter(Boolean);\n\tconst missing = [...data.toUsers].filter(Boolean);\n\n\t(\n\t\tawait Users.findUsersByUsernames(data.toUsers, {\n\t\t\tprojection: { 'username': 1, 'emails.address': 1 },",
            "localeFn": "\t\tconst localeFn = await getMomentLocale(lang);\n\t\tconst localeFn = await getMomentLocale(lang);\n\t\tif (localeFn) {\n\t\t\tFunction(localeFn).call({ moment });",
            "html": "\tconst html = (\n\tconst html = (\n\t\tawait Messages.findByRoomIdAndMessageIds(data.rid, data.messages, {\n\t\t\tsort: { ts: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "getSettingsStatistics.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/statistics/getSettingsStatistics.ts",
        "code": {
            "settingsBase": "\t\tconst settingsBase = [\n\t\tconst settingsBase = [\n\t\t\t{ key: 'Accounts_TwoFactorAuthentication_Enabled', alias: 'account2fa' },",
            "alias": "\t\tconst settingsIDs = settingsBase.map((el) => el.key);\n\t\tconst settingsIDs = settingsBase.map((el) => el.key);\n\n\t\tconst settingsStatistics = (\n\t\tconst settingsStatistics = (\n\t\t\tawait Settings.findByIds(settingsIDs)\n\t\t\t\t.map((el): ISettingStatistics => {\n\t\t\t\t\tconst alias = settingsBase.find((obj) => obj.key === el._id)?.alias || {};\n\t\t\t\t\tconst alias = settingsBase.find((obj) => obj.key === el._id)?.alias || {};",
            "staticticObject": "\t\tconst staticticObject = await setSettingsStatistics(settingsStatistics);\n\t\tconst staticticObject = await setSettingsStatistics(settingsStatistics);\n\n\t\treturn staticticObject;\n\t} catch (error: any) {"
        },
        "depth_rank": 6
    },
    {
        "file": "Manager.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/ldap/Manager.ts",
        "code": {
            "ldap": "\t\t\tconst ldap = new LDAPConnection();\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.testConnection();\n\t\t} catch (error) {",
            "user": "\t\t\tconst slugifiedUsername = this.slugifyUsername(ldapUser, username);\n\t\t\tconst slugifiedUsername = this.slugifyUsername(ldapUser, username);\n\t\t\tconst user = await this.findExistingUser(ldapUser, slugifiedUsername);\n\t\t\tconst user = await this.findExistingUser(ldapUser, slugifiedUsername);\n\n\t\t\tif (user) {\n\t\t\t\treturn await this.loginExistingUser(ldap, user, ldapUser);\n\t\t\t}\n\n\t\t\treturn await this.loginNewUserFromLDAP(slugifiedUsername, ldap, ldapUser);\n\t\t} finally {",
            "hash": "\t\tconst hash = SHA256(avatar.toString());\n\t\tconst hash = SHA256(avatar.toString());\n\t\tif (user.avatarETag === hash) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug({ msg: 'Syncing user avatar', username: user.username });",
            "uniqueIdentifierField": "\t\tconst uniqueIdentifierField = this.getLdapUserUniqueID(ldapUser);\n\t\tconst uniqueIdentifierField = this.getLdapUserUniqueID(ldapUser);\n\n\t\tif (uniqueIdentifierField) {\n\t\t\tlogger.debug({ msg: 'Querying user', uniqueId: uniqueIdentifierField.value });",
            "syncData": "\t\tconst syncData = forceUserSync || (settings.get<boolean>('LDAP_Update_Data_On_Login') ?? true);\n\t\tconst syncData = forceUserSync || (settings.get<boolean>('LDAP_Update_Data_On_Login') ?? true);\n\t\tlogger.debug({ msg: 'Logging user in', syncData });",
            "updatedUser": "\t\tconst updatedUser = (syncData && (await this.syncUserForLogin(ldapUser, user))) || user;\n\t\tconst updatedUser = (syncData && (await this.syncUserForLogin(ldapUser, user))) || user;\n\n\t\tawait this.onLogin(ldapUser, updatedUser, password, ldap, false);\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t};\n\t}\n\n\tprivate static async syncUserForLogin(\n\t\tldapUser: ILDAPEntry,\n\t\texistingUser?: IUser,\n\t\tusedUsername?: string | undefined,\n\t): Promise<IUser | undefined> {\n\t\tlogger.debug({\n\t\t\tmsg: 'Syncing user data',\n\t\t\tldapUser: omit(ldapUser, '_raw'),\n\t\t\tuser: { ...(existingUser && { email: existingUser.emails, _id: existingUser._id }) },",
            "options": "\t\tconst options = this.getConverterOptions();\n\t\tconst options = this.getConverterOptions();\n\t\tawait LDAPDataConverter.convertSingleUser(userData, options);\n\n\t\treturn existingUser || this.findExistingLDAPUser(ldapUser);\n\t}\n\n\tprivate static getLdapUserUniqueID(ldapUser: ILDAPEntry): ILDAPUniqueIdentifierField | undefined {\n\t\tlet uniqueIdentifierField: string | string[] | undefined = settings.get<string>('LDAP_Unique_Identifier_Field');\n\n\t\tif (uniqueIdentifierField) {\n\t\t\tuniqueIdentifierField = uniqueIdentifierField.replace(/\\s/g, '').split(',');\n\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "Connection.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/ldap/Connection.ts",
        "code": {
            "results": "\t\tconst results = await this.searchById(id, attribute);\n\t\tconst results = await this.searchById(id, attribute);\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchAllUsers<T = ldapjs.SearchEntry>({\n\t\tdataCallback,\n\t\tendCallback,\n\t\tentryCallback,\n\t}: ILDAPSearchAllCallbacks<T>): Promise<void> {",
            "result": "\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\n\t\t\t\t\tif (entries.length >= internalPageSize) {\n\t\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t\ttitle: 'Internal Page',\n\t\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tentries = [];\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "DataConverter.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/ldap/DataConverter.ts",
        "code": {
            "emailUser": "\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});"
        },
        "depth_rank": 6
    },
    {
        "file": "createOrUpdateProtectedRole.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/roles/createOrUpdateProtectedRole.ts",
        "code": {
            "role": "\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'name' | 'scope' | 'description' | 'mandatory2fa'>>(roleId, {\n\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'name' | 'scope' | 'description' | 'mandatory2fa'>>(roleId, {\n\t\tprojection: { name: 1, scope: 1, description: 1, mandatory2fa: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "removeUserFromRoles.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/roles/removeUserFromRoles.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "addUserRoles.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/roles/addUserRoles.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "validateRoleList.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/roles/validateRoleList.ts",
        "code": {
            "existingRoleIds": "\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\t_id: 1,\n\t\t},\n\t};\n\n\tconst existingRoleIds = (await Roles.findInIds<Pick<IRole, '_id'>>(roleIds, options).toArray()).map(({ _id }) => _id);\n\tconst existingRoleIds = (await Roles.findInIds<Pick<IRole, '_id'>>(roleIds, options).toArray()).map(({ _id }) => _id);"
        },
        "depth_rank": 6
    },
    {
        "file": "call.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/http/call.ts",
        "code": {
            "content": "\tconst followRedirects = options.followRedirects === false ? 'manual' : 'follow';\n\tconst followRedirects = options.followRedirects === false ? 'manual' : 'follow';\n\n\tconst requestOptions = {\n\tconst requestOptions = {\n\t\tmethod,\n\t\tjar: false,\n\t\ttimeout: options.timeout,\n\t\tbody: content,\n\t\tredirect: followRedirects,\n\t\treferrer: options.referrer,\n\t\tintegrity: options.integrity,\n\t\theaders,\n\t} as const;\n\t} as const;\n\n\tfetch(newUrl, requestOptions)\n\t\t.then(async (res) => {\n\t\t\tconst content = await res.text();\n\t\t\tconst content = await res.text();\n\t\t\tconst response: HTTPResponse = {};\n\t\t\tconst response: HTTPResponse = {};",
            "error": "\t\t\tfor (const entry of (res.headers as any).entries()) {\n\t\t\tfor (const entry of (res.headers as any).entries()) {\n\t\t\t\tconst [key, val] = entry;\n\t\t\t\tconst [key, val] = entry;\n\t\t\t\tresponse.headers[key] = val;\n\t\t\t}\n\n\t\t\tresponse.ok = res.ok;\n\t\t\tresponse.redirected = res.redirected;\n\n\t\t\tpopulateData(response);\n\n\t\t\tif (response.statusCode >= 400) {\n\t\t\t\tconst error = makeErrorByStatus(response.statusCode, response.content);\n\t\t\t\tconst error = makeErrorByStatus(response.statusCode, response.content);\n\t\t\t\twrappedCallback(error, response);\n\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "logPayloads.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/logger/logPayloads.ts",
        "code": {
            "params": "\t\t\t\tconst params = method === 'ufsWrite' ? args.slice(1) : args;\n\t\t\t\tconst params = method === 'ufsWrite' ? args.slice(1) : args;\n\n\t\t\t\tif (method === 'saveSettings') {\n\t\t\t\t\treturn { arguments: [args[0].map((arg: any) => omit(arg, 'value'))] };"
        },
        "depth_rank": 6
    },
    {
        "file": "Logger.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/logger/Logger.ts",
        "code": {
            "child": "\tconstructor(loggerLabel: string) {\n\tconstructor(loggerLabel: string) {\n\t\tthis.logger = getPino(loggerLabel, defaultLevel);\n\n\t\tlogLevel.on('changed', (level) => {\n\t\t\tthis.logger.level = getLevel(level);\n\t\t});\n\t}\n\n\tsection(name: string): MainLogger {\n\t\tconst child = this.logger.child({ section: name }) as MainLogger;\n\t\tconst child = this.logger.child({ section: name }) as MainLogger;"
        },
        "depth_rank": 6
    },
    {
        "file": "getPino.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/logger/getPino.ts",
        "code": {
            "mainPino": "const mainPino = pino({\nconst mainPino = pino({\n\thooks: { logMethod },"
        },
        "depth_rank": 6
    },
    {
        "file": "voip.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/voip.ts",
        "code": {
            "text": "\t\tconst text = notificationMessage;\n\t\tconst text = notificationMessage;\n\n\t\treturn { title, text };"
        },
        "depth_rank": 7
    },
    {
        "file": "direct.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/direct.ts",
        "code": {
            "getCurrentUserId": "const DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\nconst DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\n\nconst getCurrentUserId = (): string | undefined => {\nconst getCurrentUserId = (): string | undefined => {\n\ttry {\n\t\treturn Meteor.userId() || undefined;\n\t} catch (_e) {",
            "uid": "\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tif (uid) {\n\t\t\t\treturn Subscriptions.findOneByRoomIdAndUserId(room._id, uid, { projection: { name: 1, fname: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "livechat.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/livechat.ts",
        "code": {
            "text": "\t\tconst text = notificationMessage;\n\t\tconst text = notificationMessage;\n\n\t\treturn { title, text };"
        },
        "depth_rank": 7
    },
    {
        "file": "conversation.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/conversation.ts",
        "code": {
            "ConversationRoomType": "const ConversationRoomType = getConversationRoomType(roomCoordinator);\nconst ConversationRoomType = getConversationRoomType(roomCoordinator);\n\nroomCoordinator.add(ConversationRoomType, {});"
        },
        "depth_rank": 7
    },
    {
        "file": "unread.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/unread.ts",
        "code": {
            "UnreadRoomType": "const UnreadRoomType = getUnreadRoomType(roomCoordinator);\nconst UnreadRoomType = getUnreadRoomType(roomCoordinator);\n\nroomCoordinator.add(UnreadRoomType, {});"
        },
        "depth_rank": 7
    },
    {
        "file": "favorite.ts",
        "path": "../Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/favorite.ts",
        "code": {
            "FavoriteRoomType": "const FavoriteRoomType = getFavoriteRoomType(roomCoordinator);\nconst FavoriteRoomType = getFavoriteRoomType(roomCoordinator);\n\nroomCoordinator.add(FavoriteRoomType, {});"
        },
        "depth_rank": 7
    },
    {
        "file": "ufs-methods.ts",
        "path": "../Rocket.Chat/apps/meteor/server/ufs/ufs-methods.ts",
        "code": {
            "file": "\t\t\tconst file = await store.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 5
    },
    {
        "file": "ufs-store.ts",
        "path": "../Rocket.Chat/apps/meteor/server/ufs/ufs-store.ts",
        "code": {
            "file": "\t\tconst file = await this.getCollection().findOne(fileId, { projection: { name: 1 } });\n\t\tconst file = await this.getCollection().findOne(fileId, { projection: { name: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "ufs-local.ts",
        "path": "../Rocket.Chat/apps/meteor/server/ufs/ufs-local.ts",
        "code": {
            "function": "\t\tfs.stat(path, function (err) {\n\t\tfs.stat(path, function (err) {\n\t\t\tif (err) {\n\t\t\t\t// Create the directory\n\t\t\t\tmkdirp(path, { mode })",
            "file": "\t\tconst file = fileParam || (await this.getCollection().findOne(fileId, { projection: { extension: 1 } }));\n\t\tconst file = fileParam || (await this.getCollection().findOne(fileId, { projection: { extension: 1 } }));"
        },
        "depth_rank": 5
    },
    {
        "file": "ufs-gridfs.ts",
        "path": "../Rocket.Chat/apps/meteor/server/ufs/ufs-gridfs.ts",
        "code": {
            "const": "\t\t// const mongo = MongoInternals.NpmModule;\n\t\t// const mongo = MongoInternals.NpmModule;\n\t\tconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;\n\t\tconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;",
            "file": "\t\t\tconst file = await db.collection(collectionName).findOne({ _id: fileId });\n\t\t\tconst file = await db.collection(collectionName).findOne({ _id: fileId });"
        },
        "depth_rank": 5
    },
    {
        "file": "ufs-server.ts",
        "path": "../Rocket.Chat/apps/meteor/server/ufs/ufs-server.ts",
        "code": {
            "mode": "\tconst path = UploadFS.config.tmpDir;\n\tconst path = UploadFS.config.tmpDir;\n\tconst mode = UploadFS.config.tmpDirPermissions;\n\tconst mode = UploadFS.config.tmpDirPermissions;\n\n\tfs.stat(path, (err) => {\n\t\tif (err) {\n\t\t\t// Create the temp directory\n\t\t\tmkdirp(path, { mode })",
            "file": "\t\tconst file = await store.getCollection().findOne({ _id: fileId });\n\t\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 5
    },
    {
        "file": "IMAPInterceptor.ts",
        "path": "../Rocket.Chat/apps/meteor/server/email/IMAPInterceptor.ts",
        "code": {
            "cb": "\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {"
        },
        "depth_rank": 5
    },
    {
        "file": "oauth.ts",
        "path": "../Rocket.Chat/apps/meteor/server/oauth2-server/oauth.ts",
        "code": {
            "handleResponse": "\t\tconst debugMiddleware = function (req: Request, _res: Response, next: NextFunction) {\n\t\tconst debugMiddleware = function (req: Request, _res: Response, next: NextFunction) {\n\t\t\tif (config.debug === true) {\n\t\t\t\tconsole.log('[OAuth2Server]', req.method, req.url);\n\t\t\t}\n\t\t\treturn next();\n\t\t};\n\n\t\tconst handleResponse = function (res: Response, response: OAuthServer.Response, next: NextFunction) {\n\t\tconst handleResponse = function (res: Response, response: OAuthServer.Response, next: NextFunction) {\n\t\t\tif (response.status === 302 && response.headers?.location) {\n\t\t\t\tconst { location } = response.headers;\n\t\t\t\tconst { location } = response.headers;",
            "response": "\t\tthis.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, async function (req, res, next) {\n\t\tthis.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, async function (req, res, next) {\n\t\t\tconst request = new OAuthServer.Request(req);\n\t\t\tconst request = new OAuthServer.Request(req);\n\t\t\tconst response = new OAuthServer.Response(res);\n\t\t\tconst response = new OAuthServer.Response(res);\n\n\t\t\ttry {\n\t\t\t\tawait oauth.token(request, response);\n\n\t\t\t\thandleResponse(res, response, next);\n\t\t\t} catch (e: any) {",
            "user": "\t\t\tconst user = await Users.findOne(\n\t\t\tconst user = await Users.findOne(\n\t\t\t\t{\n\t\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.access_token),\n\t\t\t\t},\n\t\t\t\t{ projection: { _id: 1 } },"
        },
        "depth_rank": 5
    },
    {
        "file": "i18n.ts",
        "path": "../Rocket.Chat/apps/meteor/server/routes/i18n.ts",
        "code": {
            "matchRoute": "const matchRoute = match<{ lng: string }>('/:lng.json', { decode: decodeURIComponent });\nconst matchRoute = match<{ lng: string }>('/:lng.json', { decode: decodeURIComponent });",
            "match": "const i18nHandler = async function (req: IncomingMessage, res: ServerResponse) {\nconst i18nHandler = async function (req: IncomingMessage, res: ServerResponse) {\n\tconst match = matchRoute(req.url ?? '/');\n\tconst match = matchRoute(req.url ?? '/');\n\n\tif (match === false) {\n\t\tres.writeHead(400);\n\t\tres.end();\n\t\treturn;\n\t}\n\n\tconst { lng } = match.params;\n\tconst { lng } = match.params;"
        },
        "depth_rank": 5
    },
    {
        "file": "userDataDownload.ts",
        "path": "../Rocket.Chat/apps/meteor/server/routes/userDataDownload.ts",
        "code": {
            "matchUID": "const cookies = new Cookies();\nconst cookies = new Cookies();\n\nconst matchUID = async (uid: string | undefined, token: string | undefined, ownerUID: string) => {\nconst matchUID = async (uid: string | undefined, token: string | undefined, ownerUID: string) => {\n\treturn (\n\t\tuid &&\n\t\ttoken &&\n\t\tuid === ownerUID &&\n\t\tBoolean(await Users.findOneByIdAndLoginToken(uid, hashLoginToken(token), { projection: { _id: 1 } }))",
            "matchFileRoute": "const matchFileRoute = match<{ fileID: string }>('/:fileID', { decode: decodeURIComponent });\nconst matchFileRoute = match<{ fileID: string }>('/:fileID', { decode: decodeURIComponent });"
        },
        "depth_rank": 5
    },
    {
        "file": "utils.js",
        "path": "../Rocket.Chat/apps/meteor/server/routes/avatar/utils.js",
        "code": {
            "function": "async function isUserAuthenticated({ headers, query }) {\nasync function isUserAuthenticated({ headers, query }) {\n\tlet { rc_uid, rc_token } = query;",
            "userFound": "\tconst userFound = await Users.findOneByIdAndLoginToken(rc_uid, hashLoginToken(rc_token), { projection: { _id: 1 } }); // TODO memoize find\n\tconst userFound = await Users.findOneByIdAndLoginToken(rc_uid, hashLoginToken(rc_token), { projection: { _id: 1 } }); // TODO memoize find",
            "isAuthenticated": "\tconst isAuthenticated = await isUserAuthenticated({ headers, query });\n\tconst isAuthenticated = await isUserAuthenticated({ headers, query });"
        },
        "depth_rank": 6
    },
    {
        "file": "room.js",
        "path": "../Rocket.Chat/apps/meteor/server/routes/avatar/room.js",
        "code": {
            "room": "const cookie = new Cookies();\nconst cookie = new Cookies();\nconst getRoomAvatar = async (roomId) => {\nconst getRoomAvatar = async (roomId) => {\n\tconst room = await Rooms.findOneById(roomId, { projection: { t: 1, prid: 1, name: 1, fname: 1, federated: 1 } });\n\tconst room = await Rooms.findOneById(roomId, { projection: { t: 1, prid: 1, name: 1, fname: 1, federated: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/push/service.ts",
        "code": {
            "tokens": "\t\t\tconst loginTokens = Array.isArray(data.diff['services.resume.loginTokens']) ? data.diff['services.resume.loginTokens'] : [];\n\t\t\tconst loginTokens = Array.isArray(data.diff['services.resume.loginTokens']) ? data.diff['services.resume.loginTokens'] : [];\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }: { hashedToken: string }) => hashedToken);\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }: { hashedToken: string }) => hashedToken);"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/upload/service.ts",
        "code": {
            "fileStore": "\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\treturn fileStore.insert(details, buffer);\n\t}\n\n\tasync sendFileMessage({ roomId, file, userId, message }: ISendFileMessageParams): Promise<boolean | undefined> {\n\t\treturn sendFileMessage(userId, { roomId, file, msgData: message });"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/omnichannel-voip/service.ts",
        "code": {
            "status": "\t\tconst status = 'online';\n\t\tconst status = 'online';\n\t\tconst { _id, department: departmentId } = guest;\n\t\tconst { _id, department: departmentId } = guest;",
            "user": "\t\tconst summary = await (await Voip.cachedQueueDetails())();\n\t\tconst summary = await (await Voip.cachedQueueDetails())();\n\t\tconst allocatedExtensions = await this.getAllocatedExtesionAllocationData({\n\t\tconst allocatedExtensions = await this.getAllocatedExtesionAllocationData({\n\t\t\textension: 1,\n\t\t\t_id: 1,\n\t\t\tusername: 1,\n\t\t\tname: 1,\n\t\t});\n\n\t\treturn (extensions as unknown as IVoipExtensionBase[]).map((ext) => {\n\t\t\tconst user = allocatedExtensions.find((ex) => ex.extension === ext.extension);\n\t\t\tconst user = allocatedExtensions.find((ex) => ex.extension === ext.extension);\n\t\t\treturn {\n\t\t\t\tuserId: user?._id,\n\t\t\t\tusername: user?.username,\n\t\t\t\tname: user?.name,\n\t\t\t\tqueues: this.getQueuesForExt(ext.extension, summary),\n\t\t\t\t...ext,\n\t\t\t};\n\t\t});\n\t}\n\n\tasync findVoipRooms({\n\t\tagents,\n\t\topen,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\tvisitorId,\n\t\ttags,\n\t\tqueue,\n\t\tdirection,\n\t\troomName,\n\t\toptions: { offset = 0, count, fields, sort } = {},",
            "agentCalledEvent": "\t\tconst agentCalledEvent = await PbxEvents.findOneByEvent(room.callUniqueId, 'AgentConnect');\n\t\tconst agentCalledEvent = await PbxEvents.findOneByEvent(room.callUniqueId, 'AgentConnect');\n\t\t// Update room with the agentconnect event information (hold time => time call was in queue)\n\t\tawait VoipRoom.updateOne(\n\t\t\t{ _id: room._id },"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/authorization/service.ts",
        "code": {
            "users": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tsort: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\troles: 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst users = await Users.findUsersInRoles(roleIds, null, options).toArray();\n\t\t\tconst users = await Users.findUsersInRoles(roleIds, null, options).toArray();\n\n\t\t\treturn users.map((user) => ({\n\t\t\t\t...user,\n\t\t\t\troles: user.roles.filter((roleId: string) => roleIds.includes(roleId)),\n\t\t\t}));\n\t\t},\n\t\t{ maxAge: 10000 },"
        },
        "depth_rank": 6
    },
    {
        "file": "canAccessRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/authorization/canAccessRoom.ts",
        "code": {
            "team": "\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\t\tprojection: { type: 1 },",
            "membership": "\t\tconst membership =\n\t\tconst membership =\n\t\t\tuser?._id &&\n\t\t\t(await TeamMember.findOneByUserIdAndTeamId(user._id, room.teamId, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/video-conference/service.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\treturn room?.fname || room?.name || 'Rocket.Chat';\n\t}\n\n\tprivate async getCallTitle(call: VideoConference): Promise<string> {\n\t\tif (call.type === 'videoconference') {\n\t\t\tif (call.title) {\n\t\t\t\treturn call.title;\n\t\t\t}\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tif (room) {\n\t\t\tif (room.t === 'd') {\n\t\t\t\tif (room.usernames?.length) {\n\t\t\t\t\treturn room.usernames.join(', ');\n\t\t\t\t}\n\t\t\t} else if (room.fname) {",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'roles'>>(uid, { projection: { language: 1, roles: 1 } });\n\t\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'roles'>>(uid, { projection: { language: 1, roles: 1 } });",
            "title": "\t\tconst title = (data as Partial<IGroupVideoConference>).title || room.fname || room.name || '';\n\t\tconst title = (data as Partial<IGroupVideoConference>).title || room.fname || room.name || '';\n\t\treturn this.startGroup(providerName, user, room._id, title, data, useAppUser);\n\t}\n\n\t// VideoConference.start: Detect the desired type and provider then start a video conference using them\n\tpublic async start(\n\t\tcaller: IUser['_id'],\n\t\trid: string,\n\t\t{ title, allowRinging }: { title?: string; allowRinging?: boolean },",
            "providerName": "\t\tconst providerName = await this.getValidatedProvider();\n\t\tconst providerName = await this.getValidatedProvider();\n\n\t\treturn {\n\t\t\tproviderName,\n\t\t\tcapabilities: videoConfProviders.getProviderCapabilities(providerName) || {},",
            "text": "\t\t\tconst name =\n\t\t\tconst name =\n\t\t\t\t(settings.get<boolean>('UI_Use_Real_Name') ? call.createdBy.name : call.createdBy.username) || call.createdBy.username || '';\n\t\t\tconst text = i18n.t('video_livechat_missed', { username: name });\n\t\t\tconst text = i18n.t('video_livechat_missed', { username: name });",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\treadPreference: readSecondaryPreferred(db),\n\t\t};\n\n\t\treturn {\n\t\t\tvideoConference: {\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('videoconference', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('videoconference', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tdirect: {\n\t\t\t\tcalling: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.CALLING, options),\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tlivechat: {\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('livechat', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('livechat', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tprovider: settings.get<string>('VideoConf_Default_Provider'),\n\t\t\t\tdms: settings.get<boolean>('VideoConf_Enable_DMs'),\n\t\t\t\tchannels: settings.get<boolean>('VideoConf_Enable_Channels'),\n\t\t\t\tgroups: settings.get<boolean>('VideoConf_Enable_Groups'),\n\t\t\t\tteams: settings.get<boolean>('VideoConf_Enable_Teams'),\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic async validateAction(\n\t\taction: string,\n\t\tcaller: IUser['_id'],\n\t\t{ callId, uid, rid }: { callId: VideoConference['_id']; uid: IUser['_id']; rid: IRoom['_id'] },",
            "call": "\t\tconst call = await VideoConferenceModel.findOneById<Pick<VideoConference, '_id' | 'messages'>>(callId, { projection: { messages: 1 } });\n\t\tconst call = await VideoConferenceModel.findOneById<Pick<VideoConference, '_id' | 'messages'>>(callId, { projection: { messages: 1 } });",
            "params": "\t\tconst params = { rid: call.rid, uid: call.createdBy._id, callId: call._id };\n\t\tconst params = { rid: call.rid, uid: call.createdBy._id, callId: call._id };",
            "subscriptions": "\t\tconst subscriptions = Subscriptions.findByRoomIdAndNotUserId(rid, uid, {\n\t\tconst subscriptions = Subscriptions.findByRoomIdAndNotUserId(rid, uid, {\n\t\t\tprojection: { 'u._id': 1, '_id': 0 },",
            "messageId": "\t\tconst url = await this.generateNewUrl(call);\n\t\tconst url = await this.generateNewUrl(call);\n\t\tawait VideoConferenceModel.setUrlById(callId, url);\n\n\t\tcall.url = url;\n\n\t\tconst messageId = await this.createMessage(call, useAppUser ? undefined : user);\n\t\tconst messageId = await this.createMessage(call, useAppUser ? undefined : user);\n\t\tcall.messages.started = messageId;\n\t\tawait VideoConferenceModel.setMessageById(callId, 'started', messageId);\n\n\t\tif (call.ringing) {\n\t\t\tawait this.notifyUsersOfRoom(rid, user._id, 'ring', { callId, rid, uid: call.createdBy._id });",
            "subscription": "\t\tconst title = isGroupVideoConference(call) ? call.title || (await this.getRoomName(call.rid)) : '';\n\t\tconst title = isGroupVideoConference(call) ? call.title || (await this.getRoomName(call.rid)) : '';\n\n\t\treturn (await this.getProviderManager())\n\t\t\t.generateUrl(call.providerName, {\n\t\t\t\t_id: call._id,\n\t\t\t\ttype: call.type,\n\t\t\t\trid: call.rid,\n\t\t\t\tcreatedBy: call.createdBy as Required<VideoConference['createdBy']>,\n\t\t\t\ttitle,\n\t\t\t\tproviderData: call.providerData,\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthrow new Error(e);\n\t\t\t});\n\t}\n\n\tprivate async getCallTitleForUser(call: VideoConference, userId?: IUser['_id']): Promise<string> {\n\t\tif (call.type === 'videoconference' && call.title) {\n\t\t\treturn call.title;\n\t\t}\n\n\t\tif (userId) {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(call.rid, userId, { projection: { fname: 1, name: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(call.rid, userId, { projection: { fname: 1, name: 1 } });",
            "callData": "\t\tconst callData = {\n\t\tconst callData = {\n\t\t\t_id: call._id,\n\t\t\ttype: call.type,\n\t\t\trid: call.rid,\n\t\t\turl: call.url,\n\t\t\tcreatedBy: call.createdBy as Required<VideoConference['createdBy']>,\n\t\t\tproviderData: {\n\t\t\t\t...(call.providerData || {}),"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/banner/service.ts",
        "code": {
            "snapshot": "\t\tconst snapshot = await this.create({ ...banner, snapshot: _id, active: false }); // create a snapshot\n\t\tconst snapshot = await this.create({ ...banner, snapshot: _id, active: false }); // create a snapshot",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(userId, {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(userId, {\n\t\t\tprojection: { username: 1 },",
            "bannerIds": "\t\tconst banners = await Banners.findActiveByRoleOrId(roles, platform, bannerId).toArray();\n\t\tconst banners = await Banners.findActiveByRoleOrId(roles, platform, bannerId).toArray();\n\n\t\tconst bannerIds = banners.map(({ _id }) => _id);\n\t\tconst bannerIds = banners.map(({ _id }) => _id);",
            "result": "\t\tconst result = await BannersDismiss.findByUserIdAndBannerId<Pick<IBannerDismiss, 'bannerId'>>(userId, bannerIds, {\n\t\tconst result = await BannersDismiss.findByUserIdAndBannerId<Pick<IBannerDismiss, 'bannerId'>>(userId, bannerIds, {\n\t\t\tprojection: { bannerId: 1, _id: 0 },",
            "dismissed": "\t\tconst dismissed = new Set(result.map(({ bannerId }) => bannerId));\n\t\tconst dismissed = new Set(result.map(({ bannerId }) => bannerId));"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/room/service.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, {\n\t\t\tprojection: { username: 1 },",
            "TODO": "\t\t// TODO convert `createRoom` function to \"raw\" and move to here\n\t\t// TODO convert `createRoom` function to \"raw\" and move to here\n\t\treturn createRoom(type, name, user.username, members, false, readOnly, extraData, options) as unknown as IRoom;\n\t}\n\n\tasync createDirectMessage({ to, from }: { to: string; from: string }): Promise<{ rid: string }> {\n\t\tconst [toUser, fromUser] = await Promise.all([\n\t\tconst [toUser, fromUser] = await Promise.all([\n\t\t\tUsers.findOneById(to, { projection: { username: 1 } }),"
        },
        "depth_rank": 6
    },
    {
        "file": "getAndCreateNpsSurvey.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/nps/getAndCreateNpsSurvey.ts",
        "code": {
            "surveyData": "\t\tconst surveyData = (await result.json()) as NpsSurveyData;\n\t\tconst surveyData = (await result.json()) as NpsSurveyData;\n\n\t\tconst banner: IBanner = {\n\t\tconst banner: IBanner = {\n\t\t\t_id: npsId,\n\t\t\tplatform: surveyData.platform,\n\t\t\tcreatedAt: new Date(surveyData.createdAt),\n\t\t\texpireAt: new Date(surveyData.expireAt),\n\t\t\tstartAt: new Date(surveyData.startAt),\n\t\t\t_updatedAt: new Date(), // Needed by the IRocketChatRecord interface\n\t\t\troles: surveyData.roles,\n\t\t\tcreatedBy: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t},\n\t\t\tview: surveyData.survey,\n\t\t};\n\n\t\tawait Banner.create(banner);\n\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/nps/service.ts",
        "code": {
            "any": "\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });\n\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });",
            "sending": "\t\tconst today = new Date();\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await NpsVote.col.findOneAndUpdate(\n\t\t\t\tconst { value } = await NpsVote.col.findOneAndUpdate(",
            "voteIds": "\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);",
            "nps": "\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/service.ts",
        "code": {
            "Init": "\t\t// Init from constructor if we already have\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tvoid this.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP service');\n\t\tif (this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP service already started' });",
            "queues": "\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];"
        },
        "depth_rank": 6
    },
    {
        "file": "CommandHandler.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/CommandHandler.ts",
        "code": {
            "connection": "\t\tconst connection = new WebsocketConnection();\n\t\tconst connection = new WebsocketConnection();\n\t\ttry {\n\t\t\tawait connection.connectWithUrl(websocketUrl, protocol);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });"
        },
        "depth_rank": 8
    },
    {
        "file": "ACDQueue.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/ACDQueue.ts",
        "code": {
            "queue": "\t\tconst queue = {\n\t\tconst queue = {\n\t\t\tname: event.queue,\n\t\t\tloggedin: event.loggedin,\n\t\t\tavailable: event.available,\n\t\t\tcallers: event.callers,\n\t\t\tholdtime: event.holdtime,\n\t\t\ttalktime: event.talktime,\n\t\t\tlogestholdtime: event.logestholdtime,\n\t\t};\n\t\tconst { result } = this;\n\t\tconst { result } = this;"
        },
        "depth_rank": 9
    },
    {
        "file": "PJSIPEndpoint.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts",
        "code": {
            "extensions": "\t\tconst extensions = _.sortBy(this.result.endpoints, function (o: any) {\n\t\tconst extensions = _.sortBy(this.result.endpoints, function (o: any) {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);"
        },
        "depth_rank": 9
    },
    {
        "file": "ContinuousMonitor.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts",
        "code": {
            "queueDetails": "\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst { calls } = queueDetails;\n\t\tconst { calls } = queueDetails;",
            "extension": "\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst { queue } = event;\n\t\tconst { queue } = event;"
        },
        "depth_rank": 9
    },
    {
        "file": "WebsocketConnection.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/voip/connector/websocket/WebsocketConnection.ts",
        "code": {
            "onError": "\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\t\tconst onError = (err: unknown): void => {\n\t\t\tconst onError = (err: unknown): void => {\n\t\t\t\t_reject(err);\n\t\t\t\tthis.logger.error({ msg: 'checkCallserverConnection () Connection Error', err });",
            "onConnect": "\t\t\tconst onConnect = (): void => {\n\t\t\tconst onConnect = (): void => {\n\t\t\t\t_resolve();\n\t\t\t\tthis.connection.close();\n\t\t\t};\n\t\t\tthis.connection = new WebSocket(connectionUrl, connectionProtocol);\n\t\t\tthis.connection.on('open', onConnect);\n\t\t\tthis.connection.on('error', onError);\n\t\t});\n\t\treturn returnPromise;\n\t}\n\n\tisConnected(): boolean {\n\t\tthis.logger.debug({ msg: 'isConnected() unimplemented' });"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/team/service.ts",
        "code": {
            "existingRoom": "\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });",
            "createdBy": "\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "memberUsernames": "\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);",
            "memberIds": "\t\tconst memberIds = membersResult.map(({ _id }) => _id);\n\t\tconst memberIds = membersResult.map(({ _id }) => _id);",
            "createdRoom": "\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\n\t\t\t\tconst newRoom = {\n\t\t\t\tconst newRoom = {\n\t\t\t\t\t...room,\n\t\t\t\t\ttype: roomType,\n\t\t\t\t\tname: team.name,\n\t\t\t\t\tmembers: memberUsernames as string[],\n\t\t\t\t\textraData: {\n\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\troomId = createdRoom._id;\n\t\t\t}\n\n\t\t\tawait Team.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {",
            "team": "\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },",
            "unfilteredTeams": "\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },",
            "unfilteredTeamIds": "\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);",
            "publicTeams": "\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },",
            "publicTeamIds": "\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);",
            "privateTeams": "\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },",
            "visibleTeamIds": "\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);",
            "ownedTeams": "\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);",
            "userTeams": "\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },",
            "teamIds": "\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);",
            "users": "\t\tconst users = await Users.findActive({ ...query }).toArray();\n\t\tconst users = await Users.findActive({ ...query }).toArray();",
            "room": "\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });",
            "user": "\t\tfor await (const member of members) {\n\t\tfor await (const member of members) {\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "await": "\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\t\tawait addUserToRoom(room._id, m.user, user);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: FindOptions<ITeamMember>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(uid: string, options: FindOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(\n\t\tuid: string,\n\t\toptions?: undefined | FindOptions<ITeamMember> | FindOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\treturn TeamMember.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn TeamMember.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },",
            "userRooms": "\t\tconst userRooms = user?.__rooms;\n\t\tconst userRooms = user?.__rooms;\n\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });",
            "rooms": "\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },",
            "usersToRemove": "\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },",
            "byUser": "\t\tconst byUser = (await Users.findOneById(uid, { projection: { _id: 1, username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tconst byUser = (await Users.findOneById(uid, { projection: { _id: 1, username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "inviter": "\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };",
            "isAlreadyAMember": "\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },",
            "isMember": "\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },",
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();\n\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();",
            "subscriptionIds": "\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);"
        },
        "depth_rank": 6
    },
    {
        "file": "voxtelesys.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/voxtelesys.ts",
        "code": {
            "contentType": "\t\t\tconst media = {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType as string;\n\n\t\t\treturnData?.media?.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };",
            "defaultLanguage": "\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },",
            "user": "\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;"
        },
        "depth_rank": 7
    },
    {
        "file": "twilio.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/twilio.ts",
        "code": {
            "defaultLanguage": "\t\tconst client = twilio(this.accountSid, this.authToken);\n\t\tconst client = twilio(this.accountSid, this.authToken);\n\t\tlet body = message;\n\n\t\tlet mediaUrl;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },",
            "user": "\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;",
            "result": "\t\tconst result = await client.messages.create({\n\t\tconst result = await client.messages.create({\n\t\t\tto: toNumber,\n\t\t\tfrom: fromNumber,\n\t\t\tbody,\n\t\t\t...(mediaUrl && { mediaUrl }),"
        },
        "depth_rank": 7
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/image/service.ts",
        "code": {
            "result": "\t\tconst result = transformer.toBuffer({ resolveWithObject: true });\n\t\tconst result = transformer.toBuffer({ resolveWithObject: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "FederatedRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/domain/FederatedRoom.ts",
        "code": {
            "constructor": "\tprotected constructor({\n\tprotected constructor({\n\t\texternalId,\n\t\tinternalReference,\n\t\tmembers,\n\t}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "FederatedUser.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/domain/FederatedUser.ts",
        "code": {
            "constructor": "\tprotected constructor({\n\tprotected constructor({\n\t\texternalId,\n\t\tinternalReference,\n\t\texistsOnlyOnProxyServer,\n\t}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "AbstractFederationApplicationService.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/AbstractFederationApplicationService.ts",
        "code": {
            "externalUserProfileInformation": "\tconstructor(\n\tconstructor(\n\t\tprotected bridge: IFederationBridge,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t) {\n\t\tthis.internalHomeServerDomain = this.internalSettingsAdapter.getHomeServerDomain();\n\t}\n\n\tprotected async createFederatedUserInternallyOnly(\n\t\texternalUserId: string,\n\t\tusername: string,\n\t\texistsOnlyOnProxyServer = false,\n\t\tprovidedName?: string,\n\t): Promise<void> {\n\t\tconst internalUser = await this.internalUserAdapter.getInternalUserByUsername(username);\n\t\tconst internalUser = await this.internalUserAdapter.getInternalUserByUsername(username);\n\t\tconst externalUserProfileInformation = await this.bridge.getUserProfileInformation(externalUserId);\n\t\tconst externalUserProfileInformation = await this.bridge.getUserProfileInformation(externalUserId);\n\t\tlet federatedUser;\n\t\tif (internalUser) {\n\t\t\tfederatedUser = FederatedUser.createWithInternalReference(externalUserId, existsOnlyOnProxyServer, internalUser);\n\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "message-redaction-helper.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/room/message/receiver/message-redaction-helper.ts",
        "code": {
            "reaction": "\t\tconst normalizedEventId = Federation.escapeExternalFederationEventId(this.redactsEvents);\n\t\tconst normalizedEventId = Federation.escapeExternalFederationEventId(this.redactsEvents);\n\t\tconst reaction = Object.keys(this.message.reactions || {}).find(\n\t\tconst reaction = Object.keys(this.message.reactions || {}).find("
        },
        "depth_rank": 10
    },
    {
        "file": "message-sender-helper.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/room/message/sender/message-sender-helper.ts",
        "code": {
            "externalMessageId": "\t\tconst externalMessageId = await this.bridge.sendMessage(externalRoomId, externalSenderId, message);\n\t\tconst externalMessageId = await this.bridge.sendMessage(externalRoomId, externalSenderId, message);\n\n\t\tawait this.internalMessageAdapter.setExternalFederationEventOnMessage(message._id, externalMessageId);\n\t}\n\n\tpublic async sendQuoteMessage(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tmessage: IMessage,\n\t\tmessageToReplyTo: IMessage,\n\t): Promise<void> {\n\t\tconst originalSender = await this.internalUserAdapter.getFederatedUserByInternalId(messageToReplyTo?.u?._id);\n\t\tconst originalSender = await this.internalUserAdapter.getFederatedUserByInternalId(messageToReplyTo?.u?._id);\n\t\tconst externalMessageId = await this.bridge.sendReplyToMessage(\n\t\tconst externalMessageId = await this.bridge.sendReplyToMessage(\n\t\t\texternalRoomId,\n\t\t\texternalSenderId,\n\t\t\tmessageToReplyTo.federation?.eventId as string,\n\t\t\toriginalSender?.getExternalId() as string,\n\t\t\tmessage.msg,\n\t\t);\n\t\tawait this.internalMessageAdapter.setExternalFederationEventOnMessage(message._id, externalMessageId);\n\t}\n}\n\nclass FileExternalMessageSender implements IExternalMessageSender {\n\tconstructor(\n\tconstructor(\n\t\tprivate readonly bridge: IFederationBridge,\n\t\tprivate readonly internalFileHelper: RocketChatFileAdapter,\n\t\tprivate readonly internalMessageAdapter: RocketChatMessageAdapter,\n\t) {}"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageServiceSender.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/room/message/sender/MessageServiceSender.ts",
        "code": {
            "externalEventId": "\t\tconst externalEventId = Object.keys(internalMessage.reactions?.[reaction].federationReactionEventIds || {}).find(\n\t\tconst externalEventId = Object.keys(internalMessage.reactions?.[reaction].federationReactionEventIds || {}).find("
        },
        "depth_rank": 10
    },
    {
        "file": "RoomServiceReceiver.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/room/receiver/RoomServiceReceiver.ts",
        "code": {
            "isInviteeFromTheSameHomeServer": "\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t);\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\t\t? dmExternalInviteeId.inviteeUsernameOnly\n\t\t\t\t\t\t: dmExternalInviteeId.normalizedInviteeId;\n\t\t\t\t\tawait this.createFederatedUserInternallyOnly(\n\t\t\t\t\t\tdmExternalInviteeId.externalInviteeId,\n\t\t\t\t\t\tdmInviteeUsername,\n\t\t\t\t\t\tisDMInviteeFromTheSameHomeServer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (invitee ||\n\t\t\t\t\t(await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId))) as FederatedUser;\n\t\t\t}),\n\t\t);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\tfederatedInviterUser,\n\t\t\t...allInvitees,\n\t\t]);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tallInvitees\n\t\t\t\t.filter((invitee) =>\n\t\t\t\t\tFederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.getExternalId()),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())),\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(\n\t\tfederatedInviteeUser: FederatedUser,\n\t\tfederatedInviterUser: FederatedUser,\n\t\texternalRoomId: string,\n\t): Promise<void> {\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n\n\tpublic async onExternalMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =",
            "readableStream": "\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(",
            "notAllowedChangeJoinRules": "\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tif (notAllowedChangeJoinRules) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomType(roomType);\n\t\tawait this.internalRoomAdapter.updateRoomType(federatedRoom);\n\t}\n\n\tpublic async onChangeRoomName(roomChangeNameInput: FederationRoomChangeNameDto): Promise<void> {\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomServiceSender.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/room/sender/RoomServiceSender.ts",
        "code": {
            "externalRoomId": "\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\t[federatedInviteeUser.getExternalId()],\n\t\t\t\t{ internalRoomId },"
        },
        "depth_rank": 9
    },
    {
        "file": "UserServiceReceiver.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/application/user/receiver/UserServiceReceiver.ts",
        "code": {
            "stillTyping": "\t\tconst stillTyping = this.usersTypingByRoomIdCache\n\t\tconst stillTyping = this.usersTypingByRoomIdCache\n\t\t\t.get(externalRoomId)\n\t\t\t?.filter((user) => externalUserIdsTyping.includes(user.externalUserId));\n\n\t\tnotTypingAnymore?.forEach((user) => this.internalNotificationAdapter.notifyUserTypingOnRoom(internalRoomId, user.username, isTyping));\n\t\tthis.usersTypingByRoomIdCache.set(externalRoomId, stillTyping || []);\n\t}\n\n\tpublic async onUserTyping(userTypingInput: FederationUserTypingStatusEventDto): Promise<void> {\n\t\tconst { externalUserIdsTyping, externalRoomId } = userTypingInput;\n\t\tconst { externalUserIdsTyping, externalRoomId } = userTypingInput;"
        },
        "depth_rank": 9
    },
    {
        "file": "to-external-parser-formatter.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/converters/to-external-parser-formatter.ts",
        "code": {
            "getAllMentionsWithTheirRealNames": "const getAllMentionsWithTheirRealNames = (message: string, homeServerDomain: string, senderExternalId: string): IInternalMention[] => {\nconst getAllMentionsWithTheirRealNames = (message: string, homeServerDomain: string, senderExternalId: string): IInternalMention[] => {\n\tconst mentions: IInternalMention[] = [];\n\tconst mentions: IInternalMention[] = [];\n\tsanitizeHtml(message, {\n\t\tallowedTags: ['a'],\n\t\texclusiveFilter: (frame: IFrame): boolean => {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tattribs: { href = '' },"
        },
        "depth_rank": 9
    },
    {
        "file": "Statistics.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });",
            "externalServers": "\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\t\tsettings.get('Federation_Matrix_homeserver_domain'),\n\t\t);\n\n\t\treturn {\n\t\t\tquantity: externalServers.length,\n\t\t\tservers: externalServers,\n\t\t};\n\t}\n}\n\ninterface IFederationStatistics {\n\tenabled: boolean;\n\tmaximumSizeOfPublicRoomsUsers: number;\n\tbiggestRoom: {\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null;\n\tsmallestRoom: {\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null;\n\tamountOfExternalUsers: number;\n\tamountOfFederatedRooms: number;\n\texternalConnectedServers: { quantity: number; servers: string[] };"
        },
        "depth_rank": 9
    },
    {
        "file": "Message.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Message.ts",
        "code": {
            "room": "\t\tconst room = federatedRoom.getInternalReference();\n\t\tconst room = federatedRoom.getInternalReference();\n\n\t\tawait sendMessage(\n\t\t\tuser.getInternalReference(),\n\t\t\t{\n\t\t\t\tfederation: { eventId: externalEventId },",
            "updatedMessage": "\t\tconst quotedMessageUrl = editedMessage.attachments?.filter(isQuoteAttachment)?.[0]?.message_link;\n\t\tconst quotedMessageUrl = editedMessage.attachments?.filter(isQuoteAttachment)?.[0]?.message_link;\n\n\t\treturn toInternalQuoteMessageFormat({\n\t\t\tmessageToReplyToUrl: quotedMessageUrl || '',\n\t\t\tformattedMessage: newExternalFormattedMessage,\n\t\t\trawMessage: newRawMessageText,\n\t\t\thomeServerDomain,\n\t\t\tsenderExternalId: senderUser.getExternalId(),\n\t\t});\n\t}\n\n\tpublic async editQuotedMessage(\n\t\tuser: FederatedUser,\n\t\tnewRawMessageText: string,\n\t\tnewExternalFormattedMessage: string,\n\t\teditedMessage: IMessage,\n\t\thomeServerDomain: string,\n\t): Promise<void> {\n\t\tconst updatedMessage = {\n\t\tconst updatedMessage = {\n\t\t\t...editedMessage,\n\t\t\tmsg: await this.getMessageToEditWhenReplyAndQuote(\n\t\t\t\teditedMessage,\n\t\t\t\tnewExternalFormattedMessage,\n\t\t\t\tnewRawMessageText,\n\t\t\t\thomeServerDomain,\n\t\t\t\tuser,\n\t\t\t),\n\t\t};\n\t\tawait updateMessage(updatedMessage, user.getInternalReference(), editedMessage);\n\t}\n\n\tpublic async sendFileMessage(\n\t\tuser: FederatedUser,\n\t\troom: FederatedRoom,\n\t\tfiles: IMessage['files'],\n\t\tattachments: IMessage['attachments'],\n\t\texternalEventId: string,\n\t): Promise<void> {\n\t\tawait sendMessage(\n\t\t\tuser.getInternalReference(),\n\t\t\t{\n\t\t\t\tfederation: { eventId: externalEventId },"
        },
        "depth_rank": 9
    },
    {
        "file": "User.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/User.ts",
        "code": {
            "internalUserIds": "\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUsersByExternalIds(externalUserIds: string[]): Promise<FederatedUser[]> {\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tif (internalBridgedUsers.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\t\t(acc, bridgedUser) => ({ ...acc, [bridgedUser.uid]: { mui: bridgedUser.mui, remote: bridgedUser.remote } }),",
            "existingLocalUser": "\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tif (existingLocalUser) {\n\t\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\t\texistingLocalUser._id,\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedUser.isRemote(),\n\t\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t\t);\n\t\t}\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());"
        },
        "depth_rank": 9
    },
    {
        "file": "File.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/File.ts",
        "code": {
            "uploadedFile": "\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tconst uploadedFile = await fileStore.insert(fileRecord, readableStream);\n\t\t\tconst uploadedFile = await fileStore.insert(fileRecord, readableStream);\n\t\t\ttry {\n\t\t\t\tconst { files, attachments } = await parseFileIntoMessageAttachments(uploadedFile, internalRoomId, internalUser);\n\t\t\t\tconst { files, attachments } = await parseFileIntoMessageAttachments(uploadedFile, internalRoomId, internalUser);",
            "metadata": "\t\t\tconst metadata = await FileUpload.extractMetadata(file);\n\t\t\tconst metadata = await FileUpload.extractMetadata(file);\n\n\t\t\treturn {\n\t\t\t\tformat: metadata.format,\n\t\t\t\theight: metadata.height,\n\t\t\t\twidth: metadata.width,\n\t\t\t};\n\t\t}\n\t\tif (file.type?.startsWith('video/')) {\n\t\t\treturn {\n\t\t\t\theight: 200,\n\t\t\t\twidth: 250,\n\t\t\t};\n\t\t}\n\t\treturn {};"
        },
        "depth_rank": 9
    },
    {
        "file": "Settings.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Settings.ts",
        "code": {
            "parsedFile": "\t\t\tconst registrationYaml = fs.readFileSync(this.getFilePathForHomeserverConfig(), 'utf8');\n\t\t\tconst registrationYaml = fs.readFileSync(this.getFilePathForHomeserverConfig(), 'utf8');\n\n\t\t\tconst parsedFile = yaml.load(registrationYaml as string) as Record<string, any>;\n\t\t\tconst parsedFile = yaml.load(registrationYaml as string) as Record<string, any>;\n\t\t\treturn {\n\t\t\t\tapplicationServiceToken: parsedFile.as_token,\n\t\t\t\tbridgeUrl: parsedFile.url,\n\t\t\t\tbotName: parsedFile.sender_localpart,\n\t\t\t\thomeserverToken: parsedFile.hs_token,\n\t\t\t\tid: parsedFile.id,\n\t\t\t\tlistenTo: parsedFile.namespaces,\n\t\t\t\tenableEphemeralEvents: parsedFile['de.sorunome.msc2409.push_ephemeral'],\n\t\t\t\trocketchat: { domainName: parsedFile.rocketchat?.homeserver_domain, homeServerUrl: parsedFile.rocketchat?.homeserver_url },"
        },
        "depth_rank": 9
    },
    {
        "file": "Room.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Room.ts",
        "code": {
            "extraData": "\t\tconst readonly = false;\n\t\tconst readonly = false;\n\t\tconst excludeSelf = false;\n\t\tconst excludeSelf = false;\n\t\tconst extraData = undefined;\n\t\tconst extraData = undefined;\n\t\tconst { rid, _id } = await createRoom(\n\t\tconst { rid, _id } = await createRoom(",
            "options": "\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;\n\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;",
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), targetFederatedUser.getInternalId(), {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), targetFederatedUser.getInternalId(), {\n\t\t\tprojection: { roles: 1 },",
            "eventsForRemovedRoles": "\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\t\tthis.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'),\n\t\t);\n\t\t[...eventsForAddedRoles, ...eventsForRemovedRoles].forEach((event) => api.broadcast('user.roleUpdate', event));\n\t}\n\n\tprivate createRoleUpdateEvent(\n\t\tfederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\trole: string,\n\t\taction: 'added' | 'removed',\n\t): {\n\t\ttype: 'added' | 'removed' | 'changed';\n\t\t_id: string;\n\t\tu?: { _id: IUser['_id']; username: IUser['username']; name: IUser['name'] };"
        },
        "depth_rank": 9
    },
    {
        "file": "action.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/slash-commands/action.ts",
        "code": {
            "invitee": "\tconst invitee = normalizeExternalInviteeId(rawUserId);\n\tconst invitee = normalizeExternalInviteeId(rawUserId);\n\n\tconst { rid: roomId } = item;\n\tconst { rid: roomId } = item;"
        },
        "depth_rank": 9
    },
    {
        "file": "Bridge.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/Bridge.ts",
        "code": {
            "externalInformation": "\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\n\t\t\treturn {\n\t\t\t\tdisplayName: externalInformation.displayname || '',\n\t\t\t\t...(externalInformation.avatar_url\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tavatarUrl: externalInformation.avatar_url,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),",
            "newUser": "\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tawait this.bridgeInstance.provisionUser(newUser, { name, ...(avatarUrl ? { url: avatarUrl } : {}) });",
            "messageId": "\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },",
            "mxcUrl": "\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\n\t\t\treturn mxcUrl;\n\t\t} catch (e: any) {",
            "knownVideoMimeTypes": "\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\n\t\tif (knownImageMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.IMAGE;\n\t\t}\n\t\tif (knownAudioMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.AUDIO;\n\t\t}\n\t\tif (knownVideoMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.VIDEO;\n\t\t}\n\t\treturn MatrixEnumSendMessageType.FILE;\n\t}\n\n\tpublic async uploadContent(\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\toptions?: { name?: string; type?: string },",
            "roomState": "\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_TOPIC_CHANGED) as MatrixEventRoomTopicChanged)?.content\n\t\t\t\t?.topic;\n\t\t} catch (error) {",
            "event": "\t\tconst registrationFile = this.internalSettings.generateRegistrationFileObject();\n\t\tconst registrationFile = this.internalSettings.generateRegistrationFileObject();\n\n\t\tthis.bridgeInstance = new Bridge({\n\t\t\thomeserverUrl: this.internalSettings.getHomeServerUrl(),\n\t\t\tdomain: this.internalSettings.getHomeServerDomain(),\n\t\t\tregistration: AppServiceRegistration.fromObject(this.convertRegistrationFileToMatrixFormat(registrationFile)),\n\t\t\tdisableStores: true,\n\t\t\tcontroller: {\n\t\t\t\tonEvent: (request) => {\n\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t},\n\t\t\t\tonLog: (line, isError) => {\n\t\t\t\t\tconsole.log(line, isError);\n\t\t\t\t},\n\t\t\t\t...(this.internalSettings.generateRegistrationFileObject().enableEphemeralEvents\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tonEphemeralEvent: (request) => {\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),"
        },
        "depth_rank": 8
    },
    {
        "file": "to-internal-parser-formatter.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/converters/room/to-internal-parser-formatter.ts",
        "code": {
            "finalFormattedMessage": "\tconst formattedMessage = convertMarkdownToHTML(message);\n\tconst formattedMessage = convertMarkdownToHTML(message);\n\tconst finalFormattedMessage = convertMarkdownToHTML(\n\tconst finalFormattedMessage = convertMarkdownToHTML(\n\t\tawait toExternalMessageFormat({\n\t\t\tmessage,\n\t\t\texternalRoomId,\n\t\t\thomeServerDomain,\n\t\t}),\n\t);\n\n\tconst { formatted_body: formattedBody } = RichReply.createFor(\n\tconst { formatted_body: formattedBody } = RichReply.createFor("
        },
        "depth_rank": 10
    },
    {
        "file": "RoomReceiver.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/converters/room/RoomReceiver.ts",
        "code": {
            "tryToExtractExternalRoomNameFromTheRoomState": "const convertExternalJoinRuleToInternalRoomType = (matrixJoinRule: MatrixRoomJoinRules, matrixRoomIsDirect = false): RoomType => {\nconst convertExternalJoinRuleToInternalRoomType = (matrixJoinRule: MatrixRoomJoinRules, matrixRoomIsDirect = false): RoomType => {\n\tif (matrixRoomIsDirect) {\n\t\treturn RoomType.DIRECT_MESSAGE;\n\t}\n\tconst mapping: Record<string, RoomType> = {\n\tconst mapping: Record<string, RoomType> = {\n\t\t[MatrixRoomJoinRules.JOIN]: RoomType.CHANNEL,\n\t\t[MatrixRoomJoinRules.INVITE]: RoomType.PRIVATE_GROUP,\n\t};\n\n\treturn mapping[matrixJoinRule] || RoomType.CHANNEL;\n};\n\nconst tryToExtractExternalRoomNameFromTheRoomState = (roomState: AbstractMatrixEvent[] = []): { externalRoomName?: string } => {\nconst tryToExtractExternalRoomNameFromTheRoomState = (roomState: AbstractMatrixEvent[] = []): { externalRoomName?: string } => {\n\tif (roomState.length === 0) {\n\t\treturn {};",
            "externalRoomName": "\tconst externalRoomName = (\n\tconst externalRoomName = (\n\t\troomState.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_NAME_CHANGED) as MatrixEventRoomNameChanged\n\t)?.content?.name;\n\n\treturn {\n\t\t...(externalRoomName ? { externalRoomName: removeExternalSpecificCharsFromExternalIdentifier(externalRoomName) } : {}),",
            "tryToExtractAndConvertRoomTypeFromTheRoomState": "const tryToExtractAndConvertRoomTypeFromTheRoomState = (\nconst tryToExtractAndConvertRoomTypeFromTheRoomState = (\n\troomState: AbstractMatrixEvent[] = [],\n\tmatrixRoomIsDirect = false,\n): { roomType?: RoomType } => {\n\tif (roomState.length === 0) {\n\t\treturn {};",
            "externalRoomJoinRule": "\tconst externalRoomJoinRule = (\n\tconst externalRoomJoinRule = (\n\t\troomState.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_JOIN_RULES_CHANGED) as MatrixEventRoomJoinRulesChanged\n\t)?.content?.join_rule;\n\n\treturn {\n\t\t...(externalRoomJoinRule ? { roomType: convertExternalJoinRuleToInternalRoomType(externalRoomJoinRule, matrixRoomIsDirect) } : {}),",
            "onlyRolesAddedToDefaultUsers": "const convertNumericalPowerLevelToInternalRole = (powerLevel: number): ROCKET_CHAT_FEDERATION_ROLES | undefined => {\nconst convertNumericalPowerLevelToInternalRole = (powerLevel: number): ROCKET_CHAT_FEDERATION_ROLES | undefined => {\n\tconst mapping: Record<number, ROCKET_CHAT_FEDERATION_ROLES | undefined> = {\n\tconst mapping: Record<number, ROCKET_CHAT_FEDERATION_ROLES | undefined> = {\n\t\t[MATRIX_POWER_LEVELS.USER]: undefined,\n\t\t[MATRIX_POWER_LEVELS.MODERATOR]: ROCKET_CHAT_FEDERATION_ROLES.MODERATOR,\n\t\t[MATRIX_POWER_LEVELS.ADMIN]: ROCKET_CHAT_FEDERATION_ROLES.OWNER,\n\t};\n\n\tif (mapping[powerLevel]) {\n\t\treturn mapping[powerLevel];\n\t}\n\n\tif (powerLevel <= MATRIX_POWER_LEVELS.USER) {\n\t\treturn;\n\t}\n\tif (powerLevel > MATRIX_POWER_LEVELS.USER && powerLevel <= MATRIX_POWER_LEVELS.MODERATOR) {\n\t\treturn ROCKET_CHAT_FEDERATION_ROLES.MODERATOR;\n\t}\n\treturn ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n};\n\nconst onlyRolesAddedToDefaultUsers = (previousRolesState: { [key: string]: number }, externalUserId: string): boolean =>\nconst onlyRolesAddedToDefaultUsers = (previousRolesState: { [key: string]: number }, externalUserId: string): boolean =>",
            "verifyIfNewRolesWereAddedForDefaultUsers": "const verifyIfNewRolesWereAddedForDefaultUsers = (\nconst verifyIfNewRolesWereAddedForDefaultUsers = (\n\tcurrentRolesState: { [key: string]: number },",
            "isCurrentRoleAnOwner": "\t\t\tconst isCurrentRoleAnOwner =\n\t\t\tconst isCurrentRoleAnOwner =\n\t\t\t\tconvertNumericalPowerLevelToInternalRole(currentRolesState[externalUserId]) === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\t\texternalRolesChangesForDefaultUsers[externalUserId] = isCurrentRoleAnOwner\n\t\t\t\t? [{ action: 'add', role: ROCKET_CHAT_FEDERATION_ROLES.OWNER }]",
            "createExternalRolesChangesActions": "const createExternalRolesChangesActions = (\nconst createExternalRolesChangesActions = (\n\tcurrentRolesState: { [key: string]: number } = {},",
            "isDowngradingTheRole": "\tconst changesInRolesBasedOnPreviousState = Object.keys(previousRolesState).reduce((externalRolesChangesByUser, externalUserId) => {\n\tconst changesInRolesBasedOnPreviousState = Object.keys(previousRolesState).reduce((externalRolesChangesByUser, externalUserId) => {\n\t\tconst currentPowerLevel = currentRolesState[externalUserId];\n\t\tconst currentPowerLevel = currentRolesState[externalUserId];\n\t\tconst previousPowerLevel = previousRolesState[externalUserId];\n\t\tconst previousPowerLevel = previousRolesState[externalUserId];\n\t\tconst convertedPreviousExternalRole = convertNumericalPowerLevelToInternalRole(previousPowerLevel);\n\t\tconst convertedPreviousExternalRole = convertNumericalPowerLevelToInternalRole(previousPowerLevel);\n\t\tconst convertedCurrentExternalRole = convertNumericalPowerLevelToInternalRole(currentPowerLevel);\n\t\tconst convertedCurrentExternalRole = convertNumericalPowerLevelToInternalRole(currentPowerLevel);\n\t\tconst wasPreviousRoleAnOwner = convertedPreviousExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst wasPreviousRoleAnOwner = convertedPreviousExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleAnOwner = convertedCurrentExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleAnOwner = convertedCurrentExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleADefault = currentPowerLevel === undefined;\n\t\tconst isCurrentRoleADefault = currentPowerLevel === undefined;\n\t\tconst isStillTheSameRole = currentPowerLevel === previousPowerLevel;\n\t\tconst isStillTheSameRole = currentPowerLevel === previousPowerLevel;\n\t\tconst isDowngradingTheRole = currentPowerLevel < previousPowerLevel;\n\t\tconst isDowngradingTheRole = currentPowerLevel < previousPowerLevel;\n\t\tif (isCurrentRoleADefault) {\n\t\t\texternalRolesChangesByUser[externalUserId] = wasPreviousRoleAnOwner\n\t\t\t\t? [{ action: 'remove', role: ROCKET_CHAT_FEDERATION_ROLES.OWNER }]",
            "getInviteesFromRoomState": "const getInviteesFromRoomState = (\nconst getInviteesFromRoomState = (\n\troomState: AbstractMatrixEvent[] = [],\n): {\n\texternalInviteeId: string;\n\tnormalizedInviteeId: string;\n\tinviteeUsernameOnly: string;\n}[] => {",
            "extractAllInviteeIdsWhenDM": "\tconst inviteesFromRoomState = (\n\tconst inviteesFromRoomState = (\n\t\troomState?.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_CREATED) as MatrixEventRoomCreated\n\t)?.content.inviteesExternalIds;\n\tif (inviteesFromRoomState) {\n\t\treturn inviteesFromRoomState.map((inviteeExternalId) => ({\n\t\t\texternalInviteeId: inviteeExternalId,\n\t\t\tnormalizedInviteeId: removeExternalSpecificCharsFromExternalIdentifier(inviteeExternalId),\n\t\t\tinviteeUsernameOnly: formatExternalUserIdToInternalUsernameFormat(inviteeExternalId),\n\t\t}));\n\t}\n\treturn [];\n};\n\nconst extractAllInviteeIdsWhenDM = (\nconst extractAllInviteeIdsWhenDM = (\n\texternalEvent: MatrixEventRoomMembershipChanged,\n): {\n\texternalInviteeId: string;\n\tnormalizedInviteeId: string;\n\tinviteeUsernameOnly: string;\n}[] => {"
        },
        "depth_rank": 10
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/messages/service.ts",
        "code": {
            "result": "\t\tconst result = await Messages.createWithTypeRoomIdMessageUserAndUnread(\n\t\tconst result = await Messages.createWithTypeRoomIdMessageUserAndUnread(\n\t\t\ttype,\n\t\t\trid,\n\t\t\tmessage,\n\t\t\t{ _id: userId, username, name },"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/calendar/service.ts",
        "code": {
            "updateResult": "\t\t\tconst insertResult = await CalendarEvent.insertOne({\n\t\t\tconst insertResult = await CalendarEvent.insertOne({\n\t\t\t\tuid,\n\t\t\t\tnotificationSent: false,\n\t\t\t\t...updateData,\n\t\t\t});\n\n\t\t\tawait this.setupNextNotification();\n\t\t\treturn insertResult.insertedId;\n\t\t}\n\n\t\tconst updateResult = await CalendarEvent.updateEvent(event._id, updateData);\n\t\tconst updateResult = await CalendarEvent.updateEvent(event._id, updateData);\n\t\tif (updateResult.modifiedCount > 0) {\n\t\t\tawait this.setupNextNotification();\n\t\t}\n\n\t\treturn event._id;\n\t}\n\n\tpublic async get(eventId: ICalendarEvent['_id']): Promise<ICalendarEvent | null> {\n\t\treturn CalendarEvent.findOne({ _id: eventId });"
        },
        "depth_rank": 6
    },
    {
        "file": "service.ts",
        "path": "../Rocket.Chat/apps/meteor/server/services/meteor/service.ts",
        "code": {
            "records": "\t\t\tconst records = Promise.await(\n\t\t\tconst records = Promise.await(\n\t\t\t\tmongo\n\t\t\t\t\t.rawCollection(collectionName)\n\t\t\t\t\t.find(selector, {\n\t\t\t\t\t\t...(options.projection || options.fields ? { projection: options.projection || options.fields } : {}),",
            "tokens": "\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);\n\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);",
            "user": "\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "watchDb.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/watchDb.ts",
        "code": {
            "watcher": "const watcher = new DatabaseWatcher({ db, _oplogHandle: (mongo as any)._oplogHandle, metrics, logger: Logger });\nconst watcher = new DatabaseWatcher({ db, _oplogHandle: (mongo as any)._oplogHandle, metrics, logger: Logger });"
        },
        "depth_rank": 5
    },
    {
        "file": "initialData.js",
        "path": "../Rocket.Chat/apps/meteor/server/startup/initialData.js",
        "code": {
            "exists": "\t\tconst exists = await Rooms.findOneById('GENERAL', { projection: { _id: 1 } });\n\t\tconst exists = await Rooms.findOneById('GENERAL', { projection: { _id: 1 } });",
            "id": "\t\t\tconst id = await Users.create(adminUser);\n\t\t\tconst id = await Users.create(adminUser);\n\n\t\t\tawait Accounts.setPasswordAsync(id, process.env.ADMIN_PASS);\n\n\t\t\tawait addUserRolesAsync(id, ['admin']);\n\t\t} else {",
            "oldestUser": "\t\tconst oldestUser = await Users.getOldest({ projection: { _id: 1, username: 1, name: 1 } });\n\t\tconst oldestUser = await Users.getOldest({ projection: { _id: 1, username: 1, name: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "serverRunning.js",
        "path": "../Rocket.Chat/apps/meteor/server/startup/serverRunning.js",
        "code": {
            "function": "const exitIfNotBypassed = (ignore, errorCode = 1) => {\nconst exitIfNotBypassed = (ignore, errorCode = 1) => {\n\tif (typeof ignore === 'string' && ['yes', 'true'].includes(ignore.toLowerCase())) {\n\t\treturn;\n\t}\n\n\tprocess.exit(errorCode);\n};\n\nconst skipMongoDbDeprecationCheck = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_CHECK).toLowerCase());\nconst skipMongoDbDeprecationCheck = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_CHECK).toLowerCase());\nconst skipMongoDbDeprecationBanner = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_BANNER).toLowerCase());\nconst skipMongoDbDeprecationBanner = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_BANNER).toLowerCase());\n\nMeteor.startup(async function () {\nMeteor.startup(async function () {\n\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = await getMongoInfo();\n\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = await getMongoInfo();"
        },
        "depth_rank": 5
    },
    {
        "file": "localServices.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/localServices.ts",
        "code": {
            "broker": "const broker = new LocalBroker();\nconst broker = new LocalBroker();\n\nbroker.onBroadcast((eventName: string, args: unknown[]) => {\n\tStreamerCentral.emit('broadcast', 'local', 'broadcast', [{ eventName, args }]);"
        },
        "depth_rank": 5
    },
    {
        "file": "callbacks.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/callbacks.ts",
        "code": {
            "stopTimer": "\t\tconst start = performance.now();\n\t\tconst start = performance.now();\n\n\t\tconst stopTimer = metrics.rocketchatCallbacks.startTimer({ hook, callback: id });\n\t\tconst stopTimer = metrics.rocketchatCallbacks.startTimer({ hook, callback: id });"
        },
        "depth_rank": 5
    },
    {
        "file": "v277.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/migrations/v277.ts",
        "code": {
            "oldSettings": "\t\tconst oldSettings = await Settings.findOne({ _id: 'email_style' });\n\t\tconst oldSettings = await Settings.findOne({ _id: 'email_style' });"
        },
        "depth_rank": 6
    },
    {
        "file": "v290.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/migrations/v290.ts",
        "code": {
            "currentPriorities": "\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tawait LivechatPriority.deleteMany({});"
        },
        "depth_rank": 6
    },
    {
        "file": "v295.ts",
        "path": "../Rocket.Chat/apps/meteor/server/startup/migrations/v295.ts",
        "code": {
            "ldapSyncInterval": "\t\tconst oldLdapDefault = 'Every 24 hours';\n\t\tconst oldLdapDefault = 'Every 24 hours';\n\t\tconst oldCrowdDefault = 'Every 60 mins';\n\t\tconst oldCrowdDefault = 'Every 60 mins';\n\n\t\tconst newLdapDefault = 'every_24_hours';\n\t\tconst newLdapDefault = 'every_24_hours';\n\t\tconst newCrowdDefault = 'every_1_hours';\n\t\tconst newCrowdDefault = 'every_1_hours';\n\n\t\tconst ldapSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('LDAP_Background_Sync_Interval', {\n\t\tconst ldapSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('LDAP_Background_Sync_Interval', {\n\t\t\tprojection: { value: 1 },",
            "crowdSyncInterval": "\t\tconst crowdSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('CROWD_Sync_Interval', { projection: { value: 1 } });\n\t\tconst crowdSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('CROWD_Sync_Interval', { projection: { value: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "Statistics.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Statistics.ts",
        "code": {
            "records": "\t\tconst records = await this.find(\n\t\tconst records = await this.find(\n\t\t\t{},"
        },
        "depth_rank": 6
    },
    {
        "file": "NpsVote.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/NpsVote.ts",
        "code": {
            "cursor": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\n\t\treturn cursor.sort({ ts: 1 }).limit(1000);",
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tfindByNpsId(npsId: string, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tsave(vote: Omit<INpsVote, '_id' | '_updatedAt'>): Promise<UpdateResult> {\n\t\tconst { npsId, identifier } = vote;\n\t\tconst { npsId, identifier } = vote;"
        },
        "depth_rank": 6
    },
    {
        "file": "MatrixBridgedUser.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/MatrixBridgedUser.ts",
        "code": {
            "bridgedUser": "\t\tconst bridgedUser = await this.findOne({ mui: externalUserId });\n\t\tconst bridgedUser = await this.findOne({ mui: externalUserId });"
        },
        "depth_rank": 6
    },
    {
        "file": "Banners.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Banners.ts",
        "code": {
            "query": "\t\tconst today = new Date();\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\tconst query = {\n\t\t\t...(bannerId && { _id: bannerId }),"
        },
        "depth_rank": 6
    },
    {
        "file": "BaseUploadModel.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/BaseUploadModel.ts",
        "code": {
            "filter": "\t\tconst filter = { _id: fileId };\n\t\tconst filter = { _id: fileId };"
        },
        "depth_rank": 6
    },
    {
        "file": "VideoConference.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/VideoConference.ts",
        "code": {
            "1": "\t\t\t\t\t\t\tproviderData: 1 as const,\n\t\t\t\t\t\t\tproviderData: 1 as const,\n\t\t\t\t\t\t},\n\t\t\t\t  }),\n\t\t});\n\t}\n\n\tpublic async addUserById(\n\t\tcallId: string,\n\t\tuser: Required<Pick<IUser, '_id' | 'name' | 'username' | 'avatarETag'>> & { ts?: Date },"
        },
        "depth_rank": 6
    },
    {
        "file": "Users.js",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Users.js",
        "code": {
            "Move": "\tconstructor(db, trash) {\n\tconstructor(db, trash) {\n\t\tsuper(db, 'users', trash, {\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\n\t\tthis.defaultFields = {\n\t\t\t__rooms: 0,\n\t\t};\n\t}\n\n\t// Move index from constructor to here\n\t// Move index from constructor to here\n\tmodelIndexes() {\n\t\treturn [\n\t\t\t{ key: { __rooms: 1 }, sparse: 1 },",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "orStmt": "\t\tconst orStmt = (searchFields || []).reduce(function (acc, el) {\n\t\tconst orStmt = (searchFields || []).reduce(function (acc, el) {\n\t\t\tacc.push({ [el.trim()]: termRegex });",
            "result": "\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync setLastRoutingTime(userId) {\n\t\tconst result = await this.findOneAndUpdate(\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{ _id: userId },",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\t_pendingAvatarUrl: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateCustomFieldsById(userId, customFields) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },",
            "user": "\t\tconst user = {\n\t\tconst user = {\n\t\t\tcreatedAt: new Date(),\n\t\t\tavatarOrigin: 'none',\n\t\t};\n\n\t\tObject.assign(user, data);\n\n\t\treturn this.insertOne(user);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\treturn this.deleteOne({ _id });",
            "values": "\t\tconst values = {};\n\t\tconst values = {};",
            "settingsObject": "\t\tconst settingsObject = Object.assign(\n\t\tconst settingsObject = Object.assign(\n\t\t\t{},",
            "setData": "\t\tconst setData = {};\n\t\tconst setData = {};",
            "unsetData": "\t\tconst unsetData = {};\n\t\tconst unsetData = {};",
            "update": "\t\tconst update = {};\n\t\tconst update = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "Permissions.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Permissions.ts",
        "code": {
            "exists": "\t\tconst exists = await this.findOneById<Pick<IPermission, '_id'>>(id, { projection: { _id: 1 } });\n\t\tconst exists = await this.findOneById<Pick<IPermission, '_id'>>(id, { projection: { _id: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "Rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Rooms.ts",
        "code": {
            "aggregationParams": "\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\treturn this.col.aggregate<IChannelsWithNumberOfMessagesBetweenDate>(aggregationParams, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tcountChannelsWithNumberOfMessagesBetweenDate(params: {\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}): AggregationCursor<{ total: number }> {",
            "room": "\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\treturn this.findOneByName(name, options);\n\t}\n\n\tfindOneByName(name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.col.findOne({ name }, options);",
            "asc": "\t\tconst asc = true;\n\t\tconst asc = true;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync countFederatedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ federated: true });",
            "data": "\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);",
            "ids": "\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);",
            "nameRegex": "\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\tname: NonNullable<IRoom['name']>,\n\t\toptions: FindOptions<IRoom> = {},"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatInquiry.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/LivechatInquiry.ts",
        "code": {
            "query": "\t\tconst query = { rid };\n\t\tconst query = { rid };"
        },
        "depth_rank": 6
    },
    {
        "file": "FederationEvents.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/FederationEvents.ts",
        "code": {
            "previousEvents": "\t\t\tconst previousEvents = await this.find({ context: contextQuery, hasChildren: false }).toArray();\n\t\t\tconst previousEvents = await this.find({ context: contextQuery, hasChildren: false }).toArray();",
            "genesisEvent": "\t\tconst genesisEvent = await this.findOne({ context: contextQuery, type: eventTypes.GENESIS });\n\t\tconst genesisEvent = await this.findOne({ context: contextQuery, type: eventTypes.GENESIS });",
            "existingEvent": "\t\tconst existingEvent = await this.findOne({ _id: event._id });\n\t\tconst existingEvent = await this.findOne({ _id: event._id });",
            "parentIds": "\t\t\tconst parentIds = parents.map(({ _id }) => _id);\n\t\t\tconst parentIds = parents.map(({ _id }) => _id);",
            "latestEvents": "\t\t\t\tconst latestEvents = await this.find({ context: contextQuery, origin }, { projection: { _id: 1 } }).toArray();\n\t\t\t\tconst latestEvents = await this.find({ context: contextQuery, origin }, { projection: { _id: 1 } }).toArray();",
            "latestEventIds": "\t\t\t\tconst latestEventIds = latestEvents.map(({ _id }) => _id);\n\t\t\t\tconst latestEventIds = latestEvents.map(({ _id }) => _id);",
            "event": "\t\tconst event = await this.findOne({ context: contextQuery, _id: eventId });\n\t\tconst event = await this.findOne({ context: contextQuery, _id: eventId });"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatDepartmentAgents.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartmentAgents.ts",
        "code": {
            "query": "\t\tconst query = { agentId: userId };\n\t\tconst query = { agentId: userId };",
            "agent": "\t\tconst agent = await this.col.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tconst agent = await this.col.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });",
            "bot": "\t\tconst bot = await this.col.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tconst bot = await this.col.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });"
        },
        "depth_rank": 6
    },
    {
        "file": "Messages.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Messages.ts",
        "code": {
            "queryResult": "\t\tconst queryResult = await this.col\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "false": "\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\t\tt: type,\n\t\t\trid,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tgroupable: false as const,\n\t\t\tgroupable: false as const,\n\t\t\t...(unread && { unread: true }),",
            "messagesToDelete": "\t\t\tconst count = (await this.deleteMany(query)).deletedCount;\n\t\t\tconst count = (await this.deleteMany(query)).deletedCount;\n\n\t\t\tif (count) {\n\t\t\t\t// decrease message count\n\t\t\t\tawait Rooms.decreaseMessageCountById(rid, count);\n\t\t\t}\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst messagesToDelete = (\n\t\tconst messagesToDelete = (\n\t\t\tawait this.find(query, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tlimit,\n\t\t\t}).toArray()\n\t\t).map(({ _id }) => _id);",
            "msg": "\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });\n\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "MatrixBridgedRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/MatrixBridgedRoom.ts",
        "code": {
            "bridgedRoom": "\t\tconst bridgedRoom = await this.findOne({ mri: externalRoomId });\n\t\tconst bridgedRoom = await this.findOne({ mri: externalRoomId });"
        },
        "depth_rank": 6
    },
    {
        "file": "WebdavAccounts.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/WebdavAccounts.ts",
        "code": {
            "query": "\t\tconst query = { userId };\n\t\tconst query = { userId };"
        },
        "depth_rank": 6
    },
    {
        "file": "Roles.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Roles.ts",
        "code": {
            "role": "\t\tconst role = {\n\t\tconst role = {\n\t\t\tname,\n\t\t\tscope,\n\t\t\tdescription,\n\t\t\tprotected: protectedRole,\n\t\t\tmandatory2fa,\n\t\t};\n\n\t\treturn this.insertOne(role);\n\t}\n\n\tasync canAddUserToRole(uid: IUser['_id'], roleId: IRole['_id'], scope?: IRoom['_id']): Promise<boolean> {\n\t\tif (process.env.NODE_ENV === 'development' && (scope === 'Users' || scope === 'Subscriptions')) {\n\t\t\tthrow new Error('Roles.canAddUserToRole method received a role scope instead of a scope value.');\n\t\t}\n\n\t\tconst role = await this.findOne({ _id: roleId }, { projection: { scope: 1 } });\n\t\tconst role = await this.findOne({ _id: roleId }, { projection: { scope: 1 } });",
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tscope,\n\t\t};\n\n\t\treturn this.find(query, options || {});"
        },
        "depth_rank": 6
    },
    {
        "file": "Sessions.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Sessions.ts",
        "code": {
            "getGroupSessionsByHour": "const getGroupSessionsByHour = (\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,",
            "queryArray": "\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\n\t\tconst [\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],",
            "day": "\t\tconst day = date.getDate();\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateResult | undefined> {\n\t\t// TODO: check if we should create a session when there is no loginToken or not\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\t\tconst { year, month, day, sessionId, instanceId } = data;",
            "now": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },",
            "session": "\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });\n\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "FederationKeys.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/FederationKeys.ts",
        "code": {
            "keyResource": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<FederationKey>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<FederationKey>>) {\n\t\tsuper(db, 'federation_keys', trash);\n\t}\n\n\tasync getKey(type: FederationKey['type']): Promise<string | null> {\n\t\tconst keyResource = await this.findOne({ type });\n\t\tconst keyResource = await this.findOne({ type });",
            "key": "\t\tconst key = new NodeRSA({ b: 512 });\n\t\tconst key = new NodeRSA({ b: 512 });"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatRooms.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/LivechatRooms.ts",
        "code": {
            "move": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\t// move indexes from constructor to here using IndexDescription as type\n\t// move indexes from constructor to here using IndexDescription as type\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { open: 1 }, sparse: true },",
            "params": "\t\tconst params = [match, lookup, unwind, group, project];\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();",
            "room": "\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });\n\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });",
            "trimmedTopic": "\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tif (trimmedTopic.length) {\n\t\t\t\tsetData.topic = trimmedTopic;\n\t\t\t} else {",
            "livechatCount": "\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });"
        },
        "depth_rank": 6
    },
    {
        "file": "Settings.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Settings.ts",
        "code": {
            "setting": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISetting>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISetting>>) {\n\t\tsuper(db, 'settings', trash);\n\t}\n\n\tasync getValueById(_id: string): Promise<ISetting['value'] | undefined> {\n\t\tconst setting = await this.findOne<Pick<ISetting, 'value'>>({ _id }, { projection: { value: 1 } });\n\t\tconst setting = await this.findOne<Pick<ISetting, 'value'>>({ _id }, { projection: { value: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatDepartment.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartment.ts",
        "code": {
            "query": "\t\tconst query = { businessHourId, enabled: true };\n\t\tconst query = { businessHourId, enabled: true };",
            "dep": "\t\tconst promises = departments.map(async (departmentId) => {\n\t\tconst promises = departments.map(async (departmentId) => {\n\t\t\tconst dep = await this.findOneById(departmentId, {\n\t\t\tconst dep = await this.findOneById(departmentId, {\n\t\t\t\tprojection: { enabled: 1 },",
            "saveResult": "\t\t\tconst saveResult = await LivechatDepartmentAgents.saveAgent({\n\t\t\tconst saveResult = await LivechatDepartmentAgents.saveAgent({\n\t\t\t\tagentId,\n\t\t\t\tdepartmentId,\n\t\t\t\tusername,\n\t\t\t\tdepartmentEnabled,\n\t\t\t\tcount: 0,\n\t\t\t\torder: 0,\n\t\t\t});\n\n\t\t\tif (saveResult.upsertedId) {\n\t\t\t\tawait incNumAgents(departmentId, 1);\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tupdateById(_id: string, update: Partial<ILivechatDepartment>): Promise<Document | UpdateResult> {\n\t\treturn this.updateOne({ _id }, update);"
        },
        "depth_rank": 6
    },
    {
        "file": "Subscriptions.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/Subscriptions.ts",
        "code": {
            "Add": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\t\tsuper(db, 'subscription', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\t// Add all indexes from constructor to here\n\t\t// Add all indexes from constructor to here\n\t\treturn [\n\t\t\t{ key: { E2EKey: 1 }, unique: true, sparse: true },",
            "subscriptions": "\t\tconst subscriptions = await this.find(query, { projection: { 'u._id': 1 } }).toArray();\n\t\tconst subscriptions = await this.find(query, { projection: { 'u._id': 1 } }).toArray();",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },",
            "orStatement": "\t\tconst orStatement = searchFields.reduce(function (acc, el) {\n\t\tconst orStatement = searchFields.reduce(function (acc, el) {\n\t\t\tacc.push({ [el.trim()]: termRegex });",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "customFields": "\t\tconst customFields = cfields || {};\n\t\tconst customFields = cfields || {};",
            "subscription": "\t\tconst subscription = {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),"
        },
        "depth_rank": 6
    },
    {
        "file": "BaseRaw.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/BaseRaw.ts",
        "code": {
            "indexes": "\t\tconst indexes = this.modelIndexes();\n\t\tconst indexes = this.modelIndexes();\n\t\tif (options?._updatedAtIndexOptions) {\n\t\t\tindexes?.push({ ...options._updatedAtIndexOptions, key: { _updatedAt: 1 } });",
            "removeKeys": "\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tif (optionsDef?.projection === undefined) {\n\t\t\treturn optionsDef;\n\t\t}\n\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst keys = Object.keys(projection);\n\t\tconst keys = Object.keys(projection);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tif (keys.length > removeKeys.length) {\n\t\t\tremoveKeys.forEach((key) => delete projection[key]);\n\t\t}\n\n\t\treturn {\n\t\t\t...optionsDef,\n\t\t\tprojection,\n\t\t};\n\t}\n\n\tprivate ensureDefaultFields<P extends Document>(options: FindOptions<P>): FindOptions<P>;\n\n\tprivate ensureDefaultFields<P extends Document>(\n\t\toptions?: FindOptions<P> & { fields?: FindOptions<P>['projection'] },",
            "fields": "\t\tconst fields = { ...deprecatedFields, ...projection };\n\t\tconst fields = { ...deprecatedFields, ...projection };",
            "optionsDef": "\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\tif (optionsDef) {\n\t\t\treturn this.col.findOne(q, optionsDef);\n\t\t}\n\t\treturn this.col.findOne(q);\n\t}\n\n\tfind(query?: Filter<T>): FindCursor<ResultFields<T, C>>;\n\n\tfind<P extends Document = T>(query: Filter<T>, options?: FindOptions<P extends T ? T : P>): FindCursor<P>;\n\n\tfind<P extends Document>(\n\t\tquery: Filter<T> = {},",
            "oid": "\t\t\tconst oid = new ObjectId();\n\t\t\tconst oid = new ObjectId();\n\t\t\tdoc = { _id: oid.toHexString(), ...doc };",
            "doc": "\t\tconst doc = await this.findOne(filter);\n\t\tconst doc = await this.findOne(filter);\n\n\t\tif (doc) {\n\t\t\tconst { _id, ...record } = doc;\n\t\t\tconst { _id, ...record } = doc;",
            "await": "\t\tconst cursor = this.find(filter);\n\t\tconst cursor = this.find(filter);\n\n\t\tconst ids: T['_id'][] = [];\n\t\tconst ids: T['_id'][] = [];\n\t\tfor await (const doc of cursor) {\n\t\tfor await (const doc of cursor) {\n\t\t\tconst { _id, ...record } = doc as T;\n\t\t\tconst { _id, ...record } = doc as T;"
        },
        "depth_rank": 6
    },
    {
        "file": "LivechatVisitors.ts",
        "path": "../Rocket.Chat/apps/meteor/server/models/raw/LivechatVisitors.ts",
        "code": {
            "livechatCount": "\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });",
            "query": "\t\tconst query = Object.assign(\n\t\tconst query = Object.assign(\n\t\t\t{},",
            "user": "\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });\n\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });",
            "saveEmail": "\t\tconst saveEmail = ([] as string[])\n\t\tconst saveEmail = ([] as string[])\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email?.trim())\n\t\t\t.map((email) => ({ address: email }));",
            "savePhone": "\t\tconst savePhone = ([] as string[])\n\t\tconst savePhone = ([] as string[])\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone?.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));"
        },
        "depth_rank": 6
    },
    {
        "file": "loadHistory.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/loadHistory.ts",
        "code": {
            "room": "\t\tconst fromId = Meteor.userId();\n\t\tconst fromId = Meteor.userId();\n\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "browseChannels.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/browseChannels.ts",
        "code": {
            "getChannelsAndGroups": "const getChannelsAndGroups = async (\nconst getChannelsAndGroups = async (\n\tuser: IUser & { __rooms?: IRoom['_id'][] },",
            "publicTeamIds": "\tconst teams = await Team.getAllPublicTeams();\n\tconst teams = await Team.getAllPublicTeams();\n\tconst publicTeamIds = teams.map(({ _id }) => _id);\n\tconst publicTeamIds = teams.map(({ _id }) => _id);",
            "userTeamsIds": "\tconst userTeamsIds = (await Team.listTeamsBySubscriberUserId(user._id, { projection: { teamId: 1 } }))?.map(({ teamId }) => teamId) || [];\n\tconst userTeamsIds = (await Team.listTeamsBySubscriberUserId(user._id, { projection: { teamId: 1 } }))?.map(({ teamId }) => teamId) || [];",
            "userRooms": "\tconst userRooms = user.__rooms ?? [];\n\tconst userRooms = user.__rooms ?? [];\n\n\tconst { cursor, totalCount } = Rooms.findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(\n\tconst { cursor, totalCount } = Rooms.findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(",
            "teamIds": "\tconst [result, total] = await Promise.all([cursor.toArray(), totalCount]);\n\tconst [result, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\tconst teamIds = result.map(({ teamId }) => teamId).filter(isTruthy);\n\tconst teamIds = result.map(({ teamId }) => teamId).filter(isTruthy);",
            "teamsMains": "\tconst teamsMains = await Team.listByIds([...new Set(teamIds)], { projection: { _id: 1, name: 1 } });\n\tconst teamsMains = await Team.listByIds([...new Set(teamIds)], { projection: { _id: 1, name: 1 } });",
            "team": "\tconst results = result.map((room) => {\n\tconst results = result.map((room) => {\n\t\tif (room.teamId) {\n\t\t\tconst team = teamsMains.find((mainRoom) => mainRoom._id === room.teamId);\n\t\t\tconst team = teamsMains.find((mainRoom) => mainRoom._id === room.teamId);\n\t\t\tif (team) {\n\t\t\t\treturn { ...room, belongsTo: team.name };",
            "ids": "\tconst userSubs = await Subscriptions.findByUserId(user._id).toArray();\n\tconst userSubs = await Subscriptions.findByUserId(user._id).toArray();\n\tconst ids = userSubs.map((sub) => sub.rid);\n\tconst ids = userSubs.map((sub) => sub.rid);\n\tconst { cursor, totalCount } = Rooms.findPaginatedContainingNameOrFNameInIdsAsTeamMain(\n\tconst { cursor, totalCount } = Rooms.findPaginatedContainingNameOrFNameInIdsAsTeamMain(",
            "findUsers": "\tconst results = await Promise.all(\n\tconst results = await Promise.all(\n\t\t(\n\t\t\tawait cursor.toArray()\n\t\t).map(async (room) => ({\n\t\t\t...room,\n\t\t\troomsCount: await getChannelsCountForTeam(room.teamId),\n\t\t})),\n\t);\n\n\treturn {\n\t\ttotal: await totalCount,\n\t\tresults,\n\t};\n};\n\nconst findUsers = async ({\nconst findUsers = async ({\n\ttext,\n\tsort,\n\tpagination,\n\tworkspace,\n\tviewFullOtherUserInfo,\n}: {",
            "options": "\tconst searchFields =\n\tconst searchFields =\n\t\tworkspace === 'all' ? ['username', 'name', 'emails.address'] : settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\tconst options = {\n\tconst options = {\n\t\t...pagination,\n\t\tsort,\n\t\tprojection: {\n\t\t\tusername: 1,\n\t\t\tname: 1,\n\t\t\tnickname: 1,\n\t\t\tbio: 1,\n\t\t\tcreatedAt: 1,\n\t\t\t...(viewFullOtherUserInfo && { emails: 1 }),"
        },
        "depth_rank": 5
    },
    {
        "file": "channelsList.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/channelsList.ts",
        "code": {
            "roomIds": "\t\t\t\tconst roomIds = (await Subscriptions.findByTypeAndUserId('p', userId, { projection: { rid: 1 } }).toArray()).map((s) => s.rid);\n\t\t\t\tconst roomIds = (await Subscriptions.findByTypeAndUserId('p', userId, { projection: { rid: 1 } }).toArray()).map((s) => s.rid);"
        },
        "depth_rank": 5
    },
    {
        "file": "removeRoomOwner.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/removeRoomOwner.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.removeRolesFromMember(team._id, userId, ['owner']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: 'owner',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 5
    },
    {
        "file": "removeUserFromRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/removeUserFromRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, removedUser._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, removedUser._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 5
    },
    {
        "file": "registerUser.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/registerUser.ts",
        "code": {
            "userId": "\t\t\tconst userId = Accounts.insertUserDoc(\n\t\t\tconst userId = Accounts.insertUserDoc(\n\t\t\t\t{},",
            "reason": "\t\tconst reason = trim(formData.reason);\n\t\tconst reason = trim(formData.reason);\n\t\tif (manuallyApproveNewUsers && reason) {\n\t\t\tawait Users.setReason(userId, reason);\n\t\t}\n\n\t\ttry {\n\t\t\tAccounts.sendVerificationEmail(userId, userData.email);\n\t\t} catch (error) {"
        },
        "depth_rank": 5
    },
    {
        "file": "removeRoomModerator.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/removeRoomModerator.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.removeRolesFromMember(team._id, userId, ['moderator']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: 'moderator',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 5
    },
    {
        "file": "saveUserProfile.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/saveUserProfile.ts",
        "code": {
            "updatedUser": "\tconst updatedUser = await Users.findOneById(this.userId);\n\tconst updatedUser = await Users.findOneById(this.userId);\n\tawait Apps.triggerEvent(AppEvents.IPostUserUpdated, { user: updatedUser, previousUser: user });"
        },
        "depth_rank": 5
    },
    {
        "file": "requestDataDownload.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/requestDataDownload.ts",
        "code": {
            "tempFolder": "\t\tconst tempFolder = settings.get<string | undefined>('UserData_FileSystemPath')?.trim() || (await mkdtemp(join(tmpdir(), 'userData')));\n\t\tconst tempFolder = settings.get<string | undefined>('UserData_FileSystemPath')?.trim() || (await mkdtemp(join(tmpdir(), 'userData')));\n\t\tawait mkdir(tempFolder, { recursive: true });",
            "folderName": "\t\tconst folderName = path.join(tempFolder, id);\n\t\tconst folderName = path.join(tempFolder, id);\n\t\tawait mkdir(folderName, { recursive: true });",
            "assetsFolder": "\t\tconst assetsFolder = path.join(folderName, 'assets');\n\t\tconst assetsFolder = path.join(folderName, 'assets');\n\t\tawait mkdir(assetsFolder, { recursive: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "getPasswordPolicy.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/getPasswordPolicy.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ 'services.password.reset.token': params.token });\n\t\tconst user = await Users.findOne({ 'services.password.reset.token': params.token });"
        },
        "depth_rank": 5
    },
    {
        "file": "getUsersOfRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/getUsersOfRoom.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, broadcast: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, broadcast: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "getRoomNameById.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/getRoomNameById.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 5
    },
    {
        "file": "sendConfirmationEmail.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/sendConfirmationEmail.ts",
        "code": {
            "user": "\t\tconst email = to.trim();\n\t\tconst email = to.trim();\n\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "addRoomModerator.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/addRoomModerator.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.addRolesToMember(team._id, userId, ['moderator']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'added',\n\t\t\t_id: 'moderator',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: fromUser.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\n\t\tif (settings.get<boolean>('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 5
    },
    {
        "file": "createDirectMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/createDirectMessage.ts",
        "code": {
            "me": "\tconst me = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\tconst me = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });",
            "uids": "\t\t\tconst uids = (roomUsers as IUser[]).map(({ _id }) => _id).sort();\n\t\t\tconst uids = (roomUsers as IUser[]).map(({ _id }) => _id).sort();",
            "room": "\t\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(uids, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(uids, { projection: { _id: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "deleteUser.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/deleteUser.ts",
        "code": {
            "adminCount": "\t\tconst adminCount = await Users.col.countDocuments({ roles: 'admin' });\n\t\tconst adminCount = await Users.col.countDocuments({ roles: 'admin' });"
        },
        "depth_rank": 5
    },
    {
        "file": "sendForgotPasswordEmail.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/sendForgotPasswordEmail.ts",
        "code": {
            "user": "\t\tconst email = to.trim().toLowerCase();\n\t\tconst email = to.trim().toLowerCase();\n\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "addRoomOwner.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/addRoomOwner.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.addRolesToMember(team._id, userId, ['owner']);\n\t\t}\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'added',\n\t\t\t_id: 'owner',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 5
    },
    {
        "file": "unmuteUserInRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/unmuteUserInRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 5
    },
    {
        "file": "muteUserInRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/muteUserInRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 5
    },
    {
        "file": "roomNameExists.ts",
        "path": "../Rocket.Chat/apps/meteor/server/methods/roomNameExists.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });\n\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });"
        },
        "depth_rank": 5
    },
    {
        "file": "EmailInbox_Outgoing.ts",
        "path": "../Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Outgoing.ts",
        "code": {
            "t": "const getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\nconst getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\n\nconst language = settings.get<string>('Language') || 'en';\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => i18n.t(s, { lng: language });\nconst t = (s: string): string => i18n.t(s, { lng: language });",
            "function": "async function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\nasync function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\n\treturn inbox.smtp\n\t\t.sendMail({\n\t\t\tfrom: inbox.config.senderInfo\n\t\t\t\t? {\n\t\t\t\t\t\tname: inbox.config.senderInfo,\n\t\t\t\t\t\taddress: inbox.config.email,\n\t\t\t\t  }\n\t\t\t\t: inbox.config.email,\n\t\t\t...mail,\n\t\t})\n\t\t.then((info) => {\n\t\t\tlogger.info('Message sent: %s', info.messageId);\n\t\t\treturn info;\n\t\t})\n\t\t.catch(async (err) => {\n\t\t\tlogger.error({ msg: 'Error sending Email reply', err });",
            "buffer": "\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tif (buffer) {\n\t\t\tvoid sendEmail(\n\t\t\t\tinbox,\n\t\t\t\t{\n\t\t\t\t\tto: room.email?.replyTo,\n\t\t\t\t\tsubject: room.email?.subject,\n\t\t\t\t\ttext: message?.attachments?.[0].description || '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: buffer,\n\t\t\t\t\t\t\tcontentType: file.type,\n\t\t\t\t\t\t\tfilename: file.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinReplyTo: Array.isArray(room.email?.thread) ? room.email?.thread[0] : room.email?.thread,\n\t\t\t\t\treferences: ([] as string[]).concat(room.email?.thread || []),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmsgId: message._id,\n\t\t\t\t\tsender: message.u.username,\n\t\t\t\t\trid: message.rid,\n\t\t\t\t},\n\t\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\t\t}\n\n\t\tawait Messages.updateOne(\n\t\t\t{ _id: message._id },"
        },
        "depth_rank": 6
    },
    {
        "file": "EmailInbox_Incoming.ts",
        "path": "../Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Incoming.ts",
        "code": {
            "t": "const language = settings.get<string>('Language') || 'en';\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => i18n.t(s, { lng: language });\nconst t = (s: string): string => i18n.t(s, { lng: language });"
        },
        "depth_rank": 6
    },
    {
        "file": "EmailInbox.ts",
        "path": "../Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox.ts",
        "code": {
            "imap": "\t\t\tconst imap = new IMAPInterceptor(\n\t\t\tconst imap = new IMAPInterceptor(\n\t\t\t\t{\n\t\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\t\t...(emailInboxRecord.imap.secure\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\t\t\t\t\ttlsOptions: {\n\t\t\t\t\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {}),",
            "smtp": "\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });"
        },
        "depth_rank": 6
    },
    {
        "file": "notifications.module.ts",
        "path": "../Rocket.Chat/apps/meteor/server/modules/notifications/notifications.module.ts",
        "code": {
            "canAccess": "\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });",
            "roomParticipant": "\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\n\t\t\t\treturn {\n\t\t\t\t\troomParticipant: roomParticipant > 0,\n\t\t\t\t\troomType: room.t,\n\t\t\t\t\troomName: room.name,\n\t\t\t\t};\n\t\t\t} catch (error) {",
            "room": "\t\tthis.streamLivechatRoom.allowRead(async function (roomId, extraData) {\n\t\tthis.streamLivechatRoom.allowRead(async function (roomId, extraData) {\n\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\t\tprojection: { _id: 0, t: 1, v: 1 },",
            "function": "\t\t\tconst canAccess = await Authorization.canAccessRoomId(room._id, this.userId);\n\t\t\tconst canAccess = await Authorization.canAccessRoomId(room._id, this.userId);\n\n\t\t\treturn canAccess;\n\t\t});\n\n\t\tasync function canType({\n\t\tasync function canType({\n\t\t\tuserId,\n\t\t\tusername,\n\t\t\textraData,\n\t\t\trid,\n\t\t}: {",
            "subscriptions": "\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\t\t{ 'u._id': userId },"
        },
        "depth_rank": 6
    },
    {
        "file": "createModal.ts",
        "path": "../Rocket.Chat/apps/meteor/server/modules/core-apps/nps/createModal.ts",
        "code": {
            "language": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\n\treturn {\n\t\ttype,\n\t\ttriggerId,\n\t\tappId,\n\t\tview: {\n\t\t\tappId,\n\t\t\ttype: 'modal',\n\t\t\tid,\n\t\t\ttitle: {\n\t\t\t\ttype: 'plain_text',\n\t\t\t\ttext: i18n.t('We_appreciate_your_feedback', { lng: language }),"
        },
        "depth_rank": 7
    },
    {
        "file": "watchers.module.ts",
        "path": "../Rocket.Chat/apps/meteor/server/modules/watchers/watchers.module.ts",
        "code": {
            "getSettingCached": "\tconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\tconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });",
            "user": "\tconst getUserNameCached = mem(\n\tconst getUserNameCached = mem(\n\t\tasync (userId: string): Promise<string | undefined> => {\n\t\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });",
            "name": "\t\t\t\t\tconst UseRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\t\t\t\t\tconst UseRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\n\t\t\t\t\tif (UseRealName) {\n\t\t\t\t\t\tif (message.u?._id) {\n\t\t\t\t\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\t\t\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\tmessage.u.name = name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (message.mentions?.length) {\n\t\t\t\t\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\t\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\t\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\t\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\tmention.name = name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid broadcast('watch.messages', { clientAction, message });",
            "trash": "\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1 },",
            "subscription": "\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tconst subscription = trash || { _id: id };",
            "data": "\t\tconst data = eventData ?? (await LivechatPriority.findOne({ _id: id }));\n\t\tconst data = eventData ?? (await LivechatPriority.findOne({ _id: id }));",
            "room": "\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));",
            "history": "\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "streamer.module.ts",
        "path": "../Rocket.Chat/apps/meteor/server/modules/streamer/streamer.module.ts",
        "code": {
            "subByEventName": "\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fn === 'none' || fn === false) {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fn === 'logged') {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn Boolean(this.userId);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tallowRead(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowRead, 'allowRead')(eventName, fn);\n\t}\n\n\tallowWrite(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowWrite, 'allowWrite')(eventName, fn);\n\t}\n\n\tallowEmit(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowEmit, 'allowEmit')(eventName, fn);\n\t}\n\n\tprivate isAllowed(rules: IRules) {\n\t\treturn async (scope: IPublication, eventName: string, args: any): Promise<boolean | object> => {\n\t\t\tif (rules[eventName]) {\n\t\t\t\treturn rules[eventName].call(scope, eventName, ...args);\n\t\t\t}\n\n\t\t\treturn rules.__all__.call(scope, eventName, ...args);\n\t\t};\n\t}\n\n\tasync isReadAllowed(scope: IPublication, eventName: string, args: any): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowRead)(scope, eventName, args);\n\t}\n\n\tasync isEmitAllowed(scope: IPublication, eventName: string, ...args: any[]): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowEmit)(scope, eventName, args);\n\t}\n\n\tasync isWriteAllowed(scope: IPublication, eventName: string, args: any): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowWrite)(scope, eventName, args);\n\t}\n\n\taddSubscription(subscription: DDPSubscription, eventName: string): void {\n\t\tthis.subscriptions.add(subscription);\n\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName) || new Set();\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName) || new Set();\n\t\tsubByEventName.add(subscription);\n\n\t\tthis.subscriptionsByEventName.set(eventName, subByEventName);\n\t}\n\n\tremoveSubscription(subscription: DDPSubscription, eventName: string): void {\n\t\tthis.subscriptions.delete(subscription);\n\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName);\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName);\n\t\tif (subByEventName) {\n\t\t\tsubByEventName.delete(subscription);\n\t\t}\n\t}\n\n\tasync _publish(\n\t\tpublication: IPublication,\n\t\teventName: string,\n\t\toptions: boolean | { useCollection?: boolean; args?: any } = false,",
            "subscription": "\t\tconst subscription = {\n\t\tconst subscription = {\n\t\t\tsubscription: publication,\n\t\t\teventName,\n\t\t};\n\n\t\tthis.addSubscription(subscription, eventName);\n\n\t\tpublication.onStop(() => {\n\t\t\tthis.removeSubscription(subscription, eventName);\n\t\t});\n\n\t\t// DDPStreamer doesn't have this\n\t\tif (useCollection === true) {\n\t\t\t// Collection compatibility\n\t\t\tpublication._session.sendAdded(this.subscriptionName, 'id', {\n\t\t\t\teventName,\n\t\t\t});\n\t\t}\n\n\t\tpublication.ready();\n\n\t\tsuper.emit('_afterPublish', this, publication, eventName, options);\n\t}\n\n\tabstract registerPublication(\n\t\tname: string,\n\t\tfn: (eventName: string, options: boolean | { useCollection?: boolean; args?: any }) => Promise<void>,",
            "_emit": "\t\tconst _publish = this._publish.bind(this);\n\t\tconst _publish = this._publish.bind(this);\n\t\tthis.registerPublication(\n\t\t\tthis.subscriptionName,\n\t\t\tasync function (this: IPublication, eventName: string, options: boolean | { useCollection?: boolean; args?: any }) {\n\t\t\tasync function (this: IPublication, eventName: string, options: boolean | { useCollection?: boolean; args?: any }) {\n\t\t\t\treturn _publish(this, eventName, options);\n\t\t\t},\n\t\t);\n\t}\n\n\tabstract registerMethod(methods: Record<string, (eventName: string, ...args: any[]) => any>): void;\n\n\tinitMethod(): void {\n\t\tconst isWriteAllowed = this.isWriteAllowed.bind(this);\n\t\tconst isWriteAllowed = this.isWriteAllowed.bind(this);\n\t\tconst __emit = this.__emit.bind(this);\n\t\tconst __emit = this.__emit.bind(this);\n\t\tconst _emit = this._emit.bind(this);\n\t\tconst _emit = this._emit.bind(this);\n\t\tconst { retransmit } = this;\n\t\tconst { retransmit } = this;"
        },
        "depth_rank": 6
    },
    {
        "file": "listeners.module.ts",
        "path": "../Rocket.Chat/apps/meteor/server/modules/listeners/listeners.module.ts",
        "code": {
            "value": "\t\t\tconst value = {\n\t\t\tconst value = {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t\t...(isSettingColor(setting) && { editor: setting.editor }),"
        },
        "depth_rank": 6
    },
    {
        "file": "troubleshoot.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/troubleshoot.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('Troubleshoot', async function () {\n\tsettingsRegistry.addGroup('Troubleshoot', async function () {\n\t\tawait this.add('Troubleshoot_Disable_Notifications', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nDescription: 'Troubleshoot_Disable_Notifications_Alert',\n\t\t});\n\n\t\t// this settings will let clients know in case presence has been disabled\n\t\tawait this.add('Presence_broadcast_disabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tpublic: true,\n\t\t\treadonly: true,\n\t\t});\n\n\t\tawait this.add('Troubleshoot_Disable_Presence_Broadcast', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nDescription: 'Troubleshoot_Disable_Presence_Broadcast_Alert',\n\t\t\tenableQuery: { _id: 'Presence_broadcast_disabled', value: false },"
        },
        "depth_rank": 5
    },
    {
        "file": "ldap.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/ldap.ts",
        "code": {
            "enableQuery": "\tsettingsRegistry.addGroup('LDAP', async function () {\n\tsettingsRegistry.addGroup('LDAP', async function () {\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };",
            "adOnly": "\t\tconst adOnly = { _id: 'LDAP_Server_Type', value: 'ad' };\n\t\tconst adOnly = { _id: 'LDAP_Server_Type', value: 'ad' };",
            "ldapOnly": "\t\tconst ldapOnly = { _id: 'LDAP_Server_Type', value: '' };\n\t\tconst ldapOnly = { _id: 'LDAP_Server_Type', value: '' };",
            "enableAuthentication": "\t\t\tawait this.section('LDAP_Connection_Authentication', async function () {\n\t\t\tawait this.section('LDAP_Connection_Authentication', async function () {\n\t\t\t\tconst enableAuthentication = [enableQuery, { _id: 'LDAP_Authentication', value: true }];\n\t\t\t\tconst enableAuthentication = [enableQuery, { _id: 'LDAP_Authentication', value: true }];",
            "groupFilterQuery": "\t\t\tawait this.section('LDAP_UserSearch_GroupFilter', async function () {\n\t\t\tawait this.section('LDAP_UserSearch_GroupFilter', async function () {\n\t\t\t\tconst groupFilterQuery = [enableQuery, { _id: 'LDAP_Group_Filter_Enable', value: true }];\n\t\t\t\tconst groupFilterQuery = [enableQuery, { _id: 'LDAP_Group_Filter_Enable', value: true }];"
        },
        "depth_rank": 5
    },
    {
        "file": "webrtc.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/webrtc.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('WebRTC', async function () {\n\tsettingsRegistry.addGroup('WebRTC', async function () {\n\t\tawait this.add('WebRTC_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tgroup: 'WebRTC',\n\t\t\tpublic: true,\n\t\t\ti18nLabel: 'Enabled',\n\t\t});\n\t\tawait this.add('WebRTC_Enable_Channel', false, {\n\t\t\ttype: 'boolean',\n\t\t\tgroup: 'WebRTC',\n\t\t\tpublic: true,\n\t\t\tenableQuery: { _id: 'WebRTC_Enabled', value: true },"
        },
        "depth_rank": 5
    },
    {
        "file": "cas.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/cas.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('CAS', async function () {\n\tsettingsRegistry.addGroup('CAS', async function () {\n\t\tawait this.add('CAS_enabled', false, { type: 'boolean', group: 'CAS', public: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "mobile.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/mobile.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('Mobile', async function () {\n\tsettingsRegistry.addGroup('Mobile', async function () {\n\t\tawait this.add('Allow_Save_Media_to_Gallery', true, {\n\t\t\ttype: 'boolean',\n\t\t\tpublic: true,\n\t\t});\n\t\tawait this.section('Screen_Lock', async function () {\n\t\tawait this.section('Screen_Lock', async function () {\n\t\t\tawait this.add('Force_Screen_Lock', false, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\ti18nDescription: 'Force_Screen_Lock_description',\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Force_Screen_Lock_After', 1800, {\n\t\t\t\ttype: 'int',\n\t\t\t\ti18nDescription: 'Force_Screen_Lock_After_description',\n\t\t\t\tenableQuery: { _id: 'Force_Screen_Lock', value: true },"
        },
        "depth_rank": 5
    },
    {
        "file": "general.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/general.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('General', async function () {\n\tsettingsRegistry.addGroup('General', async function () {\n\t\tawait this.section('REST API', async function () {\n\t\tawait this.section('REST API', async function () {\n\t\t\tawait this.add('API_Upper_Count_Limit', 100, { type: 'int', public: false });"
        },
        "depth_rank": 5
    },
    {
        "file": "oauth.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/oauth.ts",
        "code": {
            "enableQuery": "\t\tawait this.section('Tokenpass', async function () {\n\t\tawait this.section('Tokenpass', async function () {\n\t\t\tconst enableQuery = {\n\t\t\tconst enableQuery = {\n\t\t\t\t_id: 'Accounts_OAuth_Tokenpass',\n\t\t\t\tvalue: true,\n\t\t\t};\n\n\t\t\tawait this.add('Accounts_OAuth_Tokenpass', false, { type: 'boolean' });",
            "customOAuthQuery": "\t\t\tconst customOAuthQuery = [\n\t\t\tconst customOAuthQuery = [\n\t\t\t\t{\n\t\t\t\t\t_id: 'Accounts_OAuth_Wordpress',\n\t\t\t\t\tvalue: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t_id: 'Accounts_OAuth_Wordpress_server_type',\n\t\t\t\t\tvalue: 'custom',\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_identity_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_identity_token_sent_via', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_token_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_authorize_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_scope', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_callback_url', '_oauth/wordpress', {\n\t\t\t\ttype: 'relativeUrl',\n\t\t\t\treadonly: true,\n\t\t\t\tenableQuery,\n\t\t\t});\n\t\t});\n\n\t\tawait this.section('Dolphin', async function () {\n\t\tawait this.section('Dolphin', async function () {\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_URL', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tpublic: true,\n\t\t\t\ti18nLabel: 'URL',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin', false, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Enable',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_id', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_id',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_secret', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Secret',\n\t\t\t\tsecret: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_login_style', 'redirect', {\n\t\t\t\ttype: 'select',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Login_Style',\n\t\t\t\tpersistent: true,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ key: 'redirect', i18nLabel: 'Redirect' },"
        },
        "depth_rank": 5
    },
    {
        "file": "omnichannel.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/omnichannel.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };"
        },
        "depth_rank": 5
    },
    {
        "file": "accounts.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/accounts.ts",
        "code": {
            "enableQueryCollectData": "\tsettingsRegistry.addGroup('Accounts', async function () {\n\tsettingsRegistry.addGroup('Accounts', async function () {\n\t\tawait this.section('Two Factor Authentication', async function () {\n\t\tawait this.section('Two Factor Authentication', async function () {\n\t\t\tconst enable2FA = {\n\t\t\tconst enable2FA = {\n\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t};\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_MaxDelta', 1, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_TOTP_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: [\n\t\t\t\t\tenable2FA,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_By_Email_Enabled',\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\twizard: {\n\t\t\t\t\tstep: 3,\n\t\t\t\t\torder: 3,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration', 3600, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: [\n\t\t\t\t\tenable2FA,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_By_Email_Enabled',\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_RememberFor', 1800, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t});\n\n\t\t\t// TODO: Remove this setting for version 4.0\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t});\n\t\tconst enableQueryCollectData = { _id: 'Block_Multiple_Failed_Logins_Enabled', value: true };\n\t\tconst enableQueryCollectData = { _id: 'Block_Multiple_Failed_Logins_Enabled', value: true };",
            "enableQueryByUser": "\t\tawait this.section('Login_Attempts', async function () {\n\t\tawait this.section('Login_Attempts', async function () {\n\t\t\tawait this.add('Block_Multiple_Failed_Logins_Enabled', false, {\n\t\t\t\ttype: 'boolean',\n\t\t\t});\n\n\t\t\tawait this.add('Block_Multiple_Failed_Logins_By_User', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enableQueryCollectData,\n\t\t\t});\n\n\t\t\tconst enableQueryByUser = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_User', value: true }];\n\t\t\tconst enableQueryByUser = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_User', value: true }];",
            "enableQueryByIp": "\t\t\tconst enableQueryByIp = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_Ip', value: true }];\n\t\t\tconst enableQueryByIp = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_Ip', value: true }];",
            "enableQueryAudit": "\t\tawait this.section('Login_Logs', async function () {\n\t\tawait this.section('Login_Logs', async function () {\n\t\t\tconst enableQueryAudit = { _id: 'Login_Logs_Enabled', value: true };\n\t\t\tconst enableQueryAudit = { _id: 'Login_Logs_Enabled', value: true };"
        },
        "depth_rank": 5
    },
    {
        "file": "crowd.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/crowd.ts",
        "code": {
            "enableQuery": "\tsettingsRegistry.addGroup('AtlassianCrowd', async function () {\n\tsettingsRegistry.addGroup('AtlassianCrowd', async function () {\n\t\tconst enableQuery = { _id: 'CROWD_Enable', value: true };\n\t\tconst enableQuery = { _id: 'CROWD_Enable', value: true };",
            "enableSyncQuery": "\t\tconst enableSyncQuery = [enableQuery, { _id: 'CROWD_Sync_User_Data', value: true }];\n\t\tconst enableSyncQuery = [enableQuery, { _id: 'CROWD_Sync_User_Data', value: true }];"
        },
        "depth_rank": 5
    },
    {
        "file": "analytics.ts",
        "path": "../Rocket.Chat/apps/meteor/server/settings/analytics.ts",
        "code": {
            "enableQuery": "\t\tawait this.section('Analytics_Google', async function () {\n\t\tawait this.section('Analytics_Google', async function () {\n\t\t\tconst enableQuery = { _id: 'GoogleAnalytics_enabled', value: true };\n\t\t\tconst enableQuery = { _id: 'GoogleAnalytics_enabled', value: true };"
        },
        "depth_rank": 5
    },
    {
        "file": "videoConferences.ts",
        "path": "../Rocket.Chat/apps/meteor/server/cron/videoConferences.ts",
        "code": {
            "calls": "\tconst calls = await (await VideoConferenceModel.findAllLongRunning(minimum))\n\tconst calls = await (await VideoConferenceModel.findAllLongRunning(minimum))\n\t\t.map(({ _id: callId }: Pick<VideoConference, '_id'>) => callId)"
        },
        "depth_rank": 5
    },
    {
        "file": "federation.ts",
        "path": "../Rocket.Chat/apps/meteor/server/cron/federation.ts",
        "code": {
            "setting": "\t\tconst setting = settings.get(id);\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tawait settingsRegistry.add(id, value);\n\t\t} else {",
            "siteUrl": "async function runFederation(): Promise<void> {\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst { protocol } = new URL(siteUrl);",
            "user": "\t\tconst user = await Users.findOne({ isRemote: true });\n\t\tconst user = await Users.findOne({ isRemote: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "userDataDownloads.ts",
        "path": "../Rocket.Chat/apps/meteor/server/cron/userDataDownloads.ts",
        "code": {
            "plug": "\tconst jobName = 'Generate download files for user data';\n\tconst jobName = 'Generate download files for user data';\n\tconst name = 'UserDataDownload';\n\tconst name = 'UserDataDownload';\n\n\tconst plug = async ({\n\tconst plug = async ({\n\t\tdisabled,\n\t\tprocessingFrequency,\n\t}: {"
        },
        "depth_rank": 5
    },
    {
        "file": "api.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/api.ts",
        "code": {
            "logger": "const logger = new Logger('API');\nconst logger = new Logger('API');\n\ninterface IAPIProperties {\n\tuseDefaultAuth: boolean;\n\tprettyJson: boolean;\n\tauth: { token: string; user: () => Promise<{ userId: string; token: string }> };",
            "finalResult": "\t\tconst finalResult = {\n\t\tconst finalResult = {\n\t\t\tstatusCode: 200,\n\t\t\tbody: result,\n\t\t} as SuccessResult<T>;\n\n\t\treturn finalResult as SuccessResult<T>;\n\t}\n\n\tpublic failure<T>(result?: T): FailureResult<T>;\n\n\tpublic failure<T, TErrorType extends string, TStack extends string, TErrorDetails>(\n\t\tresult?: T,\n\t\terrorType?: TErrorType,\n\t\tstack?: TStack,\n\t\terror?: { details: TErrorDetails },",
            "rateLimitRule": "\t\tconst addRateLimitRuleToEveryRoute = (routes: string[]) => {\n\t\tconst addRateLimitRuleToEveryRoute = (routes: string[]) => {\n\t\t\troutes.forEach((route) => {\n\t\t\t\trateLimiterDictionary[route] = {\n\t\t\t\t\trateLimiter: new RateLimiter(),\n\t\t\t\t\toptions: rateLimiterOptions,\n\t\t\t\t};\n\t\t\t\tconst rateLimitRule = {\n\t\t\t\tconst rateLimitRule = {\n\t\t\t\t\tIPAddr: (input: any) => input,\n\t\t\t\t\troute,\n\t\t\t\t};\n\t\t\t\trateLimiterDictionary[route].rateLimiter.addRule(\n\t\t\t\t\trateLimitRule,\n\t\t\t\t\trateLimiterOptions.numRequestsAllowed as number,\n\t\t\t\t\trateLimiterOptions.intervalTimeInMS as number,\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\t\troutes.map((route) => this.namedRoutes(route, endpoints, apiVersion)).map(addRateLimitRuleToEveryRoute);\n\t}\n\n\tpublic async processTwoFactor({\n\t\tuserId,\n\t\trequest,\n\t\tinvocation,\n\t\toptions,\n\t\tconnection,\n\t}: {",
            "_options": "\t\t\t\tconst _options = { ...options };\n\t\t\t\tconst _options = { ...options };",
            "loginCompatibility": "\t\tconst loginCompatibility = (bodyParams: Record<string, any>, request: Request): Record<string, any> => {\n\t\tconst loginCompatibility = (bodyParams: Record<string, any>, request: Request): Record<string, any> => {\n\t\t\t// Grab the username or email that the user is logging in with\n\t\t\tconst { user, username, email, password, code: bodyCode } = bodyParams;\n\t\t\tconst { user, username, email, password, code: bodyCode } = bodyParams;",
            "objectToLDAPLogin": "\t\t\tconst objectToLDAPLogin = {\n\t\t\tconst objectToLDAPLogin = {\n\t\t\t\tldap: true,\n\t\t\t\tusername: usernameToLDAPLogin,\n\t\t\t\tldapPass: auth.password,\n\t\t\t\tldapOptions: {},",
            "self": "\t\tconst self = this;\n\t\tconst self = this;\n\n\t\t(this as APIClass<'/v1'>).addRoute<'/v1/login', { authRequired: false }>(",
            "response": "\t\t\t\t\tconst response = {\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\t\tauthToken: auth.token,\n\t\t\t\t\t\t\tme: await getUserInfo(this.user || ({} as IUser)),",
            "getUserAuth": "const getUserAuth = function _getUserAuth(...args: any[]): {\nconst getUserAuth = function _getUserAuth(...args: any[]): {\n\ttoken: string;\n\tuser: (this: Restivus) => Promise<{ userId: string; token: string }>;"
        },
        "depth_rank": 6
    },
    {
        "file": "messages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/lib/messages.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, { projection: { username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/lib/rooms.ts",
        "code": {
            "result": "\tconst options: FindOptions<IRoom> = {\n\tconst options: FindOptions<IRoom> = {\n\t\tprojection: adminFields,\n\t\tskip: offset,\n\t\tlimit: count,\n\t};\n\n\tconst result = Rooms.findByNameOrFnameContainingAndTypes(name, showTypes, discussion, includeTeams, options);\n\tconst result = Rooms.findByNameOrFnameContainingAndTypes(name, showTypes, discussion, includeTeams, options);\n\n\tconst { cursor, totalCount } = result;\n\tconst { cursor, totalCount } = result;",
            "userRoomsIds": "\tconst userRoomsIds = (await Subscriptions.findByUserId(uid, { projection: { rid: 1 } }).toArray()).map(\n\tconst userRoomsIds = (await Subscriptions.findByUserId(uid, { projection: { rid: 1 } }).toArray()).map(",
            "userRooms": "\tconst options: FindOptions<IRoom> = {\n\tconst options: FindOptions<IRoom> = {\n\t\tprojection: {\n\t\t\t_id: 1,\n\t\t\tfname: 1,\n\t\t\tname: 1,\n\t\t\tt: 1,\n\t\t\tavatarETag: 1,\n\t\t},\n\t\tlimit: 10,\n\t\tsort: {\n\t\t\tname: 1,\n\t\t},\n\t};\n\n\tconst userRooms = (\n\tconst userRooms = (\n\t\t(await Subscriptions.findByUserIdAndRoles(uid, ['owner'], { projection: { rid: 1 } }).toArray()) as Pick<ISubscription, 'rid'>[]"
        },
        "depth_rank": 7
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/lib/users.ts",
        "code": {
            "conditions": "\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst exceptions = selector.exceptions || [];\n\tconst exceptions = selector.exceptions || [];\n\tconst conditions = selector.conditions || {};\n\tconst conditions = selector.conditions || {};",
            "contacts": "\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\tname: 1,\n\t\t\tusername: 1,\n\t\t\tnickname: 1,\n\t\t\tstatus: 1,\n\t\t\tavatarETag: 1,\n\t\t},\n\t\tsort: {\n\t\t\tusername: 1,\n\t\t},\n\t\tlimit: 10,\n\t};\n\n\t// Search on DMs first, to list known users before others.\n\tconst contacts = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10, 'd');\n\tconst contacts = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10, 'd');\n\tif (contacts.length >= options.limit) {\n\t\treturn { items: contacts as UserAutoComplete[] };",
            "users": "\t\tconst users = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10);\n\t\tconst users = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10);\n\t\treturn { items: contacts.concat(users) as UserAutoComplete[] };"
        },
        "depth_rank": 7
    },
    {
        "file": "emailInbox.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/lib/emailInbox.ts",
        "code": {
            "obj": "\tconst obj = {\n\tconst obj = {\n\t\t...emailInboxParams,\n\t\t_createdAt: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t_createdBy: await Users.findOneById(userId, { projection: { username: 1 } }),",
            "emailInbox": "\tconst emailInbox = await findOneEmailInbox({ _id });\n\tconst emailInbox = await findOneEmailInbox({ _id });"
        },
        "depth_rank": 7
    },
    {
        "file": "getUploadFormData.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/lib/getUploadFormData.ts",
        "code": {
            "bb": "\tconst bb = busboy({ headers: request.headers, defParamCharset: 'utf8', limits });\n\tconst bb = busboy({ headers: request.headers, defParamCharset: 'utf8', limits });",
            "onFile": "\tfunction onFile(\n\tfunction onFile(\n\t\tfieldname: string,\n\t\tfile: Readable & { truncated: boolean },"
        },
        "depth_rank": 7
    },
    {
        "file": "info.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/default/info.ts",
        "code": {
            "user": "\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\tconst user = await getLoggedInUser(this.request);\n\n\t\t\treturn API.v1.success(await getServerInfo(user?._id));\n\t\t},\n\t},\n);\n\nAPI.default.addRoute(\n\t'ecdh_proxy/initEncryptedSession',\n\t{ authRequired: false },"
        },
        "depth_rank": 7
    },
    {
        "file": "videoConference.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/videoConference.ts",
        "code": {
            "data": "\t\t\tconst data = await VideoConf.listProviders();\n\t\t\tconst data = await VideoConf.listProviders();\n\n\t\t\treturn API.v1.success({ data });"
        },
        "depth_rank": 7
    },
    {
        "file": "permissions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/permissions.ts",
        "code": {
            "result": "\t\t\tconst result = (await Meteor.callAsync('permissions/get', updatedSinceDate)) as {\n\t\t\tconst result = (await Meteor.callAsync('permissions/get', updatedSinceDate)) as {\n\t\t\t\tupdate: IPermission[];\n\t\t\t\tremove: IPermission[];\n\t\t\t};\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'permissions.update',\n\t{ authRequired: true },",
            "permissionKeys": "\t\t\tconst permissionKeys = bodyParams.permissions.map(({ _id }) => _id);\n\t\t\tconst permissionKeys = bodyParams.permissions.map(({ _id }) => _id);"
        },
        "depth_rank": 7
    },
    {
        "file": "groups.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/groups.ts",
        "code": {
            "function": "async function findPrivateGroupByIdOrName({\nasync function findPrivateGroupByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {",
            "roomOptions": "\tconst roomOptions = {\n\tconst roomOptions = {\n\t\tprojection: {\n\t\t\t...roomAccessAttributes,\n\t\t\tt: 1,\n\t\t\tro: 1,\n\t\t\tname: 1,\n\t\t\tfname: 1,\n\t\t\tprid: 1,\n\t\t\tarchived: 1,\n\t\t\tbroadcast: 1,\n\t\t},\n\t};\n\tlet room: IRoom | null = null;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', roomOptions);\n\t} else if ('roomName' in params) {",
            "user": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });",
            "room": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });",
            "findResult": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },",
            "lm": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });",
            "subs": "\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();",
            "rids": "\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);",
            "subscription": "\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },",
            "roles": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },",
            "moderators": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = (\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "team": "\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });"
        },
        "depth_rank": 7
    },
    {
        "file": "channels.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/channels.ts",
        "code": {
            "function": "async function createChannel(\nasync function createChannel(\n\tuserId: string,\n\tparams: { name?: string; members?: string[]; customFields?: Record<string, any>; extraData?: Record<string, any>; readOnly?: boolean },",
            "projection": "\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\tconst projection = { ...API.v1.defaultFieldsToExclude };",
            "findResult": "\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);",
            "roles": "\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsJoinProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { joinCode, ...params } = this.bodyParams;\n\t\t\tconst { joinCode, ...params } = this.bodyParams;",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });",
            "mentions": "\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {\n\t\t\t\t\tsort: sort || { ts: 1 },",
            "allMentions": "\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {},",
            "moderators": "\t\t\tconst moderators = (\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "team": "\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name ?? '',\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });",
            "user": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },",
            "id": "\tconst id = await createChannelMethod(\n\tconst id = await createChannelMethod(\n\t\tuserId,\n\t\tparams.name || '',\n\t\tparams.members ? params.members : [],\n\t\treadOnly,\n\t\tparams.customFields,\n\t\tparams.extraData,\n\t);\n\n\treturn {\n\t\tchannel: await findChannelByIdOrName({ params: { roomId: id.rid }, userId }),",
            "teams": "\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });\n\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });",
            "membersToAdd": "\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t});\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tbodyParams.members = [...membersToAdd].filter(Boolean) as string[];\n\t\t\t}\n\n\t\t\treturn API.v1.success(await API.channels?.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true },",
            "params": "\t\t\tconst params = this.queryParams;\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "roomIds": "\t\t\t\tconst roomIds = (\n\t\t\t\tconst roomIds = (\n\t\t\t\t\tawait Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tprojection: { rid: 1 },",
            "ids": "\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(\n\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(",
            "subs": "\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();",
            "rids": "\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);",
            "subscription": "\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },",
            "room": "\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });"
        },
        "depth_rank": 7
    },
    {
        "file": "roles.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/roles.ts",
        "code": {
            "roles": "\t\t\tconst roles = await Roles.find({}, { projection: { _updatedAt: 0 } }).toArray();\n\t\t\tconst roles = await Roles.find({}, { projection: { _updatedAt: 0 } }).toArray();",
            "user": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst { roleId, roleName, roomId } = this.bodyParams;\n\t\t\tconst { roleId, roleName, roomId } = this.bodyParams;",
            "options": "\t\t\tconst options = { projection: { _id: 1 } };\n\t\t\tconst options = { projection: { _id: 1 } };"
        },
        "depth_rank": 7
    },
    {
        "file": "stats.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/stats.ts",
        "code": {
            "events": "\t\t\tconst events = this.bodyParams;\n\t\t\tconst events = this.bodyParams;\n\n\t\t\tevents?.params?.forEach((event) => {\n\t\t\t\tconst { eventName, ...params } = event;\n\t\t\t\tconst { eventName, ...params } = event;"
        },
        "depth_rank": 7
    },
    {
        "file": "instances.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/instances.ts",
        "code": {
            "getMatrixInstances": "const getMatrixInstances = (() => {\nconst getMatrixInstances = (() => {\n\tif (isRunningMs()) {\n\t\treturn () => [];\n\t}\n\n\treturn () => InstanceService.getInstances();\n})();\n\nAPI.v1.addRoute(\n\t'instances.get',\n\t{ authRequired: true },"
        },
        "depth_rank": 7
    },
    {
        "file": "mailer.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/mailer.ts",
        "code": {
            "result": "\t\t\tconst result = await Meteor.callAsync('Mailer.sendMail', from, subject, body, Boolean(dryrun), query);\n\t\t\tconst result = await Meteor.callAsync('Mailer.sendMail', from, subject, body, Boolean(dryrun), query);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'mailer.unsubscribe',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isMailerUnsubscribeProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { _id, createdAt } = this.bodyParams;\n\t\t\tconst { _id, createdAt } = this.bodyParams;"
        },
        "depth_rank": 7
    },
    {
        "file": "teams.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/teams.ts",
        "code": {
            "team": "\t\t\tconst team = await Team.create(this.userId, {\n\t\t\tconst team = await Team.create(this.userId, {\n\t\t\t\tteam: {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\tmembers,\n\t\t\t\towner,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ team });",
            "getTeamByIdOrName": "const getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\nconst getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\n\tif ('teamId' in params && params.teamId) {\n\t\treturn Team.getOneById<ITeam>(params.teamId);\n\t}\n\n\tif ('teamName' in params && params.teamName) {\n\t\treturn Team.getOneByName(params.teamName);\n\t}\n\n\treturn null;\n};\n\nAPI.v1.addRoute(\n\t'teams.convertToChannel',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isTeamsConvertToChannelProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;",
            "await": "\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\t// If we got a list of rooms to delete along with the team, remove them first\n\t\t\tif (rooms.length) {\n\t\t\t\tfor await (const room of rooms) {\n\t\t\t\tfor await (const room of rooms) {\n\t\t\t\t\tawait Meteor.callAsync('eraseRoom', room);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Move every other room back to the workspace\n\t\t\tawait Team.unsetTeamIdOfRooms(this.userId, team._id);\n\n\t\t\t// Remove the team's main room\n\t\t\tawait Meteor.callAsync('eraseRoom', team.roomId);\n\n\t\t\t// Delete all team memberships\n\t\t\tawait Team.removeAllMembersFromTeam(team._id);\n\n\t\t\t// And finally delete the team itself\n\t\t\tawait Team.deleteById(team._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.autocomplete',\n\t{ authRequired: true },",
            "validRooms": "\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\n\t\t\treturn API.v1.success({ rooms: validRooms });",
            "room": "\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\n\t\t\treturn API.v1.success({ room });",
            "listFilter": "\t\t\tconst listFilter = {\n\t\t\tconst listFilter = {\n\t\t\t\tname: filter ?? undefined,\n\t\t\t\tisDefault: type === 'autoJoin',\n\t\t\t\tgetAllRooms,\n\t\t\t\tallowPrivateTeam,\n\t\t\t};\n\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRoomsOfUser',\n\t{ authRequired: true },",
            "booleanCanUserDelete": "\t\t\tconst booleanCanUserDelete = canUserDelete === 'true';\n\t\t\tconst booleanCanUserDelete = canUserDelete === 'true';\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, booleanCanUserDelete, {\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, booleanCanUserDelete, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset: 0,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.members',\n\t{ authRequired: true },",
            "user": "\t\t\tconst user = await Users.findOneActiveById(userId, {});\n\t\t\tconst user = await Users.findOneActiveById(userId, {});",
            "teams": "\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\n\t\t\treturn API.v1.success({ teams });"
        },
        "depth_rank": 7
    },
    {
        "file": "commands.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/commands.ts",
        "code": {
            "processQueryOptionsOnResult": "const processQueryOptionsOnResult = <T extends { _id?: string } & Record<string, any>, F extends keyof T>(\nconst processQueryOptionsOnResult = <T extends { _id?: string } & Record<string, any>, F extends keyof T>(",
            "pickFields": "\tconst pickFields = <F extends keyof T>(obj: T, fields: F[]): Pick<T, F> => {\n\tconst pickFields = <F extends keyof T>(obj: T, fields: F[]): Pick<T, F> => {\n\t\tconst picked: Partial<T> = {};\n\t\tconst picked: Partial<T> = {};",
            "params": "\t\t\tconst params = this.queryParams as Record<string, any>;\n\t\t\tconst params = this.queryParams as Record<string, any>;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "totalCount": "\t\t\tconst totalCount = commands.length;\n\t\t\tconst totalCount = commands.length;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcommands: processQueryOptionsOnResult(commands, {\n\t\t\t\t\tsort: sort || { name: 1 },",
            "result": "\t\t\tconst result = await slashCommands.run({ command: cmd, params, message, triggerId, userId: this.userId });\n\t\t\tconst result = await slashCommands.run({ command: cmd, params, message, triggerId, userId: this.userId });",
            "preview": "\t\t\tconst params = query.params ? query.params : '';\n\t\t\tconst params = query.params ? query.params : '';\n\n\t\t\tconst preview = await Meteor.callAsync('getSlashCommandPreviews', {\n\t\t\tconst preview = await Meteor.callAsync('getSlashCommandPreviews', {\n\t\t\t\tcmd,\n\t\t\t\tparams,\n\t\t\t\tmsg: { rid: query.roomId },",
            "msg": "\t\t\tconst msg = {\n\t\t\tconst msg = {\n\t\t\t\trid: body.roomId,\n\t\t\t\t...(body.tmid && { tmid: body.tmid }),"
        },
        "depth_rank": 7
    },
    {
        "file": "emoji-custom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/emoji-custom.ts",
        "code": {
            "emoji": "\t\t\tconst emoji = await getUploadFormData(\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },"
        },
        "depth_rank": 7
    },
    {
        "file": "subscriptions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/subscriptions.ts",
        "code": {
            "result": "\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tArray.isArray(result)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tupdate: result,\n\t\t\t\t\t\t\tremove: [],\n\t\t\t\t\t  }\n\t\t\t\t\t: result,\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetOneProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { roomId } = this.queryParams;"
        },
        "depth_rank": 7
    },
    {
        "file": "im.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/im.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });",
            "subscription": "\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });\n\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });",
            "room": "\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });",
            "options": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1, status: 1, statusText: 1, utcOffset: 1, federated: 1 },",
            "searchFields": "\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })\n\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })"
        },
        "depth_rank": 7
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/rooms.ts",
        "code": {
            "function": "async function findRoomByIdOrName({\nasync function findRoomByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n}: {",
            "projection": "\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\tconst projection = { ...API.v1.defaultFieldsToExclude };",
            "file": "\t\t\tconst file = await getUploadFormData(\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },",
            "uploadedFile": "\t\t\tconst details = {\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tawait sendFileMessage(this.userId, { roomId: this.urlParams.rid, file: uploadedFile, msgData: fields });",
            "message": "\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },",
            "room": "\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });",
            "count": "\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\t\troomId: _id,\n\t\t\t\tlatest: new Date(latest),\n\t\t\t\toldest: new Date(oldest),\n\t\t\t\tinclusive,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned ?? false),\n\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly ?? false),\n\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads ?? false),\n\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion ?? false),\n\t\t\t\tfromUsers: users,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ _id, count });",
            "discussion": "\t\t\tconst discussion = await createDiscussion(this.userId, {\n\t\t\tconst discussion = await createDiscussion(this.userId, {\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t\tt_name,\n\t\t\t\treply,\n\t\t\t\tusers: users?.filter(isTruthy) || [],\n\t\t\t\tencrypted,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ discussion });",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });",
            "result": "\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\n\t\t\treturn API.v1.success({ rid: result.rid });"
        },
        "depth_rank": 7
    },
    {
        "file": "autotranslate.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/autotranslate.ts",
        "code": {
            "languages": "\t\t\tconst languages = await Meteor.callAsync('autoTranslate.getSupportedLanguages', targetLanguage);\n\t\t\tconst languages = await Meteor.callAsync('autoTranslate.getSupportedLanguages', targetLanguage);\n\n\t\t\treturn API.v1.success({ languages: languages || [] });",
            "translatedMessage": "\t\t\tconst translatedMessage = await Meteor.callAsync('autoTranslate.translateMessage', message, targetLanguage);\n\t\t\tconst translatedMessage = await Meteor.callAsync('autoTranslate.translateMessage', message, targetLanguage);\n\n\t\t\treturn API.v1.success({ message: translatedMessage });"
        },
        "depth_rank": 7
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/users.ts",
        "code": {
            "suggestions": "\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\n\t\t\treturn API.v1.success({ suggestions });",
            "userData": "\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };\n\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };",
            "user": "\t\t\tconst user = await getUserFromParams(this.queryParams);\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpresence: user.status || ('offline' as UserStatus),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setStatus',\n\t{ authRequired: true },",
            "image": "\t\t\tconst image = await getUploadFormData(\n\t\t\tconst image = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'image', sizeLimit: settings.get('FileUpload_MaxFileSize') },",
            "sentTheUserByFormData": "\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tif (sentTheUserByFormData) {\n\t\t\t\tif (fields.userId) {\n\t\t\t\t\tuser = await Users.findOneById(fields.userId, { projection: { username: 1 } });",
            "count": "\t\t\tconst count = (await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false)).modifiedCount;\n\t\t\tconst count = (await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false)).modifiedCount;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.info',\n\t{ authRequired: true, validateParams: isUsersInfoParamsGetProps },",
            "actualSort": "\t\t\tconst actualSort = sort || { username: 1 };\n\t\t\tconst actualSort = sort || { username: 1 };",
            "result": "\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\n\t\t\treturn API.v1.success({ result });",
            "userId": "\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;",
            "data": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst data = await Meteor.callAsync('createToken', user._id);\n\t\t\tconst data = await Meteor.callAsync('createToken', user._id);\n\t\t\treturn data ? API.v1.success({ data }) : API.v1.unauthorized();",
            "token": "\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });",
            "isPersonalAccessToken": "\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\t\t'type' in loginToken && loginToken.type === 'personalAccessToken';\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttokens:\n\t\t\t\t\tuser?.services?.resume?.loginTokens?.filter(isPersonalAccessToken).map((loginToken) => ({\n\t\t\t\t\t\tname: loginToken.name,\n\t\t\t\t\t\tcreatedAt: loginToken.createdAt.toISOString(),\n\t\t\t\t\t\tlastTokenPart: loginToken.lastTokenPart,\n\t\t\t\t\t\tbypassTwoFactor: Boolean(loginToken.bypassTwoFactor),\n\t\t\t\t\t})) || [],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },",
            "me": "\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;\n\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;",
            "teams": "\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logout',\n\t{ authRequired: true, validateParams: isUserLogoutParamsPOST },",
            "validStatus": "\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tif (validStatus.includes(this.bodyParams.status)) {\n\t\t\t\t\tconst { status } = this.bodyParams;\n\t\t\t\t\tconst { status } = this.bodyParams;"
        },
        "depth_rank": 7
    },
    {
        "file": "oauthapps.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/oauthapps.ts",
        "code": {
            "application": "\t\t\tconst application = await addOAuthApp(this.bodyParams, this.userId);\n\t\t\tconst application = await addOAuthApp(this.bodyParams, this.userId);\n\n\t\t\treturn API.v1.success({ application });"
        },
        "depth_rank": 7
    },
    {
        "file": "email-inbox.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/email-inbox.ts",
        "code": {
            "emailInboxes": "\t\t\tconst emailInboxes = await findEmailInboxes({ query, pagination: { offset, count, sort } });\n\t\t\tconst emailInboxes = await findEmailInboxes({ query, pagination: { offset, count, sort } });",
            "emailInbox": "\t\t\tconst emailInbox = await findOneEmailInbox({ _id });\n\t\t\tconst emailInbox = await findOneEmailInbox({ _id });"
        },
        "depth_rank": 7
    },
    {
        "file": "invites.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/invites.ts",
        "code": {
            "result": "\t\t\tconst result = await listInvites(this.userId);\n\t\t\tconst result = await listInvites(this.userId);\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'findOrCreateInvite',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFindOrCreateInviteParams,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, days, maxUses } = this.bodyParams;\n\t\t\tconst { rid, days, maxUses } = this.bodyParams;"
        },
        "depth_rank": 7
    },
    {
        "file": "dns.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/dns.ts",
        "code": {
            "resolved": "\t\t\tconst resolved = await resolveTXT(url);\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });"
        },
        "depth_rank": 7
    },
    {
        "file": "moderation.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/moderation.ts",
        "code": {
            "reports": "\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findReportsGroupedByUser(latest, oldest, escapedSelector, { offset, count, sort }).toArray();\n\t\t\tconst reports = await ModerationReports.findReportsGroupedByUser(latest, oldest, escapedSelector, { offset, count, sort }).toArray();",
            "user": "\t\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\t\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });",
            "sanitizedReason": "\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\n\t\t\tconst { user: moderator } = this;\n\t\t\tconst { user: moderator } = this;",
            "escapedSelector": "\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });"
        },
        "depth_rank": 7
    },
    {
        "file": "banners.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/banners.ts",
        "code": {
            "banners": "\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });"
        },
        "depth_rank": 7
    },
    {
        "file": "cloud.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/cloud.ts",
        "code": {
            "settingsData": "\t\t\tconst registrationInfo = await retrieveRegistrationStatus();\n\t\t\tconst registrationInfo = await retrieveRegistrationStatus();\n\n\t\t\tif (registrationInfo.workspaceRegistered) {\n\t\t\t\treturn API.v1.failure('Workspace is already registered');\n\t\t\t}\n\n\t\t\tconst settingsData = JSON.parse(Buffer.from(this.bodyParams.cloudBlob, 'base64').toString());\n\t\t\tconst settingsData = JSON.parse(Buffer.from(this.bodyParams.cloudBlob, 'base64').toString());\n\n\t\t\tawait saveRegistrationData(settingsData);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'cloud.createRegistrationIntent',\n\t{ authRequired: true },",
            "intentData": "\t\t\tconst intentData = await startRegisterWorkspaceSetupWizard(this.bodyParams.resend, this.bodyParams.email);\n\t\t\tconst intentData = await startRegisterWorkspaceSetupWizard(this.bodyParams.resend, this.bodyParams.email);\n\n\t\t\tif (intentData) {\n\t\t\t\treturn API.v1.success({ intentData });",
            "pollData": "\t\t\tconst pollData = await getConfirmationPoll(deviceCode);\n\t\t\tconst pollData = await getConfirmationPoll(deviceCode);\n\t\t\tif (pollData) {\n\t\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\t\tawait saveRegistrationData(pollData.payload);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success({ pollData });",
            "registrationStatus": "\t\t\tconst registrationStatus = await retrieveRegistrationStatus();\n\t\t\tconst registrationStatus = await retrieveRegistrationStatus();\n\n\t\t\treturn API.v1.success({ registrationStatus });"
        },
        "depth_rank": 7
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/settings.ts",
        "code": {
            "function": "async function fetchSettings(\nasync function fetchSettings(\n\tquery: Parameters<typeof Settings.find>[0],\n\tsort: FindOptions<ISetting>['sort'],\n\toffset: FindOptions<ISetting>['skip'],\n\tcount: FindOptions<ISetting>['limit'],\n\tfields: FindOptions<ISetting>['projection'],\n): Promise<{ settings: ISetting[]; totalCount: number }> {\n\tconst { cursor, totalCount } = Settings.findPaginated(query || {}, {\n\tconst { cursor, totalCount } = Settings.findPaginated(query || {}, {\n\t\tsort: sort || { _id: 1 },",
            "oAuthServicesEnabled": "\t\t\tconst oAuthServicesEnabled = await ServiceConfiguration.configurations.find({}, { fields: { secret: 0 } }).fetchAsync();\n\t\t\tconst oAuthServicesEnabled = await ServiceConfiguration.configurations.find({}, { fields: { secret: 0 } }).fetchAsync();"
        },
        "depth_rank": 7
    },
    {
        "file": "chat.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/chat.ts",
        "code": {
            "msg": "\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });",
            "user": "\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });",
            "result": "\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },",
            "pinnedMessage": "\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },",
            "sent": "\t\t\tconst sent = await executeSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>);\n\t\t\tconst sent = await executeSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },",
            "updatedMessage": "\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },",
            "emoji": "\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;\n\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;",
            "room": "\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });",
            "thread": "\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });",
            "messages": "\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext: text || '',\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.otr',\n\t{ authRequired: true },"
        },
        "depth_rank": 7
    },
    {
        "file": "misc.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/misc.ts",
        "code": {
            "fields": "\t\t\tconst fields = getDefaultUserFields();\n\t\t\tconst fields = getDefaultUserFields();\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: fields })) as IUser;\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: fields })) as IUser;",
            "cacheInvalid": "const cacheInvalid = 60000; // 1 minute\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 60,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t\tvalidateParams: isShieldSvgProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tconst { type, icon } = this.queryParams;",
            "result": "\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));",
            "user": "\t\t\tconst user = await Users.findOneByResetToken(token, { projection: { _id: 1 } });\n\t\t\tconst user = await Users.findOneByResetToken(token, { projection: { _id: 1 } });",
            "mountResult": "const mountResult = ({\nconst mountResult = ({\n\tid,\n\terror,\n\tresult,\n}: {",
            "isSMTPConfigured": "\t\t\tconst isSMTPConfigured = Boolean(settings.get('SMTP_Host')) || isMailURLSet;\n\t\t\tconst isSMTPConfigured = Boolean(settings.get('SMTP_Host')) || isMailURLSet;\n\t\t\treturn API.v1.success({ isSMTPConfigured });"
        },
        "depth_rank": 7
    },
    {
        "file": "integrations.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/integrations.ts",
        "code": {
            "incomingId": "\t\t\t\t\tconst incomingId = integration._id;\n\t\t\t\t\tconst incomingId = integration._id;\n\t\t\t\t\tawait deleteIncomingIntegration(incomingId, this.userId);\n\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tintegration,\n\t\t\t\t\t});\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.failure('Invalid integration type.');\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'integrations.get',\n\t{ authRequired: true, validateParams: isIntegrationsGetProps },"
        },
        "depth_rank": 7
    },
    {
        "file": "webdav.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/webdav.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "isPOSTRemoveWebdavAccount": "const isPOSTRemoveWebdavAccount = ajv.compile<POSTRemoveWebdavAccount>(POSTRemoveWebdavAccountSchema);\nconst isPOSTRemoveWebdavAccount = ajv.compile<POSTRemoveWebdavAccount>(POSTRemoveWebdavAccountSchema);\n\nAPI.v1.addRoute(\n\t'webdav.getMyAccounts',\n\t{ authRequired: true },",
            "result": "\t\t\tconst result = await Meteor.callAsync('removeWebdavAccount', accountId);\n\t\t\tconst result = await Meteor.callAsync('removeWebdavAccount', accountId);\n\n\t\t\treturn API.v1.success({ result });"
        },
        "depth_rank": 7
    },
    {
        "file": "calendar.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/calendar.ts",
        "code": {
            "data": "\t\t\tconst data = await Calendar.list(userId, new Date(date));\n\t\t\tconst data = await Calendar.list(userId, new Date(date));\n\n\t\t\treturn API.v1.success({ data });",
            "id": "\t\t\tconst id = await Calendar.create({\n\t\t\tconst id = await Calendar.create({\n\t\t\t\tuid,\n\t\t\t\tstartTime: new Date(startTime),\n\t\t\t\texternalId,\n\t\t\t\tsubject,\n\t\t\t\tdescription,\n\t\t\t\tmeetingUrl,\n\t\t\t\treminderMinutesBeforeStart,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ id });"
        },
        "depth_rank": 7
    },
    {
        "file": "push.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/push.ts",
        "code": {
            "data": "\t\t\tconst data = await PushNotification.getNotificationForMessageId({ receiver, room, message });\n\t\t\tconst data = await PushNotification.getNotificationForMessageId({ receiver, room, message });"
        },
        "depth_rank": 7
    },
    {
        "file": "extensions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/voip/extensions.ts",
        "code": {
            "result": "\t\t\tconst result = generateJWT(endpointDetails.result, encKey);\n\t\t\tconst result = generateJWT(endpointDetails.result, encKey);\n\t\t\treturn API.v1.success({ result });",
            "endpointDetails": "\t\t\tconst endpointDetails = await Voip.getRegistrationInfo({ extension });\n\t\t\tconst endpointDetails = await Voip.getRegistrationInfo({ extension });"
        },
        "depth_rank": 8
    },
    {
        "file": "omnichannel.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/voip/omnichannel.ts",
        "code": {
            "filter": "function filter(\nfunction filter(\n\tarray: IVoipExtensionWithAgentInfo[],\n\t{ queues, extension, agentId, status }: { queues?: string[]; extension?: string; agentId?: string; status?: string },",
            "isUserAndExtensionParams": "const isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;",
            "isUserIdndTypeParams": "const isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;",
            "user": "\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },",
            "extensions": "\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });"
        },
        "depth_rank": 8
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/voip/rooms.ts",
        "code": {
            "parseDateParams": "const parseDateParams = (date?: string): DateParam => {\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};",
            "isRoomCreationProps": "const isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\nconst isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\n\treturn 'rid' in props && 'token' in props;\n};\n\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\n\treturn 'agentId' in props && 'direction' in props;\n};\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 },",
            "guest": "\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});",
            "room": "\t\t\t\tconst rid = Random.id();\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(\n\t\t\t\t\tawait LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n\t\t\t\t\t\tprojection: API.v1.defaultFieldsToExclude,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });",
            "agent": "\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst agent = { agentId: _id, username };",
            "closedAt": "\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\tdirection,\n\t\t\t\t\troomName,\n\t\t\t\t\toptions: { sort, offset, count, fields },",
            "visitor": "\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});"
        },
        "depth_rank": 8
    },
    {
        "file": "queues.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/v1/voip/queues.ts",
        "code": {
            "queueSummary": "\t\t\tconst queueSummary = await Voip.getQueueSummary();\n\t\t\tconst queueSummary = await Voip.getQueueSummary();\n\t\t\treturn API.v1.success({ summary: queueSummary.result as IQueueSummary[] });"
        },
        "depth_rank": 8
    },
    {
        "file": "addUserToFileObj.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/helpers/addUserToFileObj.ts",
        "code": {
            "uids": "\tconst uids = files.map(({ userId }) => userId).filter(Boolean);\n\tconst uids = files.map(({ userId }) => userId).filter(Boolean);",
            "users": "\tconst users = await Users.findByIds(uids, { projection: { name: 1, username: 1 } }).toArray();\n\tconst users = await Users.findByIds(uids, { projection: { name: 1, username: 1 } }).toArray();",
            "user": "\t\tconst user = users.find(({ _id: userId }) => file.userId && userId === file.userId);\n\t\tconst user = users.find(({ _id: userId }) => file.userId && userId === file.userId);"
        },
        "depth_rank": 7
    },
    {
        "file": "getUserInfo.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/helpers/getUserInfo.ts",
        "code": {
            "userPreferences": "\tconst verifiedEmail = isVerifiedEmail(me);\n\tconst verifiedEmail = isVerifiedEmail(me);\n\n\tconst userPreferences = me.settings?.preferences ?? {};\n\tconst userPreferences = me.settings?.preferences ?? {};"
        },
        "depth_rank": 7
    },
    {
        "file": "getUserFromParams.ts",
        "path": "../Rocket.Chat/apps/meteor/app/api/server/helpers/getUserFromParams.ts",
        "code": {
            "projection": "\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };\n\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-invite/server/server.ts",
        "code": {
            "subscription": "\t\tconst usersFiltered: IUser[] = [];\n\t\tconst usersFiltered: IUser[] = [];\n\n\t\tfor await (const user of users) {\n\t\tfor await (const user of users) {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id, {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id, {\n\t\t\t\tprojection: { _id: 1 },",
            "usernameStr": "\t\t\tconst usernameStr = user.username as string;\n\t\t\tconst usernameStr = user.username as string;\n\t\t\tvoid api.broadcast('notify.ephemeralMessage', userId, message.rid, {\n\t\t\t\tmsg: i18n.t('Username_is_already_in_here', {\n\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\tsprintf: [usernameStr],\n\t\t\t\t\tlng: settings.get('Language') || 'en',\n\t\t\t\t}),\n\t\t\t});\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tusersFiltered.map(async (user) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await addUsersToRoomMethod(userId, {\n\t\t\t\t\t\trid: message.rid,\n\t\t\t\t\t\tusers: [user.username || ''],\n\t\t\t\t\t});\n\t\t\t\t} catch ({ error }: any) {"
        },
        "depth_rank": 6
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-inviteall/server/server.ts",
        "code": {
            "cursor": "\t\tconst cursor = Subscriptions.findByRoomIdWhenUsernameExists(baseChannel._id, {\n\t\tconst cursor = Subscriptions.findByRoomIdWhenUsernameExists(baseChannel._id, {\n\t\t\tprojection: { 'u.username': 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "importer.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer-pending-avatars/server/importer.js",
        "code": {
            "fileCount": "\t\tconst users = await Users.findAllUsersWithPendingAvatar();\n\t\tconst users = await Users.findAllUsersWithPendingAvatar();\n\t\tconst fileCount = await users.count();\n\t\tconst fileCount = await users.count();\n\n\t\tif (fileCount === 0) {\n\t\t\tawait super.updateProgress(ProgressStep.DONE);\n\t\t\treturn 0;\n\t\t}\n\n\t\tawait this.updateRecord({ 'count.messages': fileCount, 'messagesstatus': null });",
            "fileData": "\t\tconst fileData = new Selection(this.name, [], [], fileCount);\n\t\tconst fileData = new Selection(this.name, [], [], fileCount);\n\t\tawait this.updateRecord({ fileData });",
            "await": "\t\tconst pendingFileUserList = await Users.findAllUsersWithPendingAvatar();\n\t\tconst pendingFileUserList = await Users.findAllUsersWithPendingAvatar();\n\t\ttry {\n\t\t\tfor await (const user of pendingFileUserList) {\n\t\t\tfor await (const user of pendingFileUserList) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { _pendingAvatarUrl: url, name, _id } = user;\n\t\t\t\t\tconst { _pendingAvatarUrl: url, name, _id } = user;"
        },
        "depth_rank": 6
    },
    {
        "file": "ActionManager.js",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/ActionManager.js",
        "code": {
            "payload": "\t\tconst triggerId = generateTriggerId(appId);\n\t\tconst triggerId = generateTriggerId(appId);\n\n\t\tconst payload = rest.payload || rest;\n\t\tconst payload = rest.payload || rest;\n\n\t\tsetTimeout(reject, TRIGGER_TIMEOUT, [TRIGGER_TIMEOUT_ERROR, { triggerId, appId }]);",
            "instance": "\tconst instance = instances.get(view.id);\n\tconst instance = instances.get(view.id);\n\ttry {\n\t\tawait triggerAction({ type: UIKitIncomingInteractionType.VIEW_CLOSED, view, ...options });"
        },
        "depth_rank": 6
    },
    {
        "file": "findParentMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/findParentMessage.ts",
        "code": {
            "messages": "\tconst waiting: string[] = [];\n\tconst waiting: string[] = [];\n\tlet resolve: (resolved: IMessage[] | PromiseLike<IMessage[]>) => void;\n\tlet pending = new Promise<IMessage[]>((r) => {\n\t\tresolve = r;\n\t});\n\n\tconst getMessages = withDebouncing({ wait: 500 })(async function () {\n\tconst getMessages = withDebouncing({ wait: 500 })(async function () {\n\t\tconst _tmp = [...waiting];\n\t\tconst _tmp = [...waiting];\n\t\twaiting.length = 0;\n\t\tresolve(callWithErrorHandling('getMessages', _tmp));\n\t\tpending = new Promise<IMessage[]>((r) => {\n\t\t\tresolve = r;\n\t\t});\n\t});\n\n\tconst get = async (tmid: IMessage['_id']) => {\n\tconst get = async (tmid: IMessage['_id']) => {\n\t\tvoid getMessages();\n\t\tconst messages = await pending;\n\t\tconst messages = await pending;\n\t\treturn messages.find(({ _id }) => _id === tmid);",
            "message": "\t\tconst message = ChatMessage.findOne({ _id: tmid });\n\t\tconst message = ChatMessage.findOne({ _id: tmid });"
        },
        "depth_rank": 6
    },
    {
        "file": "createComposerAPI.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/messageBox/createComposerAPI.ts",
        "code": {
            "event": "\tconst triggerEvent = (input: HTMLTextAreaElement, evt: string): void => {\n\tconst triggerEvent = (input: HTMLTextAreaElement, evt: string): void => {\n\t\tconst event = new Event(evt, { bubbles: true });\n\t\tconst event = new Event(evt, { bubbles: true });",
            "setText": "\t\tconst tracker = (input as any)._valueTracker;\n\t\tconst tracker = (input as any)._valueTracker;\n\t\tif (tracker) {\n\t\t\ttracker.setValue(new Date().toString());\n\t\t}\n\t\tinput.dispatchEvent(event);\n\t};\n\n\tconst emitter = new Emitter<{\n\tconst emitter = new Emitter<{\n\t\tquotedMessagesUpdate: void;\n\t\tediting: void;\n\t\trecording: void;\n\t\trecordingVideo: void;\n\t\tformatting: void;\n\t\tmircophoneDenied: void;\n\t}>();\n\n\tlet _quotedMessages: IMessage[] = [];\n\n\tconst persist = withDebouncing({ wait: 300 })(() => {\n\tconst persist = withDebouncing({ wait: 300 })(() => {\n\t\tif (input.value) {\n\t\t\tMeteor._localStorage.setItem(storageID, input.value);\n\t\t\treturn;\n\t\t}\n\n\t\tMeteor._localStorage.removeItem(storageID);\n\t});\n\n\tconst notifyQuotedMessagesUpdate = (): void => {\n\tconst notifyQuotedMessagesUpdate = (): void => {\n\t\temitter.emit('quotedMessagesUpdate');\n\t};\n\n\tinput.addEventListener('input', persist);\n\n\tconst setText = (\n\tconst setText = (\n\t\ttext: string,\n\t\t{\n\t\t\tselection,\n\t\t}: {",
            "wrapSelection": "\tconst release = (): void => {\n\tconst release = (): void => {\n\t\tinput.removeEventListener('input', persist);\n\t\tstopFormatterTracker.stop();\n\t};\n\n\tconst wrapSelection = (pattern: string): void => {\n\tconst wrapSelection = (pattern: string): void => {\n\t\tconst { selectionEnd = input.value.length, selectionStart = 0 } = input;\n\t\tconst { selectionEnd = input.value.length, selectionStart = 0 } = input;",
            "startPattern": "\t\tconst initText = input.value.slice(0, selectionStart);\n\t\tconst initText = input.value.slice(0, selectionStart);\n\t\tconst selectedText = input.value.slice(selectionStart, selectionEnd);\n\t\tconst selectedText = input.value.slice(selectionStart, selectionEnd);\n\t\tconst finalText = input.value.slice(selectionEnd, input.value.length);\n\t\tconst finalText = input.value.slice(selectionEnd, input.value.length);\n\n\t\tfocus();\n\n\t\tconst startPattern = pattern.slice(0, pattern.indexOf('{{text}}'));\n\t\tconst startPattern = pattern.slice(0, pattern.indexOf('{{text}}'));",
            "replaceText": "\tconst insertNewLine = (): void => insertText('\\n');\n\tconst insertNewLine = (): void => insertText('\\n');\n\n\tsetText(Meteor._localStorage.getItem(storageID) ?? '');\n\n\t// Gets the text that is connected to the cursor and replaces it with the given text\n\tconst replaceText = (text: string, selection: { readonly start: number; readonly end: number }): void => {\n\tconst replaceText = (text: string, selection: { readonly start: number; readonly end: number }): void => {\n\t\tconst { selectionStart, selectionEnd } = input;\n\t\tconst { selectionStart, selectionEnd } = input;"
        },
        "depth_rank": 7
    },
    {
        "file": "messagePopupConfig.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/messagePopupConfig.ts",
        "code": {
            "user": "\t\tconst uid = Meteor.userId();\n\t\tconst uid = Meteor.userId();\n\t\tconst rid = asReactiveSource(\n\t\tconst rid = asReactiveSource(\n\t\t\t(cb) => RoomManager.on('changed', cb),\n\t\t\t() => RoomManager.opened,\n\t\t);\n\t\tconst user = uid ? (Meteor.users.findOne(uid, { fields: { username: 1 } }) as IUser | undefined) : undefined;\n\t\tconst user = uid ? (Meteor.users.findOne(uid, { fields: { username: 1 } }) as IUser | undefined) : undefined;"
        },
        "depth_rank": 7
    },
    {
        "file": "ComposerBoxPopup.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/ComposerBoxPopup.tsx",
        "code": {
            "ComposerBoxPopup": "const ComposerBoxPopup = <\nconst ComposerBoxPopup = <\n\tT extends {\n\t\t_id: string;\n\t\tsort?: number;\n\t},\n>({\n\ttitle,\n\titems,\n\tfocused,\n\tselect,\n\trenderItem = ({ item }: { item: T }) => <>{JSON.stringify(item)}</>,"
        },
        "depth_rank": 7
    },
    {
        "file": "ComposerBoxPopupPreview.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/components/composerBoxPopupPreview/ComposerBoxPopupPreview.tsx",
        "code": {
            "params": "\t\t\t\t\tconst cmd = matches[1].replace('/', '').trim().toLowerCase();\n\t\t\t\t\tconst cmd = matches[1].replace('/', '').trim().toLowerCase();\n\n\t\t\t\t\tconst params = matches[2];\n\t\t\t\t\tconst params = matches[2];\n\t\t\t\t\t// TODO: Fix this solve the typing issue\n\t\t\t\t\tvoid executeSlashCommandPreviewMethod({ cmd, params, msg: { rid, tmid } }, { id: item._id, type: item.type, value: item.value });"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerBoxPopupSlashCommand.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/components/composerBoxPopup/ComposerBoxPopupSlashCommand.tsx",
        "code": {
            "ComposerPopupSlashCommand": "const ComposerPopupSlashCommand = ({ _id, description, params }: ComposerBoxPopupSlashCommandProps) => {\nconst ComposerPopupSlashCommand = ({ _id, description, params }: ComposerBoxPopupSlashCommandProps) => {\n\treturn (\n\t\t<>\n\t\t\t<OptionContent>\n\t\t\t\t{_id} <OptionDescription>{params}</OptionDescription>"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerBoxPopupRoom.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/components/composerBoxPopup/ComposerBoxPopupRoom.tsx",
        "code": {
            "ComposerBoxPopupRoom": "const ComposerBoxPopupRoom = ({ fname, name, ...props }: ComposerBoxPopupRoomProps) => {\nconst ComposerBoxPopupRoom = ({ fname, name, ...props }: ComposerBoxPopupRoomProps) => {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<RoomIcon room={props} />"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerBoxPopupCannedResponse.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/components/composerBoxPopup/ComposerBoxPopupCannedResponse.tsx",
        "code": {
            "ComposerPopupCannedResponse": "const ComposerPopupCannedResponse = ({ shortcut, text }: ComposerBoxPopupCannedResponseProps) => {\nconst ComposerPopupCannedResponse = ({ shortcut, text }: ComposerBoxPopupCannedResponseProps) => {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<strong>{shortcut}</strong>"
        },
        "depth_rank": 9
    },
    {
        "file": "ComposerBoxPopupEmoji.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui-message/client/popup/components/composerBoxPopup/ComposerBoxPopupEmoji.tsx",
        "code": {
            "ComposerPopupEmoji": "const ComposerPopupEmoji = ({ _id }: ComposerBoxPopupEmojiProps) => {\nconst ComposerPopupEmoji = ({ _id }: ComposerBoxPopupEmojiProps) => {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<Emoji emojiHandle={_id} />"
        },
        "depth_rank": 9
    },
    {
        "file": "cronPruneMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/retention-policy/server/cronPruneMessages.ts",
        "code": {
            "await": "\tfor await (const { _id: rid, retention } of rooms) {\n\tfor await (const { _id: rid, retention } of rooms) {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;"
        },
        "depth_rank": 6
    },
    {
        "file": "Presence.ts",
        "path": "../Rocket.Chat/apps/meteor/app/notifications/server/lib/Presence.ts",
        "code": {
            "payload": "\t\tconst payload = this.streamer.changedPayload(this.streamer.subscriptionName, args.uid, { ...args, eventName: args.uid }); // there is no good explanation to keep eventName, I just want to save one 'DDPCommon.parseDDP' on the client side, so I'm trying to fit the Meteor Streamer's payload\n\t\tconst payload = this.streamer.changedPayload(this.streamer.subscriptionName, args.uid, { ...args, eventName: args.uid }); // there is no good explanation to keep eventName, I just want to save one 'DDPCommon.parseDDP' on the client side, so I'm trying to fit the Meteor Streamer's payload"
        },
        "depth_rank": 7
    },
    {
        "file": "findOrCreateInvite.ts",
        "path": "../Rocket.Chat/apps/meteor/app/invites/server/functions/findOrCreateInvite.ts",
        "code": {
            "getInviteUrl": "function getInviteUrl(invite: Omit<IInvite, '_updatedAt'>) {\nfunction getInviteUrl(invite: Omit<IInvite, '_updatedAt'>) {\n\tconst { _id } = invite;\n\tconst { _id } = invite;",
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(invite.rid, userId, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(invite.rid, userId, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "sendInvitationEmail.ts",
        "path": "../Rocket.Chat/apps/meteor/app/invites/server/functions/sendInvitationEmail.ts",
        "code": {
            "await": "\tfor await (const email of validEmails) {\n\tfor await (const email of validEmails) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: email,\n\t\t\t\tfrom: settings.get('From_Email'),\n\t\t\t\tsubject,\n\t\t\t\thtml,\n\t\t\t\tdata: {\n\t\t\t\t\temail,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait Settings.incrementValueById('Invitation_Email_Count');\n\t\t\tcontinue;\n\t\t} catch ({ message }: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "useInviteToken.ts",
        "path": "../Rocket.Chat/apps/meteor/app/invites/server/functions/useInviteToken.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "gcm.js",
        "path": "../Rocket.Chat/apps/meteor/app/push/server/gcm.js",
        "code": {
            "data": "\tconst data = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\tconst data = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};",
            "userToken": "\tconst userToken = userTokens.length === 1 ? userTokens[0] : null;\n\tconst userToken = userTokens.length === 1 ? userTokens[0] : null;\n\n\tsender.send(message, userTokens, 5, function (err, result) {\n\tsender.send(message, userTokens, 5, function (err, result) {\n\t\tif (err) {\n\t\t\tlogger.debug({ msg: 'ANDROID ERROR: result of sender', result });"
        },
        "depth_rank": 6
    },
    {
        "file": "methods.ts",
        "path": "../Rocket.Chat/apps/meteor/app/push/server/methods.ts",
        "code": {
            "hashedToken": "\t\tconst hashedToken = Accounts._hashLoginToken(options.authToken);\n\t\tconst hashedToken = Accounts._hashLoginToken(options.authToken);\n\n\t\tlet doc;\n\n\t\t// lookup app by id if one was included\n\t\tif (options.id) {\n\t\t\tdoc = await AppsTokens.findOne({ _id: options.id });"
        },
        "depth_rank": 6
    },
    {
        "file": "push.js",
        "path": "../Rocket.Chat/apps/meteor/app/push/server/push.js",
        "code": {
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\t...(token && this.options.getAuthorization && { headers: { Authorization: await this.options.getAuthorization() } }),"
        },
        "depth_rank": 6
    },
    {
        "file": "README.md",
        "path": "../Rocket.Chat/apps/meteor/app/lib/README.md",
        "code": {
            "function": "settingsRegistry.addGroup('Settings_Group', function() {\nsettingsRegistry.addGroup('Settings_Group', function() {\n    this.add('SettingInGroup', 'default_value', { type: 'boolean', public: true });"
        },
        "depth_rank": 5
    },
    {
        "file": "sendMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/client/methods/sendMessage.ts",
        "code": {
            "messageAlreadyExists": "\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });\n\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });",
            "room": "\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });\n\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendNotificationsOnMessage.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/sendNotificationsOnMessage.js",
        "code": {
            "isHighlighted": "\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;",
            "filter": "\t\tconst filter = { [notificationField]: 'all' };\n\t\tconst filter = { [notificationField]: 'all' };",
            "cursor": "\t\tconst mentions = [...mentionIdsWithoutGroups];\n\t\tconst mentions = [...mentionIdsWithoutGroups];\n\t\tconst cursor = Subscriptions.findByRoomIdAndUserIds(room._id, mentionIdsWithoutGroups, {\n\t\tconst cursor = Subscriptions.findByRoomIdAndUserIds(room._id, mentionIdsWithoutGroups, {\n\t\t\tprojection: { 'u._id': 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "debug.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/debug.js",
        "code": {
            "end": "\t\tconst end = metrics.meteorSubscriptions.startTimer({ subscription: name });\n\t\tconst end = metrics.meteorSubscriptions.startTimer({ subscription: name });"
        },
        "depth_rank": 7
    },
    {
        "file": "PasswordPolicyClass.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/PasswordPolicyClass.js",
        "code": {
            "length": "\t\t\t\tconst password = this._generatePassword();\n\t\t\t\tconst password = this._generatePassword();\n\t\t\t\tif (this.validate(password)) {\n\t\t\t\t\treturn password;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Random.id();\n\t}\n\n\t_generatePassword() {\n\t\tconst length = Math.min(Math.max(this.minLength, 12), this.maxLength > 0 ? this.maxLength : Number.MAX_SAFE_INTEGER);\n\t\tconst length = Math.min(Math.max(this.minLength, 12), this.maxLength > 0 ? this.maxLength : Number.MAX_SAFE_INTEGER);\n\t\treturn generator.generate({\n\t\t\tlength,\n\t\t\t...(this.mustContainAtLeastOneNumber && { numbers: true }),"
        },
        "depth_rank": 7
    },
    {
        "file": "deprecationWarningLogger.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/deprecationWarningLogger.ts",
        "code": {
            "deprecationLogger": "const deprecationLogger = new Logger('DeprecationWarning');\nconst deprecationLogger = new Logger('DeprecationWarning');\n\ntype MessageFn<T> = (params: { parameter: string; version: string } & T) => string;"
        },
        "depth_rank": 7
    },
    {
        "file": "bugsnag.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/bugsnag.ts",
        "code": {
            "_bugsnagDebug": "const logger = new Logger('bugsnag');\nconst logger = new Logger('bugsnag');\n\nconst originalMeteorDebug = Meteor._debug;\nconst originalMeteorDebug = Meteor._debug;\n\nfunction _bugsnagDebug(message: any, stack: any, ...args: any): void {\nfunction _bugsnagDebug(message: any, stack: any, ...args: any): void {\n\tif (stack instanceof Error) {\n\t\tBugsnag.notify(stack, (event) => {\n\t\t\tevent.context = message;\n\t\t});\n\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "notifyUsersOnMessage.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/notifyUsersOnMessage.js",
        "code": {
            "toAll": "\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');",
            "toHere": "\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');",
            "highlightOptions": "\tconst mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, {\n\tconst mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, {\n\t\tuserMentions,\n\t\totherMentions,\n\t\tmessage,\n\t});\n\n\treturn {\n\t\ttoAll,\n\t\ttoHere,\n\t\tmentionIds,\n\t};\n}\n\nconst incGroupMentions = async (rid, roomType, excludeUserId, unreadCount) => {\nconst incGroupMentions = async (rid, roomType, excludeUserId, unreadCount) => {\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnread = roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n\tconst incUnread = roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n\n\tawait Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(rid, excludeUserId, 1, incUnread);\n};\n\nconst incUserMentions = async (rid, roomType, uids, unreadCount) => {\nconst incUserMentions = async (rid, roomType, uids, unreadCount) => {\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\tconst incUnread = roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n\tconst incUnread = roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n\n\tawait Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(rid, uids, 1, incUnread);\n};\n\nconst getUserIdsFromHighlights = async (rid, message) => {\nconst getUserIdsFromHighlights = async (rid, message) => {\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };",
            "unreadCount": "\t\tconst userIds = new Set(mentionIds);\n\t\tconst userIds = new Set(mentionIds);\n\n\t\tconst unreadCount = getUnreadSettingCount(room.t);\n\t\tconst unreadCount = getUnreadSettingCount(room.t);\n\n\t\t(await getUserIdsFromHighlights(room._id, message)).forEach((uid) => userIds.add(uid));\n\n\t\t// give priority to user mentions over group mentions\n\t\tif (userIds.size > 0) {\n\t\t\tawait incUserMentions(room._id, room.t, [...userIds], unreadCount);\n\t\t} else if (toAll || toHere) {"
        },
        "depth_rank": 7
    },
    {
        "file": "RateLimiter.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/lib/RateLimiter.js",
        "code": {
            "match": "\t\tconst rateLimiter = new RateLimiter();\n\t\tconst rateLimiter = new RateLimiter();\n\t\tObject.entries(matchers).forEach(function ([key, matcher]) {\n\t\tObject.entries(matchers).forEach(function ([key, matcher]) {\n\t\t\tmatchers[key] = (...args) => Promise.await(matcher(...args));\n\t\t});\n\n\t\trateLimiter.addRule(matchers, numRequests, timeInterval);\n\t\treturn function (...args) {\n\t\treturn function (...args) {\n\t\t\tconst match = {};\n\t\t\tconst match = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "filterATHereTag.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/startup/filterATHereTag.ts",
        "code": {
            "action": "\t\t\t\tconst action = i18n.t('Notify_active_in_this_room', { lng: language });\n\t\t\t\tconst action = i18n.t('Notify_active_in_this_room', { lng: language });"
        },
        "depth_rank": 7
    },
    {
        "file": "rateLimiter.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/startup/rateLimiter.js",
        "code": {
            "rateLimiterConsoleLog": "const logger = new Logger('RateLimiter');\nconst logger = new Logger('RateLimiter');\n\nconst slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\nconst slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\n\nconst rateLimiterConsoleLog = ({ msg, reply, input }) => {\nconst rateLimiterConsoleLog = ({ msg, reply, input }) => {\n\tconsole.warn('DDP RATE LIMIT:', msg);\n\tconsole.warn(JSON.stringify({ reply, input }, null, 2));",
            "rateLimiterLogger": "const rateLimiterLogger = ({ msg, reply, input }) => logger.info({ msg, reply, input });\nconst rateLimiterLogger = ({ msg, reply, input }) => logger.info({ msg, reply, input });",
            "names": "const rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\nconst rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\n\n// Get initial set of names already registered for rules\nconst names = new Set(\nconst names = new Set(\n\tObject.values(DDPRateLimiter.printRules())\n\t\t.map((rule) => rule._matchers)\n\t\t.filter((match) => typeof match.name === 'string')\n\t\t.map((match) => match.name),\n);\n\n// Override the addRule to save new names added after this point\nconst { addRule } = DDPRateLimiter;\nconst { addRule } = DDPRateLimiter;",
            "ruleIds": "const ruleIds = {};\nconst ruleIds = {};",
            "callback": "const callback = (msg, name) => (reply, input) => {\nconst callback = (msg, name) => (reply, input) => {\n\tif (reply.allowed === false) {\n\t\trateLimiterLog({ msg, reply, input });"
        },
        "depth_rank": 7
    },
    {
        "file": "oAuthServicesUpdate.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/startup/oAuthServicesUpdate.js",
        "code": {
            "await": "\tconst filteredServices = services.filter(([, value]) => typeof value === 'boolean');\n\tconst filteredServices = services.filter(([, value]) => typeof value === 'boolean');\n\tfor await (const [key, value] of filteredServices) {\n\tfor await (const [key, value] of filteredServices) {\n\t\tlogger.debug({ oauth_updated: key });"
        },
        "depth_rank": 7
    },
    {
        "file": "filterATAllTag.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/startup/filterATAllTag.ts",
        "code": {
            "action": "\t\t\t\tconst action = i18n.t('Notify_all_in_this_room', { lng: language });\n\t\t\t\tconst action = i18n.t('Notify_all_in_this_room', { lng: language });"
        },
        "depth_rank": 7
    },
    {
        "file": "archiveRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/archiveRoom.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "leaveRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/leaveRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "createPrivateGroup.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/createPrivateGroup.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/sendMessage.ts",
        "code": {
            "parentMessage": "\t\tconst parentMessage = await Messages.findOneById(message.tmid, { projection: { rid: 1, tmid: 1 } });\n\t\tconst parentMessage = await Messages.findOneById(message.tmid, { projection: { rid: 1, tmid: 1 } });",
            "room": "\t\tconst room = await canSendMessageAsync(rid, { uid, username: user.username, type: user.type });\n\t\tconst room = await canSendMessageAsync(rid, { uid, username: user.username, type: user.type });",
            "errorMessage": "\t\tconst errorMessage = typeof err === 'string' ? err : err.error || err.message;\n\t\tconst errorMessage = typeof err === 'string' ? err : err.error || err.message;\n\t\tvoid api.broadcast('notify.ephemeralMessage', uid, message.rid, {\n\t\t\tmsg: i18n.t(errorMessage, { lng: user.language }),"
        },
        "depth_rank": 7
    },
    {
        "file": "unarchiveRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/unarchiveRoom.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "setAdminStatus.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/setAdminStatus.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ _id: userId }, { projection: { username: 1, federated: 1 } });\n\t\tconst user = await Users.findOne({ _id: userId }, { projection: { username: 1, federated: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "blockUser.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/blockUser.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOne({ _id: rid });\n\t\tconst room = await Rooms.findOne({ _id: rid });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveSettings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/saveSettings.ts",
        "code": {
            "validJSON": "const validJSON = Match.Where((value: string) => {\nconst validJSON = Match.Where((value: string) => {\n\ttry {\n\t\tvalue === '' || JSON.parse(value);\n\t\treturn true;\n\t} catch (_) {"
        },
        "depth_rank": 7
    },
    {
        "file": "addUsersToRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/addUsersToRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, userId, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, userId, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "createChannel.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/methods/createChannel.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "relinquishRoomOwnerships.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/relinquishRoomOwnerships.ts",
        "code": {
            "changeOwner": "\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);\n\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);",
            "await": "\tfor await (const { newOwner, rid } of changeOwner) {\n\tfor await (const { newOwner, rid } of changeOwner) {\n\t\tnewOwner && (await Roles.addUserRoles(newOwner, ['owner'], rid));\n\t}\n\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);"
        },
        "depth_rank": 7
    },
    {
        "file": "deleteMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/deleteMessage.ts",
        "code": {
            "files": "\tconst files = (message.files || [message.file]).filter(Boolean); // Keep compatibility with old messages\n\tconst files = (message.files || [message.file]).filter(Boolean); // Keep compatibility with old messages\n\n\tif (keepHistory) {\n\t\tif (showDeletedStatus) {\n\t\t\t// TODO is there a better way to tell TS \"IUser[username]\" is not undefined?\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(message._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t\t} else {",
            "await": "\t\tfor await (const file of files) {\n\t\tfor await (const file of files) {\n\t\t\tfile?._id && (await FileUpload.getStore('Uploads').deleteById(file._id));\n\t\t}\n\t}\n\n\tif (showDeletedStatus) {\n\t\t// TODO is there a better way to tell TS \"IUser[username]\" is not undefined?\n\t\tawait Messages.setAsDeletedByIdAndUser(message._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t} else {",
            "room": "\tconst room = await Rooms.findOneById(message.rid, { projection: { lastMessage: 1, prid: 1, mid: 1, federated: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { lastMessage: 1, prid: 1, mid: 1, federated: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveUser.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/saveUser.js",
        "code": {
            "gravatarUrl": "\t\tconst gravatarUrl = Gravatar.url(userData.email, {\n\t\tconst gravatarUrl = Gravatar.url(userData.email, {\n\t\t\tdefault: '404',\n\t\t\tsize: '200',\n\t\t\tprotocol: 'https',\n\t\t});\n\n\t\ttry {\n\t\t\tawait setUserAvatar(userData, gravatarUrl, '', 'url');\n\t\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "processWebhookMessage.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/processWebhookMessage.js",
        "code": {
            "attachment": "\t\t\t\tconst attachment = message.attachments[i];\n\t\t\t\tconst attachment = message.attachments[i];\n\t\t\t\tif (attachment.msg) {\n\t\t\t\t\tattachment.text = trim(attachment.msg);\n\t\t\t\t\tdelete attachment.msg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait validateRoomMessagePermissionsAsync(room, { uid: user._id, ...user });",
            "messageReturn": "\t\tconst messageReturn = await sendMessage(user, message, room);\n\t\tconst messageReturn = await sendMessage(user, message, room);\n\t\tsentData.push({ channel, message: messageReturn });"
        },
        "depth_rank": 7
    },
    {
        "file": "removeUserFromRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/removeUserFromRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "setEmail.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/setEmail.ts",
        "code": {
            "email": "const _sendEmailChangeNotification = async function (to: string, newEmail: string) {\nconst _sendEmailChangeNotification = async function (to: string, newEmail: string) {\n\tconst subject = String(settings.get('Email_Changed_Email_Subject'));\n\tconst subject = String(settings.get('Email_Changed_Email_Subject'));\n\tconst email = {\n\tconst email = {\n\t\tto,\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject,\n\t\thtml,\n\t\tdata: {\n\t\t\temail: escapeHTML(newEmail),\n\t\t},\n\t};\n\n\ttry {\n\t\tawait Mailer.send(email);\n\t} catch (error: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "getUserSingleOwnedRooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getUserSingleOwnedRooms.ts",
        "code": {
            "roomsThatWillChangeOwner": "\tconst roomsThatWillChangeOwner = subscribedRooms\n\tconst roomsThatWillChangeOwner = subscribedRooms\n\t\t.filter(({ shouldChangeOwner }) => shouldChangeOwner)",
            "roomsThatWillBeRemoved": "\tconst roomsThatWillBeRemoved = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }: { rid: string }) => rid);\n\tconst roomsThatWillBeRemoved = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }: { rid: string }) => rid);",
            "rooms": "\tconst roomIds = roomsThatWillBeRemoved.concat(roomsThatWillChangeOwner);\n\tconst roomIds = roomsThatWillBeRemoved.concat(roomsThatWillChangeOwner);\n\tconst rooms = Rooms.findByIds(roomIds, { projection: { _id: 1, name: 1, fname: 1 } });\n\tconst rooms = Rooms.findByIds(roomIds, { projection: { _id: 1, name: 1, fname: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "setStatusText.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/setStatusText.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'roles' | 'statusText'>>(userId, {\n\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'roles' | 'statusText'>>(userId, {\n\t\tprojection: { username: 1, name: 1, status: 1, roles: 1, statusText: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "setUsername.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/setUsername.ts",
        "code": {
            "avatarSuggestions": "\t\tconst avatarSuggestions = (await getAvatarSuggestionForUser(user)) as {};\n\t\tconst avatarSuggestions = (await getAvatarSuggestionForUser(user)) as {};"
        },
        "depth_rank": 7
    },
    {
        "file": "getUserCreatedByApp.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getUserCreatedByApp.ts",
        "code": {
            "users": "\tconst users = await Users.find({ appId, type }, options).toArray();\n\tconst users = await Users.find({ appId, type }, options).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "loadMessageHistory.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/loadMessageHistory.ts",
        "code": {
            "room": "\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });\n\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "validateCustomFields.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/validateCustomFields.js",
        "code": {
            "customFields": "\tconst customFields = {};\n\tconst customFields = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "createDirectRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/createDirectRoom.ts",
        "code": {
            "generateSubscription": "const generateSubscription = (\nconst generateSubscription = (\n\tfname: string,\n\tname: string,\n\tuser: IUser,\n\textra: MatchKeysAndValues<ISubscription>,\n): MatchKeysAndValues<ISubscription> => ({\n\t_id: Random.id(),\n\talert: false,\n\tunread: 0,\n\tuserMentions: 0,\n\tgroupMentions: 0,\n\t...(user.customFields && { customFields: user.customFields }),",
            "getFname": "const getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');",
            "getName": "const getName = (members: IUser[]): string => members.map(({ username }) => username).join(', ');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(', ');",
            "uids": "\tconst uids = roomMembers.map(({ _id }) => _id).sort();\n\tconst uids = roomMembers.map(({ _id }) => _id).sort();",
            "roomInfo": "\tconst roomInfo = {\n\tconst roomInfo = {\n\t\t...(uids.length === 2 && { _id: uids.join('') }), // Deprecated: using users' _id to compose the room _id is deprecated",
            "rid": "\tconst rid = room?._id || (await Rooms.insertOne(roomInfo)).insertedId;\n\tconst rid = room?._id || (await Rooms.insertOne(roomInfo)).insertedId;\n\n\tif (roomMembers.length === 1) {\n\t\t// dm to yourself\n\t\tawait Subscriptions.updateOne(\n\t\t\t{ rid, 'u._id': roomMembers[0]._id },",
            "insertedRoom": "\t\tconst insertedRoom = await Rooms.findOneById(rid);\n\t\tconst insertedRoom = await Rooms.findOneById(rid);\n\n\t\tawait callbacks.run('afterCreateDirectRoom', insertedRoom, { members: roomMembers, creatorId: options?.creator });"
        },
        "depth_rank": 7
    },
    {
        "file": "closeOmnichannelConversations.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/closeOmnichannelConversations.ts",
        "code": {
            "roomsInfo": "\tconst roomsInfo = await LivechatRooms.findByIds(\n\tconst roomsInfo = await LivechatRooms.findByIds(\n\t\tsubscribedRooms.map(({ rid }) => rid),",
            "comment": "\tconst language = settings.get<string>('Language') || 'en';\n\tconst language = settings.get<string>('Language') || 'en';\n\tconst comment = i18n.t('Agent_deactivated', { lng: language });\n\tconst comment = i18n.t('Agent_deactivated', { lng: language });"
        },
        "depth_rank": 7
    },
    {
        "file": "updateMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/updateMessage.ts",
        "code": {
            "appMessage": "\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps && Apps.isLoaded()) {\n\t\tconst appMessage = Object.assign({}, originalMessage, message);\n\t\tconst appMessage = Object.assign({}, originalMessage, message);"
        },
        "depth_rank": 7
    },
    {
        "file": "updateGroupDMsName.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/updateGroupDMsName.ts",
        "code": {
            "getFname": "const getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');",
            "getName": "const getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');",
            "rooms": "\tconst rooms = Rooms.findGroupDMsByUids([userThatChangedName._id], { projection: { uids: 1 } });\n\tconst rooms = Rooms.findGroupDMsByUids([userThatChangedName._id], { projection: { uids: 1 } });",
            "subs": "\t\tconst members = getMembers(room.uids);\n\t\tconst members = getMembers(room.uids);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { projection: { '_id': 1, 'u._id': 1 } });\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { projection: { '_id': 1, 'u._id': 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "checkUsernameAvailability.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/checkUsernameAvailability.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });",
            "existingUser": "\tconst existingUser = await Users.findOne(\n\tconst existingUser = await Users.findOne(\n\t\t{\n\t\t\tusername: toRegExp(username),\n\t\t},\n\t\t{ projection: { _id: 1 } },",
            "existingTeam": "\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });\n\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "addUserToRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/addUserToRoom.ts",
        "code": {
            "function": "\t\tprocess.nextTick(async function () {\n\t\tprocess.nextTick(async function () {\n\t\t\t// Add a new event, with an optional inviter\n\t\t\tawait callbacks.run('afterAddedToRoom', { user: userToBeAdded, inviter }, room);"
        },
        "depth_rank": 7
    },
    {
        "file": "createRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/createRoom.ts",
        "code": {
            "owner": "\t\t\tfunction: 'RocketChat.createRoom',\n\t\t\tfunction: 'RocketChat.createRoom',\n\t\t});\n\t}\n\n\tconst owner = await Users.findOneByUsernameIgnoringCase(ownerUsername, { projection: { username: 1, name: 1 } });\n\tconst owner = await Users.findOneByUsernameIgnoringCase(ownerUsername, { projection: { username: 1, name: 1 } });",
            "now": "\tconst now = new Date();\n\tconst now = new Date();\n\n\tconst roomProps: Omit<IRoom, '_id' | '_updatedAt'> = {\n\tconst roomProps: Omit<IRoom, '_id' | '_updatedAt'> = {\n\t\tfname: name,\n\t\t_updatedAt: now,\n\t\t...extraData,\n\t\tname: await getValidRoomName(name.trim(), undefined, {\n\t\t\t...(options?.nameValidationRegex && { nameValidationRegex: options.nameValidationRegex }),",
            "team": "\t\tconst team = await Team.getOneById(teamId, { projection: { _id: 1 } });\n\t\tconst team = await Team.getOneById(teamId, { projection: { _id: 1 } });",
            "shouldBeHandledByFederation": "\tconst eventResult = await Apps.triggerEvent('IPreRoomCreateModify', await Apps.triggerEvent('IPreRoomCreateExtend', tmp));\n\tconst eventResult = await Apps.triggerEvent('IPreRoomCreateModify', await Apps.triggerEvent('IPreRoomCreateExtend', tmp));\n\n\tif (eventResult && typeof eventResult === 'object' && delete eventResult._USERNAMES) {\n\t\tObject.assign(roomProps, eventResult);\n\t}\n\n\tif (type === 'c') {\n\t\tawait callbacks.run('beforeCreateChannel', owner, roomProps);\n\t}\n\tconst room = await Rooms.createWithFullRoomData(roomProps);\n\tconst room = await Rooms.createWithFullRoomData(roomProps);\n\tconst shouldBeHandledByFederation = room.federated === true || ownerUsername.includes(':');\n\tconst shouldBeHandledByFederation = room.federated === true || ownerUsername.includes(':');\n\tif (shouldBeHandledByFederation) {\n\t\tconst extra: Partial<ISubscriptionExtraData> = options?.subscriptionExtra || {};\n\t\tconst extra: Partial<ISubscriptionExtraData> = options?.subscriptionExtra || {};",
            "member": "\t\tfor await (const username of [...new Set(members)]) {\n\t\tfor await (const username of [...new Set(members)]) {\n\t\t\tconst member = await Users.findOneByUsername(username, {\n\t\t\tconst member = await Users.findOneByUsername(username, {\n\t\t\t\tprojection: { 'username': 1, 'settings.preferences': 1, 'federated': 1, 'roles': 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "addUserToDefaultChannels.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/addUserToDefaultChannels.ts",
        "code": {
            "defaultRooms": "\tconst defaultRooms = await Rooms.findByDefaultAndTypes(true, ['c', 'p'], {\n\tconst defaultRooms = await Rooms.findByDefaultAndTypes(true, ['c', 'p'], {\n\t\tprojection: { usernames: 0 },"
        },
        "depth_rank": 7
    },
    {
        "file": "sendMessage.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/sendMessage.js",
        "code": {
            "otrStreamer": "\t\tconst prevent = await Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageSentPrevent', message);\n\t\tconst prevent = await Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageSentPrevent', message);\n\t\tif (prevent) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result;\n\t\tresult = await Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageSentExtend', message);\n\t\tresult = await Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageSentModify', result);\n\n\t\tif (typeof result === 'object') {\n\t\t\tmessage = Object.assign(message, result);\n\n\t\t\t// Some app may have inserted malicious/invalid values in the message, let's check it again\n\t\t\tawait validateMessage(message, room, user);\n\t\t}\n\t}\n\n\tcleanupMessageObject(message);\n\n\tparseUrlsInMessage(message);\n\n\tmessage = await callbacks.run('beforeSaveMessage', message, room);\n\tif (message) {\n\t\tif (message.t === 'otr') {\n\t\t\tconst otrStreamer = notifications.streamRoomMessage;\n\t\t\tconst otrStreamer = notifications.streamRoomMessage;\n\t\t\totrStreamer.emit(message.rid, message, user, room);\n\t\t} else if (message._id && upsert) {",
            "messageAlreadyExists": "\t\t\tconst messageAlreadyExists = message._id && (await Messages.findOneById(message._id, { projection: { _id: 1 } }));\n\t\t\tconst messageAlreadyExists = message._id && (await Messages.findOneById(message._id, { projection: { _id: 1 } }));"
        },
        "depth_rank": 7
    },
    {
        "file": "deleteUser.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/deleteUser.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, {\n\tconst user = await Users.findOneById(userId, {\n\t\tprojection: { username: 1, avatarOrigin: 1, roles: 1, federated: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "setUserActiveStatus.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/setUserActiveStatus.ts",
        "code": {
            "directConversations": "async function reactivateDirectConversations(userId: string) {\nasync function reactivateDirectConversations(userId: string) {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1, t: 1 },",
            "activeUsers": "\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\t\tif (isDirectMessageRoom(r)) {\n\t\t\tacc.push(...r.uids);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();",
            "livechatSubscribedRooms": "\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');",
            "email": "\tconst email = {\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),"
        },
        "depth_rank": 7
    },
    {
        "file": "attachMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/attachMessage.ts",
        "code": {
            "useRealName": "\tconst useRealName = Boolean(settings.get('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(settings.get('UI_Use_Real_Name'));\n\tconst {\n\tconst {\n\t\tmsg,\n\t\tu: { username, name },"
        },
        "depth_rank": 7
    },
    {
        "file": "getAvatarSuggestionForUser.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getAvatarSuggestionForUser.ts",
        "code": {
            "services": "\t\t\t\t\tconst services = await ServiceConfiguration.configurations.find({ service }, { fields: { secret: 0 } }).fetchAsync();\n\t\t\t\t\tconst services = await ServiceConfiguration.configurations.find({ service }, { fields: { secret: 0 } }).fetchAsync();",
            "avatar": "\tconst avatars = [];\n\tconst avatars = [];\n\n\tfor await (const avatarProvider of Object.values(avatarProviders)) {\n\tfor await (const avatarProvider of Object.values(avatarProviders)) {\n\t\tconst avatar = await avatarProvider(user);\n\t\tconst avatar = await avatarProvider(user);\n\t\tif (avatar) {\n\t\t\tif (Array.isArray(avatar)) {\n\t\t\t\tavatars.push(...avatar);\n\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "getUsernameSuggestion.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getUsernameSuggestion.ts",
        "code": {
            "services": "\t\tconst services = [\n\t\tconst services = [\n\t\t\t...new Set(user.services.flatMap(({ name, username, firstName, lastName }) => [name, username, firstName, lastName])),"
        },
        "depth_rank": 7
    },
    {
        "file": "parseUrlsInMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/parseUrlsInMessage.ts",
        "code": {
            "urls": "\tconst urls = message.html?.match(getMessageUrlRegex()) || [];\n\tconst urls = message.html?.match(getMessageUrlRegex()) || [];\n\tif (urls) {\n\t\tmessage.urls = [...new Set(urls)].map((url) => ({ url, meta: {} }));"
        },
        "depth_rank": 7
    },
    {
        "file": "getRoomsWithSingleOwner.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getRoomsWithSingleOwner.ts",
        "code": {
            "options": "\tconst subscribedRooms: SubscribedRoomsForUserWithDetails[] = [];\n\tconst subscribedRooms: SubscribedRoomsForUserWithDetails[] = [];\n\n\tconst cursor =\n\tconst cursor =\n\t\troomIds.length > 0 ? Subscriptions.findByUserIdAndRoomIds(userId, roomIds) : Subscriptions.findByUserIdExceptType(userId, 'd');\n\n\t// Iterate through all the rooms the user is subscribed to, to check if he is the last owner of any of them.\n\tfor await (const subscription of cursor) {\n\tfor await (const subscription of cursor) {\n\t\tconst roomData: SubscribedRoomsForUserWithDetails = {\n\t\tconst roomData: SubscribedRoomsForUserWithDetails = {\n\t\t\trid: subscription.rid,\n\t\t\tt: subscription.t,\n\t\t\tshouldBeRemoved: false,\n\t\t\tshouldChangeOwner: false,\n\t\t\tuserIsLastOwner: false,\n\t\t\tnewOwner: null,\n\t\t};\n\n\t\tif (subscriptionHasRole(subscription, 'owner')) {\n\t\t\t// Fetch the number of owners\n\t\t\tconst numOwners = await Subscriptions.countByRoomIdAndRoles(subscription.rid, ['owner']);\n\t\t\tconst numOwners = await Subscriptions.countByRoomIdAndRoles(subscription.rid, ['owner']);\n\t\t\t// If it's only one, then this user is the only owner.\n\t\t\troomData.userIsLastOwner = numOwners === 1;\n\t\t\tif (numOwners === 1 && assignNewOwner) {\n\t\t\t\t// Let's check how many subscribers the room has.\n\t\t\t\tconst options = { projection: { 'u._id': 1 }, sort: { ts: 1 as const } };\n\t\t\t\tconst options = { projection: { 'u._id': 1 }, sort: { ts: 1 as const } };",
            "await": "\t\t\t\tconst subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n\t\t\t\tconst subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n\n\t\t\t\tfor await (const {\n\t\t\t\tfor await (const {\n\t\t\t\t\tu: { _id: uid },",
            "newOwner": "\t\t\t\t\tconst newOwner = await Users.findOneActiveById(uid, { projection: { _id: 1 } });\n\t\t\t\t\tconst newOwner = await Users.findOneActiveById(uid, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "cleanRoomHistory.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/cleanRoomHistory.ts",
        "code": {
            "ts": "\tconst ts = { [gt]: oldest, [lt]: latest };\n\tconst ts = { [gt]: oldest, [lt]: latest };",
            "cursor": "\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\t\tprojection: { pinned: 1, files: 1 },",
            "discussionsCursor": "\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\t\tprojection: { drid: 1 },",
            "threads": "\t\tconst threads = new Set<string>();\n\t\tconst threads = new Set<string>();\n\t\tawait Messages.findThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t\t{ rid, pinned: excludePinned, ignoreDiscussion, ts, users: fromUsers },"
        },
        "depth_rank": 7
    },
    {
        "file": "getFullUserData.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/getFullUserData.ts",
        "code": {
            "as": "} as const;\n} as const;\n\nlet publicCustomFields: Record<string, 0 | 1> = {};",
            "caller": "\tconst caller = await Users.findOneById(userId, { projection: { username: 1 } });\n\tconst caller = await Users.findOneById(userId, { projection: { username: 1 } });",
            "options": "\tconst fields = getFields(canViewAllInfo);\n\tconst fields = getFields(canViewAllInfo);\n\n\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\t...fields,\n\t\t\t...(myself && { services: 1 }),"
        },
        "depth_rank": 7
    },
    {
        "file": "setRoomAvatar.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/setRoomAvatar.ts",
        "code": {
            "function": "\tconst fileData = RocketChatFile.dataURIParse(dataURI);\n\tconst fileData = RocketChatFile.dataURIParse(dataURI);\n\n\tconst buffer = Buffer.from(fileData.image, 'base64');\n\tconst buffer = Buffer.from(fileData.image, 'base64');\n\n\tconst file = {\n\tconst file = {\n\t\trid,\n\t\ttype: fileData.contentType,\n\t\tsize: buffer.length,\n\t\tuid: user._id,\n\t};\n\n\tif (current) {\n\t\tawait fileStore.deleteById(current._id);\n\t}\n\n\tconst result = await fileStore.insert(file, buffer);\n\tconst result = await fileStore.insert(file, buffer);\n\n\tsetTimeout(async function () {\n\tsetTimeout(async function () {\n\t\tresult.etag && (await Rooms.setAvatarData(rid, 'upload', result.etag));\n\t\tawait Message.saveSystemMessage('room_changed_avatar', rid, '', user);\n\t\tvoid api.broadcast('room.avatarUpdate', { _id: rid, avatarETag: result.etag });"
        },
        "depth_rank": 7
    },
    {
        "file": "mobile.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/notifications/mobile.js",
        "code": {
            "lng": "\tconst username = settings.get('Push_show_username_room') ? (settings.get('UI_Use_Real_Name') && senderName) || senderUsername : '';\n\tconst username = settings.get('Push_show_username_room') ? (settings.get('UI_Use_Real_Name') && senderName) || senderUsername : '';\n\n\tconst lng = receiver.language || settings.get('Language') || 'en';\n\tconst lng = receiver.language || settings.get('Language') || 'en';\n\n\tlet messageText;\n\tif (shouldOmitMessage && settings.get('Push_request_content_from_server')) {\n\t\tmessageText = i18n.t('You_have_a_new_message', { lng });"
        },
        "depth_rank": 8
    },
    {
        "file": "email.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/notifications/email.js",
        "code": {
            "function": "\tsettings.watch('email_style', function () {\n\tsettings.watch('email_style', function () {\n\t\tgoToMessage = Mailer.inlinecss('<p><a class=\\'btn\\' href=\"[room_path]\">{Offline_Link_Message}</a></p>');"
        },
        "depth_rank": 8
    },
    {
        "file": "desktop.ts",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/functions/notifications/desktop.ts",
        "code": {
            "payload": "\tconst payload = {\n\tconst payload = {\n\t\ttitle: title || '',\n\t\ttext,\n\t\tduration,\n\t\tpayload: {\n\t\t\t_id: message._id,\n\t\t\trid: message.rid,\n\t\t\ttmid: message.tmid,\n\t\t\tsender: message.u,\n\t\t\ttype: room.t,\n\t\t\tname: room.name,\n\t\t\tmessage: {\n\t\t\t\tmsg: message.msg,\n\t\t\t\tt: message.t,\n\t\t\t},\n\t\t},\n\t};\n\n\tmetrics.notificationsSent.inc({ notification_type: 'desktop' });"
        },
        "depth_rank": 8
    },
    {
        "file": "oauth.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/oauth/oauth.js",
        "code": {
            "AccessTokenServices": "const AccessTokenServices = {};\nconst AccessTokenServices = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "google.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/oauth/google.js",
        "code": {
            "request": "async function getScopes(accessToken) {\nasync function getScopes(accessToken) {\n\ttry {\n\t\tconst request = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo', {\n\t\tconst request = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo', {\n\t\t\tparams: { access_token: accessToken },"
        },
        "depth_rank": 7
    },
    {
        "file": "twitter.js",
        "path": "../Rocket.Chat/apps/meteor/app/lib/server/oauth/twitter.js",
        "code": {
            "result": "const whitelistedFields = ['id', 'name', 'description', 'profile_image_url', 'profile_image_url_https', 'lang', 'email'];\nconst whitelistedFields = ['id', 'name', 'description', 'profile_image_url', 'profile_image_url_https', 'lang', 'email'];\n\nconst getIdentity = async function (accessToken, appId, appSecret, accessTokenSecret) {\nconst getIdentity = async function (accessToken, appId, appSecret, accessTokenSecret) {\n\tconst Twitter = new Twit({\n\tconst Twitter = new Twit({\n\t\tconsumer_key: appId,\n\t\tconsumer_secret: appSecret,\n\t\taccess_token: accessToken,\n\t\taccess_token_secret: accessTokenSecret,\n\t});\n\ttry {\n\t\tconst result = await Twitter.get('account/verify_credentials.json?include_email=true');\n\t\tconst result = await Twitter.get('account/verify_credentials.json?include_email=true');\n\n\t\treturn result.data;\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "file.server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file/server/file.server.ts",
        "code": {
            "name": "\tconstructor({ name = 'file' } = {}) {\n\tconstructor({ name = 'file' } = {}) {\n\t\tthis.name = name;\n\n\t\tthis.bucket = new GridFSBucket(db, { bucketName: this.name });",
            "file": "\t\tconst file = await this.bucket.find({ filename }).limit(1).toArray();\n\t\tconst file = await this.bucket.find({ filename }).limit(1).toArray();",
            "rs": "\t\tconst ws = fs.createWriteStream(path.join(this.absolutePath, fileName));\n\t\tconst ws = fs.createWriteStream(path.join(this.absolutePath, fileName));\n\t\tws.on('close', function () {\n\t\tws.on('close', function () {\n\t\t\treturn ws.emit('end');\n\t\t});\n\t\treturn ws;\n\t}\n\n\tcreateReadStream(fileName: string) {\n\t\treturn fs.createReadStream(path.join(this.absolutePath, fileName));\n\t}\n\n\tstat(fileName: string) {\n\t\treturn fsp.stat(path.join(this.absolutePath, fileName));\n\t}\n\n\tasync remove(fileName: string) {\n\t\treturn fsp.unlink(path.join(this.absolutePath, fileName));\n\t}\n\n\tasync getFileWithReadStream(fileName: string) {\n\t\ttry {\n\t\t\tconst stat = await this.stat(fileName);\n\t\t\tconst stat = await this.stat(fileName);\n\t\t\tconst rs = this.createReadStream(fileName);\n\t\t\tconst rs = this.createReadStream(fileName);\n\t\t\treturn {\n\t\t\t\treadStream: rs,\n\t\t\t\t// contentType: file.contentType\n\t\t\t\tlength: stat.size,\n\t\t\t};\n\t\t} catch (error1) {",
            "function": "\t\t\tconst data: Buffer[] = [];\n\t\t\tconst data: Buffer[] = [];\n\t\t\tfile.readStream.on('data', function (chunk: Buffer) {\n\t\t\tfile.readStream.on('data', function (chunk: Buffer) {\n\t\t\t\treturn data.push(chunk);\n\t\t\t});\n\t\t\tfile.readStream.on('end', function () {\n\t\t\tfile.readStream.on('end', function () {\n\t\t\t\tresolve({\n\t\t\t\t\tbuffer: Buffer.concat(data),\n\t\t\t\t\tlength: file.length,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tasync deleteFile(fileName: string) {\n\t\ttry {\n\t\t\treturn this.remove(fileName);\n\t\t} catch (error1) {"
        },
        "depth_rank": 6
    },
    {
        "file": "api.ts",
        "path": "../Rocket.Chat/apps/meteor/app/mailer/server/api.ts",
        "code": {
            "email": "\tconst email = { to, from, replyTo, subject, html, text, headers };\n\tconst email = { to, from, replyTo, subject, html, text, headers };",
            "eventResult": "\tconst eventResult = await Apps.triggerEvent('IPreEmailSent', { email });\n\tconst eventResult = await Apps.triggerEvent('IPreEmailSent', { email });"
        },
        "depth_rank": 6
    },
    {
        "file": "tabBar.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/videobridge/client/tabBar.tsx",
        "code": {
            "handleOpenVideoConf": "\tconst groups = useStableArray(\n\tconst groups = useStableArray(\n\t\t[\n\t\t\tenabledDMs && 'direct',\n\t\t\tenabledDMs && 'direct_multiple',\n\t\t\tenabledGroups && 'group',\n\t\t\tenabledLiveChat && 'live',\n\t\t\tenabledTeams && 'team',\n\t\t\tenabledChannel && 'channel',\n\t\t].filter(Boolean) as ToolboxActionConfig['groups'],\n\t);\n\n\tconst handleOpenVideoConf = useMutableCallback(async (): Promise<void> => {\n\tconst handleOpenVideoConf = useMutableCallback(async (): Promise<void> => {\n\t\tif (isCalling || isRinging) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait VideoConfManager.loadCapabilities();\n\t\t\tdispatchPopup({ rid: room._id });"
        },
        "depth_rank": 6
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-archiveroom/server/server.ts",
        "code": {
            "async": "\tcallback: async function Archive({ params, message, userId }: SlashCommandCallbackParams<'archive'>): Promise<void> {\n\tcallback: async function Archive({ params, message, userId }: SlashCommandCallbackParams<'archive'>): Promise<void> {\n\t\tlet channel = params.trim();\n\n\t\tlet room;\n\n\t\tif (channel === '') {\n\t\t\troom = await Rooms.findOneById(message.rid);\n\t\t\tif (room?.name) {\n\t\t\t\tchannel = room.name;\n\t\t\t}\n\t\t} else {",
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "loadScript.ts",
        "path": "../Rocket.Chat/apps/meteor/app/analytics/client/loadScript.ts",
        "code": {
            "gtag": "\t\t\tfunction gtag(key: string, value: any) {\n\t\t\tfunction gtag(key: string, value: any) {\n\t\t\t\tdataLayer.push(key, value);\n\t\t\t}\n\t\t\tgtag('js', new Date());\n\t\t\tgtag('config', googleId);\n\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "generateEmojiIndex.mjs",
        "path": "../Rocket.Chat/apps/meteor/app/emoji-emojione/lib/generateEmojiIndex.mjs",
        "code": {
            "emojiCategoriesMapping": "\tconst emojiCategoriesMapping = [\n\tconst emojiCategoriesMapping = [\n\t\t{ key: 'people', i18n: 'Smileys_and_People' },"
        },
        "depth_rank": 6
    },
    {
        "file": "lib.ts",
        "path": "../Rocket.Chat/apps/meteor/app/emoji-emojione/client/lib.ts",
        "code": {
            "function": "\tMeteor.startup(function () {\n\tMeteor.startup(function () {\n\t\tTracker.autorun(async function () {\n\t\tTracker.autorun(async function () {\n\t\t\tif ((await isSetNotNull(() => emoji.packages.emojione)) && emoji.packages.emojione) {\n\t\t\t\tif (await isSetNotNull(() => getUserPreference(Meteor.userId() as string, 'convertAsciiEmoji'))) {\n\t\t\t\t\temoji.packages.emojione.ascii = await getUserPreference(Meteor.userId() as string, 'convertAsciiEmoji');\n\t\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "lib.ts",
        "path": "../Rocket.Chat/apps/meteor/app/emoji-emojione/server/lib.ts",
        "code": {
            "function": "\tMeteor.startup(async function () {\n\tMeteor.startup(async function () {\n\t\tif ((await isSetNotNull(() => emoji.packages.emojione)) && emoji.packages.emojione) {\n\t\t\tif (await isSetNotNull(() => getUserPreference(Meteor.userId() as string, 'convertAsciiEmoji'))) {\n\t\t\t\temoji.packages.emojione.ascii = await getUserPreference(Meteor.userId() as string, 'convertAsciiEmoji');\n\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "FileUpload.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/lib/FileUpload.ts",
        "code": {
            "async": "const cookie = new Cookies();\nconst cookie = new Cookies();\nlet maxFileSize = 0;\n\nsettings.watch('FileUpload_MaxFileSize', async function (value: string) {\nsettings.watch('FileUpload_MaxFileSize', async function (value: string) {\n\ttry {\n\t\tmaxFileSize = parseInt(value);\n\t} catch (e) {",
            "reason": "\t\t\tconst reason = i18n.t('File_type_is_not_accepted', { lng: language });\n\t\t\tconst reason = i18n.t('File_type_is_not_accepted', { lng: language });",
            "user": "\t\tconst user = uid && authToken && (await Users.findOneByIdAndLoginToken(uid, hashLoginToken(authToken), { projection: { _id: 1 } }));\n\t\tconst user = uid && authToken && (await Users.findOneByIdAndLoginToken(uid, hashLoginToken(authToken), { projection: { _id: 1 } }));",
            "transformer": "\t\tconst store = FileUpload.getStore('Uploads');\n\t\tconst store = FileUpload.getStore('Uploads');\n\t\tconst image = await store._store.getReadStream(file._id, file);\n\t\tconst image = await store._store.getReadStream(file._id, file);\n\n\t\tconst transformer = sharp().resize({ width, height, fit: 'inside' });\n\t\tconst transformer = sharp().resize({ width, height, fit: 'inside' });",
            "result": "\t\tconst result = transformer.toBuffer({ resolveWithObject: true }).then(({ data, info: { width, height } }) => ({ data, width, height }));\n\t\tconst result = transformer.toBuffer({ resolveWithObject: true }).then(({ data, info: { width, height } }) => ({ data, width, height }));",
            "isAuthorizedByRoom": "\t\tconst isAuthorizedByRoom = async () =>\n\t\tconst isAuthorizedByRoom = async () =>\n\t\t\trc_room_type &&\n\t\t\troomCoordinator\n\t\t\t\t.getRoomDirectives(rc_room_type)\n\t\t\t\t.canAccessUploadedFile({ rc_uid: rc_uid || '', rc_rid: rc_rid || '', rc_token: rc_token || '' });",
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(file.rid, user._id, { projection: { _id: 1 } });\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(file.rid, user._id, { projection: { _id: 1 } });",
            "tmpFile": "\t\tconst store = FileUpload.getStoreByName(file.store);\n\t\tconst store = FileUpload.getStoreByName(file.store);\n\n\t\treturn store.delete(file._id);\n\t}\n\n\tasync _doInsert(fileData: OptionalId<IUpload>, streamOrBuffer: ReadableStream | stream | Buffer): Promise<IUpload> {\n\t\tconst fileId = await this.store.create(fileData);\n\t\tconst fileId = await this.store.create(fileData);\n\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\n\t\ttry {\n\t\t\tif (streamOrBuffer instanceof stream) {\n\t\t\t\tstreamOrBuffer.pipe(fs.createWriteStream(tmpFile));\n\t\t\t} else if (streamOrBuffer instanceof Buffer) {",
            "file": "\t\t\tconst file = await ufsComplete(fileId, this.name);\n\t\t\tconst file = await ufsComplete(fileId, this.name);\n\n\t\t\treturn file;\n\t\t} catch (e: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "ranges.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/lib/ranges.ts",
        "code": {
            "size": "\tconst size = file.size || 0;\n\tconst size = file.size || 0;\n\tif (range.start > size || range.stop <= range.start || range.stop > size) {\n\t\treturn { outOfRange: true, start: range.start, stop: range.stop };"
        },
        "depth_rank": 7
    },
    {
        "file": "proxy.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/lib/proxy.ts",
        "code": {
            "file": "\tconst fileId = match[2];\n\tconst fileId = match[2];\n\tconst file = await store.getCollection().findOne({ _id: fileId });\n\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendFileMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/methods/sendFileMessage.ts",
        "code": {
            "thumbResult": "\t\tconst attachment: FileAttachmentProps = {\n\t\tconst attachment: FileAttachmentProps = {\n\t\t\ttitle: file.name,\n\t\t\ttype: 'file',\n\t\t\tdescription: file?.description,\n\t\t\ttitle_link: fileUrl,\n\t\t\ttitle_link_download: true,\n\t\t\timage_url: fileUrl,\n\t\t\timage_type: file.type as string,\n\t\t\timage_size: file.size,\n\t\t};\n\n\t\tif (file.identify?.size) {\n\t\t\tattachment.image_dimensions = file.identify.size;\n\t\t}\n\n\t\ttry {\n\t\t\tattachment.image_preview = await FileUpload.resizeImagePreview(file);\n\t\t\tconst thumbResult = await FileUpload.createImageThumbnail(file);\n\t\t\tconst thumbResult = await FileUpload.createImageThumbnail(file);\n\t\t\tif (thumbResult) {\n\t\t\t\tconst { data: thumbBuffer, width, height } = thumbResult;\n\t\t\t\tconst { data: thumbBuffer, width, height } = thumbResult;",
            "attachment": "\t\tconst attachment = {\n\t\tconst attachment = {\n\t\t\ttitle: file.name,\n\t\t\ttype: 'file',\n\t\t\tformat: getFileExtension(file.name),\n\t\t\tdescription: file.description,\n\t\t\ttitle_link: fileUrl,\n\t\t\ttitle_link_download: true,\n\t\t\tsize: file.size as number,\n\t\t};\n\t\tattachments.push(attachment);\n\t}\n\treturn { files, attachments };",
            "msg": "\tconst msg = await executeSendMessage(userId, {\n\tconst msg = await executeSendMessage(userId, {\n\t\trid: roomId,\n\t\tts: new Date(),\n\t\tfile: files[0],\n\t\tfiles,\n\t\tattachments,\n\t\t...msgData,\n\t\tmsg: msgData.msg ?? '',\n\t\tgroupable: msgData.groupable ?? false,\n\t});\n\n\tcallbacks.runAsync('afterFileUpload', { user, room, message: msg });"
        },
        "depth_rank": 7
    },
    {
        "file": "GridFS.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/config/GridFS.ts",
        "code": {
            "range": "\tconst store = UploadFS.getStore(storeName);\n\tconst store = UploadFS.getStore(storeName);\n\tconst rs = await store.getReadStream(fileId, file);\n\tconst rs = await store.getReadStream(fileId, file);\n\tconst ws = new stream.PassThrough();\n\tconst ws = new stream.PassThrough();\n\n\t[rs, ws].forEach((stream) =>\n\t\tstream.on('error', function (err) {\n\t\tstream.on('error', function (err) {\n\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\tres.end();\n\t\t}),\n\t);\n\n\tws.on('close', function () {\n\tws.on('close', function () {\n\t\t// Close output stream at the end\n\t\tws.emit('end');\n\t});\n\n\t// Transform stream\n\tstore.transformRead(rs, ws, fileId, file, req);\n\n\tconst range = getFileRange(file, req);\n\tconst range = getFileRange(file, req);\n\tif (range) {\n\t\tsetRangeHeaders(range, file, res);\n\n\t\tif (range.outOfRange) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('File upload extracting range');\n\t\tws.pipe(new ExtractRange({ start: range.start, stop: range.stop })).pipe(res);"
        },
        "depth_rank": 7
    },
    {
        "file": "GoogleStorage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/config/GoogleStorage.ts",
        "code": {
            "request": "\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\n\t\tFileUpload.proxyFile(file.name || '', fileUrl, forceDownload, request, req, res);\n\t\treturn;\n\t}\n\n\tFileUpload.redirectToFile(fileUrl, req, res);\n};\n\nconst copy: FileUploadClass['copy'] = async function (this: FileUploadClass, file, out) {\nconst copy: FileUploadClass['copy'] = async function (this: FileUploadClass, file, out) {\n\tconst fileUrl = await this.store.getRedirectURL(file, false);\n\tconst fileUrl = await this.store.getRedirectURL(file, false);\n\n\tif (fileUrl) {\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\trequest.get(fileUrl, (fileRes) => fileRes.pipe(out));\n\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "FileSystem.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/config/FileSystem.ts",
        "code": {
            "filePath": "\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\n\t\tconst options: { start?: number; end?: number } = {};\n\t\tconst options: { start?: number; end?: number } = {};",
            "stat": "\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\n\t\ttry {\n\t\t\tconst stat = await fsp.stat(filePath);\n\t\t\tconst stat = await fsp.stat(filePath);\n\n\t\t\tif (stat?.isFile()) {\n\t\t\t\tfile = FileUpload.addExtensionTo(file);\n\n\t\t\t\t(await this.store.getReadStream(file._id, file)).pipe(res);\n\t\t\t}\n\t\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "AmazonS3.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/server/config/AmazonS3.ts",
        "code": {
            "request": "\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\n\t\tFileUpload.proxyFile(file.name || '', fileUrl, forceDownload, request, req, res);\n\t\treturn;\n\t}\n\n\tFileUpload.redirectToFile(fileUrl, req, res);\n};\n\nconst copy: FileUploadClass['copy'] = async function (this: FileUploadClass, file, out) {\nconst copy: FileUploadClass['copy'] = async function (this: FileUploadClass, file, out) {\n\tconst fileUrl = await this.store.getRedirectURL(file);\n\tconst fileUrl = await this.store.getRedirectURL(file);\n\tif (fileUrl) {\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\tconst request = /^https:/.test(fileUrl) ? https : http;\n\t\trequest.get(fileUrl, (fileRes) => fileRes.pipe(out));\n\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/ufs/Webdav/server.ts",
        "code": {
            "client": "\t\tconst client = new WebdavClientAdapter(server, { username, password });\n\t\tconst client = new WebdavClientAdapter(server, { username, password });",
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/ufs/AmazonS3/server.ts",
        "code": {
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });",
            "params": "\t\t\tconst params = {\n\t\t\tconst params = {\n\t\t\t\tKey: this.getPath(file),\n\t\t\t\tBucket: classOptions.connection.params.Bucket,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\treturn s3.deleteObject(params).promise();\n\t\t\t} catch (err: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/file-upload/ufs/GoogleStorage/server.ts",
        "code": {
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\t// TODO\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 7
    },
    {
        "file": "OTRRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/otr/client/OTRRoom.ts",
        "code": {
            "bits": "\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });",
            "encryptedData": "\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });",
            "output": "\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });",
            "enc": "\t\t\tconst enc = await this.encryptText(data);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "updateOTRAck.ts",
        "path": "../Rocket.Chat/apps/meteor/app/otr/server/methods/updateOTRAck.ts",
        "code": {
            "otrStreamer": "\t\tconst otrStreamer = notifications.streamRoomMessage;\n\t\tconst otrStreamer = notifications.streamRoomMessage;\n\t\totrStreamer.emit(message.rid, { ...message, otr: { ack } });"
        },
        "depth_rank": 7
    },
    {
        "file": "importer.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer-slack/server/importer.js",
        "code": {
            "dataString": "\t\tconst dataString = data.toString();\n\t\tconst dataString = data.toString();\n\t\ttry {\n\t\t\tthis.logger.debug('parsing file contents');\n\t\t\treturn JSON.parse(dataString);\n\t\t} catch (e) {",
            "totalEntries": "\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet userCount = 0;\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });",
            "missedTypes": "\t\t\tconst missedTypes = {};\n\t\t\tconst missedTypes = {};",
            "await": "\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tawait this.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {",
            "ignoreTypes": "\t\tconst ignoreTypes = { bot_add: true, file_comment: true, file_mention: true };\n\t\tconst ignoreTypes = { bot_add: true, file_comment: true, file_mention: true };",
            "replies": "\t\t\t\t\t\t\tconst replies = new Set();\n\t\t\t\t\t\t\tconst replies = new Set();\n\t\t\t\t\t\t\tmessage.rep\u013aies.forEach((item) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.length) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "handleIdentityToken.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apple/lib/handleIdentityToken.ts",
        "code": {
            "request": "async function isValidAppleJWT(identityToken: string, header: any): Promise<boolean> {\nasync function isValidAppleJWT(identityToken: string, header: any): Promise<boolean> {\n\tconst request = await fetch('https://appleid.apple.com/auth/keys', { method: 'GET' });\n\tconst request = await fetch('https://appleid.apple.com/auth/keys', { method: 'GET' });",
            "applePublicKeys": "\tconst applePublicKeys = ((await request.json()) as { keys: { kid: string; e: string; n: string }[] }).keys;\n\tconst applePublicKeys = ((await request.json()) as { keys: { kid: string; e: string; n: string }[] }).keys;"
        },
        "depth_rank": 6
    },
    {
        "file": "loginHandler.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apple/server/loginHandler.ts",
        "code": {
            "result": "\t\tconst result = Accounts.updateOrCreateUserFromExternalService('apple', serviceData, { profile });\n\t\tconst result = Accounts.updateOrCreateUserFromExternalService('apple', serviceData, { profile });"
        },
        "depth_rank": 6
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-unarchiveroom/server/server.ts",
        "code": {
            "async": "\tcallback: async function Unarchive({ params, message, userId }: SlashCommandCallbackParams<'unarchive'>): Promise<void> {\n\tcallback: async function Unarchive({ params, message, userId }: SlashCommandCallbackParams<'unarchive'>): Promise<void> {\n\t\tlet channel = params.trim();\n\t\tlet room;\n\n\t\tif (channel === '') {\n\t\t\troom = await Rooms.findOneById(message.rid);\n\t\t\tif (room?.name) {\n\t\t\t\tchannel = room.name;\n\t\t\t}\n\t\t} else {",
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "actionButton.ts",
        "path": "../Rocket.Chat/apps/meteor/app/autotranslate/client/lib/actionButton.ts",
        "code": {
            "hasLanguage": "\t\t\t\t\tconst autoTranslateEnabled = subscription?.autoTranslate || isLivechatRoom;\n\t\t\t\t\tconst autoTranslateEnabled = subscription?.autoTranslate || isLivechatRoom;\n\t\t\t\t\tconst hasLanguage =\n\t\t\t\t\tconst hasLanguage =\n\t\t\t\t\t\thasTranslationLanguageInMessage(message, language) || hasTranslationLanguageInAttachments(message.attachments, language);\n\n\t\t\t\t\treturn Boolean(\n\t\t\t\t\t\t(message as { autoTranslateShowInverse?: boolean }).autoTranslateShowInverse ||"
        },
        "depth_rank": 7
    },
    {
        "file": "autotranslate.ts",
        "path": "../Rocket.Chat/apps/meteor/app/autotranslate/server/autotranslate.ts",
        "code": {
            "attachmentMessage": "\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };\n\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };"
        },
        "depth_rank": 6
    },
    {
        "file": "msTranslate.ts",
        "path": "../Rocket.Chat/apps/meteor/app/autotranslate/server/msTranslate.ts",
        "code": {
            "result": "\t\tconst result = await request.json();\n\t\tconst result = await request.json();\n\n\t\tif (request.status === 200 && result.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},",
            "msgs": "\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));"
        },
        "depth_rank": 6
    },
    {
        "file": "googleTranslate.ts",
        "path": "../Rocket.Chat/apps/meteor/app/autotranslate/server/googleTranslate.ts",
        "code": {
            "params": "\t\tconst params = {\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t\t...(target && { target }),",
            "request": "\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });",
            "txt": "\t\t\t\tconst body = await result.json();\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));",
            "body": "\t\t\t\tconst body = await result.json();\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (err) {"
        },
        "depth_rank": 6
    },
    {
        "file": "deeplTranslate.ts",
        "path": "../Rocket.Chat/apps/meteor/app/autotranslate/server/deeplTranslate.ts",
        "code": {
            "result": "\t\t\t\tconst result = await fetch(this.apiEndPointUrl, { params: { auth_key: this.apiKey, target_lang: language, text: msgs } });\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, { params: { auth_key: this.apiKey, target_lang: language, text: msgs } });"
        },
        "depth_rank": 6
    },
    {
        "file": "PushNotification.ts",
        "path": "../Rocket.Chat/apps/meteor/app/push-notifications/server/lib/PushNotification.ts",
        "code": {
            "config": "\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });",
            "sender": "\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });\n\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveNotificationSettings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/push-notifications/server/methods/saveNotificationSettings.ts",
        "code": {
            "userPref": "\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\treturn userPref?.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };"
        },
        "depth_rank": 7
    },
    {
        "file": "iframe_client.ts",
        "path": "../Rocket.Chat/apps/meteor/app/iframe-login/client/iframe_client.ts",
        "code": {
            "iframeLogin": "const iframeLogin = new IframeLogin();\nconst iframeLogin = new IframeLogin();\n\nconst { _unstoreLoginToken } = Accounts;\nconst { _unstoreLoginToken } = Accounts;"
        },
        "depth_rank": 6
    },
    {
        "file": "MentionsParser.js",
        "path": "../Rocket.Chat/apps/meteor/app/mentions/lib/MentionsParser.js",
        "code": {
            "userTemplateDefault": "const userTemplateDefault = ({ prefix, className, mention, title, label, type = 'username' }) =>\nconst userTemplateDefault = ({ prefix, className, mention, title, label, type = 'username' }) =>",
            "roomTemplateDefault": "const roomTemplateDefault = ({ prefix, reference, mention }) =>\nconst roomTemplateDefault = ({ prefix, reference, mention }) =>",
            "className": "\t\t\tconst className = classNames.join(' ');\n\t\t\tconst className = classNames.join(' ');\n\n\t\t\tif (mention === 'all' || mention === 'here') {\n\t\t\t\treturn this.userTemplate({ prefix, className, mention, label: mention, type: 'group' });",
            "filterTeam": "\t\t\tconst filterTeam = ({ name, type }) => type === 'team' && name === mention;\n\t\t\tconst filterTeam = ({ name, type }) => type === 'team' && name === mention;",
            "reference": "\t\t\t\t\tchannels.find(function (c) {\n\t\t\t\t\tchannels.find(function (c) {\n\t\t\t\t\t\treturn c.dname ? c.dname === mention : c.name === mention;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\tconst channel =\n\t\t\tconst channel =\n\t\t\t\tchannels &&\n\t\t\t\tchannels.find(function ({ name, dname }) {\n\t\t\t\tchannels.find(function ({ name, dname }) {\n\t\t\t\t\treturn dname ? dname === mention : name === mention;\n\t\t\t\t});\n\t\t\tconst reference = channel ? channel._id : mention;\n\t\t\tconst reference = channel ? channel._id : mention;\n\t\t\treturn this.roomTemplate({ prefix, reference, channel, mention });"
        },
        "depth_rank": 6
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/mentions/server/server.ts",
        "code": {
            "mention": "const queries = new MentionQueries();\nconst queries = new MentionQueries();\n\nconst mention = new MentionsServer({\nconst mention = new MentionsServer({\n\tpattern: () => settings.get<string>('UTF8_User_Names_Validation'),\n\tmessageMaxAll: () => settings.get<number>('Message_MaxAll'),\n\tgetUsers: async (usernames: string[]) => queries.getUsers(usernames),\n\tgetUser: async (userId: string) => queries.getUser(userId),\n\tgetTotalChannelMembers: (rid: string) => queries.getTotalChannelMembers(rid),\n\tgetChannels: (channels: string[]) => queries.getChannels(channels),\n\tasync onMaxRoomMembersExceeded({ sender, rid }: { sender: IUser; rid: string }) {\n\t\t// Get the language of the user for the error notification.\n\t\tconst { language } = await this.getUser(sender._id);\n\t\tconst { language } = await this.getUser(sender._id);",
            "msg": "\t\tconst msg = i18n.t('Group_mentions_disabled_x_members', { total: this.messageMaxAll, lng: language });\n\t\tconst msg = i18n.t('Group_mentions_disabled_x_members', { total: this.messageMaxAll, lng: language });"
        },
        "depth_rank": 6
    },
    {
        "file": "MessageAction.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/MessageAction.ts",
        "code": {
            "getMessage": "const getMessage = async (msgId: string): Promise<Serialized<IMessage> | null> => {\nconst getMessage = async (msgId: string): Promise<Serialized<IMessage> | null> => {\n\ttry {\n\t\tconst { message } = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\tconst { message } = await sdk.rest.get('/v1/chat.getMessage', { msgId });",
            "allButtons": "\t\tconst allButtons = group ? this.getButtonsByGroup(group) : MessageAction._getButtons();\n\t\tconst allButtons = group ? this.getButtonsByGroup(group) : MessageAction._getButtons();\n\n\t\tif (props.message) {\n\t\t\treturn this.getButtonsByCondition({ ...props, context }, this.getButtonsByContext(context, allButtons));",
            "subData": "\t\tconst subData = Subscriptions.findOne({ 'rid': roomData._id, 'u._id': Meteor.userId() });\n\t\tconst subData = Subscriptions.findOne({ 'rid': roomData._id, 'u._id': Meteor.userId() });",
            "roomURL": "\t\tconst roomURL = roomCoordinator.getURL(roomData.t, { ...(subData || roomData), tab: '' });\n\t\tconst roomURL = roomCoordinator.getURL(roomData.t, { ...(subData || roomData), tab: '' });"
        },
        "depth_rank": 7
    },
    {
        "file": "messageBox.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/messageBox.ts",
        "code": {
            "actionExists": "\t\tconst actionExists = this.actions.get(group)?.find((action) => action.label === label);\n\t\tconst actionExists = this.actions.get(group)?.find((action) => action.label === label);\n\n\t\tif (actionExists) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.actions.get(group)?.push({ ...config, label });"
        },
        "depth_rank": 7
    },
    {
        "file": "LegacyRoomManager.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/LegacyRoomManager.ts",
        "code": {
            "maxRoomsOpen": "const maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\n\nconst openedRooms: Record<\nconst openedRooms: Record<\n\tstring,\n\t{\n\t\ttypeName: string;\n\t\trid: IRoom['_id'];\n\t\tready: boolean;\n\t\tactive: boolean;\n\t\tdom?: Node;\n\t\tstreamActive?: boolean;\n\t\tunreadSince: ReactiveVar<Date | undefined>;\n\t\tlastSeen: Date;\n\t\tunreadFirstId?: string;\n\t}\n> = {};",
            "subscription": "\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });"
        },
        "depth_rank": 7
    },
    {
        "file": "RoomHistoryManager.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/RoomHistoryManager.ts",
        "code": {
            "waitAfterFlush": "const defaultLimit = parseInt(getConfig('roomListLimit') ?? '50') || 50;\nconst defaultLimit = parseInt(getConfig('roomListLimit') ?? '50') || 50;\n\nconst waitAfterFlush = (fn: () => void) => setTimeout(() => Tracker.afterFlush(fn), 10);\nconst waitAfterFlush = (fn: () => void) => setTimeout(() => Tracker.afterFlush(fn), 10);\n\nclass RoomHistoryManagerClass extends Emitter {\n\tprivate lastRequest?: Date;\n\n\tprivate histories: Record<\n\t\tIRoom['_id'],\n\t\t{\n\t\t\thasMore: ReactiveVar<boolean>;\n\t\t\thasMoreNext: ReactiveVar<boolean>;\n\t\t\tisLoading: ReactiveVar<boolean>;\n\t\t\tunreadNotLoaded: ReactiveVar<number>;\n\t\t\tfirstUnread: ReactiveVar<IMessage | undefined>;\n\t\t\tloaded: number | undefined;\n\t\t\toldestTs?: Date;\n\t\t}\n\t> = {};",
            "subscription": "\t\tconst room = this.getRoom(message.rid);\n\t\tconst room = this.getRoom(message.rid);\n\t\tvoid this.clear(message.rid);\n\n\t\tconst subscription = ChatSubscription.findOne({ rid: message.rid });\n\t\tconst subscription = ChatSubscription.findOne({ rid: message.rid });",
            "room": "\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.hasMore.get();\n\t}\n\n\tpublic hasMoreNext(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.hasMoreNext.get();\n\t}\n\n\tpublic getMoreIfIsEmpty(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\n\t\tif (room.loaded === undefined) {\n\t\t\treturn this.getMore(rid);\n\t\t}\n\t}\n\n\tpublic isLoading(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.isLoading.get();\n\t}\n\n\tpublic async clear(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\tChatMessage.remove({ rid });"
        },
        "depth_rank": 7
    },
    {
        "file": "readMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/readMessages.ts",
        "code": {
            "subscription": "\t\tconst subscription = ChatSubscription.findOne({ rid }, { reactive: false });\n\t\tconst subscription = ChatSubscription.findOne({ rid }, { reactive: false });"
        },
        "depth_rank": 7
    },
    {
        "file": "messageActionDefault.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/messageActionDefault.ts",
        "code": {
            "newMessage": "const getMainMessageText = (message: IMessage): IMessage => {\nconst getMainMessageText = (message: IMessage): IMessage => {\n\tconst newMessage = { ...message };\n\tconst newMessage = { ...message };",
            "dmRoom": "\t\t\t\tconst dmRoom = ChatRoom.findOne({ _id: [user._id, message.u._id].sort().join('') });\n\t\t\t\tconst dmRoom = ChatRoom.findOne({ _id: [user._id, message.u._id].sort().join('') });",
            "permalink": "\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tconst permalink = await MessageAction.getPermaLink(message._id);\n\t\t\t\tawait navigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });",
            "msgText": "\t\t\tconst msgText = getMainMessageText(message).msg;\n\t\t\tconst msgText = getMainMessageText(message).msg;\n\t\t\tawait navigator.clipboard.writeText(msgText);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 7
    },
    {
        "file": "IframeLogin.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/client/lib/IframeLogin.ts",
        "code": {
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tbeforeSend: (xhr: XMLHttpRequest) => {\n\t\t\t\txhr.withCredentials = true;\n\t\t\t},\n\t\t};\n\n\t\tlet { iframeUrl } = this;"
        },
        "depth_rank": 7
    },
    {
        "file": "Message.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-utils/server/Message.ts",
        "code": {
            "data": "\t\t\t\tconst data = (typeof messageType.data === 'function' && messageType.data(msg)) || {};\n\t\t\t\tconst data = (typeof messageType.data === 'function' && messageType.data(msg)) || {};"
        },
        "depth_rank": 6
    },
    {
        "file": "userCard.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/userCard.tsx",
        "code": {
            "updateProps": "const subscribers = new Set<() => void>();\nconst subscribers = new Set<() => void>();\n\nconst updateProps = (newProps: Partial<UserCardProps>) => {\nconst updateProps = (newProps: Partial<UserCardProps>) => {\n\tprops = { ...props, ...newProps };",
            "props": "const getProps = () => props;\nconst getProps = () => props;\n\nconst subscribeToProps = (callback: () => void) => {\nconst subscribeToProps = (callback: () => void) => {\n\tsubscribers.add(callback);\n\n\treturn () => {\n\t\tsubscribers.delete(callback);\n\t};\n};\n\nconst UserCardWithProps = () => {\nconst UserCardWithProps = () => {\n\tconst props = useSyncExternalStore(subscribeToProps, getProps);\n\tconst props = useSyncExternalStore(subscribeToProps, getProps);\n\n\treturn (\n\t\t<Suspense fallback={null}>"
        },
        "depth_rank": 7
    },
    {
        "file": "KonchatNotification.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/KonchatNotification.ts",
        "code": {
            "sub": "\t\tconst sub = ChatSubscription.findOne({ rid }, { fields: { audioNotificationValue: 1 } });\n\t\tconst sub = ChatSubscription.findOne({ rid }, { fields: { audioNotificationValue: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/ChatMessages.ts",
        "code": {
            "nextMessage": "\t\t\tconst currentMessage = await this.data.findMessageByID(this.currentEditing.mid);\n\t\t\tconst currentMessage = await this.data.findMessageByID(this.currentEditing.mid);\n\t\t\tconst nextMessage = currentMessage ? await this.data.findNextOwnMessage(currentMessage) : undefined;\n\t\t\tconst nextMessage = currentMessage ? await this.data.findNextOwnMessage(currentMessage) : undefined;\n\n\t\t\tif (nextMessage) {\n\t\t\t\tawait this.messageEditing.editMessage(nextMessage, { cursorAtStart: true });",
            "constructor": "\tpublic constructor(\n\tpublic constructor(\n\t\tprivate params: {\n\t\t\trid: IRoom['_id'];\n\t\t\ttmid?: IMessage['_id'];\n\t\t\tuid: IUser['_id'] | null;\n\t\t},\n\t) {\n\t\tconst { rid, tmid } = params;\n\t\tconst { rid, tmid } = params;",
            "draft": "\t\t\t\tconst message = await this.data.findMessageByID(this.currentEditingMID);\n\t\t\t\tconst message = await this.data.findMessageByID(this.currentEditingMID);\n\t\t\t\tconst draft = this.composer.text;\n\t\t\t\tconst draft = this.composer.text;\n\n\t\t\t\tif (draft === message?.msg) {\n\t\t\t\t\tawait this.data.discardDraft(this.currentEditingMID);\n\t\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "UserAction.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/UserAction.ts",
        "code": {
            "roomActivities": "const emitActivities = debounce(async (rid: string, extras: IExtras): Promise<void> => {\nconst emitActivities = debounce(async (rid: string, extras: IExtras): Promise<void> => {\n\tconst activities = roomActivities.get(extras?.tmid || rid) || new Set();\n\tconst activities = roomActivities.get(extras?.tmid || rid) || new Set();\n\tNotifications.notifyRoom(rid, USER_ACTIVITY, shownName(Meteor.user() as unknown as IUser), [...activities], extras);\n}, 500);\n\nfunction handleStreamAction(rid: string, username: string, activityTypes: string[], extras?: IExtras): void {\nfunction handleStreamAction(rid: string, username: string, activityTypes: string[], extras?: IExtras): void {\n\trid = extras?.tmid || rid;\n\tconst roomActivities = performingUsers.get(rid) || {};\n\tconst roomActivities = performingUsers.get(rid) || {};",
            "timeout": "\tfor (const [, activity] of Object.entries(USER_ACTIVITIES)) {\n\tfor (const [, activity] of Object.entries(USER_ACTIVITIES)) {\n\t\troomActivities[activity] = roomActivities[activity] || new Map();\n\t\tconst users = roomActivities[activity];\n\t\tconst users = roomActivities[activity];\n\t\tconst timeout = users[username];\n\t\tconst timeout = users[username];\n\n\t\tif (timeout) {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\n\t\tif (activityTypes.includes(activity)) {\n\t\t\tactivityTypes.splice(activityTypes.indexOf(activity), 1);\n\t\t\tusers[username] = setTimeout(() => handleStreamAction(rid, username, activityTypes, extras), TIMEOUT);\n\t\t} else {",
            "user": "\t\tconst handler = function (username: string, activityType: string[], extras?: object): void {\n\t\tconst handler = function (username: string, activityType: string[], extras?: object): void {\n\t\t\tconst user = Meteor.users.findOne(Meteor.userId() || undefined, {\n\t\t\tconst user = Meteor.users.findOne(Meteor.userId() || undefined, {\n\t\t\t\tfields: { name: 1, username: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "AudioRecorder.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/AudioRecorder.ts",
        "code": {
            "input": "\t\tconst input = this.audioContext?.createMediaStreamSource(this.stream);\n\t\tconst input = this.audioContext?.createMediaStreamSource(this.stream);\n\t\tthis.encoder = new AudioEncoder(input, { bitRate: settings.get('Message_Audio_bitRate') || 32 });"
        },
        "depth_rank": 8
    },
    {
        "file": "AudioEncoder.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/AudioEncoder.ts",
        "code": {
            "blob": "\t\t\t\tconst magicNoPrefix = new Int8Array([73, 68, 51, 3, 0, 0, 0, 0, 0, 0]);\n\t\t\t\tconst magicNoPrefix = new Int8Array([73, 68, 51, 3, 0, 0, 0, 0, 0, 0]);\n\t\t\t\tconst bufferWithMagicNo = [magicNoPrefix, ...event.data.buffer];\n\t\t\t\tconst bufferWithMagicNo = [magicNoPrefix, ...event.data.buffer];\n\t\t\t\tconst blob = new Blob(bufferWithMagicNo, { type: 'audio/mpeg' });\n\t\t\t\tconst blob = new Blob(bufferWithMagicNo, { type: 'audio/mpeg' });"
        },
        "depth_rank": 8
    },
    {
        "file": "videoRecorder.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/videoRecorder.ts",
        "code": {
            "handleError": "\t\tconst handleSuccess = (stream: MediaStream) => {\n\t\tconst handleSuccess = (stream: MediaStream) => {\n\t\t\tthis.startUserMedia(stream);\n\t\t\tcb?.call(this, true);\n\t\t};\n\n\t\tconst handleError = (error: any) => {\n\t\tconst handleError = (error: any) => {\n\t\t\tconsole.error(error);\n\t\t\tcb?.call(this, false);\n\t\t};\n\n\t\tif (navigator.mediaDevices) {\n\t\t\tnavigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(handleSuccess, handleError);",
            "oldGetUserMedia": "\t\tconst oldGetUserMedia = navigator.getUserMedia ?? navigator.webkitGetUserMedia ?? navigator.mozGetUserMedia ?? navigator.msGetUserMedia;\n\t\tconst oldGetUserMedia = navigator.getUserMedia ?? navigator.webkitGetUserMedia ?? navigator.mozGetUserMedia ?? navigator.msGetUserMedia;\n\n\t\tif (oldGetUserMedia) {\n\t\t\toldGetUserMedia.call(navigator, { audio: true, video: true }, handleSuccess, handleError);"
        },
        "depth_rank": 8
    },
    {
        "file": "photoswipeContent.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui/client/views/app/photoswipeContent.ts",
        "code": {
            "img": "const parseLength = (x: unknown): number | undefined => {\nconst parseLength = (x: unknown): number | undefined => {\n\tconst length = typeof x === 'string' ? parseInt(x, 10) : undefined;\n\tconst length = typeof x === 'string' ? parseInt(x, 10) : undefined;\n\treturn Number.isFinite(length) ? length : undefined;\n};\n\nconst getImageSize = (src: string): Promise<[w: number, h: number]> =>\nconst getImageSize = (src: string): Promise<[w: number, h: number]> =>\n\tnew Promise((resolve, reject) => {\n\t\tconst img = new Image();\n\t\tconst img = new Image();\n\n\t\timg.addEventListener('load', () => {\n\t\t\tresolve([img.naturalWidth, img.naturalHeight]);\n\t\t});\n\n\t\timg.addEventListener('error', (error) => {\n\t\t\treject(error.error);\n\t\t});\n\n\t\timg.src = src;\n\t});\n\ntype Slide = PhotoSwipe.Item & { description?: string; title?: string };",
            "title": "\tconst title = element.dataset.title || element.title;\n\tconst title = element.dataset.title || element.title;\n\tconst { description } = element.dataset;\n\tconst { description } = element.dataset;",
            "src": "\t\tconst src = element.dataset.src || element.href;\n\t\tconst src = element.dataset.src || element.href;\n\t\tlet w = parseLength(element.dataset.width);\n\t\tlet h = parseLength(element.dataset.height);\n\n\t\tif (w === undefined || h === undefined) {\n\t\t\t[w, h] = await getImageSize(src);\n\t\t}\n\n\t\treturn { src, w, h, title, description };",
            "defaultGalleryOptions": "const defaultGalleryOptions = {\nconst defaultGalleryOptions = {\n\tbgOpacity: 0.7,\n\tcounterEl: false,\n\tindex: 0,\n\twheelToZoom: true,\n\tpadding: { top: 20, bottom: 40, left: 100, right: 100 },",
            "createEventListenerFor": "const createEventListenerFor =\nconst createEventListenerFor =\n\t(className: string) =>\n\t(event: Event): void => {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst { currentTarget } = event;\n\t\tconst { currentTarget } = event;"
        },
        "depth_rank": 8
    },
    {
        "file": "saveRoomSettings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/channel-settings/server/methods/saveRoomSettings.ts",
        "code": {
            "hasRetentionPolicy": "const hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>\nconst hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>",
            "type": "\t\t\tconst type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n\t\t\tconst type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n\t\t\tvoid Team.update(user._id, room.teamId, { type, updateRoom: false });",
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveRoomTopic.ts",
        "path": "../Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomTopic.ts",
        "code": {
            "update": "\t\t\tfunction: 'RocketChat.saveRoomTopic',\n\t\t\tfunction: 'RocketChat.saveRoomTopic',\n\t\t});\n\t}\n\n\tconst update = await Rooms.setTopicById(rid, roomTopic);\n\tconst update = await Rooms.setTopicById(rid, roomTopic);\n\tif (update && sendMessage) {\n\t\tawait Message.saveSystemMessage('room_changed_topic', rid, roomTopic || '', user);\n\t}\n\tawait callbacks.run('afterRoomTopicChange', { rid, topic: roomTopic });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveRoomName.ts",
        "path": "../Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomName.ts",
        "code": {
            "isDiscussion": "\tconst slugifiedRoomName = await getValidRoomName(displayName, rid);\n\tconst slugifiedRoomName = await getValidRoomName(displayName, rid);\n\tconst isDiscussion = Boolean(room?.prid);\n\tconst isDiscussion = Boolean(room?.prid);\n\n\tlet update;\n\n\tif (isDiscussion || isRoomFederated(room)) {\n\t\tupdate = await updateFName(rid, displayName);\n\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "README.md",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/README.md",
        "code": {
            "function": "\t}, function(error, result){\n\t}, function(error, result){"
        },
        "depth_rank": 5
    },
    {
        "file": "saml_client.js",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/client/saml_client.js",
        "code": {
            "samlService": "const MeteorLogout = Meteor.logout;\nconst MeteorLogout = Meteor.logout;\nconst logoutBehaviour = {\nconst logoutBehaviour = {\n\tTERMINATE_SAML: 'SAML',\n\tONLY_RC: 'Local',\n};\n\nMeteor.logout = async function (...args) {\nMeteor.logout = async function (...args) {\n\tconst samlService = await ServiceConfiguration.configurations.findOneAsync({ service: 'saml' });\n\tconst samlService = await ServiceConfiguration.configurations.findOneAsync({ service: 'saml' });",
            "provider": "\t\tconst provider = samlService.clientConfig && samlService.clientConfig.provider;\n\t\tconst provider = samlService.clientConfig && samlService.clientConfig.provider;\n\t\tif (provider) {\n\t\t\tif (samlService.logoutBehaviour == null || samlService.logoutBehaviour === logoutBehaviour.TERMINATE_SAML) {\n\t\t\t\tif (samlService.idpSLORedirectURL) {\n\t\t\t\t\tconsole.info('SAML session terminated via SLO');\n\t\t\t\t\treturn Meteor.logoutWithSaml({ provider });"
        },
        "depth_rank": 6
    },
    {
        "file": "loginHandler.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/loginHandler.ts",
        "code": {
            "loginResult": "\tconst loginResult = await SAML.retrieveCredential(loginRequest.credentialToken);\n\tconst loginResult = await SAML.retrieveCredential(loginRequest.credentialToken);\n\tSAMLUtils.log({ msg: 'RESULT', loginResult });",
            "updatedUser": "\t\tconst userObject = SAMLUtils.mapProfileToUserObject(loginResult.profile);\n\t\tconst userObject = SAMLUtils.mapProfileToUserObject(loginResult.profile);\n\t\tconst updatedUser = await SAML.insertOrUpdateSAMLUser(userObject);\n\t\tconst updatedUser = await SAML.insertOrUpdateSAMLUser(userObject);\n\t\tSAMLUtils.events.emit('updateCustomFields', loginResult, updatedUser);\n\n\t\treturn updatedUser;\n\t} catch (error: any) {"
        },
        "depth_rank": 6
    },
    {
        "file": "ServiceProvider.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/ServiceProvider.ts",
        "code": {
            "identifiedRequest": "\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\treturn identifiedRequest.request;\n\t}\n\n\tpublic generateLogoutResponse({\n\t\tnameID,\n\t\tsessionIndex,\n\t\tinResponseToId,\n\t}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "Utils.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/Utils.ts",
        "code": {
            "lines": "\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tconst lines = cert.match(/.{1,64}/g);",
            "xmlString": "\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\treturn resolve(successCallback(xmlString));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {",
            "fieldName": "\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\t\t\t\tconst { regex, template } = attribute;",
            "defaultTypes": "\t\t\tconst defaultTypes = ['email', 'username'];\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {",
            "match": "\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "SAML.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/SAML.ts",
        "code": {
            "data": "\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static async insertOrUpdateSAMLUser(userObject: ISAMLUser): Promise<{ userId: string; token: string }> {\n\t\tconst {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tconst query: Record<string, any> = {};",
            "emails": "\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = await SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;",
            "userId": "\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: userObject.fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = await generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tif (i18n.languages?.includes(userObject.language)) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);",
            "serviceProvider": "\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tlet url: string | undefined;\n\n\t\ttry {\n\t\t\turl = await serviceProvider.getAuthorizeUrl();\n\t\t} catch (err: any) {",
            "loggedOutUsers": "\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait logOutUser(inResponseTo);\n\t\t\t} finally {",
            "room": "\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});",
            "privRoom": "\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});"
        },
        "depth_rank": 7
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/settings.ts",
        "code": {
            "configureSamlService": "const configureSamlService = function (samlConfigs: Record<string, any>): IServiceProviderOptions {\nconst configureSamlService = function (samlConfigs: Record<string, any>): IServiceProviderOptions {\n\tlet privateCert = null;\n\tlet privateKey = null;\n\n\tif (samlConfigs.secret.privateKey && samlConfigs.secret.publicCert) {\n\t\tprivateKey = samlConfigs.secret.privateKey;\n\t\tprivateCert = samlConfigs.secret.publicCert;\n\t} else if (samlConfigs.secret.privateKey || samlConfigs.secret.publicCert) {"
        },
        "depth_rank": 7
    },
    {
        "file": "LogoutRequest.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/parsers/LogoutRequest.ts",
        "code": {
            "id": "\t\t\tconst idpSession = sessionNode.childNodes[0].nodeValue;\n\t\t\tconst idpSession = sessionNode.childNodes[0].nodeValue;\n\t\t\tconst nameID = nameIdNode.childNodes[0].nodeValue;\n\t\t\tconst nameID = nameIdNode.childNodes[0].nodeValue;\n\t\t\tconst id = request.getAttribute('ID');\n\t\t\tconst id = request.getAttribute('ID');\n\n\t\t\treturn callback(null, { idpSession, nameID, id });"
        },
        "depth_rank": 8
    },
    {
        "file": "Response.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/parsers/Response.ts",
        "code": {
            "nameID": "\t\tconst subject = this.getSubject(assertion);\n\t\tconst subject = this.getSubject(assertion);\n\t\tif (subject) {\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tif (nameID) {\n\t\t\t\tprofile.nameID = nameID.textContent;\n\n\t\t\t\tif (nameID.hasAttribute('Format')) {\n\t\t\t\t\tprofile.nameIDFormat = nameID.getAttribute('Format');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.validateSubjectConditions(subject);\n\t\t\t} catch (e) {",
            "attributeStatement": "\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tif (attributeStatement) {\n\t\t\tthis.mapAttributes(attributeStatement, profile);\n\t\t} else {",
            "options": "\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };",
            "values": "\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tlet value;\n\t\t\t\tif (values.length === 1) {\n\t\t\t\t\tvalue = values[0].textContent;\n\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "samlLogout.ts",
        "path": "../Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/methods/samlLogout.ts",
        "code": {
            "providerConfig": "\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\n\t\tSAMLUtils.log({ msg: 'Logout request', providerConfig });"
        },
        "depth_rank": 7
    },
    {
        "file": "search.internalService.ts",
        "path": "../Rocket.Chat/apps/meteor/app/search/server/search.internalService.ts",
        "code": {
            "service": "\tconstructor() {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.onEvent('watch.users', async ({ clientAction, id, ...rest }) => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tsearchEventService.promoteEvent('user.delete', id, undefined);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst user = ('data' in rest && rest.data) || (await Users.findOneById(id));\n\t\t\tconst user = ('data' in rest && rest.data) || (await Users.findOneById(id));\n\t\t\tsearchEventService.promoteEvent('user.save', id, user);\n\t\t});\n\n\t\tthis.onEvent('watch.rooms', async ({ clientAction, room }) => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tsearchEventService.promoteEvent('room.delete', room._id, undefined);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsearchEventService.promoteEvent('room.save', room._id, room);\n\t\t});\n\t}\n}\n\nconst service = new Search();\nconst service = new Search();\n\nsettings.watch('Search.Provider', () => {\n\tif (searchProviderService.activeProvider?.on) {\n\t\tapi.registerService(service);\n\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "SearchResultValidationService.ts",
        "path": "../Rocket.Chat/apps/meteor/app/search/server/service/SearchResultValidationService.ts",
        "code": {
            "uid": "\t\tconst uid = Meteor.userId() ?? undefined;\n\t\tconst uid = Meteor.userId() ?? undefined;\n\n\t\tconst validatedResult: ISearchResult = {};\n\t\tconst validatedResult: ISearchResult = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "rocketchat.e2e.room.js",
        "path": "../Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js",
        "code": {
            "subscription": "\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });",
            "groupKey": "\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;",
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });",
            "decryptedKey": "\t\t// const keyID = groupKey.slice(0, 12);\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {",
            "vector": "\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, data);\n\t\t} catch (error) {"
        },
        "depth_rank": 6
    },
    {
        "file": "rocketchat.e2e.ts",
        "path": "../Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.ts",
        "code": {
            "room": "\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\n\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));",
            "encodedPrivateKey": "\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tMeteor._localStorage.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(private_key: string, password: string): Promise<string | void> {\n\t\tconst masterKey = await this.getMasterKey(password);\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(private_key));\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(private_key));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {",
            "showAlert": "\t\t\tconst showModal = () => {\n\t\t\tconst showModal = () => {\n\t\t\t\timperativeModal.open({\n\t\t\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\t\t\tresolve(password);\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst showAlert = () => {\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: () => t('Enter_your_E2E_password'),\n\t\t\t\t\thtml: () => t('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {",
            "privKey": "\t\tconst password = await this.requestPassword();\n\t\tconst password = await this.requestPassword();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(private_key));\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(private_key));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {",
            "decryptedMessageWithQuote": "\t\tconst decryptedMessage: IE2EEMessage = {\n\t\tconst decryptedMessage: IE2EEMessage = {\n\t\t\t...message,\n\t\t\tmsg: data.text,\n\t\t\te2e: 'done',\n\t\t};\n\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\n\t\treturn decryptedMessageWithQuote;\n\t}\n\n\tasync decryptPendingMessages(): Promise<void> {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));",
            "getQuotedMessage": "\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });"
        },
        "depth_rank": 6
    },
    {
        "file": "setRoomKeyID.ts",
        "path": "../Rocket.Chat/apps/meteor/app/e2e/server/methods/setRoomKeyID.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { fields: { e2eKeyId: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { fields: { e2eKeyId: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getUsersOfRoomWithoutKey.ts",
        "path": "../Rocket.Chat/apps/meteor/app/e2e/server/methods/getUsersOfRoomWithoutKey.ts",
        "code": {
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.findByRidWithoutE2EKey(rid, {\n\t\tconst subscriptions = await Subscriptions.findByRidWithoutE2EKey(rid, {\n\t\t\tprojection: { 'u._id': 1 },",
            "options": "\t\tconst userIds = subscriptions.map((s) => s.u._id);\n\t\tconst userIds = subscriptions.map((s) => s.u._id);\n\t\tconst options = { projection: { 'e2e.public_key': 1 } };\n\t\tconst options = { projection: { 'e2e.public_key': 1 } };"
        },
        "depth_rank": 7
    },
    {
        "file": "CustomSounds.ts",
        "path": "../Rocket.Chat/apps/meteor/app/custom-sounds/client/lib/CustomSounds.ts",
        "code": {
            "defaultSounds": "const defaultSounds = [\nconst defaultSounds = [\n\t{ _id: 'chime', name: 'Chime', extension: 'mp3', src: getURL('sounds/chime.mp3') },",
            "sourceEl": "\t\t\tconst sourceEl = audio.querySelector('source');\n\t\t\tconst sourceEl = audio.querySelector('source');\n\t\t\tif (sourceEl) {\n\t\t\t\tsourceEl.src = sound.src;\n\t\t\t}\n\t\t\taudio.load();\n\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "hasPermission.ts",
        "path": "../Rocket.Chat/apps/meteor/app/authorization/client/hasPermission.ts",
        "code": {
            "user": "const createPermissionValidator =\nconst createPermissionValidator =\n\t(quantifier: (predicate: (permissionId: IPermission['_id']) => boolean) => boolean) =>\n\t(permissionIds: IPermission['_id'][], scope: string | undefined, userId: IUser['_id'], scopedRoles?: IPermission['_id'][]): boolean => {\n\t\tconst user = Models.Users.findOneById(userId, { fields: { roles: 1 } });\n\t\tconst user = Models.Users.findOneById(userId, { fields: { roles: 1 } });",
            "permission": "\t\t\tconst permission = Models.ChatPermissions.findOne(permissionId, {\n\t\t\tconst permission = Models.ChatPermissions.findOne(permissionId, {\n\t\t\t\tfields: { roles: 1 },",
            "role": "\t\t\tconst roles = permission?.roles ?? [];\n\t\t\tconst roles = permission?.roles ?? [];\n\n\t\t\treturn roles.some((roleId) => {\n\t\t\t\tconst role = Models.Roles.findOne(roleId, { fields: { scope: 1 } });\n\t\t\t\tconst role = Models.Roles.findOne(roleId, { fields: { scope: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "removeUserFromRole.ts",
        "path": "../Rocket.Chat/apps/meteor/app/authorization/server/methods/removeUserFromRole.ts",
        "code": {
            "as": "\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: role._id,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername,\n\t\t\t},\n\t\t\tscope,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: userId });"
        },
        "depth_rank": 7
    },
    {
        "file": "canDeleteMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/authorization/server/functions/canDeleteMessage.ts",
        "code": {
            "room": "\t\tconst blockDeleteInMinutes = await getValue('Message_AllowDeleting_BlockDeleteInMinutes');\n\t\tconst blockDeleteInMinutes = await getValue('Message_AllowDeleting_BlockDeleteInMinutes');\n\n\t\tif (blockDeleteInMinutes) {\n\t\t\tconst timeElapsedForMessage = elapsedTime(ts);\n\t\t\tconst timeElapsedForMessage = elapsedTime(ts);\n\t\t\treturn timeElapsedForMessage <= blockDeleteInMinutes;\n\t\t}\n\t}\n\n\tconst room = await Rooms.findOneById(rid, { projection: { ro: 1, unmuted: 1 } });\n\tconst room = await Rooms.findOneById(rid, { projection: { ro: 1, unmuted: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getUsersInRole.ts",
        "path": "../Rocket.Chat/apps/meteor/app/authorization/server/functions/getUsersInRole.ts",
        "code": {
            "role": "\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'scope'>>(roleId, { projection: { scope: 1 } });\n\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'scope'>>(roleId, { projection: { scope: 1 } });",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRolesAndRoomId({ roles: role._id, rid: scope }, { projection: { 'u._id': 1 } })\n\t\t\tconst subscriptions = await Subscriptions.findByRolesAndRoomId({ roles: role._id, rid: scope }, { projection: { 'u._id': 1 } })"
        },
        "depth_rank": 7
    },
    {
        "file": "upsertPermissions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/authorization/server/functions/upsertPermissions.ts",
        "code": {
            "defaultRoles": "\tfor await (const permission of permissions) {\n\tfor await (const permission of permissions) {\n\t\tawait Permissions.create(permission._id, permission.roles);\n\t}\n\n\tconst defaultRoles = [\n\tconst defaultRoles = [\n\t\t{ name: 'admin', scope: 'Users', description: 'Admin' },",
            "selector": "\t] as const;\n\t] as const;\n\n\tfor await (const role of defaultRoles) {\n\tfor await (const role of defaultRoles) {\n\t\tawait createOrUpdateProtectedRoleAsync(role.name, role);\n\t}\n\n\tconst getPreviousPermissions = async function (settingId?: string): Promise<Record<string, IPermission>> {\n\tconst getPreviousPermissions = async function (settingId?: string): Promise<Record<string, IPermission>> {\n\t\tconst previousSettingPermissions: {\n\t\tconst previousSettingPermissions: {\n\t\t\t[key: string]: IPermission;\n\t\t} = {};\n\n\t\tconst selector = { level: 'settings' as const, ...(settingId && { settingId }) };\n\t\tconst selector = { level: 'settings' as const, ...(settingId && { settingId }) };",
            "existent": "\t\tconst existent = await Permissions.findOne(\n\t\tconst existent = await Permissions.findOne(\n\t\t\t{\n\t\t\t\t_id: permissionId,\n\t\t\t\t...permission,\n\t\t\t},\n\t\t\t{ projection: { _id: 1 } },",
            "await": "\t\tfor await (const obsoletePermission of Object.keys(previousSettingPermissions)) {\n\t\tfor await (const obsoletePermission of Object.keys(previousSettingPermissions)) {\n\t\t\tif (previousSettingPermissions.hasOwnProperty(obsoletePermission)) {\n\t\t\t\tawait Permissions.deleteOne({ _id: obsoletePermission });"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-join/server/server.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 6
    },
    {
        "file": "leave.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-leave/server/leave.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId);\n\t\tconst user = await Users.findOneById(userId);\n\t\tvoid api.broadcast('notify.ephemeralMessage', userId, message.rid, {\n\t\t\tmsg: i18n.t(error, { lng: user?.language || settings.get('Language') || 'en' }),"
        },
        "depth_rank": 6
    },
    {
        "file": "custom_oauth_client.js",
        "path": "../Rocket.Chat/apps/meteor/app/custom-oauth/client/custom_oauth_client.js",
        "code": {
            "config": "\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });\n\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });"
        },
        "depth_rank": 6
    },
    {
        "file": "swapSessionStorage.js",
        "path": "../Rocket.Chat/apps/meteor/app/custom-oauth/client/swapSessionStorage.js",
        "code": {
            "KEY_NAME": "\tconst KEY_NAME = 'Swapped_Storage_Workaround';\n\tconst KEY_NAME = 'Swapped_Storage_Workaround';\n\n\tOAuth.saveDataForRedirect = (loginService, credentialToken) => {\n\t\tMeteor._localStorage.setItem(KEY_NAME, JSON.stringify({ loginService, credentialToken }));"
        },
        "depth_rank": 6
    },
    {
        "file": "custom_oauth_server.js",
        "path": "../Rocket.Chat/apps/meteor/app/custom-oauth/server/custom_oauth_server.js",
        "code": {
            "Services": "const logger = new Logger('CustomOAuth');\nconst logger = new Logger('CustomOAuth');\n\nconst Services = {};\nconst Services = {};",
            "config": "\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });\n\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });",
            "params": "\t\tconst params = {};\n\t\tconst params = {};",
            "response": "\t\t\tconst response = await request.json();\n\t\t\tconst response = await request.json();\n\n\t\t\tlogger.debug({ msg: 'Identity response', response });",
            "result": "\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tnormalizeIdentity(identity) {\n\t\tif (identity) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tif (result) {\n\t\t\t\t\tidentity = result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.usernameField) {\n\t\t\tidentity.username = this.getUsername(identity);\n\t\t}\n\n\t\tif (this.emailField) {\n\t\t\tidentity.email = this.getEmail(identity);\n\t\t}\n\n\t\tif (this.avatarField) {\n\t\t\tidentity.avatarUrl = this.getAvatarUrl(identity);\n\t\t}\n\n\t\tif (this.nameField) {\n\t\t\tidentity.name = this.getCustomName(identity);\n\t\t} else {",
            "fields": "\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\t_.extend(serviceData, fields);\n\n\t\t\treturn {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n}\n\nconst { updateOrCreateUserFromExternalService } = Accounts;\nconst { updateOrCreateUserFromExternalService } = Accounts;"
        },
        "depth_rank": 6
    },
    {
        "file": "messages.js",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/converters/messages.js",
        "code": {
            "result": "\t\tconst map = {\n\t\tconst map = {\n\t\t\tid: '_id',\n\t\t\tthreadId: 'tmid',\n\t\t\treactions: 'reactions',\n\t\t\tparseUrls: 'parseUrls',\n\t\t\ttext: 'msg',\n\t\t\tcreatedAt: 'ts',\n\t\t\tupdatedAt: '_updatedAt',\n\t\t\teditedAt: 'editedAt',\n\t\t\temoji: 'emoji',\n\t\t\tavatarUrl: 'avatar',\n\t\t\talias: 'alias',\n\t\t\tfile: 'file',\n\t\t\tcustomFields: 'customFields',\n\t\t\tgroupable: 'groupable',\n\t\t\ttoken: 'token',\n\t\t\tblocks: 'blocks',\n\t\t\troom: async (message) => {\n\t\t\t\tconst result = await this.orch.getConverters().get('rooms').convertById(message.rid);\n\t\t\t\tconst result = await this.orch.getConverters().get('rooms').convertById(message.rid);\n\t\t\t\tdelete message.rid;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\teditor: async (message) => {\n\t\t\t\tconst { editedBy } = message;\n\t\t\t\tconst { editedBy } = message;",
            "user": "\t\t\tconst user = await Users.findOneById(message.sender.id);\n\t\t\tconst user = await Users.findOneById(message.sender.id);\n\n\t\t\tif (user) {\n\t\t\t\tu = {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t};\n\t\t\t} else {",
            "newMessage": "\t\t\tconst editor = await Users.findOneById(message.editor.id);\n\t\t\tconst editor = await Users.findOneById(message.editor.id);\n\t\t\teditedBy = {\n\t\t\t\t_id: editor._id,\n\t\t\t\tusername: editor.username,\n\t\t\t};\n\t\t}\n\n\t\tconst attachments = this._convertAppAttachments(message.attachments);\n\t\tconst attachments = this._convertAppAttachments(message.attachments);\n\n\t\tconst newMessage = {\n\t\tconst newMessage = {\n\t\t\t_id: message.id || Random.id(),\n\t\t\t...('threadId' in message && { tmid: message.threadId }),",
            "map": "\t\tconst map = {\n\t\tconst map = {\n\t\t\tcollapsed: 'collapsed',\n\t\t\tcolor: 'color',\n\t\t\ttext: 'text',\n\t\t\ttimestampLink: 'message_link',\n\t\t\tthumbnailUrl: 'thumb_url',\n\t\t\timageDimensions: 'image_dimensions',\n\t\t\timagePreview: 'image_preview',\n\t\t\timageUrl: 'image_url',\n\t\t\timageType: 'image_type',\n\t\t\timageSize: 'image_size',\n\t\t\taudioUrl: 'audio_url',\n\t\t\taudioType: 'audio_type',\n\t\t\taudioSize: 'audio_size',\n\t\t\tvideoUrl: 'video_url',\n\t\t\tvideoType: 'video_type',\n\t\t\tvideoSize: 'video_size',\n\t\t\tfields: 'fields',\n\t\t\tactionButtonsAlignment: 'button_alignment',\n\t\t\tactions: 'actions',\n\t\t\ttype: 'type',\n\t\t\tdescription: 'description',\n\t\t\tauthor: (attachment) => {\n\t\t\t\tconst { author_name: name, author_link: link, author_icon: icon } = attachment;\n\t\t\t\tconst { author_name: name, author_link: link, author_icon: icon } = attachment;"
        },
        "depth_rank": 7
    },
    {
        "file": "users.js",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/converters/users.js",
        "code": {
            "statusConnection": "\t\tconst type = this._convertUserTypeToEnum(user.type);\n\t\tconst type = this._convertUserTypeToEnum(user.type);\n\t\tconst statusConnection = this._convertStatusConnectionToEnum(user.username, user._id, user.statusConnection);\n\t\tconst statusConnection = this._convertStatusConnectionToEnum(user.username, user._id, user.statusConnection);\n\n\t\treturn {\n\t\t\tid: user._id,\n\t\t\tusername: user.username,\n\t\t\temails: user.emails,\n\t\t\ttype,\n\t\t\tisEnabled: user.active,\n\t\t\tname: user.name,\n\t\t\troles: user.roles,\n\t\t\tstatus: user.status,\n\t\t\tstatusConnection,\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tcreatedAt: user.createdAt,\n\t\t\tupdatedAt: user._updatedAt,\n\t\t\tlastLoginAt: user.lastLogin,\n\t\t\tappId: user.appId,\n\t\t\tcustomFields: user.customFields,\n\t\t\tsettings: {\n\t\t\t\tpreferences: {\n\t\t\t\t\t...(user?.settings?.preferences?.language && { language: user.settings.preferences.language }),"
        },
        "depth_rank": 7
    },
    {
        "file": "rooms.js",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/converters/rooms.js",
        "code": {
            "phone": "\t\t\tconst creator = await Users.findOneById(room.creator.id);\n\t\t\tconst creator = await Users.findOneById(room.creator.id);\n\t\t\tu = {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t\tname: creator.name,\n\t\t\t};\n\t\t}\n\n\t\tlet v;\n\t\tif (room.visitor) {\n\t\t\tconst visitor = await LivechatVisitors.findOneById(room.visitor.id);\n\t\t\tconst visitor = await LivechatVisitors.findOneById(room.visitor.id);\n\n\t\t\tconst lastMessageTs = room?.visitor?.lastMessageTs;\n\t\t\tconst lastMessageTs = room?.visitor?.lastMessageTs;\n\t\t\tconst phone = room?.visitor?.channelPhone;\n\t\t\tconst phone = room?.visitor?.channelPhone;\n\t\t\tv = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tstatus: visitor.status || 'online',\n\t\t\t\t...(lastMessageTs && { lastMessageTs }),",
            "newRoom": "\t\t\tconst department = await LivechatDepartment.findOneById(room.department.id);\n\t\t\tconst department = await LivechatDepartment.findOneById(room.department.id);\n\t\t\tdepartmentId = department._id;\n\t\t}\n\n\t\tlet servedBy;\n\t\tif (room.servedBy) {\n\t\t\tconst user = await Users.findOneById(room.servedBy.id);\n\t\t\tconst user = await Users.findOneById(room.servedBy.id);\n\t\t\tservedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tlet closedBy;\n\t\tif (room.closedBy) {\n\t\t\tconst user = await Users.findOneById(room.closedBy.id);\n\t\t\tconst user = await Users.findOneById(room.closedBy.id);\n\t\t\tclosedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tconst newRoom = {\n\t\tconst newRoom = {\n\t\t\t...(room.id && { _id: room.id }),",
            "result": "\t\t\t\tconst result = this._convertTypeToApp(room.t);\n\t\t\t\tconst result = this._convertTypeToApp(room.t);\n\t\t\t\tdelete room.t;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tcreator: async (room) => {\n\t\t\t\tconst { u } = room;\n\t\t\t\tconst { u } = room;"
        },
        "depth_rank": 7
    },
    {
        "file": "visitors.js",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/converters/visitors.js",
        "code": {
            "newVisitor": "\t\tconst newVisitor = {\n\t\tconst newVisitor = {\n\t\t\t_id: visitor.id,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\tphone: visitor.phone,\n\t\t\tlivechatData: visitor.livechatData,\n\t\t\tstatus: visitor.status || 'online',\n\t\t\t...(visitor.visitorEmails && { visitorEmails: visitor.visitorEmails }),"
        },
        "depth_rank": 7
    },
    {
        "file": "uploads.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/uploads.ts",
        "code": {
            "getUploadDetails": "const getUploadDetails = (details: IUploadDetails): Partial<IUploadDetails> => {\nconst getUploadDetails = (details: IUploadDetails): Partial<IUploadDetails> => {\n\tif (details.visitorToken) {\n\t\tconst { userId, ...result } = details;\n\t\tconst { userId, ...result } = details;"
        },
        "depth_rank": 7
    },
    {
        "file": "listeners.js",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/listeners.js",
        "code": {
            "room": "\t\tconst msg = await this.orch.getConverters().get('messages').convertMessage(message);\n\t\tconst msg = await this.orch.getConverters().get('messages').convertMessage(message);\n\n\t\tconst params = (() => {\n\t\tconst params = (() => {\n\t\t\tswitch (inte) {\n\t\t\t\tcase AppInterface.IPostMessageDeleted:\n\t\t\t\t\tconst [userDeleted] = payload;\n\t\t\t\t\tconst [userDeleted] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userDeleted),\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageReacted:\n\t\t\t\t\tconst [userReacted, reaction, isReacted] = payload;\n\t\t\t\t\tconst [userReacted, reaction, isReacted] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userReacted),\n\t\t\t\t\t\treaction,\n\t\t\t\t\t\tisReacted,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageFollowed:\n\t\t\t\t\tconst [userFollowed, isUnfollow] = payload;\n\t\t\t\t\tconst [userFollowed, isUnfollow] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userFollowed),\n\t\t\t\t\t\tisUnfollow,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessagePinned:\n\t\t\t\t\tconst [userPinned, isUnpinned] = payload;\n\t\t\t\t\tconst [userPinned, isUnpinned] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userPinned),\n\t\t\t\t\t\tisUnpinned,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageStarred:\n\t\t\t\t\tconst [userStarred, isStarred] = payload;\n\t\t\t\t\tconst [userStarred, isStarred] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userStarred),\n\t\t\t\t\t\tisStarred,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageReported:\n\t\t\t\t\tconst [userReported, reason] = payload;\n\t\t\t\t\tconst [userReported, reason] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userReported),\n\t\t\t\t\t\treason,\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn msg;\n\t\t\t}\n\t\t})();\n\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\n\t\tif (typeof result === 'boolean') {\n\t\t\treturn result;\n\t\t}\n\t\treturn this.orch.getConverters().get('messages').convertAppMessage(result);\n\t}\n\n\tasync roomEvent(inte, room, ...payload) {\n\t\tconst rm = await this.orch.getConverters().get('rooms').convertRoom(room);\n\t\tconst rm = await this.orch.getConverters().get('rooms').convertRoom(room);\n\n\t\tconst params = (() => {\n\t\tconst params = (() => {\n\t\t\tswitch (inte) {\n\t\t\t\tcase AppInterface.IPreRoomUserJoined:\n\t\t\t\tcase AppInterface.IPostRoomUserJoined:\n\t\t\t\t\tconst [joiningUser, invitingUser] = payload;\n\t\t\t\t\tconst [joiningUser, invitingUser] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom: rm,\n\t\t\t\t\t\tjoiningUser: this.orch.getConverters().get('users').convertToApp(joiningUser),\n\t\t\t\t\t\tinvitingUser: this.orch.getConverters().get('users').convertToApp(invitingUser),\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPreRoomUserLeave:\n\t\t\t\tcase AppInterface.IPostRoomUserLeave:\n\t\t\t\t\tconst [leavingUser] = payload;\n\t\t\t\t\tconst [leavingUser] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom: rm,\n\t\t\t\t\t\tleavingUser: this.orch.getConverters().get('users').convertToApp(leavingUser),\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn rm;\n\t\t\t}\n\t\t})();\n\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\n\t\tif (typeof result === 'boolean') {\n\t\t\treturn result;\n\t\t}\n\t\treturn this.orch.getConverters().get('rooms').convertAppRoom(result);\n\t}\n\n\tasync livechatEvent(inte, data) {\n\t\tswitch (inte) {\n\t\t\tcase AppInterface.IPostLivechatAgentAssigned:\n\t\t\tcase AppInterface.IPostLivechatAgentUnassigned:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, {\n\t\t\t\t\t\troom: await this.orch.getConverters().get('rooms').convertRoom(data.room),\n\t\t\t\t\t\tagent: this.orch.getConverters().get('users').convertToApp(data.user),\n\t\t\t\t\t});\n\t\t\tcase AppInterface.IPostLivechatRoomTransferred:\n\t\t\t\tconst converter = data.type === LivechatTransferEventType.AGENT ? 'users' : 'departments';\n\t\t\t\tconst converter = data.type === LivechatTransferEventType.AGENT ? 'users' : 'departments';\n\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, {\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\troom: await this.orch.getConverters().get('rooms').convertById(data.room),\n\t\t\t\t\t\tfrom: await this.orch.getConverters().get(converter).convertById(data.from),\n\t\t\t\t\t\tto: await this.orch.getConverters().get(converter).convertById(data.to),\n\t\t\t\t\t});\n\t\t\tcase AppInterface.IPostLivechatGuestSaved:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, await this.orch.getConverters().get('visitors').convertById(data));\n\t\t\tcase AppInterface.IPostLivechatRoomSaved:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, await this.orch.getConverters().get('rooms').convertById(data));\n\t\t\tdefault:\n\t\t\t\tconst room = await this.orch.getConverters().get('rooms').convertRoom(data);\n\t\t\t\tconst room = await this.orch.getConverters().get('rooms').convertRoom(data);\n\n\t\t\t\treturn this.orch.getManager().getListenerManager().executeListener(inte, room);\n\t\t}\n\t}\n\n\tasync userEvent(inte, data) {\n\t\tlet context;\n\t\tswitch (inte) {\n\t\t\tcase AppInterface.IPostUserLoggedIn:\n\t\t\tcase AppInterface.IPostUserLogout:\n\t\t\t\tcontext = this.orch.getConverters().get('users').convertToApp(data.user);\n\t\t\t\treturn this.orch.getManager().getListenerManager().executeListener(inte, context);\n\t\t\tcase AppInterface.IPostUserStatusChanged:\n\t\t\t\tconst { currentStatus, previousStatus } = data;\n\t\t\t\tconst { currentStatus, previousStatus } = data;"
        },
        "depth_rank": 7
    },
    {
        "file": "oauthApps.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/oauthApps.ts",
        "code": {
            "botUser": "\t\tconst botUser = await Users.findOne({ appId });\n\t\tconst botUser = await Users.findOne({ appId });",
            "data": "\t\tconst data = await OAuthApps.findOne({ _id: id, appId });\n\t\tconst data = await OAuthApps.findOne({ _id: id, appId });"
        },
        "depth_rank": 7
    },
    {
        "file": "messages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/messages.ts",
        "code": {
            "users": "\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);"
        },
        "depth_rank": 7
    },
    {
        "file": "livechat.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/livechat.ts",
        "code": {
            "visitor": "\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\tconst closeData: any = {\n\t\t\troom: await this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),",
            "registerData": "\t\tconst registerData = {\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),",
            "appUser": "\t\tconst appUser = await Users.findOneByAppId(appId, {});\n\t\tconst appUser = await Users.findOneByAppId(appId, {});",
            "transferredBy": "\t\tconst transferredBy = {\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t};\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = await Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },",
            "boundMessageConverter": "\t\tconst boundMessageConverter = messageConverter.convertMessage.bind(messageConverter);\n\t\tconst boundMessageConverter = messageConverter.convertMessage.bind(messageConverter);\n\n\t\treturn (await Livechat.getRoomMessages({ rid: roomId })).map(boundMessageConverter);"
        },
        "depth_rank": 7
    },
    {
        "file": "scheduler.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/scheduler.ts",
        "code": {
            "data": "function _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\nfunction _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\n\treturn (job) => {\n\t\tconst data = job?.attrs?.data || {};\n\t\tconst data = job?.attrs?.data || {};",
            "readonly": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: 'rocketchat_apps_scheduler' },",
            "job": "\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\t\tskipImmediate,\n\t\t\t});\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {",
            "scheduledJobs": "\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);\n\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);"
        },
        "depth_rank": 7
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/rooms.ts",
        "code": {
            "extraData": "\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\treturn this.createChannel(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\treturn this.createPrivateGroup(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\treturn this.createDirectMessage(room.creator.id, members);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\t}\n\n\tprivate prepareExtraData(room: Record<string, any>): Record<string, unknown> {\n\t\tconst extraData = Object.assign({}, room);\n\t\tconst extraData = Object.assign({}, room);",
            "room": "\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});",
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});",
            "member": "\t\tfor await (const username of members) {\n\t\tfor await (const username of members) {\n\t\t\tconst member = await Users.findOneByUsername(username, {});\n\t\t\tconst member = await Users.findOneByUsername(username, {});",
            "users": "\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();\n\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/users.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByAppId(appId, {});\n\t\tconst user = await Users.findOneByAppId(appId, {});"
        },
        "depth_rank": 7
    },
    {
        "file": "persistence.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/persistence.ts",
        "code": {
            "record": "\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });"
        },
        "depth_rank": 7
    },
    {
        "file": "http.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/http.ts",
        "code": {
            "url": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async call(info: IHttpBridgeRequestInfo): Promise<IHttpResponse> {\n\t\t// begin comptability with old HTTP.call API\n\t\tconst url = new URL(info.url);\n\t\tconst url = new URL(info.url);\n\n\t\tconst { request, method } = info;\n\t\tconst { request, method } = info;"
        },
        "depth_rank": 7
    },
    {
        "file": "settings.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/settings.ts",
        "code": {
            "settings": "\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\tconst settings = await Settings.find({ secret: false }).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "details.ts",
        "path": "../Rocket.Chat/apps/meteor/app/apps/server/bridges/details.ts",
        "code": {
            "readonly": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected onAppSettingsChange(appId: string, setting: ISetting): void {\n\t\ttry {\n\t\t\tthis.orch.getNotifier().appSettingsChange(appId, setting);\n\t\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "code.js",
        "path": "../Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/code.js",
        "code": {
            "result": "\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\n\t\t\t\tconst result = (() => {\n\t\t\t\tconst result = (() => {\n\t\t\t\t\tif (lang) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tregister(lang);\n\t\t\t\t\t\t\treturn hljs.highlight(lang, code);\n\t\t\t\t\t\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "markdown.js",
        "path": "../Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/markdown.js",
        "code": {
            "validateUrl": "const validateUrl = (url, message) => {\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {"
        },
        "depth_rank": 8
    },
    {
        "file": "token.ts",
        "path": "../Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/token.ts",
        "code": {
            "tokensFound": "\tconst tokensFound = message.tokens?.filter(({ token }) => tokens.includes(token)) || [];\n\tconst tokensFound = message.tokens?.filter(({ token }) => tokens.includes(token)) || [];"
        },
        "depth_rank": 8
    },
    {
        "file": "cas_server.js",
        "path": "../Rocket.Chat/apps/meteor/app/cas/server/cas_server.js",
        "code": {
            "user_info": "\t\t\t\tconst user_info = { username };\n\t\t\t\tconst user_info = { username };",
            "newUser": "\t\tconst newUser = {\n\t\tconst newUser = {\n\t\t\tusername: result.username,\n\t\t\tactive: true,\n\t\t\tglobalRoles: ['user'],\n\t\t\temails: [],\n\t\t\tservices: {\n\t\t\t\tcas: {\n\t\t\t\t\texternal_id: result.username,\n\t\t\t\t\tversion: cas_version,\n\t\t\t\t\tattrs: int_attrs,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// Add username\n\t\tif (int_attrs.username) {\n\t\t\t_.extend(newUser, {\n\t\t\t\tusername: int_attrs.username,\n\t\t\t});\n\t\t}\n\n\t\t// Add User.name\n\t\tif (int_attrs.name) {\n\t\t\t_.extend(newUser, {\n\t\t\t\tname: int_attrs.name,\n\t\t\t});\n\t\t}\n\n\t\t// Add email\n\t\tif (int_attrs.email) {\n\t\t\t_.extend(newUser, {\n\t\t\t\temails: [{ address: int_attrs.email, verified }],",
            "userId": "\t\tconst userId = Accounts.insertUserDoc({}, newUser);\n\t\tconst userId = Accounts.insertUserDoc({}, newUser);"
        },
        "depth_rank": 6
    },
    {
        "file": "getURL.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/lib/getURL.ts",
        "code": {
            "cloudParams": "\t\tconst cloudParams = cloud_params || {};\n\t\tconst cloudParams = cloud_params || {};"
        },
        "depth_rank": 6
    },
    {
        "file": "RestApiClient.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/client/lib/RestApiClient.ts",
        "code": {
            "function": "APIClient.use(async function (request, next) {\nAPIClient.use(async function (request, next) {\n\ttry {\n\t\treturn await next(...request);\n\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "SDKClient.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/client/lib/SDKClient.ts",
        "code": {
            "sub": "\t\tconst ee = new Emitter();\n\t\tconst ee = new Emitter();\n\n\t\tconst meta = {\n\t\tconst meta = {\n\t\t\tready: false,\n\t\t};\n\n\t\tconst sub = Meteor.connection.subscribe(\n\t\tconst sub = Meteor.connection.subscribe(\n\t\t\tstreamName,\n\t\t\tkey,\n\t\t\t{ useCollection: false, args },"
        },
        "depth_rank": 7
    },
    {
        "file": "JWTHelper.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/server/lib/JWTHelper.ts",
        "code": {
            "header": "\tconst header = JSON.stringify(HEADER);\n\tconst header = JSON.stringify(HEADER);\n\n\treturn jsr.KJUR.jws.JWS.sign(HEADER.alg, header, JSON.stringify(tokenPayload), { rstr: secret });"
        },
        "depth_rank": 7
    },
    {
        "file": "getValidRoomName.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/server/lib/getValidRoomName.ts",
        "code": {
            "cleanName": "\t\tconst cleanName = limax(displayName, { maintainCase: true });\n\t\tconst cleanName = limax(displayName, { maintainCase: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "normalizeMessageFileUpload.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/server/functions/normalizeMessageFileUpload.ts",
        "code": {
            "file": "\t\tconst jwt = FileUpload.generateJWTToFileUrls({\n\t\tconst jwt = FileUpload.generateJWTToFileUrls({\n\t\t\trid: message.rid,\n\t\t\tuserId: message.u._id,\n\t\t\tfileId: message.file._id,\n\t\t});\n\t\tconst file = await Uploads.findOne({ _id: message.file._id });\n\t\tconst file = await Uploads.findOne({ _id: message.file._id });"
        },
        "depth_rank": 7
    },
    {
        "file": "getMongoInfo.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/server/functions/getMongoInfo.ts",
        "code": {
            "getOplogInfo": "function getOplogInfo(): { oplogEnabled: boolean; mongo: MongoConnection } {\nfunction getOplogInfo(): { oplogEnabled: boolean; mongo: MongoConnection } {\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();",
            "function": "async function fallbackMongoInfo(): Promise<{\nasync function fallbackMongoInfo(): Promise<{\n\toplogEnabled: boolean;\n\tmongoVersion: string;\n\tmongoStorageEngine?: string;\n\tmongo: MongoConnection;\n}> {"
        },
        "depth_rank": 7
    },
    {
        "file": "isDocker.ts",
        "path": "../Rocket.Chat/apps/meteor/app/utils/server/functions/isDocker.ts",
        "code": {
            "hasDockerEnv": "function hasDockerEnv(): boolean {\nfunction hasDockerEnv(): boolean {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "getNewUpdates.ts",
        "path": "../Rocket.Chat/apps/meteor/app/version-check/server/functions/getNewUpdates.ts",
        "code": {
            "data": "\t\tconst url = 'https://releases.rocket.chat/updates/check';\n\t\tconst url = 'https://releases.rocket.chat/updates/check';\n\t\tconst response = await fetch(url, {\n\t\tconst response = await fetch(url, {\n\t\t\theaders,\n\t\t\tparams,\n\t\t});\n\n\t\tconst data = await response.json();\n\t\tconst data = await response.json();\n\n\t\tcheck(\n\t\t\tdata,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tversions: [\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tversion: String,\n\t\t\t\t\t\tsecurity: Match.Optional(Boolean),\n\t\t\t\t\t\tinfoUrl: String,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t\talerts: [\n\t\t\t\t\tMatch.Optional([\n\t\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\t\tid: String,\n\t\t\t\t\t\t\ttitle: String,\n\t\t\t\t\t\t\ttext: String,\n\t\t\t\t\t\t\ttextArguments: [Match.Any],\n\t\t\t\t\t\t\tmodifiers: [String] as [StringConstructor],\n\t\t\t\t\t\t\tinfoUrl: String,\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t],\n\t\t\t}),\n\t\t);\n\n\t\treturn data as {\n\t\t\tversions: {\n\t\t\t\tversion: string;\n\t\t\t\tsecurity: boolean;\n\t\t\t\tinfoUrl: string;\n\t\t\t}[];\n\n\t\t\talerts: {\n\t\t\t\tid: string;\n\t\t\t\tpriority: number;\n\t\t\t\ttitle: string;\n\t\t\t\ttext: string;\n\t\t\t\ttextArguments?: string[];\n\t\t\t\tmodifiers: string[];\n\t\t\t\tinfoUrl: string;\n\t\t\t}[];\n\t\t};\n\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "statistics.ts",
        "path": "../Rocket.Chat/apps/meteor/app/statistics/server/lib/statistics.ts",
        "code": {
            "statistics": "\t\tconst readPreference = readSecondaryPreferred(db);\n\t\tconst readPreference = readSecondaryPreferred(db);\n\n\t\tconst statistics = {} as IStats;\n\t\tconst statistics = {} as IStats;",
            "statsPms": "\t\tconst statsPms = [];\n\t\tconst statsPms = [];\n\n\t\t// Setup Wizard\n\t\tstatistics.wizard = {};",
            "uniqueID": "\t\t\t\tconst record = await Settings.findOne(field);\n\t\t\t\tconst record = await Settings.findOne(field);\n\t\t\t\tif (record) {\n\t\t\t\t\tconst wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n\t\t\t\t\tconst wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n\t\t\t\t\tstatistics.wizard[wizardField] = record.value;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Version\n\t\tconst uniqueID = await Settings.findOne('uniqueID');\n\t\tconst uniqueID = await Settings.findOne('uniqueID');\n\t\tstatistics.uniqueId = settings.get('uniqueID');\n\t\tif (uniqueID) {\n\t\t\tstatistics.installedAt = uniqueID.createdAt.toISOString();\n\t\t}\n\n\t\tif (Info) {\n\t\t\tstatistics.version = Info.version;\n\t\t\tstatistics.tag = Info.tag;\n\t\t\tstatistics.branch = Info.branch;\n\t\t}\n\n\t\t// User statistics\n\t\tstatistics.totalUsers = await Users.col.countDocuments({});",
            "settingsStatisticsObject": "\t\t\t\tconst settingsStatisticsObject = res || {};\n\t\t\t\tconst settingsStatisticsObject = res || {};"
        },
        "depth_rank": 7
    },
    {
        "file": "getServicesStatistics.ts",
        "path": "../Rocket.Chat/apps/meteor/app/statistics/server/lib/getServicesStatistics.ts",
        "code": {
            "readPreference": "\tconst readPreference = readSecondaryPreferred(db);\n\tconst readPreference = readSecondaryPreferred(db);\n\n\treturn {\n\t\tldap: {\n\t\t\tusers: await Users.countActiveUsersByService('ldap', { readPreference }),"
        },
        "depth_rank": 7
    },
    {
        "file": "UAParserCustom.js",
        "path": "../Rocket.Chat/apps/meteor/app/statistics/server/lib/UAParserCustom.js",
        "code": {
            "subProps": "\t\t\tconst subProps = {};\n\t\t\tconst subProps = {};",
            "prop": "\t\t\t\t\tconst propName = props.list[idx];\n\t\t\t\t\tconst propName = props.list[idx];\n\t\t\t\t\tsubProps[propName] = props.get ? props.get(propName, value) : value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst prop = {};\n\t\t\tconst prop = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "SAUMonitor.ts",
        "path": "../Rocket.Chat/apps/meteor/app/statistics/server/lib/SAUMonitor.ts",
        "code": {
            "user": "const logger = new Logger('SAUMonitor');\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });",
            "params": "\t\t\tconst roles = await getUserRoles(userId);\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };",
            "searchTerm": "\t\tconst searchTerm = this._getSearchTerm(data);\n\t\tconst searchTerm = this._getSearchTerm(data);\n\n\t\tawait Sessions.insertOne({ ...data, searchTerm, createdAt: new Date() });",
            "cursor": "\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });",
            "await": "\t\tconst batch = [];\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },",
            "host": "\t\tconst ip = getClientAddress(connection);\n\t\tconst ip = getClientAddress(connection);\n\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\t...(connection.loginToken && { loginToken: connection.loginToken }),"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-kick/server/server.ts",
        "code": {
            "kickedUser": "\t\tconst username = params.trim().replace('@', '');\n\t\tconst username = params.trim().replace('@', '');\n\t\tif (username === '') {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById(userId);\n\t\tconst user = await Users.findOneById(userId);\n\t\tconst lng = user?.language || settings.get('Language') || 'en';\n\t\tconst lng = user?.language || settings.get('Language') || 'en';\n\n\t\tconst kickedUser = await Users.findOneByUsernameIgnoringCase(username);\n\t\tconst kickedUser = await Users.findOneByUsernameIgnoringCase(username);\n\n\t\tif (kickedUser == null) {\n\t\t\tvoid api.broadcast('notify.ephemeralMessage', userId, message.rid, {\n\t\t\t\tmsg: i18n.t('Username_doesnt_exist', {\n\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\tsprintf: [username],\n\t\t\t\t\tlng,\n\t\t\t\t}),\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst { rid } = message;\n\t\tconst { rid } = message;"
        },
        "depth_rank": 6
    },
    {
        "file": "pinMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/message-pin/server/pinMessage.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });",
            "me": "\t\tconst me = await Users.findOneById<Required<Pick<IUser, '_id' | 'username' | 'name'>>>(userId, {\n\t\tconst me = await Users.findOneById<Required<Pick<IUser, '_id' | 'username' | 'name'>>>(userId, {\n\t\t\tprojection: { username: 1, name: 1 },",
            "room": "\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "helpers.ts",
        "path": "../Rocket.Chat/apps/meteor/app/emoji/client/helpers.ts",
        "code": {
            "emojiObject": "\t\t\tconst emojiObject = emoji.list[current];\n\t\t\tconst emojiObject = emoji.list[current];\n\t\t\tconst { emojiPackage, shortnames = [] } = emojiObject;\n\t\t\tconst { emojiPackage, shortnames = [] } = emojiObject;"
        },
        "depth_rank": 6
    },
    {
        "file": "setImportsToInvalid.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer/server/startup/setImportsToInvalid.js",
        "code": {
            "function": "async function runDrop(fn) {\nasync function runDrop(fn) {\n\ttry {\n\t\tawait fn();\n\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "ImportDataConverter.ts",
        "path": "../Rocket.Chat/apps/meteor/app/importer/server/classes/ImportDataConverter.ts",
        "code": {
            "user": "\t\tconst userId = userData.emails.length\n\t\tconst userId = userData.emails.length\n\t\t\t? await Accounts.createUserAsync({\n\t\t\t\t\temail: userData.emails[0],\n\t\t\t\t\tpassword,\n\t\t\t  })\n\t\t\t: await Accounts.createUserAsync({\n\t\t\t\t\tusername: userData.username,\n\t\t\t\t\tpassword,\n\t\t\t\t\tjoinDefaultChannelsSilenced: true,\n\t\t\t  } as any);\n\n\t\tconst user = await Users.findOneById(userId, {});\n\t\tconst user = await Users.findOneById(userId, {});",
            "emailUser": "\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});",
            "emails": "\t\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));\n\t\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));",
            "room": "\t\t\tconst room = await Rooms.findOneById('GENERAL', {});\n\t\t\tconst room = await Rooms.findOneById('GENERAL', {});",
            "await": "\t\tfor await (const rid of rids) {\n\t\tfor await (const rid of rids) {\n\t\t\ttry {\n\t\t\t\tawait Rooms.resetLastMessageById(rid);\n\t\t\t} catch (e) {",
            "obj": "\t\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\t\tif (cache) {\n\t\t\t\t\t\t\treturn cache.username;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst obj = await Users.findOneByImportId(user, { projection: { _id: 1, username: 1 } });\n\t\t\t\t\tconst obj = await Users.findOneByImportId(user, { projection: { _id: 1, username: 1 } });",
            "roomName": "\t\tconst roomName = await getValidRoomName(data.name.trim(), undefined, { allowDuplicates: true });\n\t\tconst roomName = await getValidRoomName(data.name.trim(), undefined, { allowDuplicates: true });",
            "existingRoom": "\t\t\t\tconst existingRoom = await this.findExistingRoom(data);\n\t\t\t\tconst existingRoom = await this.findExistingRoom(data);\n\n\t\t\t\tif (existingRoom) {\n\t\t\t\t\tawait this.updateRoom(existingRoom, data, startedByUserId);\n\t\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "ImporterBase.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer/server/classes/ImporterBase.js",
        "code": {
            "afterImportFn": "\t\tconst afterImportFn = async () => {\n\t\tconst afterImportFn = async () => {\n\t\t\treturn this.addCountCompleted(1);\n\t\t};\n\n\t\tprocess.nextTick(async () => {\n\t\t\tawait this.backupSettingValues();\n\n\t\t\ttry {\n\t\t\t\tawait this.applySettingValues({});"
        },
        "depth_rank": 7
    },
    {
        "file": "getLatestImportOperations.ts",
        "path": "../Rocket.Chat/apps/meteor/app/importer/server/methods/getLatestImportOperations.ts",
        "code": {
            "data": "\tconst data = Imports.find(\n\tconst data = Imports.find(\n\t\t{},"
        },
        "depth_rank": 7
    },
    {
        "file": "starMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/message-star/server/starMessage.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, uid, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, uid, {\n\t\t\tprojection: { _id: 1 },",
            "room": "\t\tconst room = await Rooms.findOneById(message.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tconst room = await Rooms.findOneById(message.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "providers.ts",
        "path": "../Rocket.Chat/apps/meteor/app/oembed/server/providers.ts",
        "code": {
            "cleanupOembed": "const cleanupOembed = (data: {\nconst cleanupOembed = (data: {\n\turl: string;\n\tmeta: OEmbedMeta;\n\theaders: { [k: string]: string };"
        },
        "depth_rank": 6
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/oembed/server/server.ts",
        "code": {
            "getUrlContent": "const toUtf8 = function (contentType: string, body: Buffer): string {\nconst toUtf8 = function (contentType: string, body: Buffer): string {\n\treturn iconv.decode(body, getCharset(contentType, body));\n};\n\nconst getUrlContent = async function (urlObjStr: string | URL.UrlWithStringQuery, redirectCount = 5): Promise<OEmbedUrlContentResult> {\nconst getUrlContent = async function (urlObjStr: string | URL.UrlWithStringQuery, redirectCount = 5): Promise<OEmbedUrlContentResult> {\n\tlet urlObj: URL.UrlWithStringQuery;\n\tif (typeof urlObjStr === 'string') {\n\t\turlObj = URL.parse(urlObjStr);\n\t} else {",
            "hasOnlyContentLength": "const hasOnlyContentLength = (obj: any): obj is { contentLength: string } => 'contentLength' in obj && Object.keys(obj).length === 1;\nconst hasOnlyContentLength = (obj: any): obj is { contentLength: string } => 'contentLength' in obj && Object.keys(obj).length === 1;",
            "hasOnlyContentType": "const hasOnlyContentType = (obj: any): obj is { contentType: string } => 'contentType' in obj && Object.keys(obj).length === 1;\nconst hasOnlyContentType = (obj: any): obj is { contentType: string } => 'contentType' in obj && Object.keys(obj).length === 1;",
            "hasContentLengthAndContentType": "const hasContentLengthAndContentType = (obj: any): obj is { contentLength: string; contentType: string } =>\nconst hasContentLengthAndContentType = (obj: any): obj is { contentLength: string; contentType: string } =>",
            "getRelevantHeaders": "const getRelevantHeaders = function (headersObj: {\nconst getRelevantHeaders = function (headersObj: {\n\t[key: string]: string;\n}): { contentLength: string } | { contentType: string } | { contentLength: string; contentType: string } | void {",
            "headers": "\t\t\t\t\tconst headers = getRelevantHeaders(data.headers);\n\t\t\t\t\tconst headers = getRelevantHeaders(data.headers);\n\t\t\t\t\tif (headers) {\n\t\t\t\t\t\titem.headers = headers;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titem.parsedUrl = data.parsedUrl;\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\t\tif (attachments.length) {\n\t\t\tawait Messages.setMessageAttachments(message._id, attachments);\n\t\t}\n\t\tif (changed === true) {\n\t\t\tawait Messages.setUrlsById(message._id, message.urls);\n\t\t}\n\t}\n\treturn message;\n};\n\nconst OEmbed: {\nconst OEmbed: {\n\tgetUrlMeta: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult>;\n\tgetUrlMetaWithCache: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined>;\n\trocketUrlParser: (message: IMessage) => Promise<IMessage>;\n} = {",
            "getRelevantMetaTags": "const getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\nconst getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\n\tconst tags: Record<string, string> = {};\n\tconst tags: Record<string, string> = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "NotificationQueue.ts",
        "path": "../Rocket.Chat/apps/meteor/app/notification-queue/server/NotificationQueue.ts",
        "code": {
            "await": "\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\n\t\t// start worker again it queue flushed\n\t\tif (flush.modifiedCount) {\n\t\t\tawait NotificationQueue.unsetSendingById(notification._id);\n\t\t\treturn this.worker(counter);\n\t\t}\n\n\t\ttry {\n\t\t\tfor await (const item of notification.items) {\n\t\t\tfor await (const item of notification.items) {\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase 'push':\n\t\t\t\t\t\tawait this.push(notification, item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tawait this.email(item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait NotificationQueue.removeById(notification._id);\n\t\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "actionButton.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/client/actionButton.ts",
        "code": {
            "url": "\t\t\tconst [attachment] = message.attachments || [];\n\t\t\tconst [attachment] = message.attachments || [];\n\t\t\tconst url = getURL(attachment.title_link as string, { full: true });\n\t\t\tconst url = getURL(attachment.title_link as string, { full: true });"
        },
        "depth_rank": 6
    },
    {
        "file": "sync.js",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/client/startup/sync.js",
        "code": {
            "events": "const events = {\nconst events = {\n\tchanged: (account) => WebdavAccounts.upsert({ _id: account._id }, account),"
        },
        "depth_rank": 7
    },
    {
        "file": "getWebdavCredentials.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/lib/getWebdavCredentials.ts",
        "code": {
            "cred": "\tconst cred = account.token\n\tconst cred = account.token\n\t\t? { token: account.token }"
        },
        "depth_rank": 7
    },
    {
        "file": "getWebdavFileList.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/methods/getWebdavFileList.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});",
            "data": "\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst data = (await client.getDirectoryContents(path)) as IWebdavNode[];\n\t\t\tconst data = (await client.getDirectoryContents(path)) as IWebdavNode[];\n\t\t\treturn { success: true, data };"
        },
        "depth_rank": 7
    },
    {
        "file": "addWebdavAccount.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/methods/addWebdavAccount.ts",
        "code": {
            "client": "\t\tconst client = new WebdavClientAdapter(data.serverURL, { token: data.token });\n\t\tconst client = new WebdavClientAdapter(data.serverURL, { token: data.token });",
            "duplicateAccount": "\t\tconst duplicateAccount = await WebdavAccounts.findOneByUserIdServerUrlAndUsername(\n\t\tconst duplicateAccount = await WebdavAccounts.findOneByUserIdServerUrlAndUsername(\n\t\t\t{ userId, serverURL: formData.serverURL, username: formData.username },",
            "accountData": "\t\t\tconst client = new WebdavClientAdapter(formData.serverURL, {\n\t\t\tconst client = new WebdavClientAdapter(formData.serverURL, {\n\t\t\t\tusername: formData.username,\n\t\t\t\tpassword: formData.password,\n\t\t\t});\n\n\t\t\tconst accountData = {\n\t\t\tconst accountData = {\n\t\t\t\tuserId,\n\t\t\t\tserverURL: formData.serverURL,\n\t\t\t\tusername: formData.username,\n\t\t\t\tpassword: formData.password,\n\t\t\t\tname: formData.name ?? '',\n\t\t\t};\n\n\t\t\tawait client.stat('/');\n\t\t\tawait WebdavAccounts.insertOne(accountData);\n\n\t\t\tvoid api.broadcast('notify.webdav', userId, {\n\t\t\t\ttype: 'changed',\n\t\t\t\taccount: accountData,\n\t\t\t});\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "removeWebdavAccount.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/methods/removeWebdavAccount.ts",
        "code": {
            "removed": "\t\tconst removed = await WebdavAccounts.removeByUserAndId(accountId, userId);\n\t\tconst removed = await WebdavAccounts.removeByUserAndId(accountId, userId);\n\t\tif (removed) {\n\t\t\tvoid api.broadcast('notify.webdav', userId, {\n\t\t\t\ttype: 'removed',\n\t\t\t\taccount: { _id: accountId },"
        },
        "depth_rank": 7
    },
    {
        "file": "getFileFromWebdav.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/methods/getFileFromWebdav.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});",
            "data": "\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst fileContent = await client.getFileContents(file.filename);\n\t\t\tconst fileContent = await client.getFileContents(file.filename);\n\t\t\tconst data = new Uint8Array(fileContent);\n\t\t\tconst data = new Uint8Array(fileContent);\n\t\t\treturn { success: true, data };"
        },
        "depth_rank": 7
    },
    {
        "file": "getWebdavFilePreview.ts",
        "path": "../Rocket.Chat/apps/meteor/app/webdav/server/methods/getWebdavFilePreview.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});"
        },
        "depth_rank": 7
    },
    {
        "file": "CachedChatSubscription.ts",
        "path": "../Rocket.Chat/apps/meteor/app/models/client/models/CachedChatSubscription.ts",
        "code": {
            "room": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\tlm: 1,\n\t\t\t\tlastMessage: 1,\n\t\t\t\tuids: 1,\n\t\t\t\tstreamingOptions: 1,\n\t\t\t\tusernames: 1,\n\t\t\t\tusersCount: 1,\n\t\t\t\ttopic: 1,\n\t\t\t\tencrypted: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tannouncement: 1,\n\t\t\t\tbroadcast: 1,\n\t\t\t\tarchived: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t\tretention: 1,\n\t\t\t\tteamId: 1,\n\t\t\t\tteamMain: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tonHold: 1,\n\t\t\t\tmetrics: 1,\n\t\t\t\tmuted: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tts: 1,\n\t\t\t\twaitingResponse: 1,\n\t\t\t\tv: 1,\n\t\t\t\ttranscriptRequest: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tresponseBy: 1,\n\t\t\t\tpriorityId: 1,\n\t\t\t\tpriorityWeight: 1,\n\t\t\t\tslaId: 1,\n\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\tlivechatData: 1,\n\t\t\t\tdepartmentId: 1,\n\t\t\t\tsource: 1,\n\t\t\t\tqueuedAt: 1,\n\t\t\t\tfederated: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, options);\n\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, options);",
            "lastRoomUpdate": "\t\tconst lastRoomUpdate = room?.lm || subscription.ts || room?.ts;\n\t\tconst lastRoomUpdate = room?.lm || subscription.ts || room?.ts;\n\n\t\treturn {\n\t\t\t...subscription,\n\t\t\t...(() => {\n\t\t\t\tconst { name } = subscription;\n\t\t\t\tconst { name } = subscription;"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/models/client/models/ChatMessage.ts",
        "code": {
            "query": "\tconstructor() {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: IRoom['_id'], messageId: IMessage['_id'], options?: Mongo.Options<IMessage>) {\n\t\tconst query = {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IMessage & { ignored?: boolean }>['_collection'];"
        },
        "depth_rank": 7
    },
    {
        "file": "ChatSubscription.ts",
        "path": "../Rocket.Chat/apps/meteor/app/models/client/models/ChatSubscription.ts",
        "code": {
            "subscription": "\t\t\tconst query = {\n\t\t\tconst query = {\n\t\t\t\trid,\n\t\t\t};\n\n\t\t\tconst subscription = this.findOne(query, { fields: { roles: 1 } });\n\t\t\tconst subscription = this.findOne(query, { fields: { roles: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "Users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/models/client/models/Users.ts",
        "code": {
            "user": "\tconstructor() {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneById<TOptions extends Omit<Mongo.Options<IUser>, 'limit'>>(uid: IUser['_id'], options?: TOptions) {\n\t\tconst query: Mongo.Selector<IUser> = {\n\t\tconst query: Mongo.Selector<IUser> = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tisUserInRole(uid: IUser['_id'], roleId: IRole['_id']) {\n\t\tconst user = this.findOneById(uid, { fields: { roles: 1 } });\n\t\tconst user = this.findOneById(uid, { fields: { roles: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "CachedChatRoom.ts",
        "path": "../Rocket.Chat/apps/meteor/app/models/client/models/CachedChatRoom.ts",
        "code": {
            "sub": "\t\tconst sub = ChatSubscription.findOne({ rid: room._id });\n\t\tconst sub = ChatSubscription.findOne({ rid: room._id });"
        },
        "depth_rank": 7
    },
    {
        "file": "startup.ts",
        "path": "../Rocket.Chat/apps/meteor/app/voip/server/startup.ts",
        "code": {
            "async": "settings.watch('VoIP_Enabled', async function (value: boolean) {\nsettings.watch('VoIP_Enabled', async function (value: boolean) {\n\ttry {\n\t\tif (value) {\n\t\t\tawait Voip.init();\n\t\t} else {",
            "function": "\tasync function (_values) {\n\tasync function (_values) {\n\t\t// Here, if 4 settings are changed at once, we're getting 4 diff callbacks. The good part is that all callbacks are fired almost instantly\n\t\t// So to avoid stopping/starting voip too often, we debounce the call and restart 1 second after the last setting has reached us.\n\t\tif (settings.get('VoIP_Enabled')) {\n\t\t\ttry {\n\t\t\t\tawait Voip.refresh();\n\t\t\t} catch (e) {"
        },
        "depth_rank": 6
    },
    {
        "file": "slackbridge_import.server.js",
        "path": "../Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge_import.server.js",
        "code": {
            "user": "\tconst room = await Rooms.findOneById(message.rid);\n\tconst room = await Rooms.findOneById(message.rid);\n\tconst channel = room.name;\n\tconst channel = room.name;\n\tconst user = await Users.findOneById(userId);\n\tconst user = await Users.findOneById(userId);\n\n\tmsgStream.emit(message.rid, {\n\t\t_id: Random.id(),\n\t\trid: message.rid,\n\t\tu: { username: 'rocket.cat' },"
        },
        "depth_rank": 6
    },
    {
        "file": "SlackAdapter.js",
        "path": "../Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAdapter.js",
        "code": {
            "isAFileShare": "\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tif (isAFileShare) {\n\t\t\tawait this.processFileShare(slackMessage);\n\t\t\treturn;\n\t\t}\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tawait this.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tawait this.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tawait this.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// Keeping backwards compatability for now, refactor later\n\t\t\t\t\tawait this.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {",
            "ch": "\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (ch == null) {\n\t\t\tslackLogger.debug('Added channel', { rocketChID, slackChID });",
            "rocketchat_room": "\t\tfor await (const slackGroup of groups) {\n\t\tfor await (const slackGroup of groups) {\n\t\t\tconst rocketchat_room =\n\t\t\tconst rocketchat_room =\n\t\t\t\t(await Rooms.findOneByName(slackGroup.name, { projection: { _id: 1 } })) ||",
            "rocketUser": "\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\t\tconst rocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "rocketChannel": "\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "user": "\t\tconst channel = await this.slackAPI.getRoomInfo(channelMap.id);\n\t\tconst channel = await this.slackAPI.getRoomInfo(channelMap.id);\n\t\tif (channel) {\n\t\t\tconst members = await this.slackAPI.getMembers(channelMap.id);\n\t\t\tconst members = await this.slackAPI.getMembers(channelMap.id);\n\t\t\tif (members && Array.isArray(members) && members.length) {\n\t\t\t\tfor await (const member of members) {\n\t\t\t\tfor await (const member of members) {\n\t\t\t\t\tconst user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n\t\t\t\t\tconst user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tslackLogger.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tawait addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (channel && channel.topic && channel.topic.value) {\n\t\t\t\ttopic = channel.topic.value;\n\t\t\t\ttopic_last_set = channel.topic.last_set;\n\t\t\t\ttopic_creator = channel.topic.creator;\n\t\t\t}\n\n\t\t\tif (channel && channel.purpose && channel.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < channel.purpose.last_set) {\n\t\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "SlackAPI.js",
        "path": "../Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAPI.js",
        "code": {
            "response": "\tconstructor(apiToken) {\n\tconstructor(apiToken) {\n\t\tthis.apiToken = apiToken;\n\t}\n\n\tasync getChannels(cursor = null) {\n\t\tlet channels = [];\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttypes: 'public_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\tcursor,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\tconst response = await request.json();\n\n\t\tif (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n\t\t\tchannels = channels.concat(response.channels);\n\t\t\tif (response.response_metadata && response.response_metadata.next_cursor) {\n\t\t\t\tconst nextChannels = await this.getChannels(response.response_metadata.next_cursor);\n\t\t\t\tconst nextChannels = await this.getChannels(response.response_metadata.next_cursor);\n\t\t\t\tchannels = channels.concat(nextChannels);\n\t\t\t}\n\t\t}\n\n\t\treturn channels;\n\t}\n\n\tasync getGroups(cursor = null) {\n\t\tlet groups = [];\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttypes: 'private_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\tcursor,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\tconst response = await request.json();\n\n\t\tif (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n\t\t\tgroups = groups.concat(response.channels);\n\t\t\tif (response.response_metadata && response.response_metadata.next_cursor) {\n\t\t\t\tconst nextGroups = await this.getGroups(response.response_metadata.next_cursor);\n\t\t\t\tconst nextGroups = await this.getGroups(response.response_metadata.next_cursor);\n\t\t\t\tgroups = groups.concat(nextGroups);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\tasync getRoomInfo(roomId) {\n\t\tconst request = await fetch(`https://slack.com/api/conversations.info`, {\n\t\tconst request = await fetch(`https://slack.com/api/conversations.info`, {\n\t\t\tparams: {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tchannel: roomId,\n\t\t\t\tinclude_num_members: true,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.channel;\n\t}\n\n\tasync getMembers(channelId) {\n\t\tconst { num_members } = this.getRoomInfo(channelId);\n\t\tconst { num_members } = this.getRoomInfo(channelId);"
        },
        "depth_rank": 6
    },
    {
        "file": "RocketAdapter.js",
        "path": "../Rocket.Chat/apps/meteor/app/slackbridge/server/RocketAdapter.js",
        "code": {
            "slackTS": "\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tawait slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {",
            "rocketRoom": "\t\t\t\tconst rocketRoom = await Rooms.findOneByName(slackChannel.name);\n\t\t\t\tconst rocketRoom = await Rooms.findOneByName(slackChannel.name);\n\n\t\t\t\tif (rocketRoom || slackChannel.is_general) {\n\t\t\t\t\tslackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n\t\t\t\t\tawait Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t} else {",
            "rocketChannel": "\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\t\tconst rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\t\trocketChannel.rocketId = rocketChannel.rid;\n\t\t\t\t\t} catch (e) {",
            "user": "\t\t\t\t\tconst user = await Users.findOneById(rocketUserData.rocketId);\n\t\t\t\t\tconst user = await Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\t\tlet url = null;\n\t\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t\t} else if (rocketUserData.profile.image_512) {",
            "tmessage": "\t\t\t\tconst tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tconst tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tif (tmessage) {\n\t\t\t\t\trocketMsgObj.tmid = tmessage._id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "result": "\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tpromises.push(slackMsgTxt.replace(userTags.slack, userTags.rocket));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst result = await Promise.all(promises);\n\t\t\tconst result = await Promise.all(promises);\n\t\t\tslackMsgTxt = slackMsgTxt.replace(regex, () => result.shift());\n\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "api.js",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/api/api.js",
        "code": {
            "compiledScripts": "const compiledScripts = {};\nconst compiledScripts = {};",
            "httpAsync": "function buildSandbox(store = {}) {\nfunction buildSandbox(store = {}) {\n\tconst httpAsync = async (method, url, options) => {\n\tconst httpAsync = async (method, url, options) => {\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tresult: await httpCall(method, url, options),\n\t\t\t};\n\t\t} catch (error) {",
            "script": "\tconst script = integration.scriptCompiled;\n\tconst script = integration.scriptCompiled;\n\tconst { sandbox, store } = buildSandbox();\n\tconst { sandbox, store } = buildSandbox();",
            "ScriptClass": "\t\tconst vm = new VM({\n\t\tconst vm = new VM({\n\t\t\tsandbox,\n\t\t});\n\n\t\tconst ScriptClass = vm.run(vmScript);\n\t\tconst ScriptClass = vm.run(vmScript);\n\n\t\tif (ScriptClass) {\n\t\t\tcompiledScripts[integration._id] = {\n\t\t\t\tscript: new ScriptClass(),\n\t\t\t\tstore,\n\t\t\t\t_updatedAt: integration._updatedAt,\n\t\t\t};\n\n\t\t\treturn compiledScripts[integration._id].script;\n\t\t}\n\t} catch (err) {",
            "function": "async function executeIntegrationRest() {\nasync function executeIntegrationRest() {\n\tincomingLogger.info({ msg: 'Post integration:', integration: this.integration.name });",
            "request": "\t\tconst content_raw = this.request.read();\n\t\tconst content_raw = this.request.read();\n\n\t\tconst request = {\n\t\tconst request = {\n\t\t\turl: {\n\t\t\t\thash: this.request._parsedUrl.hash,\n\t\t\t\tsearch: this.request._parsedUrl.search,\n\t\t\t\tquery: this.queryParams,\n\t\t\t\tpathname: this.request._parsedUrl.pathname,\n\t\t\t\tpath: this.request._parsedUrl.path,\n\t\t\t},\n\t\t\turl_raw: this.request.url,\n\t\t\turl_params: this.urlParams,\n\t\t\tcontent: this.bodyParams,\n\t\t\tcontent_raw,\n\t\t\theaders: this.request.headers,\n\t\t\tbody: this.request.body,\n\t\t\tuser: {\n\t\t\t\t_id: this.user._id,\n\t\t\t\tname: this.user.name,\n\t\t\t\tusername: this.user.username,\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst { sandbox } = buildSandbox(compiledScripts[this.integration._id].store);\n\t\t\tconst { sandbox } = buildSandbox(compiledScripts[this.integration._id].store);",
            "scriptResult": "\t\t\tconst vm = new VM({\n\t\t\tconst vm = new VM({\n\t\t\t\ttimeout: 3000,\n\t\t\t\tsandbox,\n\t\t\t});\n\n\t\t\tconst result = await new Promise((resolve, reject) => {\n\t\t\tconst result = await new Promise((resolve, reject) => {\n\t\t\t\tprocess.nextTick(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\tscriptTimeout(reject);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresolve(script.process_incoming_request({ request: request }));",
            "user": "\t\t\tconst user = await Users.findOne({\n\t\t\tconst user = await Users.findOne({\n\t\t\t\t_id: this.integration.userId,\n\t\t\t});\n\n\t\t\treturn { user };"
        },
        "depth_rank": 7
    },
    {
        "file": "triggerHandler.js",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/lib/triggerHandler.js",
        "code": {
            "_id": "\t\tconst _id = Random.id();\n\t\tconst _id = Random.id();\n\n\t\tawait IntegrationHistory.insertOne({ _id, ...history });",
            "httpAsync": "\t\tconst httpAsync = async (method, url, options) => {\n\t\tconst httpAsync = async (method, url, options) => {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tresult: await httpCall(method, url, options),\n\t\t\t\t};\n\t\t\t} catch (error) {",
            "script": "\t\tconst script = integration.scriptCompiled;\n\t\tconst script = integration.scriptCompiled;\n\t\tconst { store, sandbox } = this.buildSandbox();\n\t\tconst { store, sandbox } = this.buildSandbox();",
            "ScriptClass": "\t\t\tconst vm = new VM({\n\t\t\tconst vm = new VM({\n\t\t\t\tsandbox,\n\t\t\t});\n\n\t\t\tconst ScriptClass = vm.run(vmScript);\n\t\t\tconst ScriptClass = vm.run(vmScript);\n\n\t\t\tif (ScriptClass) {\n\t\t\t\tthis.compiledScripts[integration._id] = {\n\t\t\t\t\tscript: new ScriptClass(),\n\t\t\t\t\tstore,\n\t\t\t\t\t_updatedAt: integration._updatedAt,\n\t\t\t\t};\n\n\t\t\t\treturn this.compiledScripts[integration._id].script;\n\t\t\t}\n\t\t} catch (err) {",
            "scriptResult": "\t\t\tconst vm = new VM({\n\t\t\tconst vm = new VM({\n\t\t\t\ttimeout: 3000,\n\t\t\t\tsandbox,\n\t\t\t});\n\n\t\t\tconst result = await new Promise((resolve, reject) => {\n\t\t\tconst result = await new Promise((resolve, reject) => {\n\t\t\t\tprocess.nextTick(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\tscriptTimeout(reject);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresolve(script[method](params))\n\t\t\t\t\t\t\t\t} catch(e) {",
            "argObject": "\t\tconst argObject = this.eventNameArgumentsToObject(...args);\n\t\tconst argObject = this.eventNameArgumentsToObject(...args);\n\t\tconst { event, message, room } = argObject;\n\t\tconst { event, message, room } = argObject;",
            "data": "\t\tconst data = {\n\t\tconst data = {\n\t\t\ttoken: trigger.token,\n\t\t\tbot: false,\n\t\t};\n\n\t\tif (word) {\n\t\t\tdata.trigger_word = word;\n\t\t}\n\n\t\tthis.mapEventArgsToData(data, { trigger, event, message, room, owner, user });",
            "prepareMessage": "\t\t\tconst prepareMessage = await this.sendMessage({ trigger, room, message: opts.message, data });\n\t\t\tconst prepareMessage = await this.sendMessage({ trigger, room, message: opts.message, data });",
            "resultMsg": "\t\t\t\t\t\tconst resultMsg = await this.sendMessage({ trigger, room, message: data, data });\n\t\t\t\t\t\tconst resultMsg = await this.sendMessage({ trigger, room, message: data, data });",
            "user": "\t\tconst message = await Messages.findOneById(history.data.message_id);\n\t\tconst message = await Messages.findOneById(history.data.message_id);\n\t\tconst room = await Rooms.findOneById(history.data.channel_id);\n\t\tconst room = await Rooms.findOneById(history.data.channel_id);\n\t\tconst user = await Users.findOneById(history.data.user_id);\n\t\tconst user = await Users.findOneById(history.data.user_id);\n\t\tlet owner;\n\n\t\tif (history.data.owner && history.data.owner._id) {\n\t\t\towner = await Users.findOneById(history.data.owner._id);\n\t\t}\n\n\t\treturn this.executeTriggerUrl(history.url, integration, { event, message, room, owner, user });"
        },
        "depth_rank": 7
    },
    {
        "file": "validateOutgoingIntegration.ts",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/lib/validateOutgoingIntegration.ts",
        "code": {
            "user": "\t\t\tfunction: 'validateOutgoing',\n\t\t\tfunction: 'validateOutgoing',\n\t\t});\n\t}\n\n\tconst user = await Users.findOne({ username: integration.username });\n\tconst user = await Users.findOne({ username: integration.username });",
            "babelOptions": "\t\t\tconst babelOptions = Object.assign(Babel.getDefaultOptions({ runtime: false }), {\n\t\t\tconst babelOptions = Object.assign(Babel.getDefaultOptions({ runtime: false }), {\n\t\t\t\tcompact: true,\n\t\t\t\tminified: true,\n\t\t\t\tcomments: false,\n\t\t\t});\n\n\t\t\tintegrationData.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n\t\t\tintegrationData.scriptError = undefined;\n\t\t} catch (e) {"
        },
        "depth_rank": 7
    },
    {
        "file": "updateIncomingIntegration.ts",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/methods/incoming/updateIncomingIntegration.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ username: currentIntegration.username });\n\t\tconst user = await Users.findOne({ username: currentIntegration.username });"
        },
        "depth_rank": 8
    },
    {
        "file": "addIncomingIntegration.ts",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/methods/incoming/addIncomingIntegration.ts",
        "code": {
            "user": "\tconst user = await Users.findOne({ username: integration.username });\n\tconst user = await Users.findOne({ username: integration.username });",
            "result": "\tconst result = await Integrations.insertOne(integrationData);\n\tconst result = await Integrations.insertOne(integrationData);\n\n\tintegrationData._id = result.insertedId;\n\n\treturn integrationData;\n};\n\nMeteor.methods<ServerMethods>({\n\tasync addIncomingIntegration(integration: INewIncomingIntegration): Promise<IIncomingIntegration> {\n\t\tconst { userId } = this;\n\t\tconst { userId } = this;"
        },
        "depth_rank": 8
    },
    {
        "file": "addOutgoingIntegration.ts",
        "path": "../Rocket.Chat/apps/meteor/app/integrations/server/methods/outgoing/addOutgoingIntegration.ts",
        "code": {
            "result": "\tconst integrationData = await validateOutgoingIntegration(integration, userId);\n\tconst integrationData = await validateOutgoingIntegration(integration, userId);\n\n\tconst result = await Integrations.insertOne(integrationData);\n\tconst result = await Integrations.insertOne(integrationData);\n\tintegrationData._id = result.insertedId;\n\n\treturn integrationData;\n};\n\nMeteor.methods<ServerMethods>({\n\tasync addOutgoingIntegration(integration: INewOutgoingIntegration): Promise<IOutgoingIntegration> {\n\t\tconst { userId } = this;\n\t\tconst { userId } = this;"
        },
        "depth_rank": 8
    },
    {
        "file": "getWorkspaceLicense.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/getWorkspaceLicense.ts",
        "code": {
            "license": "\tconst currentLicense = await Settings.findOne('Cloud_Workspace_License');\n\tconst currentLicense = await Settings.findOne('Cloud_Workspace_License');\n\n\tconst cachedLicenseReturn = async () => {\n\tconst cachedLicenseReturn = async () => {\n\t\tconst license = currentLicense?.value as string;\n\t\tconst license = currentLicense?.value as string;\n\t\tif (license) {\n\t\t\tawait callbacks.run('workspaceLicenseChanged', license);\n\t\t}\n\n\t\treturn { updated: false, license };"
        },
        "depth_rank": 7
    },
    {
        "file": "getUserCloudAccessToken.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/getUserCloudAccessToken.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'services'>>(userId, { projection: { 'services.cloud': 1 } });\n\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'services'>>(userId, { projection: { 'services.cloud': 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getWorkspaceAccessTokenWithScope.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/getWorkspaceAccessTokenWithScope.ts",
        "code": {
            "tokenResponse": "\tconst tokenResponse = { token: '', expiresAt: new Date() };\n\tconst tokenResponse = { token: '', expiresAt: new Date() };"
        },
        "depth_rank": 7
    },
    {
        "file": "syncWorkspace.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/syncWorkspace.ts",
        "code": {
            "workspaceUrl": "\tconst info = await buildWorkspaceRegistrationData(undefined);\n\tconst info = await buildWorkspaceRegistrationData(undefined);\n\n\tconst workspaceUrl = settings.get('Cloud_Workspace_Registration_Client_Uri');\n\tconst workspaceUrl = settings.get('Cloud_Workspace_Registration_Client_Uri');\n\n\tlet result;\n\ttry {\n\t\tconst headers: Record<string, string> = {};\n\t\tconst headers: Record<string, string> = {};",
            "await": "\t\tconst startAt = new Date(data.nps.startAt);\n\t\tconst startAt = new Date(data.nps.startAt);\n\n\t\tawait NPS.create({\n\t\t\tnpsId,\n\t\t\tstartAt,\n\t\t\texpireAt: new Date(expireAt),\n\t\t\tcreatedBy: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t},\n\t\t});\n\n\t\tconst now = new Date();\n\t\tconst now = new Date();\n\n\t\tif (startAt.getFullYear() === now.getFullYear() && startAt.getMonth() === now.getMonth() && startAt.getDate() === now.getDate()) {\n\t\t\tawait getAndCreateNpsSurvey(npsId);\n\t\t}\n\t}\n\n\t// add banners\n\tif (data.banners) {\n\t\tfor await (const banner of data.banners) {\n\t\tfor await (const banner of data.banners) {\n\t\t\tconst { createdAt, expireAt, startAt } = banner;\n\t\t\tconst { createdAt, expireAt, startAt } = banner;"
        },
        "depth_rank": 7
    },
    {
        "file": "userLoggedOut.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/userLoggedOut.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId);\n\tconst user = await Users.findOneById(userId);\n\n\tif (user?.services?.cloud) {\n\t\tawait Users.updateOne(\n\t\t\t{ _id: user._id },"
        },
        "depth_rank": 7
    },
    {
        "file": "registerPreIntentWorkspaceWizard.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/registerPreIntentWorkspaceWizard.ts",
        "code": {
            "firstUser": "\tconst firstUser = (await Users.getOldest({ projection: { name: 1, emails: 1 } })) as IUser | undefined;\n\tconst firstUser = (await Users.getOldest({ projection: { name: 1, emails: 1 } })) as IUser | undefined;"
        },
        "depth_rank": 7
    },
    {
        "file": "retrieveRegistrationStatus.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/retrieveRegistrationStatus.ts",
        "code": {
            "firstUser": "\t\tconst firstUser = await Users.getOldest({ projection: { emails: 1 } });\n\t\tconst firstUser = await Users.getOldest({ projection: { emails: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "userLogout.ts",
        "path": "../Rocket.Chat/apps/meteor/app/cloud/server/functions/userLogout.ts",
        "code": {
            "client_secret": "\t\t\tconst cloudUrl = settings.get('Cloud_Url');\n\t\t\tconst cloudUrl = settings.get('Cloud_Url');\n\t\t\tconst client_secret = settings.get('Cloud_Workspace_Client_Secret');\n\t\t\tconst client_secret = settings.get('Cloud_Workspace_Client_Secret');\n\n\t\t\tconst { refreshToken } = user.services.cloud;\n\t\t\tconst { refreshToken } = user.services.cloud;"
        },
        "depth_rank": 7
    },
    {
        "file": "insertOrUpdateUserStatus.ts",
        "path": "../Rocket.Chat/apps/meteor/app/user-status/server/methods/insertOrUpdateUserStatus.ts",
        "code": {
            "_id": "\t\t\tconst createUserStatus: InsertionModel<ICustomUserStatus> = {\n\t\t\tconst createUserStatus: InsertionModel<ICustomUserStatus> = {\n\t\t\t\tname: userStatusData.name,\n\t\t\t\tstatusType: userStatusData.statusType,\n\t\t\t};\n\n\t\t\tconst _id = (await CustomUserStatus.create(createUserStatus)).insertedId;\n\t\t\tconst _id = (await CustomUserStatus.create(createUserStatus)).insertedId;\n\n\t\t\tvoid api.broadcast('user.updateCustomStatus', { ...createUserStatus, _id });"
        },
        "depth_rank": 7
    },
    {
        "file": "deleteCustomUserStatus.ts",
        "path": "../Rocket.Chat/apps/meteor/app/user-status/server/methods/deleteCustomUserStatus.ts",
        "code": {
            "userStatus": "\t\tconst userStatus = await CustomUserStatus.findOneById(userStatusID);\n\t\tconst userStatus = await CustomUserStatus.findOneById(userStatusID);\n\t\tif (userStatus == null) {\n\t\t\tthrow new Meteor.Error('Custom_User_Status_Error_Invalid_User_Status', 'Invalid user status', { method: 'deleteCustomUserStatus' });"
        },
        "depth_rank": 7
    },
    {
        "file": "CachedCollection.ts",
        "path": "../Rocket.Chat/apps/meteor/app/ui-cached-collection/client/models/CachedCollection.ts",
        "code": {
            "hasUpdatedAt": "const hasUpdatedAt = <T>(record: T): record is T & { _updatedAt: Date } =>\nconst hasUpdatedAt = <T>(record: T): record is T & { _updatedAt: Date } =>",
            "hasDeletedAt": "const hasDeletedAt = <T>(record: T): record is T & { _deletedAt: Date } =>\nconst hasDeletedAt = <T>(record: T): record is T & { _deletedAt: Date } =>",
            "hasUnserializedUpdatedAt": "const hasUnserializedUpdatedAt = <T>(record: T): record is T & { _updatedAt: ConstructorParameters<typeof Date>[0] } =>\nconst hasUnserializedUpdatedAt = <T>(record: T): record is T & { _updatedAt: ConstructorParameters<typeof Date>[0] } =>",
            "data": "\t\tconst data = this.collection.find().fetch();\n\t\tconst data = this.collection.find().fetch();\n\t\tawait localforage.setItem(this.name, {\n\t\t\tupdatedAt: this.updatedAt,\n\t\t\tversion: this.version,\n\t\t\ttoken: this.getToken(),\n\t\t\trecords: data,\n\t\t});\n\t\tthis.log('saving cache (done)');\n\t});\n\n\tclearCacheOnLogout() {\n\t\tif (this.userRelated === true) {\n\t\t\tvoid this.clearCache();\n\t\t}\n\t}\n\n\tasync clearCache() {\n\t\tthis.log('clearing cache');\n\t\tawait localforage.removeItem(this.name);\n\t\tthis.collection.remove({});",
            "actionTime": "\t\t\t\tconst actionTime = newRecord._deletedAt;\n\t\t\t\tconst actionTime = newRecord._deletedAt;\n\t\t\t\tchanges.push({\n\t\t\t\t\taction: () => {\n\t\t\t\t\t\tconst { _id } = newRecord;\n\t\t\t\t\t\tconst { _id } = newRecord;"
        },
        "depth_rank": 7
    },
    {
        "file": "importer.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer-hipchat-enterprise/server/importer.js",
        "code": {
            "dataString": "\t\tconst dataString = data.toString();\n\t\tconst dataString = data.toString();\n\t\ttry {\n\t\t\tthis.logger.debug('parsing file contents');\n\t\t\treturn JSON.parse(dataString);\n\t\t} catch (e) {",
            "gunzip": "\t\t\tconst rs = fs.createReadStream(fullFilePath);\n\t\t\tconst rs = fs.createReadStream(fullFilePath);\n\t\t\tconst gunzip = this.zlib.createGunzip();\n\t\t\tconst gunzip = this.zlib.createGunzip();\n\n\t\t\tgunzip.on('error', (err) => {\n\t\t\t\tthis.logger.error({ msg: 'extract error:', err });"
        },
        "depth_rank": 6
    },
    {
        "file": "afterCreateDirectRoom.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterCreateDirectRoom.js",
        "code": {
            "function": "async function afterCreateDirectRoom(room, extras) {\nasync function afterCreateDirectRoom(room, extras) {\n\tclientLogger.debug({ msg: 'afterCreateDirectRoom', room, extras });",
            "normalizedSourceSubscription": "\t\tconst normalizedRoom = normalizers.normalizeRoom(room);\n\t\tconst normalizedRoom = normalizers.normalizeRoom(room);\n\n\t\t// Ensure a genesis event for this room\n\t\tconst genesisEvent = await FederationRoomEvents.createGenesisEvent(getFederationDomain(), normalizedRoom);\n\t\tconst genesisEvent = await FederationRoomEvents.createGenesisEvent(getFederationDomain(), normalizedRoom);\n\n\t\tconst events = await Promise.all(\n\t\tconst events = await Promise.all(\n\t\t\textras.members.map(async (member) => {\n\t\t\t\tconst normalizedMember = await normalizers.normalizeUser(member);\n\t\t\t\tconst normalizedMember = await normalizers.normalizeUser(member);\n\n\t\t\t\tconst sourceSubscription = await Subscriptions.findOne({\n\t\t\t\tconst sourceSubscription = await Subscriptions.findOne({\n\t\t\t\t\t'rid': normalizedRoom._id,\n\t\t\t\t\t'u._id': normalizedMember._id,\n\t\t\t\t});\n\t\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(sourceSubscription);\n\t\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(sourceSubscription);\n\n\t\t\t\t// Build the user event\n\t\t\t\treturn FederationRoomEvents.createAddUserEvent(\n\t\t\t\t\tgetFederationDomain(),\n\t\t\t\t\tnormalizedRoom._id,\n\t\t\t\t\tnormalizedMember,\n\t\t\t\t\tnormalizedSourceSubscription,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Dispatch the events\n\t\tawait dispatchEvents(normalizedRoom.federation.domains, [genesisEvent, ...events]);\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "afterRemoveFromRoom.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterRemoveFromRoom.js",
        "code": {
            "function": "async function afterRemoveFromRoom(involvedUsers, room) {\nasync function afterRemoveFromRoom(involvedUsers, room) {\n\tconst { removedUser } = involvedUsers;\n\tconst { removedUser } = involvedUsers;",
            "removeUserEvent": "\t\tconst domainsAfterRemoval = [...new Set(users.map((u) => u.federation.origin))];\n\t\tconst domainsAfterRemoval = [...new Set(users.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Normalize the room's federation status\n\t\t//\n\t\tconst usersBeforeRemoval = users;\n\t\tconst usersBeforeRemoval = users;\n\t\tusersBeforeRemoval.push(removedUser);\n\n\t\t// Get the users domains\n\t\tconst domainsBeforeRemoval = [...new Set(usersBeforeRemoval.map((u) => u.federation.origin))];\n\t\tconst domainsBeforeRemoval = [...new Set(usersBeforeRemoval.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Create the user remove event\n\t\t//\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(removedUser);\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(removedUser);\n\n\t\tconst removeUserEvent = await FederationRoomEvents.createRemoveUserEvent(\n\t\tconst removeUserEvent = await FederationRoomEvents.createRemoveUserEvent(\n\t\t\tlocalDomain,\n\t\t\troom._id,\n\t\t\tnormalizedSourceUser,\n\t\t\tdomainsAfterRemoval,\n\t\t);\n\n\t\t// Dispatch the events\n\t\tdispatchEvent(domainsBeforeRemoval, removeUserEvent);\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "beforeDeleteRoom.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/beforeDeleteRoom.js",
        "code": {
            "room": "async function beforeDeleteRoom(roomId) {\nasync function beforeDeleteRoom(roomId) {\n\tconst room = await Rooms.findOneById(roomId, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(roomId, { projection: { federation: 1 } });",
            "event": "\t\tconst event = await FederationRoomEvents.createDeleteRoomEvent(getFederationDomain(), room._id);\n\t\tconst event = await FederationRoomEvents.createDeleteRoomEvent(getFederationDomain(), room._id);\n\n\t\t// Dispatch event (async)\n\t\tdispatchEvent(room.federation.domains, event);\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "afterLeaveRoom.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterLeaveRoom.js",
        "code": {
            "userLeftEvent": "\t\tconst domainsAfterLeave = [...new Set(users.map((u) => u.federation.origin))];\n\t\tconst domainsAfterLeave = [...new Set(users.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Normalize the room's federation status\n\t\t//\n\t\tconst usersBeforeLeave = users;\n\t\tconst usersBeforeLeave = users;\n\t\tusersBeforeLeave.push(user);\n\n\t\t// Get the users domains\n\t\tconst domainsBeforeLeft = [...new Set(usersBeforeLeave.map((u) => u.federation.origin))];\n\t\tconst domainsBeforeLeft = [...new Set(usersBeforeLeave.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Create the user left event\n\t\t//\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(user);\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(user);\n\n\t\tconst userLeftEvent = await FederationRoomEvents.createUserLeftEvent(localDomain, room._id, normalizedSourceUser, domainsAfterLeave);\n\t\tconst userLeftEvent = await FederationRoomEvents.createUserLeftEvent(localDomain, room._id, normalizedSourceUser, domainsAfterLeave);\n\n\t\t// Dispatch the events\n\t\tdispatchEvent(domainsBeforeLeft, userLeftEvent);\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "afterAddedToRoom.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterAddedToRoom.js",
        "code": {
            "function": "async function afterAddedToRoom(involvedUsers, room) {\nasync function afterAddedToRoom(involvedUsers, room) {\n\tconst { user: addedUser } = involvedUsers;\n\tconst { user: addedUser } = involvedUsers;",
            "addUserEvent": "\t\t\tconst normalizedSourceUser = await normalizers.normalizeUser(addedUser);\n\t\t\tconst normalizedSourceUser = await normalizers.normalizeUser(addedUser);\n\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n\n\t\t\tconst addUserEvent = await FederationRoomEvents.createAddUserEvent(\n\t\t\tconst addUserEvent = await FederationRoomEvents.createAddUserEvent(\n\t\t\t\tlocalDomain,\n\t\t\t\troom._id,\n\t\t\t\tnormalizedSourceUser,\n\t\t\t\tnormalizedSourceSubscription,\n\t\t\t\tdomainsAfterAdd,\n\t\t\t);\n\n\t\t\t// Dispatch the events\n\t\t\tdispatchEvent(domainsAfterAdd, addUserEvent);\n\t\t}\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "afterSetReaction.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterSetReaction.js",
        "code": {
            "room": "async function afterSetReaction(message, { user, reaction }) {\nasync function afterSetReaction(message, { user, reaction }) {\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "afterUnsetReaction.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterUnsetReaction.js",
        "code": {
            "room": "async function afterUnsetReaction(message, { user, reaction }) {\nasync function afterUnsetReaction(message, { user, reaction }) {\n\tconst room = Rooms.findOneById(message.rid, { fields: { federation: 1 } });\n\tconst room = Rooms.findOneById(message.rid, { fields: { federation: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "afterDeleteMessage.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/hooks/afterDeleteMessage.js",
        "code": {
            "room": "async function afterDeleteMessage(message) {\nasync function afterDeleteMessage(message) {\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "crypt.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/lib/crypt.js",
        "code": {
            "payloadBuffer": "async function decrypt(data, peerKey) {\nasync function decrypt(data, peerKey) {\n\t//\n\t// Decrypt the payload\n\tconst payloadBuffer = Buffer.from(data);\n\tconst payloadBuffer = Buffer.from(data);\n\n\t// Decrypt with the peer's public key\n\ttry {\n\t\tdata = (await FederationKeys.loadKey(peerKey, 'public')).decryptPublic(payloadBuffer);\n\n\t\t// Decrypt with the local private key\n\t\tdata = (await FederationKeys.getPrivateKey()).decrypt(data);\n\t} catch (err) {"
        },
        "depth_rank": 7
    },
    {
        "file": "http.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/lib/http.js",
        "code": {
            "ignoreErrors": "\tconst ignoreErrors = peerDomain === getFederationDomain() ? false : options.ignoreErrors;\n\tconst ignoreErrors = peerDomain === getFederationDomain() ? false : options.ignoreErrors;\n\n\tconst { url: baseUrl, publicKey } = search(peerDomain);\n\tconst { url: baseUrl, publicKey } = search(peerDomain);"
        },
        "depth_rank": 7
    },
    {
        "file": "dns.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/lib/dns.js",
        "code": {
            "memoizedDnsResolveSRV": "const dnsResolveSRV = util.promisify(dnsResolver.resolveSrv);\nconst dnsResolveSRV = util.promisify(dnsResolver.resolveSrv);\nconst dnsResolveTXT = util.promisify(dnsResolver.resolveTxt);\nconst dnsResolveTXT = util.promisify(dnsResolver.resolveTxt);\n\nconst cacheMaxAge = 3600000; // one hour\nconst cacheMaxAge = 3600000; // one hour\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, { maxAge: cacheMaxAge });\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, { maxAge: cacheMaxAge });",
            "memoizedDnsResolveTXT": "const memoizedDnsResolveTXT = mem(dnsResolveTXT, { maxAge: cacheMaxAge });\nconst memoizedDnsResolveTXT = mem(dnsResolveTXT, { maxAge: cacheMaxAge });",
            "body": "\tconst body = { domain: peerDomain, url, public_key: publicKey };\n\tconst body = { domain: peerDomain, url, public_key: publicKey };"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/handler/index.js",
        "code": {
            "await": "\tconst uri = '/api/v1/federation.events.dispatch';\n\tconst uri = '/api/v1/federation.events.dispatch';\n\n\tfor await (const domain of domains) {\n\tfor await (const domain of domains) {\n\t\tawait federationRequestToPeer('POST', domain, uri, { events }, { ignoreErrors: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "dashboard.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/functions/dashboard.js",
        "code": {
            "numberOfServers": "\tconst numberOfEvents = await FederationRoomEvents.col.estimatedDocumentCount();\n\tconst numberOfEvents = await FederationRoomEvents.col.estimatedDocumentCount();\n\tconst numberOfFederatedUsers = await Users.countRemote();\n\tconst numberOfFederatedUsers = await Users.countRemote();\n\tconst numberOfServers = await FederationServers.col.estimatedDocumentCount();\n\tconst numberOfServers = await FederationServers.col.estimatedDocumentCount();\n\n\treturn { numberOfEvents, numberOfFederatedUsers, numberOfServers };"
        },
        "depth_rank": 7
    },
    {
        "file": "message.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/normalizers/message.js",
        "code": {
            "resource": "\t\tconst [username, domain] = getNameAndDomain(channel.name);\n\t\tconst [username, domain] = getNameAndDomain(channel.name);\n\n\t\tif (domain === localDomain) {\n\t\t\tconst originalUsername = channel.name;\n\t\t\tconst originalUsername = channel.name;\n\n\t\t\tchannel.name = username;\n\n\t\t\tresource.msg = resource.msg.split(originalUsername).join(username);\n\t\t}\n\t}\n\n\treturn resource;\n};\n\nconst denormalizeAllMessages = (resources) => resources.map(denormalizeMessage);\nconst denormalizeAllMessages = (resources) => resources.map(denormalizeMessage);\n\nconst normalizeMessage = (originalResource) => {\nconst normalizeMessage = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 7
    },
    {
        "file": "room.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/normalizers/room.js",
        "code": {
            "resource": "\t\tconst [roomName, roomDomain] = getNameAndDomain(resource.name);\n\t\tconst [roomName, roomDomain] = getNameAndDomain(resource.name);\n\n\t\tresource.name = roomDomain === getFederationDomain() ? roomName : resource.name;\n\n\t\t// Denormalize room owner name\n\t\tconst [username, userDomain] = getNameAndDomain(resource.u.username);\n\t\tconst [username, userDomain] = getNameAndDomain(resource.u.username);\n\n\t\tresource.u.username = userDomain === getFederationDomain() ? username : resource.u.username;\n\n\t\t// Denormalize muted users\n\t\tif (resource.muted) {\n\t\t\tresource.muted = resource.muted.map((u) => {\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\n\t\t\t\treturn domain === getFederationDomain() ? username : u;\n\t\t\t});\n\t\t}\n\n\t\t// Denormalize unmuted users\n\t\tif (resource.unmuted) {\n\t\t\tresource.unmuted = resource.unmuted.map((u) => {\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\n\t\t\t\treturn domain === getFederationDomain() ? username : u;\n\t\t\t});\n\t\t}\n\t}\n\n\treturn resource;\n};\n\nconst normalizeRoom = (originalResource, users) => {\nconst normalizeRoom = (originalResource, users) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 7
    },
    {
        "file": "user.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/normalizers/user.js",
        "code": {
            "resource": "const denormalizeUser = (originalResource) => {\nconst denormalizeUser = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 7
    },
    {
        "file": "subscription.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/normalizers/subscription.js",
        "code": {
            "resource": "\tconst [username, domain] = getNameAndDomain(resource.u.username);\n\tconst [username, domain] = getNameAndDomain(resource.u.username);\n\n\tresource.u.username = domain === getFederationDomain() ? username : resource.u.username;\n\n\tconst [nameUsername, nameDomain] = getNameAndDomain(resource.name);\n\tconst [nameUsername, nameDomain] = getNameAndDomain(resource.name);\n\n\tresource.name = nameDomain === getFederationDomain() ? nameUsername : resource.name;\n\n\treturn resource;\n};\n\nconst denormalizeAllSubscriptions = (resources) => resources.map(denormalizeSubscription);\nconst denormalizeAllSubscriptions = (resources) => resources.map(denormalizeSubscription);\n\nconst normalizeSubscription = (originalResource) => {\nconst normalizeSubscription = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 7
    },
    {
        "file": "uploads.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/endpoints/uploads.js",
        "code": {
            "buffer": "\t\t\tconst buffer = await FileUpload.getBuffer(upload);\n\t\t\tconst buffer = await FileUpload.getBuffer(upload);\n\n\t\t\treturn API.v1.success({ upload, buffer });"
        },
        "depth_rank": 7
    },
    {
        "file": "dispatch.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/endpoints/dispatch.js",
        "code": {
            "eventResult": "\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t// Mute user\n\t\t\tawait Rooms.muteUsernameByRoomId(roomId, denormalizedUser.username);\n\t\t}\n\n\t\treturn eventResult;\n\t},\n\n\t//\n\t// ROOM_UNMUTE_USER\n\t//\n\tasync [eventTypes.ROOM_UNMUTE_USER](event) {\n\t\tconst eventResult = await FederationRoomEvents.addEvent(event.context, event);\n\t\tconst eventResult = await FederationRoomEvents.addEvent(event.context, event);\n\n\t\t// If the event was successfully added, handle the event locally\n\t\tif (eventResult.success) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tdata: { roomId, user },",
            "persistedRoom": "\t\tconst persistedRoom = await Rooms.findOne({ _id: roomId });\n\t\tconst persistedRoom = await Rooms.findOne({ _id: roomId });",
            "denormalizedRoom": "\t\t\t\t\t\tconst denormalizedRoom = normalizers.denormalizeRoom(room);\n\t\t\t\t\t\tconst denormalizedRoom = normalizers.denormalizeRoom(room);\n\n\t\t\t\t\t\t// Create the room\n\t\t\t\t\t\tawait Rooms.insertOne(denormalizedRoom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn eventResult;\n\t\t}\n\t},\n\n\t//\n\t// ROOM_DELETE\n\t//\n\tasync [eventTypes.ROOM_DELETE](event) {\n\t\tconst {\n\t\tconst {\n\t\t\tdata: { roomId },",
            "persistedUser": "\t\t\tconst persistedUser = await Users.findOne({ _id: user._id });\n\t\t\tconst persistedUser = await Users.findOne({ _id: user._id });",
            "persistedSubscription": "\t\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t\t// Create the user\n\t\t\t\tawait Users.insertOne(denormalizedUser);\n\t\t\t\tfederationAltered = true;\n\t\t\t}\n\n\t\t\t// Check if subscription exists\n\t\t\tconst persistedSubscription = await Subscriptions.findOne({ _id: subscription._id });\n\t\t\tconst persistedSubscription = await Subscriptions.findOne({ _id: subscription._id });",
            "denormalizedSubscription": "\t\t\t\t\tconst denormalizedSubscription = normalizers.denormalizeSubscription(subscription);\n\t\t\t\t\tconst denormalizedSubscription = normalizers.denormalizeSubscription(subscription);\n\n\t\t\t\t\t// Create the subscription\n\t\t\t\t\tawait Subscriptions.insertOne(denormalizedSubscription);\n\t\t\t\t\tfederationAltered = true;\n\t\t\t\t}\n\t\t\t} catch (ex) {",
            "persistedMessage": "\t\t\tconst persistedMessage = await Messages.findOne({ _id: messageId });\n\t\t\tconst persistedMessage = await Messages.findOne({ _id: messageId });",
            "fileStore": "\t\t\t\tconst room = await Rooms.findOneById(message.rid);\n\t\t\t\tconst room = await Rooms.findOneById(message.rid);\n\n\t\t\t\t// Denormalize message\n\t\t\t\tconst denormalizedMessage = normalizers.denormalizeMessage(message);\n\t\t\t\tconst denormalizedMessage = normalizers.denormalizeMessage(message);\n\n\t\t\t\t// Is there a file?\n\t\t\t\tif (denormalizedMessage.file) {\n\t\t\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\t\t\tconst {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tfederation: { origin },",
            "denormalizedUser": "\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t// Mute user\n\t\t\tawait Rooms.unmuteUsernameByRoomId(roomId, denormalizedUser.username);\n\t\t}\n\n\t\treturn eventResult;\n\t},\n};\n\nAPI.v1.addRoute(\n\t'federation.events.dispatch',\n\t{ authRequired: false, rateLimiterOptions: { numRequestsAllowed: 30, intervalTimeInMS: 1000 } },"
        },
        "depth_rank": 7
    },
    {
        "file": "users.js",
        "path": "../Rocket.Chat/apps/meteor/app/federation/server/endpoints/users.js",
        "code": {
            "userFields": "const userFields = { _id: 1, username: 1, type: 1, emails: 1, name: 1 };\nconst userFields = { _id: 1, username: 1, type: 1, emails: 1, name: 1 };",
            "query": "\t\t\tconst query = {\n\t\t\tconst query = {\n\t\t\t\ttype: 'user',\n\t\t\t\tusername,\n\t\t\t};\n\n\t\t\tlet user = await Users.findOne(query, { projection: userFields });"
        },
        "depth_rank": 7
    },
    {
        "file": "generateEml.ts",
        "path": "../Rocket.Chat/apps/meteor/app/smarsh-connector/server/functions/generateEml.ts",
        "code": {
            "smarshHistory": "\t\tconst smarshMissingEmail = settings.get('Smarsh_MissingEmail_Email');\n\t\tconst smarshMissingEmail = settings.get('Smarsh_MissingEmail_Email');\n\t\tconst timeZone = settings.get<string>('Smarsh_Timezone');\n\t\tconst timeZone = settings.get<string>('Smarsh_Timezone');\n\n\t\t// TODO: revisit with more time => This appears to be a super expensive operation, going through all rooms\n\t\tfor await (const room of Rooms.find()) {\n\t\tfor await (const room of Rooms.find()) {\n\t\t\tconst smarshHistory = await SmarshHistory.findOne({ _id: room._id });\n\t\t\tconst smarshHistory = await SmarshHistory.findOne({ _id: room._id });",
            "date": "\t\t\tconst date = new Date();\n\t\t\tconst date = new Date();\n\t\t\tconst rows: string[] = [];\n\t\t\tconst rows: string[] = [];\n\t\t\tconst data: {\n\t\t\tconst data: {\n\t\t\t\tusers: string[];\n\t\t\t\tmsgs: number;\n\t\t\t\tfiles: string[];\n\t\t\t\ttime: number;\n\t\t\t\troom: string;\n\t\t\t} = {",
            "sender": "\t\t\t\tconst sender = await Users.findOne({ _id: message.u._id });\n\t\t\t\tconst sender = await Users.findOne({ _id: message.u._id });",
            "messageType": "\t\t\t\t\tconst messageType = MessageTypes.getType(message);\n\t\t\t\t\tconst messageType = MessageTypes.getType(message);\n\t\t\t\t\tif (messageType) {\n\t\t\t\t\t\trows.push(i18n.t(messageType.message, messageType.data ? messageType.data(message) : {}, 'en'));"
        },
        "depth_rank": 7
    },
    {
        "file": "collectMetrics.ts",
        "path": "../Rocket.Chat/apps/meteor/app/metrics/server/lib/collectMetrics.ts",
        "code": {
            "sessions": "const setPrometheusData = async (): Promise<void> => {\nconst setPrometheusData = async (): Promise<void> => {\n\tmetrics.info.set(\n\t\t{\n\t\t\tversion: Info.version,\n\t\t\tunique_id: settings.get<string>('uniqueID'),\n\t\t\tsite_url: settings.get<string>('Site_Url'),\n\t\t},\n\t\t1,\n\t);\n\n\tconst sessions = Array.from<{ userId: string }>(Meteor.server.sessions.values());\n\tconst sessions = Array.from<{ userId: string }>(Meteor.server.sessions.values());",
            "authenticatedSessions": "\tconst authenticatedSessions = sessions.filter((s) => s.userId);\n\tconst authenticatedSessions = sessions.filter((s) => s.userId);\n\tmetrics.ddpSessions.set(Meteor.server.sessions.size);\n\tmetrics.ddpAuthenticatedSessions.set(authenticatedSessions.length);\n\tmetrics.ddpConnectedUsers.set(_.unique(authenticatedSessions.map((s) => s.userId)).length);\n\n\t// Apps metrics\n\tconst { totalInstalled, totalActive, totalFailed } = getAppsStatistics();\n\tconst { totalInstalled, totalActive, totalFailed } = getAppsStatistics();"
        },
        "depth_rank": 7
    },
    {
        "file": "importer.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer-csv/server/importer.js",
        "code": {
            "totalEntries": "\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });",
            "folderName": "\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {",
            "msgGroupData": "\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {",
            "newMessage": "\t\t\t\t\tconst rid = getRoomId(folderName);\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });"
        },
        "depth_rank": 6
    },
    {
        "file": "raw.ts",
        "path": "../Rocket.Chat/apps/meteor/app/settings/server/raw.ts",
        "code": {
            "setting": "const setFromDB = async (_id: string) => {\nconst setFromDB = async (_id: string) => {\n\tconst setting = await Settings.findOneById(_id, { projection: { value: 1 } });\n\tconst setting = await Settings.findOneById(_id, { projection: { value: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "SettingsRegistry.ts",
        "path": "../Rocket.Chat/apps/meteor/app/settings/server/SettingsRegistry.ts",
        "code": {
            "settingStoredOverwritten": "\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {",
            "options": "\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })",
            "mergedOptions": "\t\tconst groupSetWith =\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tconst mergedOptions = { ...preset, ...options };"
        },
        "depth_rank": 6
    },
    {
        "file": "overrideGenerator.ts",
        "path": "../Rocket.Chat/apps/meteor/app/settings/server/functions/overrideGenerator.ts",
        "code": {
            "value": "\t\tconst overwriteValue = fn(setting._id);\n\t\tconst overwriteValue = fn(setting._id);\n\t\tif (overwriteValue === null || overwriteValue === undefined) {\n\t\t\treturn setting;\n\t\t}\n\n\t\ttry {\n\t\t\tconst value = convertValue(overwriteValue, setting.type);\n\t\t\tconst value = convertValue(overwriteValue, setting.type);\n\n\t\t\tif (compareSettingsValue(value, setting.value, setting.type)) {\n\t\t\t\treturn setting;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...setting,\n\t\t\t\tvalue,\n\t\t\t\tprocessEnvValue: value,\n\t\t\t\tvalueSource: 'processEnvValue',\n\t\t\t};\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/slashcommands-msg/server/server.ts",
        "code": {
            "user": "\t\tconst targetUsernameOrig = trimmedParams.slice(0, separator);\n\t\tconst targetUsernameOrig = trimmedParams.slice(0, separator);\n\t\tconst targetUsername = targetUsernameOrig.replace('@', '');\n\t\tconst targetUsername = targetUsernameOrig.replace('@', '');\n\t\tconst targetUser = await Users.findOneByUsernameIgnoringCase(targetUsername);\n\t\tconst targetUser = await Users.findOneByUsernameIgnoringCase(targetUsername);\n\t\tif (targetUser == null) {\n\t\t\tconst user = await Users.findOneById(userId, { projection: { language: 1 } });\n\t\t\tconst user = await Users.findOneById(userId, { projection: { language: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "addOAuthApp.ts",
        "path": "../Rocket.Chat/apps/meteor/app/oauth2-server-config/server/admin/functions/addOAuthApp.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "oauth2-server.ts",
        "path": "../Rocket.Chat/apps/meteor/app/oauth2-server-config/server/oauth/oauth2-server.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(accessToken.userId);\n\tconst user = await Users.findOneById(accessToken.userId);\n\n\tif (user == null) {\n\t\treturn;\n\t}\n\n\treturn { user };"
        },
        "depth_rank": 7
    },
    {
        "file": "importer.js",
        "path": "../Rocket.Chat/apps/meteor/app/importer-pending-files/server/importer.js",
        "code": {
            "fileCount": "\t\tconst fileCount = await Messages.countAllImportedMessagesWithFilesToDownload();\n\t\tconst fileCount = await Messages.countAllImportedMessagesWithFilesToDownload();\n\t\tif (fileCount === 0) {\n\t\t\tawait super.updateProgress(ProgressStep.DONE);\n\t\t\treturn 0;\n\t\t}\n\n\t\tawait this.updateRecord({ 'count.messages': fileCount, 'messagesstatus': null });",
            "fileData": "\t\tconst fileData = new Selection(this.name, [], [], fileCount);\n\t\tconst fileData = new Selection(this.name, [], [], fileCount);\n\t\tawait this.updateRecord({ fileData });"
        },
        "depth_rank": 6
    },
    {
        "file": "insertOrUpdateEmoji.ts",
        "path": "../Rocket.Chat/apps/meteor/app/emoji-custom/server/methods/insertOrUpdateEmoji.ts",
        "code": {
            "await": "\t\t\tfor await (const alias of aliases) {\n\t\t\tfor await (const alias of aliases) {\n\t\t\t\tmatchingResults = matchingResults.concat(await EmojiCustom.findByNameOrAlias(alias).toArray());\n\t\t\t}\n\t\t}\n\n\t\tif (matchingResults.length > 0) {\n\t\t\tthrow new Meteor.Error(\n\t\t\t\t'Custom_Emoji_Error_Name_Or_Alias_Already_In_Use',\n\t\t\t\t'The custom emoji or one of its aliases is already in use',\n\t\t\t\t{ method: 'insertOrUpdateEmoji' },"
        },
        "depth_rank": 7
    },
    {
        "file": "WebRTCClass.js",
        "path": "../Rocket.Chat/apps/meteor/app/webrtc/client/WebRTCClass.js",
        "code": {
            "serverConfig": "\t\t\t\tconst serverConfig = {\n\t\t\t\tconst serverConfig = {\n\t\t\t\t\turls: server.pop(),\n\t\t\t\t};\n\t\t\t\tif (server.length === 1) {\n\t\t\t\t\tserver = server[0].split(':');\n\t\t\t\t\tserverConfig.username = decodeURIComponent(server[0]);\n\t\t\t\t\tserverConfig.credential = decodeURIComponent(server[1]);\n\t\t\t\t}\n\t\t\t\tthis.config.iceServers.push(serverConfig);\n\t\t\t});\n\t\t}\n\t\tthis.peerConnections = {};",
            "itemsById": "\t\tconst items = [];\n\t\tconst items = [];\n\t\tconst itemsById = {};\n\t\tconst itemsById = {};",
            "remoteConnections": "\t\tconst remoteConnections = [];\n\t\tconst remoteConnections = [];\n\t\tconst { peerConnections } = this;\n\t\tconst { peerConnections } = this;",
            "peerConnection": "\t\tconst peerConnection = this.getPeerConnection(data.from);\n\t\tconst peerConnection = this.getPeerConnection(data.from);\n\t\tif (data.type === 'offer') {\n\t\t\tpeerConnection.remoteMedia = data.media;\n\t\t\tthis.onRemoteOffer({\n\t\t\t\tfrom: data.from,\n\t\t\t\tts: data.ts,\n\t\t\t\tdescription: data.description,\n\t\t\t});\n\t\t} else {",
            "subscription": "\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });",
            "onLocalDescription": "\t\tconst onOffer = (offer) => {\n\t\tconst onOffer = (offer) => {\n\t\t\tconst onLocalDescription = () => {\n\t\t\tconst onLocalDescription = () => {\n\t\t\t\tthis.transport.sendDescription({\n\t\t\t\t\tto: data.from,\n\t\t\t\t\ttype: 'offer',\n\t\t\t\t\tts: peerConnection.createdAt,\n\t\t\t\t\tmedia: this.media,\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\tsdp: offer.sdp,\n\t\t\t\t\t\ttype: offer.type,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tpeerConnection.setLocalDescription(new RTCSessionDescription(offer), onLocalDescription, this.onError);\n\t\t};\n\n\t\tif (data.monitor === true) {\n\t\t\tpeerConnection.createOffer(onOffer, this.onError, {\n\t\t\t\tmandatory: {\n\t\t\t\t\tOfferToReceiveAudio: data.media.audio,\n\t\t\t\t\tOfferToReceiveVideo: data.media.video,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {",
            "WebRTC": "const WebRTC = new (class {\nconst WebRTC = new (class {\n\tconstructor() {\n\tconstructor() {\n\t\tthis.instancesByRoomId = {};"
        },
        "depth_rank": 6
    },
    {
        "file": "actionLink.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/webrtc/client/actionLink.tsx",
        "code": {
            "room": "\tconst room = ChatRoom.findOne({ _id: message.rid });\n\tconst room = ChatRoom.findOne({ _id: message.rid });"
        },
        "depth_rank": 6
    },
    {
        "file": "normalizeThreadTitle.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/client/lib/normalizeThreadTitle.ts",
        "code": {
            "me": "\t\tconst uid = Meteor.userId();\n\t\tconst uid = Meteor.userId();\n\t\tconst me = uid && Users.findOne(uid, { fields: { username: 1 } })?.username;\n\t\tconst me = uid && Users.findOne(uid, { fields: { username: 1 } })?.username;"
        },
        "depth_rank": 7
    },
    {
        "file": "unfollow.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/client/messageAction/unfollow.ts",
        "code": {
            "parentMessage": "\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });\n\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "follow.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/client/messageAction/follow.ts",
        "code": {
            "parentMessage": "\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });\n\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "threadlist.tsx",
        "path": "../Rocket.Chat/apps/meteor/app/threads/client/flextab/threadlist.tsx",
        "code": {
            "variant": "\t\t\t\t\t\t\tconst variant = getVariant(tunreadUser, tunreadGroup);\n\t\t\t\t\t\t\tconst variant = getVariant(tunreadUser, tunreadGroup);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<HeaderToolboxAction key={props.id} {...props}>"
        },
        "depth_rank": 7
    },
    {
        "file": "functions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/server/functions.ts",
        "code": {
            "await": "\tfor await (const userId of mentionIds) {\n\tfor await (const userId of mentionIds) {\n\t\tawait Subscriptions.addUnreadThreadByRoomIdAndUserIds(rid, [userId], tmid, { userMention: true });",
            "projection": "\tconst projection = { tunread: 1 };\n\tconst projection = { tunread: 1 };",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, { projection });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, { projection });"
        },
        "depth_rank": 6
    },
    {
        "file": "aftersavemessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/server/hooks/aftersavemessage.ts",
        "code": {
            "function": "async function notifyUsersOnReply(message: IMessage, replies: string[], room: IRoom) {\nasync function notifyUsersOnReply(message: IMessage, replies: string[], room: IRoom) {\n\t// skips this callback if the message was edited\n\tif (isEditedMessage(message)) {\n\t\treturn message;\n\t}\n\n\tawait updateThreadUsersSubscriptions(message, room, replies);\n\n\treturn message;\n}\n\nasync function metaData(message: IMessage, parentMessage: IMessage, followers: string[]) {\nasync function metaData(message: IMessage, parentMessage: IMessage, followers: string[]) {\n\tawait reply({ tmid: message.tmid }, message, parentMessage, followers);"
        },
        "depth_rank": 7
    },
    {
        "file": "followMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/server/methods/followMessage.ts",
        "code": {
            "followResult": "\t\tconst followResult = await follow({ tmid: message.tmid || message._id, uid });\n\t\tconst followResult = await follow({ tmid: message.tmid || message._id, uid });"
        },
        "depth_rank": 7
    },
    {
        "file": "unfollowMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/server/methods/unfollowMessage.ts",
        "code": {
            "unfollowResult": "\t\tconst unfollowResult = await unfollow({ rid: message.rid, tmid: message.tmid || message._id, uid });\n\t\tconst unfollowResult = await unfollow({ rid: message.rid, tmid: message.tmid || message._id, uid });"
        },
        "depth_rank": 7
    },
    {
        "file": "getThreadMessages.ts",
        "path": "../Rocket.Chat/apps/meteor/app/threads/server/methods/getThreadMessages.ts",
        "code": {
            "result": "\t\tconst result = await Messages.findVisibleThreadByThreadId(tmid, {\n\t\tconst result = await Messages.findVisibleThreadByThreadId(tmid, {\n\t\t\t...(skip && { skip }),"
        },
        "depth_rank": 7
    },
    {
        "file": "departments.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/departments.ts",
        "code": {
            "agents": "\t\t\tconst agents = this.bodyParams.agents ? { upsert: this.bodyParams.agents } : {};\n\t\t\tconst agents = this.bodyParams.agents ? { upsert: this.bodyParams.agents } : {};",
            "department": "\t\t\tconst department = await LivechatEnterprise.saveDepartment(null, this.bodyParams.department as ILivechatDepartment, agents);\n\t\t\tconst department = await LivechatEnterprise.saveDepartment(null, this.bodyParams.department as ILivechatDepartment, agents);\n\n\t\t\tif (department) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tdepartment,\n\t\t\t\t\tagents: await LivechatDepartmentAgents.find({ departmentId: department._id }).toArray(),",
            "isDepartmentCreationAvailable": "\t\t\tconst isDepartmentCreationAvailable = await LivechatEnterprise.isDepartmentCreationAvailable();\n\t\t\tconst isDepartmentCreationAvailable = await LivechatEnterprise.isDepartmentCreationAvailable();\n\t\t\treturn API.v1.success({ isDepartmentCreationAvailable });"
        },
        "depth_rank": 8
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/rooms.ts",
        "code": {
            "validateDateParams": "const validateDateParams = (property: string, date?: string) => {\nconst validateDateParams = (property: string, date?: string) => {\n\tlet parsedDate: { start?: string; end?: string } | undefined = undefined;",
            "isBoolean": "const isBoolean = (value?: string | boolean): boolean => value === 'true' || value === 'false' || typeof value === 'boolean';\nconst isBoolean = (value?: string | boolean): boolean => value === 'true' || value === 'false' || typeof value === 'boolean';\n\nAPI.v1.addRoute(\n\t'livechat/rooms',\n\t{ authRequired: true, validateParams: isGETLivechatRoomsParams },",
            "parsedCustomFields": "\t\t\t\t\tconst parsedCustomFields = JSON.parse(customFields) as { [key: string]: string };\n\t\t\t\t\tconst parsedCustomFields = JSON.parse(customFields) as { [key: string]: string };"
        },
        "depth_rank": 8
    },
    {
        "file": "sms.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/sms.js",
        "code": {
            "fileStore": "\tconst fileStore = FileUpload.getStore('Uploads');\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insert({ ...details, size: contentSize }, content);",
            "normalizeLocationSharing": "\tconst id = await LivechatTyped.registerGuest(data);\n\tconst id = await LivechatTyped.registerGuest(data);\n\treturn LivechatVisitors.findOneById(id);\n};\n\nconst normalizeLocationSharing = (payload) => {\nconst normalizeLocationSharing = (payload) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;",
            "sms": "\t\tconst smsDepartment = settings.get('SMS_Default_Omnichannel_Department');\n\t\tconst smsDepartment = settings.get('SMS_Default_Omnichannel_Department');\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(this.urlParams.service);\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(this.urlParams.service);\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tconst { department } = this.queryParams;",
            "visitor": "\t\tconst visitor = await defineVisitor(sms.from, targetDepartment);\n\t\tconst visitor = await defineVisitor(sms.from, targetDepartment);\n\t\tconst { token } = visitor;\n\t\tconst { token } = visitor;",
            "uploadedFile": "\t\t\tconst details = {\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\tlet attachment;\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name, type: uploadedFile.type };",
            "msg": "\t\t\tconst msg = SMSService.response.call(this, await Livechat.sendMessage(sendMessage));\n\t\t\tconst msg = SMSService.response.call(this, await Livechat.sendMessage(sendMessage));\n\t\t\tsetImmediate(async () => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.toPhone) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'phoneNumber', sms.extra.toPhone);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e) {"
        },
        "depth_rank": 8
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/users.ts",
        "code": {
            "user": "\t\t\t\tconst user = await Livechat.addManager(this.bodyParams.username);\n\t\t\t\tconst user = await Livechat.addManager(this.bodyParams.username);\n\t\t\t\tif (user) {\n\t\t\t\t\treturn API.v1.success({ user });"
        },
        "depth_rank": 8
    },
    {
        "file": "upload.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/upload.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(visitorToken as string, {});\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(visitorToken as string, {});",
            "file": "\t\tconst maxFileSize = settings.get<number>('FileUpload_MaxFileSize') || 104857600;\n\t\tconst maxFileSize = settings.get<number>('FileUpload_MaxFileSize') || 104857600;\n\n\t\tconst file = await getUploadFormData(\n\t\tconst file = await getUploadFormData(\n\t\t\t{\n\t\t\t\trequest: this.request,\n\t\t\t},\n\t\t\t{ field: 'file', sizeLimit: maxFileSize },"
        },
        "depth_rank": 8
    },
    {
        "file": "dashboards.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/dashboards.ts",
        "code": {
            "user": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });",
            "totalizers": "\t\t\tconst totalizers = await getProductivityMetricsAsync({ start: startDate, end: endDate, departmentId, user });\n\t\t\tconst totalizers = await getProductivityMetricsAsync({ start: startDate, end: endDate, departmentId, user });",
            "result": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllResponseTimeMetricsAsync({ start: startDate, end: endDate, departmentId });\n\t\t\tconst result = await findAllResponseTimeMetricsAsync({ start: startDate, end: endDate, departmentId });"
        },
        "depth_rank": 8
    },
    {
        "file": "visitors.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/visitors.ts",
        "code": {
            "visitor": "\t\t\tconst visitor = await findVisitorInfo({ visitorId: this.queryParams.visitorId });\n\t\t\tconst visitor = await findVisitorInfo({ visitorId: this.queryParams.visitorId });"
        },
        "depth_rank": 8
    },
    {
        "file": "chartHandler.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/client/lib/chartHandler.ts",
        "code": {
            "lineChartConfiguration": "const lineChartConfiguration = ({\nconst lineChartConfiguration = ({\n\tlegends = false,\n\tanim = false,\n\ttooltipCallbacks = {},",
            "doughnutChartConfiguration": "const doughnutChartConfiguration = (\nconst doughnutChartConfiguration = (\n\ttitle: string,\n\ttooltipCallbacks = {},"
        },
        "depth_rank": 7
    },
    {
        "file": "queueManager.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/client/lib/stream/queueManager.ts",
        "code": {
            "events": "const departments = new Set();\nconst departments = new Set();\n\nconst events = {\nconst events = {\n\tadded: (inquiry: ILivechatInquiryRecord) => {\n\t\tdepartments.has(inquiry.department) && LivechatInquiry.insert({ ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });",
            "getInquiriesFromAPI": "const getInquiriesFromAPI = async () => {\nconst getInquiriesFromAPI = async () => {\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', {});\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', {});",
            "updateInquiries": "const addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\nconst addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));",
            "inquiriesFromAPI": "\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst globalCleanup = addGlobalListener();\n\tconst globalCleanup = addGlobalListener();\n\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\n\tawait updateInquiries(inquiriesFromAPI);\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});"
        },
        "depth_rank": 8
    },
    {
        "file": "notifyUnreadRooms.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/client/startup/notifyUnreadRooms.js",
        "code": {
            "newRoomNotification": "\t\tconst user = await Users.findOne(Meteor.userId(), {\n\t\tconst user = await Users.findOne(Meteor.userId(), {\n\t\t\tprojection: {\n\t\t\t\t'settings.preferences.newRoomNotification': 1,\n\t\t\t},\n\t\t});\n\n\t\tconst newRoomNotification = getUserPreference(user, 'newRoomNotification');\n\t\tconst newRoomNotification = getUserPreference(user, 'newRoomNotification');\n\n\t\taudio = CustomSounds.play(newRoomNotification, { loop: true });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendMessageBySMS.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/sendMessageBySMS.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(room.v.token, { projection: { phone: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(room.v.token, { projection: { phone: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "startup.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/startup.ts",
        "code": {
            "function": "\tsettings.watch<string>('Livechat_Routing_Method', function (value) {\n\tsettings.watch<string>('Livechat_Routing_Method', function (value) {\n\t\tRoutingManager.setMethodNameAndStartQueue(value);\n\t});\n\n\t// Remove when accounts.onLogout is async\n\tAccounts.onLogout(\n\t\t({ user }: { user: IUser }) =>"
        },
        "depth_rank": 6
    },
    {
        "file": "roomAccessValidator.compatibility.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/roomAccessValidator.compatibility.ts",
        "code": {
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOne(filter, { projection: { status: 1 } });\n\t\tconst inquiry = await LivechatInquiry.findOne(filter, { projection: { status: 1 } });"
        },
        "depth_rank": 6
    },
    {
        "file": "livechat.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/livechat.ts",
        "code": {
            "httpHeaders": "\tconst httpHeaders = Object.assign({}, headers);\n\tconst httpHeaders = Object.assign({}, headers);"
        },
        "depth_rank": 8
    },
    {
        "file": "departments.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/departments.ts",
        "code": {
            "result": "\tconst result = {\n\tconst result = {\n\t\tdepartment: await LivechatDepartment.findOne(query),\n\t\t...(includeAgents &&\n\t\t\tcanViewLivechatDepartments && {\n\t\t\t\tagents: await LivechatDepartmentAgents.find({ departmentId }).toArray(),",
            "departments": "\tconst departments = await LivechatDepartment.findInIds(ids, fields).toArray();\n\tconst departments = await LivechatDepartment.findInIds(ids, fields).toArray();\n\treturn { departments };"
        },
        "depth_rank": 8
    },
    {
        "file": "rooms.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/rooms.ts",
        "code": {
            "departments": "\tconst departmentsIds = [...new Set(rooms.map((room) => room.departmentId).filter(isRoomWithDepartmentId))];\n\tconst departmentsIds = [...new Set(rooms.map((room) => room.departmentId).filter(isRoomWithDepartmentId))];\n\tif (departmentsIds.length) {\n\t\tconst departments = await LivechatDepartment.findInIds(departmentsIds, {\n\t\tconst departments = await LivechatDepartment.findInIds(departmentsIds, {\n\t\t\tprojection: { name: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "users.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/users.ts",
        "code": {
            "function": "async function findUsers({\nasync function findUsers({\n\trole,\n\ttext,\n\tpagination: { offset, count, sort },",
            "query": "\tconst query = {};\n\tconst query = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "inquiries.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/inquiries.ts",
        "code": {
            "agentDepartments": "const agentDepartments = async (userId: IUser['_id']): Promise<string[]> => {\nconst agentDepartments = async (userId: IUser['_id']): Promise<string[]> => {\n\tconst agentDepartments = (await LivechatDepartmentAgents.findByAgentId(userId).toArray()).map(({ departmentId }) => departmentId);\n\tconst agentDepartments = (await LivechatDepartmentAgents.findByAgentId(userId).toArray()).map(({ departmentId }) => departmentId);",
            "options": "\tconst defaultSort = getOmniChatSortQuery(getInquirySortMechanismSetting());\n\tconst defaultSort = getOmniChatSortQuery(getInquirySortMechanismSetting());\n\tconst options = {\n\tconst options = {\n\t\tlimit: count,\n\t\tskip: offset,\n\t\tsort: { ...sort, ...defaultSort },"
        },
        "depth_rank": 8
    },
    {
        "file": "integrations.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/integrations.ts",
        "code": {
            "settings": "\tconst settings = await Settings.findByIds([\n\tconst settings = await Settings.findByIds([\n\t\t'Livechat_webhookUrl',\n\t\t'Livechat_secret_token',\n\t\t'Livechat_http_timeout',\n\t\t'Livechat_webhook_on_start',\n\t\t'Livechat_webhook_on_close',\n\t\t'Livechat_webhook_on_chat_taken',\n\t\t'Livechat_webhook_on_chat_queued',\n\t\t'Livechat_webhook_on_forward',\n\t\t'Livechat_webhook_on_offline_msg',\n\t\t'Livechat_webhook_on_visitor_message',\n\t\t'Livechat_webhook_on_agent_message',\n\t]).toArray();\n\n\treturn { settings };"
        },
        "depth_rank": 8
    },
    {
        "file": "transfer.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/transfer.ts",
        "code": {
            "normalizeTransferHistory": "const normalizeTransferHistory = ({ transferData }: IOmnichannelSystemMessage): IOmnichannelSystemMessage['transferData'] => transferData;\nconst normalizeTransferHistory = ({ transferData }: IOmnichannelSystemMessage): IOmnichannelSystemMessage['transferData'] => transferData;"
        },
        "depth_rank": 8
    },
    {
        "file": "visitors.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/lib/visitors.ts",
        "code": {
            "allowedCF": "\tconst allowedCF = await LivechatCustomField.findMatchingCustomFields('visitor', true, { projection: { _id: 1 } })\n\tconst allowedCF = await LivechatCustomField.findMatchingCustomFields('visitor', true, { projection: { _id: 1 } })"
        },
        "depth_rank": 8
    },
    {
        "file": "room.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/room.ts",
        "code": {
            "extraCheckParams": "\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\t\ttoken: String,\n\t\t\trid: Match.Maybe(String),\n\t\t\tagentId: Match.Maybe(String),\n\t\t});\n\n\t\tcheck(this.queryParams, extraCheckParams as any);\n\n\t\tconst { token, rid: roomId, agentId, ...extraParams } = this.queryParams;\n\t\tconst { token, rid: roomId, agentId, ...extraParams } = this.queryParams;",
            "agentObj": "\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\tif (agentObj) {\n\t\t\t\tif (isAgentWithInfo(agentObj)) {\n\t\t\t\t\tconst { username = undefined } = agentObj;\n\t\t\t\t\tconst { username = undefined } = agentObj;",
            "newRoom": "\t\t\tconst rid = Random.id();\n\t\t\tconst rid = Random.id();\n\t\t\tconst roomInfo = {\n\t\t\tconst roomInfo = {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst newRoom = await getRoom({ guest, rid, agent, roomInfo, extraParams });\n\t\t\tconst newRoom = await getRoom({ guest, rid, agent, roomInfo, extraParams });",
            "froom": "\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});\n\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});",
            "comment": "\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });",
            "t": "\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\t\t\t\t\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "subject": "\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\n\t\t\t\t\toptions.emailTranscript = {\n\t\t\t\t\t\tsendToVisitor: true,\n\t\t\t\t\t\trequestData: {\n\t\t\t\t\t\t\temail: visitorEmail,\n\t\t\t\t\t\t\trequestedAt: new Date(),\n\t\t\t\t\t\t\trequestedBy: servingAgent,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait LivechatTyped.closeRoom({ visitor, room, comment, options });",
            "subscription": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, this.userId, { projection: { _id: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, this.userId, { projection: { _id: 1 } });",
            "transferredBy": "\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);",
            "guest": "\t\t\tconst guest = await LivechatVisitors.findOneById(room.v?._id);\n\t\t\tconst guest = await LivechatVisitors.findOneById(room.v?._id);\n\t\t\ttransferData.transferredBy = normalizeTransferredByData((await Meteor.userAsync()) || {}, room);",
            "room": "\t\t\tconst room = await LivechatRooms.findOneById(rid, { _id: 1, v: 1 }); // TODO: check _id\n\t\t\tconst room = await LivechatRooms.findOneById(rid, { _id: 1, v: 1 }); // TODO: check _id"
        },
        "depth_rank": 8
    },
    {
        "file": "config.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/config.ts",
        "code": {
            "cachedSettings": "const cachedSettings = mem(settings, { maxAge: 1000, cacheKey: JSON.stringify });\nconst cachedSettings = mem(settings, { maxAge: 1000, cacheKey: JSON.stringify });",
            "config": "\t\t\tconst config = await cachedSettings({ businessUnit });\n\t\t\tconst config = await cachedSettings({ businessUnit });",
            "extra": "\t\t\tconst status = await Livechat.online(department);\n\t\t\tconst status = await Livechat.online(department);\n\t\t\tconst guest = token ? await Livechat.findGuest(token) : null;\n\t\t\tconst guest = token ? await Livechat.findGuest(token) : null;\n\n\t\t\tconst room = guest ? await findOpenRoom(guest.token) : undefined;\n\t\t\tconst room = guest ? await findOpenRoom(guest.token) : undefined;\n\t\t\tconst agent = guest && room && room.servedBy && (await findAgent(room.servedBy._id));\n\t\t\tconst agent = guest && room && room.servedBy && (await findAgent(room.servedBy._id));\n\n\t\t\tconst extra = await getExtraConfigInfo(room);\n\t\t\tconst extra = await getExtraConfigInfo(room);\n\t\t\treturn API.v1.success({\n\t\t\t\tconfig: { ...config, online: status, ...extra, ...(guest && { guest }), ...(room && { room }), ...(agent && { agent }) },"
        },
        "depth_rank": 8
    },
    {
        "file": "visitor.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/visitor.ts",
        "code": {
            "guest": "\t\tconst guest = {\n\t\tconst guest = {\n\t\t\ttoken,\n\t\t\t...(id && { id }),",
            "visitorId": "\t\tconst visitorId = await LivechatTyped.registerGuest(guest);\n\t\tconst visitorId = await LivechatTyped.registerGuest(guest);\n\n\t\tlet visitor = await VisitorsRaw.findOneById(visitorId, {});",
            "rooms": "\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\t\tthis.urlParams.token,\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\tcl: 1,\n\t\t\t\t\t\tu: 1,\n\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\tservedBy: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\textraQuery,\n\t\t\t).toArray();\n\t\t\treturn API.v1.success({ rooms });",
            "visitor": "\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});"
        },
        "depth_rank": 8
    },
    {
        "file": "webhooks.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/webhooks.ts",
        "code": {
            "response": "\t\t\t\tconst request = await fetch(webhookUrl, options);\n\t\t\t\tconst request = await fetch(webhookUrl, options);\n\t\t\t\tconst response = await request.text();\n\t\t\t\tconst response = await request.text();\n\n\t\t\t\tLivechat.logger.debug({ response });"
        },
        "depth_rank": 8
    },
    {
        "file": "contact.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/contact.ts",
        "code": {
            "contact": "\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\treturn API.v1.success({ contact });",
            "customFields": "\t\t\t\tconst cfIds = Object.keys(customCF);\n\t\t\t\tconst cfIds = Object.keys(customCF);\n\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "customField.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/customField.ts",
        "code": {
            "fields": "\t\t\tconst fields = await Promise.all(\n\t\t\tconst fields = await Promise.all(\n\t\t\t\tthis.bodyParams.customFields.map(\n\t\t\t\t\tasync (customField: {\n\t\t\t\t\t\tkey: string;\n\t\t\t\t\t\tvalue: string;\n\t\t\t\t\t\toverwrite: boolean;\n\t\t\t\t\t}): Promise<{ Key: string; value: string; overwrite: boolean }> => {",
            "data": "\t\t\t\t\t\tconst data = Object.assign({ token }, customField);\n\t\t\t\t\t\tconst data = Object.assign({ token }, customField);"
        },
        "depth_rank": 8
    },
    {
        "file": "videoCall.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/videoCall.ts",
        "code": {
            "room": "\t\t\tconst room = await canSendMessageAsync(\n\t\t\tconst room = await canSendMessageAsync(\n\t\t\t\trid,\n\t\t\t\t{\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tusername: this.user.username,\n\t\t\t\t\ttype: this.user.type,\n\t\t\t\t},\n\t\t\t\t{},",
            "videoCall": "\t\t\tconst videoCall = {\n\t\t\tconst videoCall = {\n\t\t\t\trid: room._id,\n\t\t\t\tprovider: 'webrtc',\n\t\t\t\tcallStatus,\n\t\t\t};\n\t\t\treturn API.v1.success({ videoCall });"
        },
        "depth_rank": 8
    },
    {
        "file": "message.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/message.ts",
        "code": {
            "result": "\t\t\tconst result = await Livechat.deleteMessage({ guest, message });\n\t\t\tconst result = await Livechat.deleteMessage({ guest, message });",
            "messages": "\t\t\tconst history = await loadMessageHistory({\n\t\t\tconst history = await loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\toffset,\n\t\t\t});\n\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\n\t\t\treturn API.v1.success({ messages });",
            "visitorToken": "\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\n\t\t\tlet visitor = await LivechatVisitors.getVisitorByToken(visitorToken, {});",
            "rooms": "\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();"
        },
        "depth_rank": 8
    },
    {
        "file": "transfer.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/transfer.ts",
        "code": {
            "room": "\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });\n\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "agent.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/api/v1/agent.ts",
        "code": {
            "room": "\t\t\tconst room = await findOpenRoom(token);\n\t\t\tconst room = await findOpenRoom(token);\n\t\t\tif (room) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlet { department } = this.queryParams;"
        },
        "depth_rank": 8
    },
    {
        "file": "sendEmailTranscriptOnClose.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendEmailTranscriptOnClose.ts",
        "code": {
            "sendEmailTranscriptOnClose": "const sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\tconst { room, options } = params;",
            "resolveTranscriptData": "const resolveTranscriptData = (\nconst resolveTranscriptData = (\n\troom: IOmnichannelRoom,\n\toptions: LivechatCloseCallbackParams['options'] = {},"
        },
        "depth_rank": 7
    },
    {
        "file": "afterUserActions.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/hooks/afterUserActions.ts",
        "code": {
            "handleAgentUpdated": "const handleAgentUpdated = async (userData: IAfterSaveUserProps) => {\nconst handleAgentUpdated = async (userData: IAfterSaveUserProps) => {\n\tconst {\n\tconst {\n\t\tuser: { _id: userId, username },"
        },
        "depth_rank": 7
    },
    {
        "file": "offlineMessageToChannel.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/hooks/offlineMessageToChannel.ts",
        "code": {
            "dept": "\t\t\tconst dept = await LivechatDepartment.findOneById(department, {\n\t\t\tconst dept = await LivechatDepartment.findOneById(department, {\n\t\t\t\tprojection: { name: 1, offlineMessageChannelName: 1 },",
            "user": "\t\tconst user = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\tconst user = await Users.findOneById('rocket.cat', { projection: { username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "sendToCRM.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendToCRM.ts",
        "code": {
            "getAdditionalFieldsByType": "const isOmnichannelNavigationMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\nconst isOmnichannelNavigationMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\n\treturn message.t === msgNavType;\n};\n\nconst isOmnichannelClosingMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\nconst isOmnichannelClosingMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\n\treturn message.t === msgClosingType;\n};\n\nconst sendMessageType = (msgType: string): boolean => {\nconst sendMessageType = (msgType: string): boolean => {\n\tswitch (msgType) {\n\t\tcase msgClosingType:\n\t\t\treturn true;\n\t\tcase msgNavType:\n\t\t\treturn (\n\t\t\t\tsettings.get<boolean>('Livechat_Visitor_navigation_as_a_message') &&\n\t\t\t\tsettings.get<boolean>('Send_visitor_navigation_history_livechat_webhook_request')\n\t\t\t);\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nconst getAdditionalFieldsByType = (type: string, room: OmnichannelRoomWithExtraFields): AdditionalFields => {\nconst getAdditionalFieldsByType = (type: string, room: OmnichannelRoomWithExtraFields): AdditionalFields => {\n\tconst { departmentId, servedBy, closedAt, closedBy, closer, oldServedBy, oldDepartmentId } = room;\n\tconst { departmentId, servedBy, closedAt, closedBy, closer, oldServedBy, oldDepartmentId } = room;",
            "msg": "\t\t\tconst msg = {\n\t\t\tconst msg = {\n\t\t\t\t_id: message._id,\n\t\t\t\tusername: message.u.username,\n\t\t\t\tmsg: message.msg || JSON.stringify(message.blocks),\n\t\t\t\t...(message.blocks && message.blocks.length > 0 ? { blocks: message.blocks } : {}),",
            "responseData": "\tconst additionalData = getAdditionalFieldsByType(type, room);\n\tconst additionalData = getAdditionalFieldsByType(type, room);\n\tconst responseData = Object.assign(postData, additionalData);\n\tconst responseData = Object.assign(postData, additionalData);\n\n\tconst response = await LivechatTyped.sendRequest(responseData);\n\tconst response = await LivechatTyped.sendRequest(responseData);\n\n\tif (response) {\n\t\tconst responseData = await response.text();\n\t\tconst responseData = await response.text();\n\t\tawait LivechatRooms.saveCRMDataByRoomId(room._id, responseData);\n\t}\n\n\treturn room;\n}\n\ncallbacks.add(\n\t'livechat.closeRoom',\n\tasync (params) => {\n\t\tconst { room } = params;\n\t\tconst { room } = params;",
            "room": "\t\tconst room = Object.assign(originalRoom, { oldDepartmentId });\n\t\tconst room = Object.assign(originalRoom, { oldDepartmentId });"
        },
        "depth_rank": 7
    },
    {
        "file": "processRoomAbandonment.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/hooks/processRoomAbandonment.ts",
        "code": {
            "parseDays": "const getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\nconst getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\n\tmoment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n\nconst parseDays = (\nconst parseDays = (\n\tacc: Record<string, { start: { day: string; time: string }; finish: { day: string; time: string }; open: boolean }>,",
            "function": "\tasync function (params) {\n\tasync function (params) {\n\t\tconst { room } = params;\n\t\tconst { room } = params;"
        },
        "depth_rank": 7
    },
    {
        "file": "QueueManager.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/QueueManager.js",
        "code": {
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneById(await createLivechatInquiry({ rid, name, guest, message, extraData: { source } }));\n\t\tconst inquiry = await LivechatInquiry.findOneById(await createLivechatInquiry({ rid, name, guest, message, extraData: { source } }));",
            "guest": "\t\tconst guest = {\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),"
        },
        "depth_rank": 7
    },
    {
        "file": "Analytics.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/Analytics.js",
        "code": {
            "timezone": "\t\tconst timezone = getTimezone({ utcOffset });\n\t\tconst timezone = getTimezone({ utcOffset });",
            "label": "\t\t\tconst m = moment(from);\n\t\t\tconst m = moment(from);\n\t\t\tfor await (const currentHour of Array.from({ length: HOURS_IN_DAY }, (_, i) => i)) {\n\t\t\tfor await (const currentHour of Array.from({ length: HOURS_IN_DAY }, (_, i) => i)) {\n\t\t\t\tconst hour = m.add(currentHour ? 1 : 0, 'hour').format('H');\n\t\t\t\tconst hour = m.add(currentHour ? 1 : 0, 'hour').format('H');\n\t\t\t\tconst label = {\n\t\t\t\tconst label = {\n\t\t\t\t\tfrom: moment.utc().set({ hour }).tz(timezone).format('hA'),",
            "date": "\t\t\tfor await (const m of dayIterator(from, to)) {\n\t\t\tfor await (const m of dayIterator(from, to)) {\n\t\t\t\tdata.dataLabels.push(m.format('M/D'));\n\n\t\t\t\tconst date = {\n\t\t\t\tconst date = {\n\t\t\t\t\tgte: m,\n\t\t\t\t\tlt: moment(m).add(1, 'days'),\n\t\t\t\t};\n\n\t\t\t\tdata.dataPoints.push(await this.ChartData[name](date, departmentId, extraQuery));\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t},\n\n\tasync getAnalyticsOverviewData(options) {\n\t\tconst { departmentId, utcOffset = 0, language, daterange: { from: fDate, to: tDate } = {}, analyticsOptions: { name } = {} } = options;\n\t\tconst { departmentId, utcOffset = 0, language, daterange: { from: fDate, to: tDate } = {}, analyticsOptions: { name } = {} } = options;",
            "t": "\t\tconst t = (s) => i18n.t(s, { lng: language });\n\t\tconst t = (s) => i18n.t(s, { lng: language });",
            "allConversations": "\t\t\tconst allConversations = await LivechatRooms.getAnalyticsMetricsBetweenDateWithMessages(\n\t\t\tconst allConversations = await LivechatRooms.getAnalyticsMetricsBetweenDateWithMessages(\n\t\t\t\t'l',\n\t\t\t\tdate,\n\t\t\t\t{ departmentId },",
            "result": "\t\t\t\tconst result = await LivechatRooms.getAnalyticsBetweenDate(date, { departmentId }, extraQuery).toArray();\n\t\t\t\tconst result = await LivechatRooms.getAnalyticsBetweenDate(date, { departmentId }, extraQuery).toArray();",
            "data": "\t\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\t\tconst date = {\n\t\t\tconst date = {\n\t\t\t\tgte: from,\n\t\t\t\tlt: to.add(1, 'days'),\n\t\t\t};\n\n\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\thead: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Agent',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Best_first_response_time',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdata: [],\n\t\t\t};\n\n\t\t\tawait LivechatRooms.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\t\tif (agentFirstRespTime.has(servedBy.username)) {\n\t\t\t\t\t\tagentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n\t\t\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "Livechat.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/Livechat.js",
        "code": {
            "updateData": "\t\tconst updateData = {};\n\t\tconst updateData = {};",
            "customFields": "\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\temail: null,\n\t\t\t\t...(customFields && { customFields }),",
            "rcSettings": "\t\tconst rcSettings = {};\n\t\tconst rcSettings = {};",
            "promises": "\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst promises = [];\n\t\tconst promises = [];\n\t\tawait openChats.forEach((room) => {\n\t\t\tpromises.push(LivechatTyped.closeRoom({ user, room, comment }));",
            "user": "\t\tconst user = await Users.setLivechatStatusIf(userId, status, condition, fields);\n\t\tconst user = await Users.setLivechatStatusIf(userId, status, condition, fields);\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });",
            "transferredBy": "\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);",
            "transfer": "\t\tconst transfer = {\n\t\tconst transfer = {\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOne({ rid });\n\t\tconst inquiry = await LivechatInquiry.findOne({ rid });",
            "transferData": "\t\tconst transferData = { roomId: rid, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };\n\t\tconst transferData = { roomId: rid, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };",
            "guest": "\t\tconst guest = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst guest = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });",
            "department": "\t\tconst department = await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst department = await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1 } });",
            "agentsIds": "\t\tconst ret = (await LivechatDepartmentRaw.removeById(_id)).deletedCount;\n\t\tconst ret = (await LivechatDepartmentRaw.removeById(_id)).deletedCount;\n\t\tconst agentsIds = (await LivechatDepartmentAgents.findByDepartmentId(_id).toArray()).map((agent) => agent.agentId);\n\t\tconst agentsIds = (await LivechatDepartmentAgents.findByDepartmentId(_id).toArray()).map((agent) => agent.agentId);\n\t\tawait LivechatDepartmentAgents.removeByDepartmentId(_id);\n\t\tawait LivechatDepartmentRaw.unsetFallbackDepartmentByDepartmentId(_id);\n\t\tif (ret) {\n\t\t\tsetImmediate(() => {\n\t\t\t\tcallbacks.run('livechat.afterRemoveDepartment', { department, agentsIds });",
            "room": "\t\tconst room = await LivechatRooms.findOneById(roomId, { ...roomAccessAttributes, _id: 1, t: 1 });\n\t\tconst room = await LivechatRooms.findOneById(roomId, { ...roomAccessAttributes, _id: 1, t: 1 });"
        },
        "depth_rank": 7
    },
    {
        "file": "Helper.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/Helper.js",
        "code": {
            "extraRoomInfo": "\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online' } = guest;\n\tconst { _id, username, token, department: departmentId, status = 'online' } = guest;",
            "extraInquiryInfo": "\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = 'online' } = guest;\n\tconst { _id, username, token, department, status = 'online' } = guest;",
            "existingSubscription": "\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = 'online' } = guest;\n\tconst { _id, username, token, status = 'online' } = guest;",
            "subscriptionData": "\tconst subscriptionData = {\n\tconst subscriptionData = {\n\t\trid,\n\t\tfname: name,\n\t\talert: true,\n\t\topen: true,\n\t\tunread: 1,\n\t\tuserMentions: 1,\n\t\tgroupMentions: 0,\n\t\tu: {\n\t\t\t_id: agent.agentId,\n\t\t\tusername: agent.username,\n\t\t},\n\t\tt: 'l',\n\t\tdesktopNotifications: 'all',\n\t\tmobilePushNotifications: 'all',\n\t\temailNotifications: 'all',\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t},\n\t\t...(department && { department }),",
            "user": "\tconst room = await LivechatRooms.findOneById(rid);\n\tconst room = await LivechatRooms.findOneById(rid);\n\tconst user = await Users.findOneById(_id);\n\tconst user = await Users.findOneById(_id);\n\n\tawait Subscriptions.removeByRoomIdAndUserId(rid, _id);\n\tawait Message.saveSystemMessage('ul', rid, username, { _id: user._id, username: user.username, name: user.name });",
            "parseCustomFields": "\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {",
            "externalCF": "\tconst externalCF = externalCustomFields();\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),",
            "agent": "\tconst agent = { agentId, username };\n\tconst agent = { agentId, username };",
            "customFields": "\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) });",
            "await": "\tconst agentsRemoved = [];\n\tconst agentsRemoved = [];\n\tconst agentsAdded = [];\n\tconst agentsAdded = [];\n\tfor await (const { agentId } of remove) {\n\tfor await (const { agentId } of remove) {\n\t\tawait LivechatDepartmentAgents.removeByDepartmentIdAndAgentId(departmentId, agentId);\n\t\tagentsRemoved.push(agentId);\n\t}\n\n\tif (agentsRemoved.length > 0) {\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });",
            "fake": "\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tt: 'l',\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: Object.assign({}, { u: v }),",
            "roomTaken": "\tconst roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, {\n\tconst roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, {\n\t\tforwardingToDepartment: { oldDepartmentId },",
            "type": "\tconst type = transferType || (_id === agentId ? 'agent' : 'user');\n\tconst type = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),",
            "agentFromDb": "\tfor await (const agent of upsert) {\n\tfor await (const agent of upsert) {\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatTyped.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/LivechatTyped.ts",
        "code": {
            "agentIds": "\t\t\tconst agentIds = await departmentAgents.map(({ agentId }) => agentId).toArray();\n\t\t\tconst agentIds = await departmentAgents.map(({ agentId }) => agentId).toArray();",
            "now": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy, transcriptRequest } = room;\n\t\tconst { _id: rid, servedBy, transcriptRequest } = room;",
            "visitor": "\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {\n\t\t\tprojection: { _id: 1, token: 1, language: 1, username: 1, name: 1 },",
            "closingMessage": "\t\tconst showAgentInfo = settings.get<string>('Livechat_show_agent_info');\n\t\tconst showAgentInfo = settings.get<string>('Livechat_show_agent_info');\n\t\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });\n\t\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });",
            "messages": "\t\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\t\trid,\n\t\t\tignoredMessageTypes,\n\t\t\tclosingMessage?.ts ? new Date(closingMessage.ts) : new Date(),\n\t\t\t{\n\t\t\t\tsort: { ts: 1 },",
            "mailSubject": "\t\tconst mailSubject = subject || i18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\t\tconst mailSubject = subject || i18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });",
            "cat": "\t\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });\n\t\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });",
            "user": "\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });",
            "userData": "\t\t\tconst userData = {\n\t\t\tconst userData = {\n\t\t\t\tusername,\n\t\t\t\tstatus,\n\t\t\t\tts: new Date(),\n\t\t\t\ttoken,\n\t\t\t\t...(id && { _id: id }),"
        },
        "depth_rank": 7
    },
    {
        "file": "Contacts.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/Contacts.ts",
        "code": {
            "user": "\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });",
            "fieldsToRemove": "\t\tconst fieldsToRemove = {\n\t\tconst fieldsToRemove = {\n\t\t\t// if field is explicitely set to empty string, remove\n\t\t\t...(phone === '' && { phone: 1 }),",
            "await": "\t\t\tfor await (const room of rooms) {\n\t\t\tfor await (const room of rooms) {\n\t\t\t\tconst { _id: rid } = room;\n\t\t\t\tconst { _id: rid } = room;"
        },
        "depth_rank": 7
    },
    {
        "file": "RoutingManager.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/RoutingManager.ts",
        "code": {
            "logger": "const logger = new Logger('RoutingManager');\nconst logger = new Logger('RoutingManager');\n\ntype Routing = {\n\tmethodName: string | null;\n\tmethods: Record<string, IRoutingMethod>;\n\tstartQueue(): void;\n\tisMethodSet(): boolean;\n\tsetMethodNameAndStartQueue(name: string): void;\n\tregisterMethod(name: string, Method: IRoutingMethodConstructor): void;\n\tgetMethod(): IRoutingMethod;\n\tgetConfig(): RoutingMethodConfig | undefined;\n\tgetNextAgent(department?: string, ignoreAgentId?: string): Promise<SelectedAgent | null | undefined>;\n\tdelegateInquiry(\n\t\tinquiry: InquiryWithAgentInfo,\n\t\tagent?: SelectedAgent | null,\n\t\toptions?: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId: string; transferData: any } },"
        },
        "depth_rank": 7
    },
    {
        "file": "departments.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/departments.js",
        "code": {
            "total": "\tconst total = await (\n\tconst total = await (\n\t\tawait LivechatRooms.findPercentageOfAbandonedRooms({\n\t\t\tstart,\n\t\t\tend,\n\t\t\tdepartmentId,\n\t\t\tonlyCount: true,\n\t\t})\n\t).toArray();\n\treturn {\n\t\tdepartments: await (await LivechatRooms.findPercentageOfAbandonedRooms({ start, end, departmentId, options })).toArray(),"
        },
        "depth_rank": 8
    },
    {
        "file": "dashboards.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/dashboards.ts",
        "code": {
            "totalOfAvarageWaitingTime": "\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],",
            "totalOfAverageServiceTime": "\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metric.title === 'Busiest_time'),",
            "totalOfAverageChatDurationTime": "\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },",
            "visitorsCount": "\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.getVisitorsBetweenDate({\n\tconst visitorsCount = await LivechatVisitors.getVisitorsBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartment: departmentId,\n\t}).count();\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metrics.includes(metric.title)),",
            "onhold": "\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};",
            "closed": "\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result: Record<string, { open: number; closed: number }> = {};\n\tconst result: Record<string, { open: number; closed: number }> = {};",
            "responseTimes": "\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];",
            "reactionTimes": "\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];",
            "durationTimings": "\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];"
        },
        "depth_rank": 8
    },
    {
        "file": "agents.js",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/agents.js",
        "code": {
            "total": "\tconst total = await LivechatRooms.findAllServiceTimeByAgent({\n\tconst total = await LivechatRooms.findAllServiceTimeByAgent({\n\t\tstart,\n\t\tend,\n\t\tonlyCount: true,\n\t}).toArray();\n\treturn {\n\t\tagents: await LivechatRooms.findAllServiceTimeByAgent({ start, end, options }).toArray(),"
        },
        "depth_rank": 8
    },
    {
        "file": "External.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/lib/routing/External.ts",
        "code": {
            "result": "\t\t\tconst result = (await request.json()) as { username?: string };\n\t\t\tconst result = (await request.json()) as { username?: string };"
        },
        "depth_rank": 8
    },
    {
        "file": "Single.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Single.ts",
        "code": {
            "businessHoursIds": "\t\tconst businessHoursIds = (\n\t\tconst businessHoursIds = (\n\t\t\tawait this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, LivechatBusinessHourTypes.DEFAULT, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "Helper.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Helper.ts",
        "code": {
            "businessHoursToOpenIds": "\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tprojection: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tbusinessHourLogger.debug({ msg: 'Opening default business hours', businessHoursToOpenIds });"
        },
        "depth_rank": 7
    },
    {
        "file": "LivechatAgentActivityMonitor.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/statistics/LivechatAgentActivityMonitor.ts",
        "code": {
            "data": "\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };",
            "availableTime": "\t\tconst stoppedAt = new Date();\n\t\tconst stoppedAt = new Date();\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\n\t\tawait LivechatAgentActivity.updateLastStoppedAt({\n\t\t\tagentId,\n\t\t\tdate,\n\t\t\tavailableTime,\n\t\t\tlastStoppedAt: stoppedAt,\n\t\t});\n\t\tawait LivechatAgentActivity.updateServiceHistory({\n\t\t\tagentId,\n\t\t\tdate,\n\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },"
        },
        "depth_rank": 7
    },
    {
        "file": "loadHistory.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/loadHistory.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });",
            "room": "\t\tconst room = await LivechatRooms.findOneByIdAndVisitorToken(rid, token, { projection: { _id: 1 } });\n\t\tconst room = await LivechatRooms.findOneByIdAndVisitorToken(rid, token, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "takeInquiry.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/takeInquiry.ts",
        "code": {
            "agent": "\tconst agent = {\n\tconst agent = {\n\t\tagentId: user._id,\n\t\tusername: user.username,\n\t};\n\n\ttry {\n\t\tawait RoutingManager.takeInquiry(inquiry, agent, options);\n\t} catch (e: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "removeCustomField.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/removeCustomField.ts",
        "code": {
            "customField": "\t\tconst customField = await LivechatCustomField.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst customField = await LivechatCustomField.findOneById(_id, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "webhookTest.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/webhookTest.ts",
        "code": {
            "postCatchError": "const postCatchError = async function (url: string, options?: Record<string, any> | undefined) {\nconst postCatchError = async function (url: string, options?: Record<string, any> | undefined) {\n\ttry {\n\t\treturn fetch(url, { ...options, method: 'POST' });",
            "response": "\t\tconst response = await postCatchError(settings.get('Livechat_webhookUrl'), options);\n\t\tconst response = await postCatchError(settings.get('Livechat_webhookUrl'), options);\n\n\t\tSystemLogger.debug({ response: await response?.text() });"
        },
        "depth_rank": 7
    },
    {
        "file": "saveInfo.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/saveInfo.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ _id: userId }, { projection: { _id: 1, username: 1 } });\n\t\tconst user = await Users.findOne({ _id: userId }, { projection: { _id: 1, username: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "loginByToken.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/loginByToken.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getAnalyticsChartData.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/getAnalyticsChartData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1, utcOffset: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1, utcOffset: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getAnalyticsOverviewData.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/getAnalyticsOverviewData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1, language: 1 } });\n\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1, language: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "searchAgent.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/searchAgent.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByUsernameIgnoringCase<Pick<IUser, 'username' | '_id'>>(username, {\n\t\tconst user = await Users.findOneByUsernameIgnoringCase<Pick<IUser, 'username' | '_id'>>(username, {\n\t\t\tprojection: { _id: 1, username: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "requestTranscript.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/requestTranscript.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, {\n\t\tconst user = await Users.findOneById(userId, {\n\t\t\tprojection: { _id: 1, username: 1, name: 1, utcOffset: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "sendTranscript.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/sendTranscript.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, {\n\t\tconst user = await Users.findOneById(uid, {\n\t\t\tprojection: { _id: 1, username: 1, name: 1, utcOffset: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "getAgentOverviewData.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/getAgentOverviewData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1 } });\n\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1 } });"
        },
        "depth_rank": 7
    },
    {
        "file": "getNextAgent.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/getNextAgent.ts",
        "code": {
            "room": "\t\tconst room = await LivechatRooms.findOpenByVisitorToken(token, {}, extraQuery).toArray();\n\t\tconst room = await LivechatRooms.findOpenByVisitorToken(token, {}, extraQuery).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "sendFileLivechatMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/sendFileLivechatMessage.ts",
        "code": {
            "msg": "\tconst msg = Object.assign(\n\tconst msg = Object.assign(\n\t\t{\n\t\t\t_id: Random.id(),\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: '',\n\t\t\tfile: {\n\t\t\t\t_id: file._id,\n\t\t\t\tname: file.name,\n\t\t\t\ttype: file.type,\n\t\t\t},\n\t\t\tfiles: [\n\t\t\t\t{\n\t\t\t\t\t_id: file._id,\n\t\t\t\t\tname: file.name,\n\t\t\t\t\ttype: file.type,\n\t\t\t\t},\n\t\t\t],\n\t\t\tgroupable: false,\n\t\t\tattachments: [attachment],\n\t\t\ttoken: visitorToken,\n\t\t},\n\t\tmsgData,\n\t);\n\n\treturn sendMessageLivechat({ message: msg });"
        },
        "depth_rank": 7
    },
    {
        "file": "transfer.ts",
        "path": "../Rocket.Chat/apps/meteor/app/livechat/server/methods/transfer.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, uid, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, uid, {\n\t\t\tprojection: { _id: 1 },",
            "guest": "\t\tconst guest = await LivechatVisitors.findOneById(room.v?._id);\n\t\tconst guest = await LivechatVisitors.findOneById(room.v?._id);\n\n\t\tconst normalizedTransferData: {\n\t\tconst normalizedTransferData: {\n\t\t\troomId: string;\n\t\t\tuserId?: string;\n\t\t\tdepartmentId?: string;\n\t\t\tcomment?: string;\n\t\t\tclientAction?: boolean;\n\t\t\ttransferredBy: ReturnType<typeof normalizeTransferredByData>;\n\t\t\ttransferredTo?: Pick<IUser, '_id' | 'username' | 'name'>;\n\t\t} = {"
        },
        "depth_rank": 7
    },
    {
        "file": "TOTPLDAP.js",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/client/TOTPLDAP.js",
        "code": {
            "ldapOptions": "\tconst code = args.pop();\n\tconst code = args.pop();\n\n\t// if args still holds options item, grab it\n\tconst ldapOptions = args.length > 0 ? args.shift() : {};\n\tconst ldapOptions = args.length > 0 ? args.shift() : {};",
            "loginRequest": "\tconst loginRequest = {\n\tconst loginRequest = {\n\t\tldap: true,\n\t\tusername,\n\t\tldapPass,\n\t\tldapOptions,\n\t};\n\n\tAccounts.callLoginMethod({\n\t\tmethodArguments: [\n\t\t\t{\n\t\t\t\ttotp: {\n\t\t\t\t\tlogin: loginRequest,\n\t\t\t\t\tcode,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tuserCallback(error) {\n\t\t\tif (error) {\n\t\t\t\treportError(error, callback);\n\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "TOTPOAuth.js",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/client/TOTPOAuth.js",
        "code": {
            "function": "Accounts.oauth.tryLoginAfterPopupClosed = function (credentialToken, callback, totpCode, credentialSecret = null) {\nAccounts.oauth.tryLoginAfterPopupClosed = function (credentialToken, callback, totpCode, credentialSecret = null) {\n\tcredentialSecret = credentialSecret || OAuth._retrieveCredentialSecret(credentialToken) || null;\n\tconst methodArgument = {\n\tconst methodArgument = {\n\t\toauth: {\n\t\t\tcredentialToken,\n\t\t\tcredentialSecret,\n\t\t},\n\t};\n\n\tlastCredentialToken = credentialToken;\n\tlastCredentialSecret = credentialSecret;\n\n\tif (totpCode && typeof totpCode === 'string') {\n\t\tmethodArgument.totp = {\n\t\t\tcode: totpCode,\n\t\t};\n\t}\n\n\tAccounts.callLoginMethod({\n\t\tmethodArguments: [methodArgument],\n\t\tuserCallback:\n\t\t\tcallback &&\n\t\t\tfunction (err) {\n\t\t\tfunction (err) {\n\t\t\t\tcallback(convertError(err));\n\t\t\t},\n\t});\n};\n\nAccounts.oauth.credentialRequestCompleteHandler = function (callback, totpCode) {\nAccounts.oauth.credentialRequestCompleteHandler = function (callback, totpCode) {\n\treturn function (credentialTokenOrError) {\n\treturn function (credentialTokenOrError) {\n\t\tif (credentialTokenOrError && credentialTokenOrError instanceof Error) {\n\t\t\tcallback && callback(credentialTokenOrError);\n\t\t} else {",
            "loginWithFacebookAndTOTP": "\t\tconst provider = (credentialProvider && credentialProvider()) || this;\n\t\tconst provider = (credentialProvider && credentialProvider()) || this;\n\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback, code);\n\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback, code);\n\t\tprovider.requestCredential(options, credentialRequestCompleteCallback);\n\t}\n\n\tlastCredentialToken = null;\n\tlastCredentialSecret = null;\n};\n\nconst loginWithOAuthTokenAndTOTP = createOAuthTotpLoginMethod();\nconst loginWithOAuthTokenAndTOTP = createOAuthTotpLoginMethod();\n\nconst loginWithFacebookAndTOTP = createOAuthTotpLoginMethod(() => Facebook);\nconst loginWithFacebookAndTOTP = createOAuthTotpLoginMethod(() => Facebook);\nconst { loginWithFacebook } = Meteor;\nconst { loginWithFacebook } = Meteor;",
            "loginWithGithubAndTOTP": "Meteor.loginWithFacebook = function (options, cb) {\nMeteor.loginWithFacebook = function (options, cb) {\n\toverrideLoginMethod(loginWithFacebook, [options], cb, loginWithFacebookAndTOTP);\n};\n\nconst loginWithGithubAndTOTP = createOAuthTotpLoginMethod(() => Github);\nconst loginWithGithubAndTOTP = createOAuthTotpLoginMethod(() => Github);\nconst { loginWithGithub } = Meteor;\nconst { loginWithGithub } = Meteor;",
            "loginWithMeteorDeveloperAccountAndTOTP": "Meteor.loginWithGithub = function (options, cb) {\nMeteor.loginWithGithub = function (options, cb) {\n\toverrideLoginMethod(loginWithGithub, [options], cb, loginWithGithubAndTOTP);\n};\n\nconst loginWithMeteorDeveloperAccountAndTOTP = createOAuthTotpLoginMethod(() => MeteorDeveloperAccounts);\nconst loginWithMeteorDeveloperAccountAndTOTP = createOAuthTotpLoginMethod(() => MeteorDeveloperAccounts);\nconst { loginWithMeteorDeveloperAccount } = Meteor;\nconst { loginWithMeteorDeveloperAccount } = Meteor;",
            "loginWithTwitterAndTOTP": "Meteor.loginWithMeteorDeveloperAccount = function (options, cb) {\nMeteor.loginWithMeteorDeveloperAccount = function (options, cb) {\n\toverrideLoginMethod(loginWithMeteorDeveloperAccount, [options], cb, loginWithMeteorDeveloperAccountAndTOTP);\n};\n\nconst loginWithTwitterAndTOTP = createOAuthTotpLoginMethod(() => Twitter);\nconst loginWithTwitterAndTOTP = createOAuthTotpLoginMethod(() => Twitter);\nconst { loginWithTwitter } = Meteor;\nconst { loginWithTwitter } = Meteor;",
            "loginWithLinkedinAndTOTP": "Meteor.loginWithTwitter = function (options, cb) {\nMeteor.loginWithTwitter = function (options, cb) {\n\toverrideLoginMethod(loginWithTwitter, [options], cb, loginWithTwitterAndTOTP);\n};\n\nconst loginWithLinkedinAndTOTP = createOAuthTotpLoginMethod(() => Linkedin);\nconst loginWithLinkedinAndTOTP = createOAuthTotpLoginMethod(() => Linkedin);\nconst { loginWithLinkedin } = Meteor;\nconst { loginWithLinkedin } = Meteor;",
            "oAuthArgs": "\tconst oAuthArgs = methodArguments.find((arg) => arg.oauth);\n\tconst oAuthArgs = methodArguments.find((arg) => arg.oauth);\n\tconst { credentialToken, credentialSecret } = oAuthArgs.oauth;\n\tconst { credentialToken, credentialSecret } = oAuthArgs.oauth;"
        },
        "depth_rank": 6
    },
    {
        "file": "TOTPGoogle.js",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/client/TOTPGoogle.js",
        "code": {
            "credentialRequestCompleteCallback": "\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback, code);\n\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback, code);\n\tGoogle.requestCredential(options, credentialRequestCompleteCallback);\n};\n\nconst { loginWithGoogle } = Meteor;\nconst { loginWithGoogle } = Meteor;"
        },
        "depth_rank": 6
    },
    {
        "file": "TOTPCrowd.js",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/client/TOTPCrowd.js",
        "code": {
            "loginRequest": "Meteor.loginWithCrowdAndTOTP = function (username, password, code, callback) {\nMeteor.loginWithCrowdAndTOTP = function (username, password, code, callback) {\n\tconst loginRequest = {\n\tconst loginRequest = {\n\t\tcrowd: true,\n\t\tusername,\n\t\tcrowdPassword: password,\n\t};\n\n\tAccounts.callLoginMethod({\n\t\tmethodArguments: [\n\t\t\t{\n\t\t\t\ttotp: {\n\t\t\t\t\tlogin: loginRequest,\n\t\t\t\t\tcode,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tuserCallback(error) {\n\t\t\tif (error) {\n\t\t\t\treportError(error, callback);\n\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "twoFactorRequired.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/twoFactorRequired.ts",
        "code": {
            "twoFactor": "\t\tconst twoFactor = args.pop();\n\t\tconst twoFactor = args.pop();\n\t\tif (twoFactor) {\n\t\t\tif (twoFactor.twoFactorCode && twoFactor.twoFactorMethod) {\n\t\t\t\tawait checkCodeForUser({\n\t\t\t\t\tuser: this.userId,\n\t\t\t\t\tconnection: this.connection || undefined,\n\t\t\t\t\tcode: twoFactor.twoFactorCode,\n\t\t\t\t\tmethod: twoFactor.twoFactorMethod,\n\t\t\t\t\toptions,\n\t\t\t\t});\n\t\t\t\tthis.twoFactorChecked = true;\n\t\t\t} else {"
        },
        "depth_rank": 6
    },
    {
        "file": "totp.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/lib/totp.ts",
        "code": {
            "code": "\t\t\tconst code = Random.id(8);\n\t\t\tconst code = Random.id(8);\n\t\t\tcodes.push(code);\n\t\t\thashedCodes.push(SHA256(code));\n\t\t}\n\n\t\treturn { codes, hashedCodes };"
        },
        "depth_rank": 7
    },
    {
        "file": "EmailCheck.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/code/EmailCheck.ts",
        "code": {
            "t": "\t\tconst language = user.language || settings.get('Language') || 'en';\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\t\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "hasValidCode": "\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\n\t\tconst emailOrUsername = user.username || emails[0];\n\t\tconst emailOrUsername = user.username || emails[0];\n\n\t\tconst hasValidCode = user.services?.emailCode?.filter(({ expire }) => expire > expireWithDelta);\n\t\tconst hasValidCode = user.services?.emailCode?.filter(({ expire }) => expire > expireWithDelta);"
        },
        "depth_rank": 7
    },
    {
        "file": "regenerateCodes.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/methods/regenerateCodes.ts",
        "code": {
            "verified": "\t\tconst verified = await TOTP.verify({\n\t\tconst verified = await TOTP.verify({\n\t\t\tsecret: user.services.totp.secret,\n\t\t\ttoken: userToken,\n\t\t\tuserId,\n\t\t\tbackupTokens: user.services.totp.hashedBackup,\n\t\t});\n\n\t\tif (verified) {\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();"
        },
        "depth_rank": 7
    },
    {
        "file": "validateTempToken.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/methods/validateTempToken.ts",
        "code": {
            "verified": "\t\tconst verified = await TOTP.verify({\n\t\tconst verified = await TOTP.verify({\n\t\t\tsecret: user.services.totp.tempSecret,\n\t\t\ttoken: userToken,\n\t\t});\n\n\t\tif (verified) {\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();"
        },
        "depth_rank": 7
    },
    {
        "file": "resetTOTP.ts",
        "path": "../Rocket.Chat/apps/meteor/app/2fa/server/functions/resetTOTP.ts",
        "code": {
            "user": "const sendResetNotification = async function (uid: string): Promise<void> {\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\t\tprojection: { language: 1, emails: 1 },",
            "addresses": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }) => Boolean(verified)).map((e) => e.address);\n\tconst addresses = user.emails?.filter(({ verified }) => Boolean(verified)).map((e) => e.address);",
            "t": "\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "await": "\tconst from = settings.get('From_Email');\n\tconst from = settings.get('From_Email');\n\tconst subject = t('TOTP_reset_email');\n\tconst subject = t('TOTP_reset_email');\n\n\tfor await (const address of addresses) {\n\tfor await (const address of addresses) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: address,\n\t\t\t\tfrom,\n\t\t\t\tsubject,\n\t\t\t\ttext,\n\t\t\t\thtml,\n\t\t\t} as any);\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "joinDiscussionOnMessage.ts",
        "path": "../Rocket.Chat/apps/meteor/app/discussion/server/hooks/joinDiscussionOnMessage.ts",
        "code": {
            "sub": "\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "propagateDiscussionMetadata.ts",
        "path": "../Rocket.Chat/apps/meteor/app/discussion/server/hooks/propagateDiscussionMetadata.ts",
        "code": {
            "await": "\tasync function (message, { _id, prid }) {\n\tasync function (message, { _id, prid }) {\n\t\tif (prid) {\n\t\t\tconst room = await Rooms.findOneById(_id, {\n\t\t\tconst room = await Rooms.findOneById(_id, {\n\t\t\t\tprojection: {\n\t\t\t\t\tmsgs: 1,\n\t\t\t\t\tlm: 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (room) {\n\t\t\t\tawait Messages.refreshDiscussionMetadata(room);\n\t\t\t}\n\t\t}\n\t\tif (message.drid) {\n\t\t\tawait deleteRoom(message.drid);\n\t\t}\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'PropagateDiscussionMetadata',\n);\n\ncallbacks.add(\n\t'afterDeleteRoom',\n\tasync (rid) => {\n\t\tfor await (const { _id } of Rooms.find({ prid: rid }, { projection: { _id: 1 } })) {\n\t\tfor await (const { _id } of Rooms.find({ prid: rid }, { projection: { _id: 1 } })) {\n\t\t\tawait deleteRoom(_id);\n\t\t}\n\n\t\treturn rid;\n\t},\n\tcallbacks.priority.LOW,\n\t'DeleteDiscussionChain',\n);\n\n// TODO discussions define new fields\ncallbacks.add(\n\t'afterRoomNameChange',\n\tasync (roomConfig) => {\n\t\tconst { rid, name, oldName } = roomConfig;\n\t\tconst { rid, name, oldName } = roomConfig;"
        },
        "depth_rank": 7
    },
    {
        "file": "createDiscussion.ts",
        "path": "../Rocket.Chat/apps/meteor/app/discussion/server/methods/createDiscussion.ts",
        "code": {
            "room": "const getParentRoom = async (rid: IRoom['_id']) => {\nconst getParentRoom = async (rid: IRoom['_id']) => {\n\tconst room = await Rooms.findOne(rid);\n\tconst room = await Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { projection: { _id: 1 } }) : room);",
            "function": "async function mentionMessage(\nasync function mentionMessage(\n\trid: IRoom['_id'],\n\t{ _id, username, name }: Pick<IUser, '_id' | 'username' | 'name'>,",
            "create": "const create = async ({\nconst create = async ({\n\tprid,\n\tpmid,\n\tt_name: discussionName,\n\treply,\n\tusers,\n\tuser,\n\tencrypted,\n}: CreateDiscussionProperties): Promise<IRoom & { rid: string }> => {",
            "discussionAlreadyExists": "\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 7
    },
    {
        "file": "methods.ts",
        "path": "../Rocket.Chat/apps/meteor/app/crowd/server/methods.ts",
        "code": {
            "crowd": "\t\t\tconst crowd = new CROWD();\n\t\t\tconst crowd = new CROWD();\n\t\t\tawait crowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Connection_success' as const,\n\t\t\t\tmessage: 'Connection_success' as const,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {"
        },
        "depth_rank": 6
    },
    {
        "file": "crowd.ts",
        "path": "../Rocket.Chat/apps/meteor/app/crowd/server/crowd.ts",
        "code": {
            "projection": "\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };\n\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };",
            "email": "\t\t\tconst email = username;\n\t\t\tconst email = username;\n\n\t\t\tuser = await Users.findOne<CrowdUser>({ 'emails.address': email }, { projection });",
            "user": "\t\tconst crowdUser: Record<string, any> = await this.fetchCrowdUser(crowdUsername);\n\t\tconst crowdUser: Record<string, any> = await this.fetchCrowdUser(crowdUsername);\n\n\t\tif (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\tcrowdUser.username = user.username;\n\t\t}\n\n\t\tif (user) {\n\t\t\tcrowdUser._id = user._id;\n\t\t}\n\t\tcrowdUser.password = password;\n\n\t\treturn crowdUser;\n\t}\n\n\tasync syncDataToUser(crowdUser: Record<string, any>, id: string) {\n\t\tconst user = {\n\t\tconst user = {\n\t\t\tusername: this.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tawait Accounts.setPasswordAsync(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tawait Users.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\tawait _setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{ _id: id },",
            "users": "\t\tconst users =\n\t\tconst users =\n\t\t\t((await Users.findCrowdUsers().toArray()) as unknown as (IUser & { crowd: Record<string, any>; crowd_username: string })[]) || [];",
            "stampedToken": "\t\tconst userQuery = {\n\t\tconst userQuery = {\n\t\t\t_id: crowdUser._id,\n\t\t};\n\n\t\t// find our existing user if they exist\n\t\tconst user = await Users.findOne(userQuery);\n\t\tconst user = await Users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tawait Users.updateOne(\n\t\t\t\t{ _id: user._id },",
            "result": "\t\tconst result = await crowd.updateUserCollection(user);\n\t\tconst result = await crowd.updateUserCollection(user);\n\n\t\treturn result;\n\t} catch (err) {"
        },
        "depth_rank": 6
    },
    {
        "file": "setReaction.ts",
        "path": "../Rocket.Chat/apps/meteor/app/reactions/server/setReaction.ts",
        "code": {
            "oldMessage": "\t\tconst oldMessage = JSON.parse(JSON.stringify(message));\n\t\tconst oldMessage = JSON.parse(JSON.stringify(message));\n\t\tremoveUserReaction(message, reaction, user.username as string);\n\t\tif (_.isEmpty(message.reactions)) {\n\t\t\tdelete message.reactions;\n\t\t\tif (isTheLastMessage(room, message)) {\n\t\t\t\tawait Rooms.unsetReactionsInLastMessage(room._id);\n\t\t\t}\n\t\t\tawait Messages.unsetReactions(message._id);\n\t\t} else {"
        },
        "depth_rank": 6
    }
]

def render_page():
    st.caption("Go to http://localhost:7474/ to explore the graph.")

    if st.button("Import", type="primary"):
        with st.spinner("Loading... This might take a minute or two."):
            try:
                # # Read JSON data from all_code_blocks.json
                # with open("./all_code_blocks.json", "r") as json_file:
                #     data = json.load(json_file)
                # # Insert the data into Neo4j
                insert_data(code)
                st.success("Import successful", icon="✅")
                st.caption("Go to http://localhost:7474/ to interact with the database")
            except Exception as e:
                st.error(f"Error: {e}", icon="🚨")

render_page()